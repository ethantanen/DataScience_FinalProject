node {
  name: "global_step/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global_step/Assign"
  op: "Assign"
  input: "global_step"
  input: "global_step/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global_step/read"
  op: "Identity"
  input: "global_step"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "global_step/cond/Switch"
  op: "Switch"
  input: "global_step/IsVariableInitialized"
  input: "global_step/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/switch_t"
  op: "Identity"
  input: "global_step/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/switch_f"
  op: "Identity"
  input: "global_step/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/pred_id"
  op: "Identity"
  input: "global_step/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/read"
  op: "Identity"
  input: "global_step/cond/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/read/Switch"
  op: "RefSwitch"
  input: "global_step"
  input: "global_step/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/Switch_1"
  op: "Switch"
  input: "global_step/Initializer/zeros"
  input: "global_step/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/Merge"
  op: "Merge"
  input: "global_step/cond/Switch_1"
  input: "global_step/cond/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/add/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step/add"
  op: "Add"
  input: "global_step/cond/Merge"
  input: "global_step/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "tensors/component_0"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 750
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 750
          }
        }
        tensor_content: "\256\262rzF\211\351\277\223<\320\236L\245\342\277^$\253\007K\312\361?\355\327\324\\e\333\341\277~8\225\005E\364\261\277\331_\007\017C,\242?#Z\217\270\350u\351\277c\022\222GMZ\351\277\334s1\300\'/\350\277\354\t\343\301\021\260\345\277\323rq\272\240|\217?g\020tV\215o\320?\3519\246\357\261C\325?\320\303\345\344ya\333?\247\216\201\245\340\331\337\277\276\276{\343\301\347\341\277\206\032\367\313\206\236\347\277\035\032\265\017\277\264\351\277\033y\2137k\260\322?\266y\026\022\201f\337\277\013\340\014\233R\311\344\277\177]\275\310Bt\351\277v\327\307+$\304\346\277\n\371\223\315\250\263\346\277\0357\364\242_\243\331\277\'\354\211\272\341t\244\277\037\307 \237\010n\356?\331\207\240 Cr\345\277^_# \255[\342?\261\035S\225\223\223\351\277BB\223\347\264J\314\277\303<\242\345\231\256\340\277a\021\243\276=8\331\277\206\001p\2310\264\345\277\336:n\315\335\344\224?\207\231Q\260\000~\365?oV\352`@\273\350\277\354\177:)\243\215\340\277\252VhM\310\334\000@\246O<\021\017\354\303\277\201\245\323F\227\331\373?|\362\334\255\365i\351\277\3040R\342h\335\346?\240\214)\256\304#\007@)\235\257A=\370\341\277\274 \"\307\211\277\244?F\333\362\211\274\367\272\277\330\315f\355\231F\335\277\331w\034k\325\211\366?=\224ds\241\267\351\277\036bO<!\007\345\277C\321q\201\234\022\311\277\377_\315\364\323K\316?\001\240\335\312\212\355\331\277\307\032\005p.V\351\277n\3572\217\0366\335\277A@H\260\250\t\350\277\306\217mN\260\021\324\277\371\265d-F\331\345\277>\211|>|c\350\277u\034\034x[U\351\277:\371e\024\366\274\344\277G\245\347\177*\346\344\277\326\276\344\206h\354\340\277\013Q.\001k\001\350\277\017!k\323\312m\310\277\247\026\255s\3350\344\277R\340G\205F\327\341\277\216(\256\273\250\255\351\277\345y\350X\316o\335\277\007\272\200\314<P\347\277fb\212&\025\025\342\277\202\310\235\343\217~\351\277`sB\276$\026\340\277\230\033\224Q\317\273\365?\207\266\014\225\223\177\354?\227D\2379\223\216\346\277\301\375\216\344-K\341\277\316\321\334Z\323\270\351\2775\321\216\016\324\002\323?\316<\261\374\247\006\351\277\357a\344+\241\270\320\277\340#\215\247\244\014\257?\036bO<!\007\345\277s\2375c=G\303\277\005k\336\254Qr\350\277\337j\230\205\002\240\355?\202\310\235\343\217~\351\277\343jf\362\234\025\341\277\n\371\223\315\250\263\346\277\001/\274dr\265\326\277\306f\373/\037\204\371?{j\225\036\266\254\351\277*h\036\376\350N\017@\230\254[f\347Y\303?\322k\262\347\204\316\343?\277\220:\372\204o\371?Bm\207J\251\363\335\277)\22514m\323\271?\270IX^\322\"\366?)\2666t\223\342\343\277A\317&J\220\321\344\277\022\204\277k@\t\341\277Q\022V\352\362\253\345\277\313\364\245\347d3\347\277C\263\264M\315\202\317\277\227D\2379\223\216\346\277\357a\344+\241\270\320\277\014?(\007\232\375\301\277*\'X\332\253\032\347\277\002\357\253\216\273\023\313?\337\334\273:Wf\363?\345\302\000&_c\342\277\237\235\356\005\344\231\351?m\262o?\260c\370?P\232\263KU\215\326?\333\233\216\340Lw\001@P\232\263KU\215\326?j\362\266\"\276\337\326?\3534\327$\006Y\347?\372@\265\2363D\010@=\333\017\027\364\347\324\277\215\3270\317\312\310\345\277A`P\033\204\332\305\277\262\203\033\336\245\366\344\277h\201\225\274\245\247\323?\331\350=\321\355\301\371?h\336\227\204F%\311?G\245\347\177*\346\344\277zNW#T\200\350\277J\242hf|\214\361?\362\264H^\352`\332\277Q\022V\352\362\253\345\277\356\247C\302*\322\336\277\260\272_D\313p\340\277\323rq\272\240|\217?%eO\014\274\005\333\277\267\352m\320\370\243\n@\006\036\004\315b\264\330\277ySs$\033v\231\277C\263\264M\315\202\317\277\261\234\242\020\374\340\346\277\222n\336\003\371y\346\277\242\312\373\014\177\371\322\277\354\310\204\211\231\013\322?\331_\007\017C,\242?a\241\302\372\326\215\t@\247\\s@4\005\334\2772\275op\\H\305?\310Va\250\216w\351\277\343e0\361#p\351\277\252\306\341\332a\314\346\2774.\221\326t\200\310?\244\360 \245\307\267\346\277\344\333\207X\265M\344\277e\324\026|&@\267?\271\365\361\334L\354\351?q\237g\366\242\321\337\277_\214\311\360z\000\342\277\325a\024R-\371\347\277\300\026\026\027\2045\343\277\343jf\362\234\025\341\277\316`\370\202\321\200\334\277\354\306\357~\t\204\350\277y\231i\303F\036\351?\334\255,\357X\353\342\277\005{m\313\320\354\347\277\201\240\020\210\000R\216\277\211\'.\373\253\267\357?3\020\324\242\245\360\316?\030s\007\3240\010\343\277\204\313T\254\233\300\350\277A`P\033\204\332\305\277\026\325\250\224\250\234\236\277\370\276\\A\035I\350\277\263\306\373Z\201\266\377?\312\342\321\200\371\271\335\277!\0347\346\301\263\351\277\242\312\373\014\177\371\322\277\201\032\330\321ud\270\277\251\242\240CX\224\315\277s\2375c=G\303\277 V\3778\3605\353?\022\027`\030\206\233\350\277m\220\345\217qw\343\277\334\331\344\264\336\264\351\2774\n\036\254\005\276\342\277\032<\303m\013\216\347\277\216/\313\002\215\026\347\277\222E\323\0335\247\365?S&\016R\235\253\331\2771\273\206\365+r\364?,\2330\t\320\224\351\277S\257Dj\354\212\351\2773<,\021\262\222\346\277<\206\305up!\351\277~8\225\005E\364\261\2775\321\216\016\324\002\323?m\317*$Ce\357?\350\252\307U\312{\330?\267rcF\226\365\346\277\337\274\256U\212E\337\277\305\'\335\305\241\216\351\277\245V\364V\353\254\362?Q\210\255Q\204\211\340\277\006\3013\230\'\301\337\277\364\224\016`\251\005\340\277S\204\037)\212,\006@\270IX^\322\"\366?^\360L\361\240d\323\277^\225\314mc\002\365?vz^-\266\213\327\277|{\254\217w\216\357?\321\312f\035\377G\347\277\341\234tWI\352\344\277\023\217\030\211F\336\350\277i+F\300\357\232\346\277<j\356\260\333\257\321\277\216\276\251\234t\336\343\277,V\347%\252\225\367?\364\255\225\222\377\357\341\277\021\237\371\300g\304\013@\006\037\363Ur\326\350\277\232\2349mU\334\347\277\324\353@\256\240\306\300?\373\302\233\\k\362\355?\3519\246\357\261C\325?B\'\301}R\037\346\277\226\354\004\006\321@\345\277\373\302\233\\k\362\355?3<,\021\262\222\346\277\204\313T\254\233\300\350\277gM\320o.\207\373?\004\nLe\270\264\344\277\337j\230\205\002\240\355?\264\030~\333\307f\321?fb\212&\025\025\342\277\371q\202a.\213\330\277\246\276\022@\033\343\342\277\2521\177\335?\\\312\277\204\177iU\274$\351\277\370o7*\"J\344?p\213\026\305\305\214\325\277\363\234\260\264\243\230\350\277\210Y\n\315\362\001\347\277\345\251y\363\010y\340\277<j\356\260\333\257\321\277\267\001B\340}\275\343\277\264\030~\333\307f\321?w\376s\230\347\242\351\277\251\242\240CX\224\315\277\036\345\335\322\327\375\347?CxA\257\\A\345?\024\334Y\237\002W\342\277\034\204\316\202Na\351\277ic\330\210\326\027\332?5t\250\007v\353\350\277q.\024\375$\017\300\277\216\354)\331&V\r@\365\254\244r(\010\247\277h\241\235\'\201x\341\277\230+\030\007=\244\344\277F\333\362\211\274\367\272\277d\374T\270\025\265\302?x\353\177\223\316\303\332\277\270\244\330\341\017\205\324\277\3601\320\231V\216\350\277;\344\253]\017/\376?\325\t\341T8f\320\277\263\333\265\021hD\346\277\270\334\003t)G\336?\345\230\242a\350=\263\277,\334\302B\251[\341\277\255;\000\346_A\274\277\306\217mN\260\021\324\277\325\t\341T8f\320\277\341\342p|\377\303\004@m\037\304)Y?\340\277[\365\033\274LO\341\277\363P\305]\304\374\350\277\335\341\205\213\021\001\313\277\266\242\215\252\003D\340?\241nlz\365\223\r@%\263\356g<c\263?\035\352\254\235\203\350\325?1\273\206\365+r\364?\026\325\250\224\250\234\236\277\352\033\351\273\342\263\333?\355\360[\217\273\305\343\277\354\210=\246\213\217\363?,s\242\n=\227\356?\014j\034j\216\246\323\277\017!k\323\312m\310\277\022\033\2373\324D\356?X\277\0138\311\355\364?\014?(\007\232\375\301\277\251Y\275\031/\321\265\277\366\310\003\013\301\235\351\277:\336S0\272\262\351\277\2558\253\031\371L\007@\334\224\245\274\002\001\341\277z\021B\272CB\000@\343jf\362\234\025\341\277\003\202V\357\032c\010@iq\014\215Fo\336\277j\203\340\363\261\350\347\277O\013\325\261m\305\331?\007I_f$\030\344\277\243\230\206q\005j\345\277\313\\b\024\271\376\303?0b\335\262\035!\014@lS\205\261\326\344\014@\251\242\240CX\224\315\277\325\360\362\353\024\301\344\277\335\321=\264\215O\224\277\374\0278\340`\226\351\277\210Y\n\315\362\001\347\277#\342\326G(3\351\277\244R\350\336i\270\351\277\0374u\216\225os\277\320\275\310\267\014t\325\277\215\3270\317\312\310\345\277Fz\214\346h\202\331\277\237\235\356\005\344\231\351?\203Q;2\254\030\343\277\332\337:T\005\300\346\277\274\305.\257\254X\332\277\242\274\243=k\013\232?\t\210rg\220{\343\277\321k5\337\224\357\350\277\277\220:\372\204o\371?\034[\316\003\234 \331?\231\022\221\324\346\271\342\277\\\177\304T\273q\346\2775\255\264\255\227\205\323\277\261X\300D\344\222\331\277\022\237\247\247\305X\350\277\001!\210`\002^\322?\276a\253\256\206\364\350\277\201\240\020\210\000R\216\277\304\255\303K\262\346\343\277\325\t\341T8f\320\277\206\326\024\000oP\332\277\0219\\g\243\324\347?\225iE\221\254\224\000@x|\256\336\263\034\362?\327/\006\355\200$\344\277\002\003\313,3\316\330?\274\360\211Hn\274\345\277\202\311E\274\016\307\006@\227\274\251\303\365<\n@\002WWZE\266\351\277j\362\266\"\276\337\326?\021Yd\322~\245\325\277l8K\\\257)\342\277\210\352Ip\t/\351\277\241\261\r\244[T\347\277\232\260\361\324\377\333\333\277\352R\224X\325\350\340?~\250\271\226\022\356\330\277\311\316\200O\034u\323\277}{z\374\021\004\343\277|{\254\217w\216\357?9\002i\221\336\276\367?\305\026g\244\372\371\276?C\263\264M\315\202\317\277p\032\365^\255T\322\277\304\255\303K\262\346\343\277\006b\346\230z\002\346\277\306\241sH\201\025\352?\255\036|\016$\032\350\277X\351\276\370\013\t\003@\202\310\235\343\217~\351\277\253\337h\r\270\266\350\277+T\227t\254\004\335\277F\333\362\211\274\367\272\277\276\276{\343\301\347\341\277y\210\244k\'\250\006@\004\340\337T\006s\351\277p\032\365^\255T\322\277s\2375c=G\303\277]\327^\210}\277\347\277\235\023\3376\250\274\332?\372?t\374\201\266\324\277\003\244\203\034\246Q\351\277(\266\233\343\373\246\351\277\351\312\317\300\245L\346\277f\006b\312Xj\006@\352\033\351\273\342\263\333?\315~\265\266\240\020\326\277#\246z\017\310\021\351\277\216/\313\002\215\026\347\2771\344\221\335\357D\345\277\204\324\311\310b\017\346?\316p\201\2620\271\321?\no\3534:\221\341\277\242\274\243=k\013\232?\327/\006\355\200$\344\277*\'X\332\253\032\347\277\335\313\313\363\351|\351\277]\327^\210}\277\347\277Hs\331\032~\021\341\277KqZ\342\020\256\350\277|\0017\332k\241\351\277\252\033\305E\030\330\350\277\334\0274S\271\367\343?\037\272\351o\343T\346\277\216/\313\002\215\026\347\277\211\354\265\342I&\377?\037\377=\274\032\346\350\277,\253\277\'O\017\351\277\263l\365\264~q\350\277\305\224<\031\\\374\341\2774.\221\326t\200\310?h\201\225\274\245\247\323?\375\233G\\rk\301?d\255\037\276\027\324\347\277\036\345\335\322\327\375\347?\370\276\\A\035I\350\277\\\022pj\022\226\376?\201\240\020\210\000R\216\277\224\363\267\321\273\261\335\277\367\376\025\304\t\022\341?^\266YHW\260\275?c\337\224Y\221c\325\277%\036\271\274\304\262\351\277\020\213r7+z\331\277\251\366\013?\317\032\340?\207\266\014\225\223\177\354?\210.\345\213\220\243\003@:\256\002\020Y\210\353?E\347\204\003V5\350\277 %\r&\003\2522?\311\035\2748:\230\350\277F\330\235\275U\003\006@,8*\362\332\005\376?\0254\364\322\304\244\343\277\336:n\315\335\344\224?\311\373\216\013\257\251\007@<Q\000H\270\n\346\277]6\342\337\211\203\t@\314g=\253\007\256\351\277g\217\377\030u\004\000@\241R\334e\361\373\350\277\254\235\326\362\235\371\365?\003\034\271\225Vs\344?O\031\t\266\335\034\336\277\335\321=\264\215O\224\277\222\361l\232\257p\351?\354\214\n\"\373\353\336?\325\t\341T8f\320\277\025\t\2319\003A\330\277\210Y\n\315\362\001\347\277\264\030~\333\307f\321?G\312\035\217c\202\350\277\276H$|0\n\347\277\325a\024R-\371\347\277\266\211\237A\340\236\324?\372@\265\2363D\010@) >\330\363\356\344?\333Q\027\351b\231\351\277\267\352m\320\370\243\n@{\374\032\236\246\324\276\277;\340\336\341\237\322\342\277\241\317\312\327*\344\340\277\222.\332\342\265.\254\277|\202c \\z\003@K<\225\264X\227\345\277\3224\007K\222\231\336?\007\272\200\314<P\347\277W\362\323\257\365\317\260?>\305\330v\334\204\350\277v\201x/n\267\311\277\305\026g\244\372\371\276?\370\316\353_\234\303\347\277\360\346V\303\2265\336\277\241\026\200-\221\332\350\277\002\3138dLQ\345\277\367\000a\373\025S\325\277\201\245\323F\227\331\373?\005{m\313\320\354\347\277\020^3\235*\220\343\277\014?(\007\232\375\301\277\n\371\223\315\250\263\346\277\213\016u5\360B\341\277m^\t\276*-\354?J\233\342\263\005V\337\277an\014\275\253p\350\277NI\232P\030&\341\277\241\213\350\013\023\226\323\277R\371\316\267\234\301\343\277\325\360\362\353\024\301\344\277X\204\3044\005\240\351\277\324\177\321\205\374\210\341\27745\225\006\n\210\351\277\371\245\340w\330\360\366?\247\260\344*\313\315\350\277\303\203W;\000\245\350\277\344\333\207X\265M\344\277\376\034\267\037\231\206\013@\377{\241\255r\005\367?x[/y\307\270\350\277WN\352\321\260\265\361?\231-\313)\016u\r@R\371\316\267\234\301\343\2770\322\275v\204\313\333\277\215M\2106\\\246\340\277V\302\361\207D\002\322\277A`P\033\204\332\305\277\227\323}\323zV\343\277\035\014\026\022\216\036\351\277\323rq\272\240|\217?|\224\001/h\356\344\277C\365\262\030\246J\342\277\3270\256\305\377l\001@SQi\353^\017\345\277\003\244\203\034\246Q\351\277\251\366\013?\317\032\340?\361\370**\002\257\347\277\246O<\021\017\354\303\277j\203\340\363\261\350\347\277\001!\210`\002^\322?\353\"j\364g\232\347\277\247\251X\2114U\374?\0070\3303\316-\342\277_kU\364\237.\351\277^\266YHW\260\275?\237`&<\204w\336\277\200+\257c\226\237\345\277\274\"\377\343\347K\323\277I\375\201\263\3543\346\277^\307\317i\376D\350\277k\013\245\213\341\204\342?,fk\333\027~\346\277e\225@d@2\003@2\3459\266n\215\002@\371\265d-F\331\345\277k\234\316\\\325\215\323\277|\224\001/h\356\344\277th\007\317:\361\350\277\222.\332\342\265.\254\277Qx)\234\026\241\361?\"\265\032\2457j\330\2771\344\221\335\357D\345\277\236\273\2539\263)\343?\020\003\256\237\373\335\316\277\335\027\267J\311\030\351\277\327Q\2053\256~\350\277\205E\353.{G\351?\301n\260JF\203\344\277\2156~\316w\207\337\277\327Q\2053\256~\350\277\375L\022bt\212\346\277Mb!\203n\020\343\277\321\312f\035\377G\347\277\024f\0028qy\347\277h\201\225\274\245\247\323?\371\245\340w\330\360\366?:\371e\024\366\274\344\277\24687#\034\035\371?p\032\365^\255T\322\277\247\245\213\r\305\370\340\277\320\372\220\201l\226\340?\010o\035\310\237\033\356?6\237\262<\215\270\313?\250\307\025\275\003\345\365?tf\246\305\013\214\343\277\246\276\022@\033\343\342\277\302\2770|P\245\343?\2653PE*\222\347\277{#\340\310O\266\341\277S\257Dj\354\212\351\277\031\031\356g\001W\351\277\013\307\205h\374\336\342\277\\\2619\3604\001\324\277\244R\350\336i\270\351\277\345\230\242a\350=\263\277\002\3138dLQ\345\277\302U)\030\360\230\342\277#\203\014@\213\225\324\277\302\370X\343\264\245\351\277\313\\b\024\271\376\303?\237\001\331<\327\270\344\277uM\037\223\265\241\341\2775P\032\321\273\227\002@}d\246\354\214\352\t@u\254l\222b`\333\277<j\356\260\333\257\321\277P+\335\034I\226\347\277X\242W7\027\346\251?x\026\333,\220\'\346\277(E\025\016{\252\340\277V\302\361\207D\002\322\277\251\315\224\246L=\337\277\226\354\004\006\321@\345\277\215\223\204[\022\200\000@kjY\301[\376\345\277`\006\356\323{:\370?\010<\354\177\031\244\351\277\237\001\331<\327\270\344\277:\256\002\020Y\210\353?\370^r\322\002\324\001@\\<\321\021\263E\351\277\340\265\373\211\237\324\346\277\001\344\277\226\242;\347\277\323rq\272\240|\217?E\307f\306W@\351\277\257\031\255Cx/\332\277xK\240ZH>\351\277\236\273\2539\263)\343?\006\376\373a\207\343\352?Sj\360\035\265\371\346\277\250\207\316\331\365h\347\277\364s\t \203\366\265?r#\005\234\245\313\t@=8y\025b \344\277\343jf\362\234\025\341\277]f=\"e\207\344\277\270\212\265\206\343\234\351\2777[\236\335\017\340\341?\370^r\322\002\324\001@\323rq\272\240|\217?\302U)\030\360\230\342\277y\210\244k\'\250\006@EMMLh\230\343\277/\026\240B\234\031\351\277\324\353@\256\240\306\300?\332\377B\277\340\220\304\2775{?\022\036\366\345\277F\333\362\211\274\367\272\277\201\022(1@\265\343\277\020\003\256\237\373\335\316\277\227\217\233\007c\010\326\277\337z\345-\031\256\271\277 %\r&\003\2522?d\255\037\276\027\324\347\277\263\333\265\021hD\346\277R\225\344\200\251\242\350?\270\023\257\020\034|\343?\217u\307\'C\360\006@J\262\354\033\352t\340\277\320\372\220\201l\226\340?!\002\365\204&(\350\277\212r\3705\026\247\322\277$8\020r\273\033\345\277^\266YHW\260\275?\017!k\323\312m\310\277\213\016u5\360B\341\277\020\213r7+z\331\277Q|\366\027\206\375\334?}|\"\325\220L\000@\013\340\014\233R\311\344\277\276\256\367-T\377\362?b\021\327\030\010\271\351\277\226\023\374\303\337\254\264?\245V\364V\353\254\362?\n\371\223\315\250\263\346\277d\255\037\276\027\324\347\277\345\230\242a\350=\263\277d\374T\270\025\265\302?\232o\006\332\205/\205?F\333\362\211\274\367\272\2778\221G+\306\206\364?\226\354\004\006\321@\345\277\016\222\2149\343\245\313\277\314Qv\034\240&\340\277 \252e\272ul\367?\252\306\341\332a\314\346\277u\362\231\225\206\357\314\277\001!\210`\002^\322?2\021\321w\360.\333\277\005\215\332\373n\253\347?\311+\352M\212\255\342\277\354\214\n\"\373\353\336?+\345\305\277\221]\364?\026z\272\237\033y\333\277\020\003\256\237\373\335\316\27770\252z\0337\340\277\237\235\356\005\344\231\351?4.\221\326t\200\310?\375\231^\341A\225\360?E\351b\025uy\350?\232\203\262:\377\361\345\277\016\222\2149\343\245\313\277{#\340\310O\266\341\277\317\213S\034\223\344\347\277oF[B\301@\351\277HC~\330\242\r\006@\222.\332\342\265.\254\277\274\261\335}\317\023\320\277j\372\3373\302\016\000@g\010q\272\345c\350\277\2521\177\335?\\\312\277\375\233G\\rk\301?\230\377\277\2300\002\315?\214T;\002G\027\331\277t\032 \336\224\264\351\277R\203wP\013\344\350\277\323rq\272\240|\217?e\271\316\232\372\205\351\277\217u\221\317\343\352\336\277\023\273\345\242\'\205\351\277\327\271\256\205\357F\351\277m\220\345\217qw\343\277C\263\264M\315\202\317\277G\214`M\324\373\342\277H\235\245\247\345\004\204\277D\314\2470\342w\361?\200D6\226\354\211\347\277\202\331\230\223\016\372\323?\005\215\332\373n\253\347?\241\261\r\244[T\347\277\262\002v\302\037\326\362?L\235\'\374\361T\351\277\330\216!Y\310X\301\277\036I\310\t\313\034\343\277,fk\333\027~\346\277\317\341\242\030I\361\324?sS{\2120\322\020@\237\275\366p\277j\327\277J\344\372\200\226I\344\277\021\215\302\350(\013\364?Q\263\241\264x2\342?\263\306\373Z\201\266\377?%!<b6\002\014@\250\300]w\'$\307\277\222UW\321\242\217\344\277\276H$|0\n\347\277\255\005\365\333\315/\346\277x\026\333,\220\'\346\277\217\004\246\301*\270\003@\267\372\300\247\370\326\327?\311\316\200O\034u\323\277kQ\322\216\005\024\344\277\261\234\242\020\374\340\346\277\341\234tWI\352\344\277\250\300]w\'$\307\277\335\313\313\363\351|\351\277\332*7\"\3259\326\277\255;\000\346_A\274\277\256\250\213\335_\367\326\277\232\035}\314\377\221\306?\201\240\020\210\000R\216\277\260+\201\252\343\250\343\277\352;\361&\276\204\351\277\317\213S\034\223\344\347\277\\x-J\023g\351\277\017!k\323\312m\310\277@\350\255|\346\273\346\277\326z\002\273P\236\323\277"
      }
    }
  }
}
node {
  name: "tensors/component_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 750
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 750
          }
        }
        tensor_content: "Fo)&H[\325?\342\336\365_i#\314\277\224\372\255\034\365^\300?&\t\261f\236\024\343?\216\227\342&\333\023\335?\251\214\335\033\224\023\350?\216\227\342&\333\023\335?#dv\271\007\016\303\277w\366S\032\240\017\330\277O\377\327\331\260\237\362?0\004\331G\351\206\363\277^\177m\0275\027\371\277\232\360\375\336\212C\341?\377\243\215t\321\262\326\277r\336\214l\363_\361?\035C\357\377a\217\357\277\262S\364O\255}\341?.\327 \005\243|\346?\350JGA\031\224\345?\322\202\004\217\246\236\367?\256\346M\241 (\322\277OIv\203a\006\264?\3724\272D\2325\273\277\217\215\007nh\t\341? \235\355\271\377\341\245?\311\255\217PB\201\310\277n\034\007\275\206d\271\277\372y\200\317\225\016\335\277\017n&\367q)\342\277Kq\252q~\313\377?\271Vv\2364\212\323?\032\260\225\256\356\344\336?\355\223I\203\344\366\362?\257\301\357\313\026\270\326?\204\377\331\00565\356?\025\246\272\365{\332\342?\273\362U\333=Z\332?\230)\347\252q\331\347?\374\332\365\364\201\330\362\277\212\332\340\313\227]\366\277\260|)A\033\337\304\277\273\233 \300\r\347\234\277\232\277\302Jl\220\352\277P\343\215\332+G\362\277\260|)A\033\337\304\277\2632m\226\007\377\315?\273\233 \300\r\347\234\277\326i<\336\250R\371?\367\346&~\"d\354?\030\330\355\216\215h|\277&\t\261f\236\024\343?\242\276m}\217\253\344?e\312\234\332\252\241\322?v\317\274\004\032s\002\300\307\027\264\260G\312\325\277\363\201\332<\322\250\376?[d$\033\001[\340?Z\270V\343\033\255\377\277\371H\361p\353\022\370?\367\017\010\245\004}\361?\334a)\013u\327\265?\352bS\361\215e\215?\340K\234\016\366x\353\277\256\346M\241 (\322\277\272!d\356\261\345\344?\367\017\010\245\004}\361?\036\326\364\206I\361\361?\312\213\263\311\277\035\357?\017\177/\237\307B\333?\311\255\217PB\201\310\277\375\026a\017\360z\373?\373\366?\364\0061\363?Ley\350\335?\346\277\2632m\226\007\377\315?\275\222\217\032\234y\271?\273\233 \300\r\347\234\277\035t*\224\200B\346?ci\'\265\276\327\374?\257\301\357\313\026\270\326?\r\213\233\336\215B\001@K\030\240\212\256\353\360?{4\tFj.\000@~\370\200\233J7\344?\223\304\232i!\036\372?\360\030\267\337\035\374\350?DN\007\010\016u\365\277w\371\325h\'\034\352\277\362\337\315\0237f\342?n\034\007\275\206d\271\277\037\241\342\326\306L\363\277[5\026\010\215\317\325?o<orx\315\337?;\272:\2368 \262\277HtIP\267,\005\300\305\204Z_\324\037\345?\013\223\0371\020\001\372?g]\366+\036L\343\277\327\263\223\355P\232\334\277\204\377\331\00565\356?\007\254\347\341\rM\370?\273\034\214\317\374W\365\277\230)\347\252q\331\347?=\265\251\031\214\261\360?\350JGA\031\224\345?\277L\306`\312n\344\277J\233\340e=\311\332\277\277]\317\010 \210\335?B\320\362\025\300m\351\277\261\3348\310Jt\377?\352\340\"\341\023K\350\277\263\212\207Kf\222\372?d\310oY\000z\346\277S3\351\206\342\247\351\277\346\220\3074]\352\360\277~\370\200\233J7\344?\261g\344\341\365;\360\277\255+\024,\034\001\304?\020An\264+\037\365?$B\2322\205\252\351?\007l\207\252\330?\242?\277]\317\010 \210\335?P\343\215\332+G\362\277\243\206\331~\205\372\343\277\200\320\240w\271\272\306?\005\0130\206O\357\341\277\202a\244\370\376\343\371?\342DC\244\n{\341\277Q\235\r\347\347\360\346?\334H\360\332(H\002@\371|\002\036\035\033\357\277\tx\3264\334D\321?\036>\303\026!\271\321?\224\372\255\034\365^\300?\315f\272\217!F\367\277\350JGA\031\224\345?PB\271\356\273\224\010\300:\231_\032\007Y\360\277V\020)\215\300\374\013\300\367~v\357\255\025\242\277\316\034c\200y\376\323?~\307E\007,\204\355\277\340\215\340JjE\313?<\225\334\310.\260\306\277y\300\354\234@\206\343\277\252\331\266y\303g\375\277!\316\232\031\rW\320\277\275\266\352\300\317\267\341?>\240\270\204\362V\372\277\007\254\347\341\rM\370?u\220\262\013so\364\277!\210\032&\311\000\365\277uc\372\310,e\347?\3724\272D\2325\273\277\334a)\013u\327\265?OIv\203a\006\264?g4\025\005<3\376\277[5\026\010\215\317\325?\2632m\226\007\377\315?\224\217\210\271\236y\373\277tf|\027\264q\331?\222\210/O\263{\361\277\271(\275X\235\343\356?\261ZM\272\230{\353?\321\254:\203e\234\322\277\013\024\266q\345\024\330?)k\317#\363\013\315\277IjQ\007\223\315\365?\220\'\272)\307\261\333\277\017\177/\237\307B\333?\364r\'e\252\020\323\277\243\007p\277Z\016\362?\304\207\334\255[,\327?\253\"\271\273\216\312\352\277)k\317#\363\013\315\277\204\377\331\00565\356?DN\007\010\016u\365\277\363\2479\025-\265\341\277\255\365\000yH\300\375?\033\255\023`g\330\354?g4\025\005<3\376\277\242\2152\351p\370\355\277c\314Fudk\336\277Q\235\r\347\347\360\346?6\322H\346\355\356\366\277-\035\241\370\346\322\361\277\346\260\350OF4\371\277\244Q\307\316\002V\325\277\302?/9m\256\377?\265jf0}H\362?[\001Y%\347\017\355\277_\240\2175o\375\330?\'\325\363\203\370T\332\277\005\0130\206O\357\341\2779\316S\311&\204\251?\035\301\003\362\257\226\373\277\3330S\022\302\274\362?\247\305\306\347z\251\356?%V\212\304\315h\370\277\374\332\365\364\201\330\362\277\013zW\200\022\265\373?\026H\307\036\027\035\377?\373u\251\2631\035\345\277\206\306\3609O\237\347?2\006Z\223\037\367\335\277n\034\007\275\206d\271\277\215\227\377\266\214h\000@Su-\303Vt\311?[5\026\010\215\317\325?\210\\\314\331IV\352\277\256\346M\241 (\322\277[\264\177\307\267\273\367?-=\302\023\320\034\372\277V\306B\330UR\312\277\363\2479\025-\265\341\277\036D\307\263/\322\305?|1jg1\315\352?\216\227\342&\333\023\335?\326\303\365)\303\033\275?\n=ug\343\271}?P\004\260\370e-\322?Fo)&H[\325?>\277\241b\260\020\000\300\201\213\332\354\275\341\324\277\204\377\331\00565\356?\037\n\0064{\371\350\277\271(\275X\235\343\356?!\023a\244\0100\302?\303\275C+\273\265\353?\307\0326\377\316\326\347\277\271(\275X\235\343\356?B\001.\252\336 \340?\304\207\334\255[,\327?!\023a\244\0100\302?!\321\034h\224c\342\277w\371\325h\'\034\352\277\036D\307\263/\322\305?\242\276m}\217\253\344?A\234\341h\216e\362?Q\235\r\347\347\360\346?\334\356\251:\342W\357?;\325\3124u\373\370?\017:i\024\314i\311\277n\034\007\275\206d\271\277\321\257\274\321\354\250\344\277\367tB6c;\235?\300\312\332R\030v\360\277,\020\n\321\211\022\355?\205\014q-\223\365\362\277\036D\307\263/\322\305?\346\220\3074]\352\360\277D\224\207\373Q\313\320\277^\177m\0275\027\371\277$E\034\201\014\267\333?\017n&\367q)\342\277\307\0326\377\316\326\347\277\2109T\241\277\242\225\277\013\340\370\216?U\357\277.Y\014\023Uu\372?\024\247\017\303X\277\350\277.\327 \005\243|\346?\237 8pXZ\360?\327\263\223\355P\232\334\277[\264\177\307\267\273\367?MQ\211V\225\201\367?\304\207\334\255[,\327?\332a\270\213&\224\000@\027<\226\225v\221\345\277\360\030\267\337\035\374\350?\220[w\014mq\344?0\004\331G\351\206\363\277/$\372b\322\320\373\277hS\376\342\371\354\003\300\252X 9\356S\337\277j\321\365D\226\237\334?Z\270V\343\033\255\377\277=v\202\2203Y\337?\276\206\207\340~G\301?\013\340\370\216?U\357\277n\034\007\275\206d\271\277\367~v\357\255\025\242\277\307\0326\377\316\326\347\277\2632m\226\007\377\315?!\023a\244\0100\302?\303\275C+\273\265\353?uc\372\310,e\347?\234=\327<\272\227\366\277\233\334\250\261\326\354\276?\2715T\200\372\243\363\277[\001Y%\347\017\355\277\001|\255P@6\351?\341\003T5s\223\267\277\365a\271!\351^\366?\373u\251\2631\035\345\277\273<\255\352\345\241\375\277=v\202\2203Y\337?\340H\032\300nl\331\277aF\204KN\201\362\277K\237:h\222\030\303?1jzV\026\'\327\277aF\204KN\201\362\277\024f T\301\327\276\277\243\007p\277Z\016\362?\005\352\250\314\251p\336?\210\302C\0031\322\006\300\217\215\007nh\t\341?V\261\375x0\257\365\277\312g\345w\270\006\006\300Dn(#\367\276\375\277=v\202\2203Y\337?P\277\351mjT\300\277\340\215\340JjE\313?2\006Z\223\037\367\335\277_\240\2175o\375\330?\226og\236\265/\363\277\3030\303\373M5\262?\277]\317\010 \210\335?Q\235\r\347\347\360\346?\342\022\263B\017\343\344\277s\234\343\224\023\373\355?\321\254:\203e\234\322\277\rZ6e)k\363?\243\206\331~\205\372\343\277\275\205\257,\261\004\353\277\252\271\225^\332\035\365\277\243\206\331~\205\372\343\277T\353\240\255_\302\265\277\035C\357\377a\217\357\277\265\353\374pR\\\320?\371\255=\262;\316\345?\321\257\274\321\354\250\344\277g]\366+\036L\343\277\252\\z;C\243\307?_\240\2175o\375\330?\200\216\\;E\356\346\277\242\2152\351p\370\355\277\330I\033\303\277\010\361?\342DC\244\n{\341\277\257\301\357\313\026\270\326?\235r\351\354<<\365?\037\n\0064{\371\350\277\251\016\311)F\014\374?\220[w\014mq\344?\235r\351\354<<\365?\364\267\355\357\245\351\304?\tw\3251\213\250\371\277\222\250Pj\234\305\371\277\247\305\306\347z\251\356?24\023\331\266\235\342\277[5\026\010\215\317\325?\304\006Fm\206\030\371?q\362|\376;\036\340\277\354~X\356J\234\374\277\273\233 \300\r\347\234\277\257\202-\336)\370\330\277\024\247\017\303X\277\350\277\030\017\336R0\207\370?]\372\377\272\373\021\343\277K\030\240\212\256\353\360?\222\210/O\263{\361\277D\224\207\373Q\313\320\2777\201\302Q\240\315\000\300\205\014q-\223\365\362\277u\260\323&\\\271\374\27724\023\331\266\235\342\277\260|)A\033\337\304\277r\336\214l\363_\361?\337\342x\261A\314\365\277^\305\355\nym\324\2772@DbW)\374?i\360O}\221\366\303\277\2748\326\316\201\260\365?\324 :\234\335\357\353?\362\337\315\0237f\342?\000\343Ob\276r\324?\250\'\221\332CX\372?&\213\234tP\r\367?\035C\357\377a\217\357\277[d$\033\001[\340?\342\336\365_i#\314\277\343\376\302\260\306$\366?\201\213\332\354\275\341\324\277\r\351S\377\314\213\310?e\312\234\332\252\241\322?\324#\274\352d\374\335?\220[w\014mq\344?P\277\351mjT\300\277\213\017\363{\032\002\365?\213\211Z7J<\000\300\371|\002\036\035\033\357\277\0279\024G\357\204\323\277@:\027v\305\266\346?\222\210/O\263{\361\277\371H\361p\353\022\370?\256\241\207\026%O\260\277i\360O}\221\366\303\277\'\325\363\203\370T\332\277~zl\251\374/\370?\213\211Z7J<\000\300\340H\032\300nl\331\277\333\373@b?\030\364\277\371\255=\262;\316\345?\017n&\367q)\342\277\307\322\355%L\361\263\277\202\253B\242\257J\273?\367~v\357\255\025\242\277B\320\362\025\300m\351\277\256\241\207\026%O\260\277\265jf0}H\362?~\373\002\352\321C\326?\273\362U\333=Z\332?\274\267?\216\254\234\347\277\341\003T5s\223\267\277\022\0214#^\010\346?\326\347P\320\366Y\345?\202a\244\370\376\343\371?>\200\227i\t\r\362\277\307\0326\377\316\326\347\277@K \036\033\320\317?\204\377\331\00565\356?\013\340\370\216?U\357\277~\307E\007,\204\355\277\222\210/O\263{\361\277\332a\270\213&\224\000@:\377\000)4\371\323\277\2715T\200\372\243\363\277v\254\374\n\370\307\364?\022\0214#^\010\346?\232\274@\374\344\203\330\277\273<\255\352\345\241\375\277\222\250Pj\234\305\371\277\232\277\302Jl\220\352\277\261ZM\272\230{\353?!\321\034h\224c\342\277\363\201\332<\322\250\376?u\357\335\037\003\275\n\300e\226\337\367\004\342\351\277\273\362U\333=Z\332?aF\204KN\201\362\277&\330u\322\177a\354\277Fo)&H[\325?\271Vv\2364\212\323?V\306B\330UR\312\277\226\220\211\274\357\025\323?\261g\344\341\365;\360\277\374\017\\o\220\305\317\277\324 :\234\335\357\353?m\225\212*(\375\343?s\234\343\224\023\373\355?\207Mm\314\255\006\275\277\362\256\222\177\030\263\353\277\240\004\356p\323\001\360\277\217\215\007nh\t\341??\274\002\204w\257\372?\273\233 \300\r\347\234\277B\001.\252\336 \340?\374\017\\o\220\305\317\277\033\272\252\207\304\230\361\277\234R\034\234\337:\313\277\277]\317\010 \210\335?\327\263\223\355P\232\334\277\374\017\\o\220\305\317\277mdO\226\tJ\355\277\276X\367\351j\372\375?\232\274@\374\344\203\330\277\256\346M\241 (\322\277o\367\250\347|\364\315\277\364\267\355\357\245\351\304?\233\334\250\261\326\354\276?2\006Z\223\037\367\335\277\203!\266\214\270\230\307\277T\353\240\255_\302\265\277b2\224\271\005\303\343?\326\303\365)\303\033\275?\324 :\234\335\357\353?\271(\275X\235\343\356?g]\366+\036L\343\277\226K\3031\364<\301\277\226\220\211\274\357\025\323?\ts\376\025\'\267\361?\260|)A\033\337\304\277 \235\355\271\377\341\245?\275\266\352\300\317\267\341?_\240\2175o\375\330?c-\274\232P5\364\277J\236b\264\304\325\354\277\330I\033\303\277\010\361?\224\372\255\034\365^\300?\013\024\266q\345\024\330?w\366S\032\240\017\330\277\266\203\202\253\006\335\316\277\262S\364O\255}\341?\242\2152\351p\370\355\277\247\305\306\347z\251\356?\337\2030\r\000*\354?\326\347P\320\366Y\345?\217\215\007nh\t\341?\352w\377\203_\236\362\277\262S\364O\255}\341?ci\'\265\276\327\374?\347_b\273\370\022\003\300o<orx\315\337?\207Mm\314\255\006\275\277i\360O}\221\366\303\277K\227\tJ\331\327\342\27724\023\331\266\235\342\277[\264\177\307\267\273\367?l\027v8\332\365\367?~\373\002\352\321C\326?\024\247\017\303X\277\350\277e\312\234\332\252\241\322?\255\033`Q\243\314\340\277}\001\007\207\340\\\312?v\254\374\n\370\307\364?$\304\205@7\243\375?\212Uso^X\340\277w\366S\032\240\017\330\277\220[w\014mq\344?\024f T\301\327\276\277c\314Fudk\336\277\302\357\323\214\266M\350?;\272:\2368 \262\277\022\0214#^\010\346?&\t\261f\236\024\343?\346\220\3074]\352\360\277\n=ug\343\271}?O\326\366\262\316\206\355?\205\014q-\223\365\362\277^\177m\0275\027\371\277j\000\004X\n+\347?\257\301\357\313\026\270\326?\341\036\344\313\257n\376?\234R\034\234\337:\313\277o\367\250\347|\364\315\277\253\"\271\273\216\312\352\277\367tB6c;\235?J\317\235H\343\210\343?w\366S\032\240\017\330\277\036>\303\026!\271\321?[d$\033\001[\340?=v\202\2203Y\337?\332Pt-\253\006\373?\321\254:\203e\234\322\277\220[w\014mq\344?\267~V\302\305\006\341\277t\345\345\326\336]\373?\234R\034\234\337:\313\277\3030\303\373M5\262?\262\207\005\375\336\205\370\2778l\247\327\300N\343?\2109T\241\277\242\225\277\330},p\361\020\350\277>\277\241b\260\020\000\300\023\337\243\301bp\351?7\217g\321\342\371\000@c-\274\232P5\364\277@:\027v\305\266\346?\277\036\r\0333\310\337\277\276\206\207\340~G\301?\334a)\013u\327\265?U\0061D\234\235\374?\265jf0}H\362?\350\031\014\255\372\340\356\277\371|\002\036\035\033\357\277\tx\3264\334D\321?\364\267\355\357\245\351\304?e\307\032\214#\225\340?\244Q\307\316\002V\325\277\2632m\226\007\377\315?\330},p\361\020\350\277\277L\306`\312n\344\277\340\215\340JjE\313?9\316S\311&\204\251?\234=\327<\272\227\366\277\303\231u\331\263\236\002\300\242\2152\351p\370\355\277\342DC\244\n{\341\277\n=ug\343\271}?_\240\2175o\375\330?\'\325\363\203\370T\332\2775\'|\261Y\335\375?\003X\337\3768\037\000\300\325-\321\303:\260\360\277\013zW\200\022\265\373?T0g8[\233\327\277R\312\305).\373\363\277\360e\220=MP\376\277[\001Y%\347\017\355\277\2632m\226\007\377\315?\3330S\022\302\274\362?\037\241\342\326\306L\363\277uc\372\310,e\347?gZt\335\226?\321\277~\373\002\352\321C\326?\n\032\272\016\364-\314?\257\202-\336)\370\330\277\341\003T5s\223\267\277\361z\201\322\346\252\364?\335\276FZ\221\347\316?T\353\240\255_\302\265\277\025u\177a]\'\354\277\377\264\226\034\'\314\357?o\367\250\347|\364\315\27724\023\331\266\235\342\277>\277\241b\260\020\000\300\2715T\200\372\243\363\277PB\271\356\273\224\010\300o<orx\315\337?\nC\304\204Y\240\342?\315\237\243[\010\334\375\277IjQ\007\223\315\365?\267~V\302\305\006\341\277tf|\027\264q\331?w*\021\375E\317\340?\037\356\221O\260|\001@\352\266\t}\006\242\000\300\203A\203\335\025\232\361?\005\352\250\314\251p\336?\360\030\267\337\035\374\350?\222\361R\254g(\347\277^\177m\0275\027\371\2772\006Z\223\037\367\335\277\0279\024G\357\204\323\277\'\325\363\203\370T\332\277[d$\033\001[\340?~\370\200\233J7\344?\230v\300\010\241-\375\277\014\331\237$TW\345\277Yk}\205\354X\352?\022\0214#^\010\346?[\264\177\307\267\273\367?$E\034\201\014\267\333?\013\024\266q\345\024\330?\315R\312\375\330\207\350?C\022\251\035#\374\254\277\316\034c\200y\376\323?\273\233 \300\r\347\234\277a9\355#\361\300\355?\005\0130\206O\357\341\277\202\253B\242\257J\273?\363\2479\025-\265\341\277\312\213\263\311\277\035\357?@K \036\033\320\317?\326\303\365)\303\033\275?jP_\004\301\213\376?mdO\226\tJ\355\277\220\'\272)\307\261\333\277\240\367VIvA\353?\tx\3264\334D\321?ab\316J\323\331\362?C\022\251\035#\374\254\277\217\335b\032\037j\370?\275\205\257,\261\004\353\277\326\266\025<\330\246\356\277\206H\334G\001\230\373?j\000\004X\n+\347?\341\003T5s\223\267\277\201\213\332\354\275\341\324\277;\272:\2368 \262\277\242\276m}\217\253\344?\305\204Z_\324\037\345?\243\206\331~\205\372\343\277&\213\234tP\r\367?*\341B\016\374Y\251\277\307\0326\377\316\326\347\277\352w\377\203_\236\362\277\265\351\317\357\2474\344\277\360e\220=MP\376\277\234R\034\234\337:\313\277\343\206\317\3538\213\001@\2632m\226\007\377\315?gZt\335\226?\321\277\n=ug\343\271}?\303\275C+\273\265\353?\326\347P\320\366Y\345?\317\031\3411\362\361\341?$B\2322\205\252\351?\314\324\265\013\213\200\374?\tW\264\026\242^\361\277\206\2223W\251\337\336\277uc\372\310,e\347?\240\367VIvA\353?\330},p\361\020\350\277}\001\007\207\340\\\312?\265jf0}H\362?\340\215\340JjE\313?w\371\325h\'\034\352\277_\240\2175o\375\330?\374C\031R6\205\350\277\253\325\337]_v\365?\224\372\255\034\365^\300?\366\010\003\005\245\307\305\277\226K\3031\364<\301\277\020\260\334\376\324\267\245\277>\200\227i\t\r\362\277\202a\244\370\376\343\371?\nC\304\204Y\240\342?\201EZ\371y\213\371\277ab\316J\323\331\362?\224\217\210\271\236y\373\277\201\213\332\354\275\341\324\277\3030\303\373M5\262?V\306B\330UR\312\277\212#\343\rc\300\343\277\n\032\272\016\364-\314?\277\003\304\036\377\013\367\277y^\"\252w\327\367\277\330},p\361\020\350\277\201%9\336\220A\361\277\201%9\336\220A\361\277\230)\347\252q\331\347?9\016\264\000\\\221\377?]\372\377\272\373\021\343\277\352\335\240\222\214>\326\277\366\010\003\005\245\307\305\277J\317\235H\343\210\343?\250\'\221\332CX\372?@:\027v\305\266\346?\206H\334G\001\230\373?\231%:tS\014\007\300ZUT\263\'n\001@yw\352Zu#\366\277-=\302\023\320\034\372\277\257\202-\336)\370\330\277DN\007\010\016u\365\277\374\017\\o\220\305\317\277\276\206\207\340~G\301?\252X 9\356S\337\277\374\017\\o\220\305\317\277\374\017\\o\220\305\317\277\017\177/\237\307B\333?/$\372b\322\320\373\277\206\2223W\251\337\336\277V\306B\330UR\312\277\025u\177a]\'\354\277\340\215\340JjE\313?\231\213\261\235:\210\363?r\336\214l\363_\361?\340\207v\210]\025%?0m\374\244\2353\351\2778;lC\242\233\354\277\203A\203\335\025\232\361?\232\277\302Jl\220\352\277\3367\254|\255\272\374?]{\226\373\320%\361?\210\\\314\331IV\352\277w\371\325h\'\034\352\277\013\223\0371\020\001\372?\373u\251\2631\035\345\277)k\317#\363\013\315\277\247\356\247\016]\302\363?"
      }
    }
  }
}
node {
  name: "tensors/component_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 750
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 750
          }
        }
        tensor_content: "e1\255?\020\326\322?\202\314\350ys\r\263?@S\3646?\030\300?,\243\006\260\256M\321?\274\016\027K\200\231\232?\no\266\246\270\246\321\277\254\031\033x\351I\360?\265+\354\205\274\367\r@\232\340h\333H_\003@\322\320!\026-f\342\277]a\347\331\211\315\355\277\010\316\226s\024m\324\277&X?\215\202{J?\023\3358\335\251\357\322\277?\311\301\321.\234\353\277\014\301i\032R(\335\277C\2023\027\r\035\301?\373\r\303\273ol\357\277*\235\370\0329h\353?\220\014+\232\263z\365?\001\241s\200t\376\332?\335j\303\002\206\370\356\277_\236\374z\013D\347\277\366Q\367 >B\332\277\202(\224\3664\034\350\277\225/\250\303\370%\341?\2223zL\367\245\364?\321\373xF\021\321\314\277u\225\240p\311m\361\277\334\016\227\021\315H\357\277\310\352\260\367\357\002\337\277\2236\244\274\373\203\260\2779=\321\262\367F\345\277\232\364\010\014\233\225\345?W\321V?\353\366\307\277\330H`PQ\210\361\277Lw\032Q\t\317\334\277\342*f\324$\020\345\277Eg2%\337\231\301\277G\311\021\326\3066\352?\331\305sO\3651\347?\321\206\350\304O\325\357?W\352~\312\376\216\371?6W\254\211\247\206\005@\265\014\217N\350O\333?\263dC\2132Z\311?\327\352\241\335\010{\301?\377\230\204f\216>\321\277\255O\241\036P\373\361?\315\300\364\211\347\277\333?\3149RJ\270\363\321?\235cKF:\250\376\277\004\362\312\274MF\350\277\3576Ofh\241\324?\362\211\330\004\233\006\313?7\253s.\014W\373\277\241\355\356C\375\020\340\2770\221Q\325\212p\363\277\3246\376\2342\231\251?\357\335x\224\267l\362\277I\273@\021\302\237\335\277\303<Siy\371\364?x\340\370\365\203e\005@\227\235\016\3163\222k?\302\222\010\212Bu\000\3006\264\234?y\212\351?\020;\351H\351O\000\3006{,\026\016p\353?\032$kM\263\363\334?\245\244\207p\001\024\326\277\341\3744\305m\300\246\277X\230\0054\022\216\351\277\240B\263\355\357\275\275?\244O\202\023\253E\357\277\2775GY\336u\346\277\313\230\214&\367\005\370\277k\316/\313\2635\314?\345\330]\326\352\373\261\277\007W\317\223Jy\342?p\206\261\303\025\374\342?\204\330-V\317\031\323?J}\022qS-\321\277\001\265\303\300\341\324\330\2770\037]Zn^\000@\000L\304\374\265M\325?\337c\337\246\366T\341?\340_1\206y\316\347\277\314\"\333^\306j\300\277\274\275@w\367\267\240\277\027\235a\273o]\354\277|\335\020\300d\246\323?\370\362\330\027\276\030\270\277\021\341;\021[\347\363?\024`$\312a,\365?a\273\252_\243\206\364?\252\'\343\341\307#\355\277\370\024\201xNg\257\277\243\350\2550\272\344\326\277\300\225\364\247l\365\345\277C\211@\211\214\'\346\277\006\243\207\0233\365\315\277\364\026,\177\211\243\313\277\275W\257\314nO\376\277\320\3379\354\275:\305\277!\017\211iw\002\351\277vvWa;\243\365?}#F\027-\223\353\2774R\270\222\342\022\345\277\224\010\243DS\222\247\277\320\021L\306\300\007\351\277A\372\002/\007\363\361\277\275\311:\014\021\023\343\277\260$w:\247%\341\277\205\222\035\004\300\036\275\277#\234\300\020\247\266\365\277\206m6\r\367\365\361\277\211\277\246\372|\314\343\277\374<\020ASv\332\277\223\232\006\255%\201\307?\351~UT5\367\362?ULm4\240J\364?\237;*\003(\355\351?cv\025\025\246\t\356\277\264[\270\325\037\312\341\277\023}}\351\005k\351\277^\321\202)B\005\333\277\233\010\211\343\026\312\310?|=\340\333N\010\004@\331\237\2027\r\345\267\277H<\022\r(\204\252?\267\016\254\212\rq\334\277<]\226f\317\207\310\277\255\tu\371\201\027\350\277\226L%\375\335\360\360\277\222s\316\203\261\366\341?\370\210\272\222\222\016\374?\331\226+\306\300\002\350\277\325\025nSW\"\373?/\240\210\311\255\366\365\277\024\363W\307&m\370\277\247\207V\241\351\217\337\277\032\276\264\027\036\374\364?\356\314yw\2436\306?\\\0148V\313\034\350\277sdR\202\177+\311\277-F\032\t\210A\350?2\230\366\222\021*\333\277\233\252\013rrK\300\277J\201=\365\220\337\357\277bL\364|\321/\264\277\013\007\376\363\030]\304\277\"\027\213$\"\242\350\277\363qW\252I\354\246\277\r\026\025h\305\252\360\277\007\026\014\322K|\357\277mr\3720\224[\336? !\377\245\222\365\320?\332\213p3\304q\331?\225\275\307p\"\361\344?:\364\371Z\355v\366\277\365O\030!=\204\270?\273W*\",\200\261\2777\306\306\232Z\025\350\277\360]IS\270\310\352\277\260\254n0x4\273\2773;[\311\323`\347\277\337\212\331\223F|\327\277\346\353\265\306\023\337\205?\234\317/j\033\207\013\300\347\375\025\013\360\356\364\277\024,\310\360\221\207\366\277\\\034\340\013b\376\243?\020\3123[\200\246\355?\344r\212\0073o\374?H\363+\355|\031\326\277gQm\3678<\332?\263\362b8\\%\315?oi\'\371\276E\361\277\303$\016\232p0\340?7\303\374I\214w\323\277\014Hp\330.\027\302\277\341\226\036p\242\210\267\277\214G\362\241\235\305\356\277C\260\222\324\343\210\277?H\0251\250\303|\354\277\035\021\270\367ix\346\277\010,\'\206}\313\322?\020\352\254\244\212\240\367\2775V]\n\371n\340\277\206\r{\031Sq\370?\362\r\304\224\300\024\346\277a\234\024\335\376\330\022@\214\326\240\013B\010\360\277RK8\376t@\312?\027\036\242\030Y\177\302\277[\202\334\214\212\314\375\277`\272;\325^\332\356\277\337h\3017;9\353?\205\243|\306]2\264?\311\311\336\301\370\227\262?\204\205E5\236l\355\277\272=\353j\333u\335\277\244\317\325n\353u\362\277\215A\366K\0109\370?88\000\351o|\377?\244X\027\301\033\213\336\277\006h\334J\354\202h\277\261QC\005\270\353\317?\257\272Pn\371w\355\277\325\276\022,&=\341\277\356\246_\373\212\025\361?\345\334\027t5T\345?\240\317\235\220Zt\245\277V\262\033\325r1\306\277\260e\343\010\251a#\277\200_\226\006\222\322\357?\357\024\006\345\375\203\236?\337<V\240\231\207\306\277\372YA\020k\372\320\277\207\351\266\031\325\371\327?9_]@\311\254\370\277\003\035s\312\032\364\327\277p/.#,\250\271\277\372\232\302 \030\267\t@;\264\350\341Y\001\230?\023D\010\304\353u\337?\342\321\300\255&S\360\277\234:,\210\002O\361?\377&\237\027\t/\351?\023D\010\304\353u\337?$Vp\203W\331\361?\\\034\340\013b\376\243?0\244-A\304R\361\277SN\350,`\007\353\277\340_1\206y\316\347\277\273+\242\243\'\314\360\277\250\225\036\275\207\374\355\277\243(\210&[\036\331?\201\306\217\221\024<\230\277\352K6FSm\324?\336d\034\300$\335\357?\207B\240\214J\016\360?\260\353\006\021<\013\343\277>\201\316I\323\264\361?\372\322\213/wN\321?\022\370\230\332i\231\361?\316\003d\271f\371r?\036\007\225S\342g\323\277\273+\242\243\'\314\360\277\237\035U\310\315\026\336\277\376\204*.\303\262\273?\376X+3%\023\370? \363I\017$l\341\277\371\350_\202Puu\277\267\027\222\025g\371\340\277\357o\277\217\323\273\322?\304\374\251\036\2137\360\277~\024\177*,<\205?\302/sS\325\243\355\277\3616Tb\027|\340\277C6\310c\326n\345?\355\274z\375\374\321\342?\205\341\201\030R\313\001\300\004#]EOM\342\277\346t_\301\225\n\350\277\274\341\324\356MM\357\277@i\\\267\"5\343\277\374{j\345\362\351\342\277~\315|\316\035:\371?\002\002M!t\354\364?oP\266\376\344D\t@\017w\257\270\374\033\303\277\205\277RI-\342\262\277ngR?\\\252\345?0\221Q\325\212p\363\277\255\242O9\250s\312\277\223\365MG\256J\001\300\265\t\305\375\031\262\346?\374\025\033P\262)\320\277dc]\303\255\263\353\277\364\031f\313\3225\325?\227\r\241\340i\217\272?\020\214\341\240\320\247\345?\005\233\242\333\364\357\004\300i\205\273+\363\333\316?F_\332B\\o\362\277g\257X-)\000\364\277k\325\215\032\034\203\346?\010\231M\230\233\326\362?_\364>\361\217\232\334\277}\'\030R\353\245\340?\270\263\026\356\321\212\234\277`\362i\351\354\221\322?\322M#\210\260I\372?\351\3066Op\030\357\277\271\350;\347\034\305\327\277\222\250\365\365\304\022\250\277o\203\221\231\257@\355?\246\013\2550\333\267\343?Y\344V\305ee\301\277\255B\345\"\3551\346\277\3117:X\202\032\373?K2eKB\250\316?\355g\363\311\312\333\372\277hb\301\'\201\343\335\277\220\'Y\330\034\223\316?\331\357\210j\3749\347?w\204Zn*\252\307\2770\221Q\325\212p\363\277\255\340\252N~/\362?J\311e\207\026!\273?+\257\"v\032\363\351\277\300\221T,\005t\306\277\206\270%\037$o\222\277\234\227\225\222\351\206\377?\327\343\3463\352\030\330\277\2018\241\025\361\205\345?\341w_~r\211\304?\213i\005\002\372-\357\277\236+J\247\023:\346?U1\r7\340\240\325\277cv\025\025\246\t\356\277Gs\363y\203l\320?\232%+\231!\250\312\277o-O#+\352\327?\250\225\036\275\207\374\355\277\323\013\316\231OS\321\2778?}Vj{\371?\360\366#\223\336$\315\277\207L\246\303\033\177\243\277\370\024\201xNg\257\277\365\022S_\2661\003@\004\353\275J\316;\303?\360\037\367\230\010\312\342\277\227i\2426\303\273\320\277\252\341\262\206\256\021\341\277M\250\177\026c\037\315\277\3435\313?I\026\364\277\t\032\261Ib\330\352\277\031\343\013\nb\031\325\277\360\213\021\213\3531\320\277~\315|\316\035:\371?\317\001Z\266\353W\000@\271\006\241&\374\246\316\277\321O\364Y\010$\322\277\230\305f\232#Q\n@\274\3354s\346\313\317\277o\215\2719\346+\354\277^\275\364\254\260\313\315\277s\214\035\236\271[\336\277hb\301\'\201\343\335\277\233J\010\374\013A\361\277\317\301~\323F;\355\277\032O\276GL0\365?A\224Sz\220\362\267?6\370\353\025\"\302\321\277\217\364\315-7\367\276?EB\022<\341U\261\277\365\374G\235\177\221\324\277\031\361\323%\000\206\343\277\"\373\304\367C\t\364\277\217\211?\255\373=\323\277W\003i\031\356\303\353\277\310L\204+\n\316\315\277\242\022\276O\022\022\353?\353\375=\r<<\364?\366\345L*\326\316\301?}\023\337\350\215\335\372\277S\241\320M\221\264\320?6=\332[^q\343?\356\252\004\301\341\336\332\277p\020o1\374\250\306?\314\"\333^\306j\300\277I$\221\262\326i\306\277w\324A\203\207M\327?mA\232g\351\345\351?\014\301i\032R(\335\277B\275\351\026\300$v\277\261\366k|`\021\362\277\246r\322\360\264[\301?t\310\3407c\300\010@\340\277\363\372;J\277?/F\005\343SE\260\277\242H\023K\306K\337\277P\245\306>\021.\356\277A\276\013;\341\345\350\277\225\310PD\310\360\355\277\022\332\3200\201\256\367?H\036\301Y\205\347\357?\273\335\205P\317\016\325\277No\017\355\367\004\317\277\351E\345*\312\334\364?\321O\364Y\010$\322\277\r+\220\346\377\325\320\277U\253\352H\262\232\345?\005_,\300\274\353\273\277:{\200\307]Z\274?}\245Y>&\325\t@\002\213\322\277\033Y\324\277\032\377Jd\265\257\334\277}a\312\2203#\331\277\253`\226C\006|\326?W\2546V\355\262\267\2776\276\304\337\257u\350\277\367\001\214\204)e\311?\353\331U\363|8\330?j\205\300\'\242\266\352?5V]\n\371n\340\277v\277\374\371\356\341\356?\354\354\211\323sO\000@\023-\260\366\213\236\355\277`P\251\036m\255\313?\310)\013\234\217v\347\277U+\355\306\t\210\363\277^\321\202)B\005\333\277\366&C\226\243\302\260\277L\005$;\307\245\360\277\352\314\313\266p\000\362\277H\363+\355|\031\326\277\3550\344v<\247\277\277\207\234\264d-\256\001@\260$w:\247%\341\277\257.I\001F\363\336\277?\321\276\220*a\337?\177Z\264uM\356\345?\007L\206\311\351\247\024@_\370e?\202\036\371?r\236\223\332\324N\346?\302U++Hh\351\277&~R(a\252\360\277\023\357]<\334\237\345\277\263\362b8\\%\315?\362\231 \025\250\n\374?0*/`\204\225\261?U\272\364y-j\356\277\343N\363\312\\\256\305?\243\267\345\262\026\036\365?\250\245\306r\036\336\251?a]\322\312w\242\340\277\305y\302\031\336\273\321\277&\371\225iQ\223\366\2771bD=\247\333\267\277\000\233T$B\377\360\277\370=\254\334\177F\350\277\265\246\306\2132\222\365?9~>\233^&\327?\344\347\322\0062\345\323\277\254\271\233\211:y\262\277\274\016\027K\200\231\232?d\231\321\334\363\236\357\277\224\277\355U\256<\344\277\313\234\270p\230d\340\277.\265\273\305%\234\360?v\236\256K\257\260\343\2771\364\035\210\033\377\356?\272-\325\031%\003\362?\316>\032\271\031\001\310\277\006\331L\nb#\327\277ULm4\240J\364?E.\275\377\304\244\347\277i\343\332Wi\340\241?\036\357\244\227\r\020\346\277\300zY\271[\261\323?\225F~\341\034\014\t@\300\212\366\334\234&\354\277w\3541?\\\245\344?\233@\024\266Q\376\000\300\202z\223K\010\006\315?\007\320\274X\240\270\303\277\363\225\035\341\366\022\333\277\366Y\364\3379\007\356?\n\272K/Vq\342\277\205\317L\307$l\332\277|\353*\244c\273\275\277\0053=\241c\000\346\277\025\207\227\344&Q\336\277\317\003\204\252\"\233\332\277H\327\336\355\023~\344\277g\311\302\315\031\373\357?\331\305sO\3651\347?\226$\3550\374\224\302?\020A\323\352\275\337\361\277\031\252\233\340\366\376\326\277`\224\331\326\2033\324\277\212\303\240\205\307\231\366\277\002\330\275\304S\315\311?Br\343\277}u\350\277bw\250\007l\257\335\277|\327\3211\374\333\361?\374\216eo\276}\320?P\206\316\014l\246\327? \303n\223)\227\322\277\267\251k`\333\034\270?U\203\206\315\314\241\365\277\271\245\266\276?\237\300\277+L\356\016\221\023\341?D\340\361\211U*\361\277\367\377Y\"\320G\340\277\357\240UN \361\376?.\rU\314\350\265\362?Im\373Y9\016\334?\347(7F2\232\347\277\367\270!\335\306\300\323\277\362z\3677P\013\370?\345\207|\030\275\200\006@\275\016)RM\302\324?\274\277\3173\007\352\330\277c\220n\356\331\352\345\277\341\355P3\243\231\353\277\202\376\235\371\277\305\327?\254\264\305u\303f\342\2777\2224\314\350\260\361?W\316m\320\212\247\263\277b\305\302\277\236U\000@/\010\356\003?\346\004@fd\347\014\r/\315\277P\245\306>\021.\356\277u\212M\222\305-\340\277\214\354F\310I\210\362?\330\270>&\035k\350\277O\364\357\305H\250\304\277h\264\026V\354\352\323?\013\254un\242\377\351\277\014g\224\2227\005\003@!%\310\205*K\366\277\327\352\241\335\010{\301?Y\331\360E\235E\372\277;)5\221P\010\336\277\231\236\306\225\026?\320?U\332\341\364\375\206\357?Z]\032\022\347\266\364?P\270\203\214\270^\314\277\232\263\233#4\266\323\277T\035\313\233\210\317\341?\257\366E+\360\325\242\277\235\207\365#\325H\273\277OU\345\277Z\034\246?\341\377 \177\241\330\366\277\352\355\2453\352\016\326\277lj\2729\305X\317\277\372rJ}\354\340\362\277\2124\356\345\327(\363?\370\215y\317\371\022\344\277\3761Z\252\005\300\327\277\2259I\221\244\016\363\277C\202\244\375\377v\314\277v\224g\215\346\023\325\277\242\272\3175\033\207\361?\'\255\364\300x%\343\277\312b\3749\3621\260?\342\303_2\335\035\347\277\303\236\232\316Y\347\332?\3149\220\206\334V\261?\006\331L\nb#\327\277\264\345\306,\226\364\201?RK8\376t@\312?s\374(\351\354\207\320?\315\366I\205\233\371\357\277:\362\352Lq9\317\277\361\375\3438\254a\342\277\007^\334\005\312\203\307\277u\201g\007l\245\333\277 S\264%\337\255\305\2773\302m\004~!\306?\037L\247\263_\243\340?\257g\271*\261\r\335\277\372\177,\222\254\265\250\277\024\371w7\375\205\332\277\206\357\262oj\206\376?\351\335[r\001\371\244??\252\311\237\211\024\325?RK8\376t@\312?\002\nsD\240\205\336\277r\316sR~\376\340\277D\316R\351\tc\323?\334fB\245\260(\357\277\321\n,\263|\035\276?\004\343o\256\3513\352\277\301\231V\347\257\023\306\277\007@w\306\352\241\320\277\207S\232\255\257i\340\277L\256\265r\321\340\320?\354\0350\204\2733\361\277G7D\010 \345\354\277\307\332\276\210g\354\231\277\223\032\3169,\324\261?\371\340\255\"\345\326\235\277X\033\227\021\347~\310?34\336[\331a\355\277\235?\016\031G3\373?Z3!\312\236\227\270\277\271 \031\036\3029\346\277c\220n\356\331\352\345\277\001\374\373\005\353[\345\277\315\347?T *\347?\nw\263e\264k\345?\371\276@9\371\277\375?:\r\3666\375q\326\277v\r\223\216`\266\345\277i2<\205\036,\300\277\337\241\334Mr\342\361?rY\343\320\274\002\304?\354|J.\304z\337\277\313R`\001)\"\336\277\t\363\273X\301\213\340\277\370\210\272\222\222\016\374??\321\276\220*a\337?\263\340Pz\356T\340\277\372\002\301\272To\363?a\306.\365\000y\212?N2\262{s\233\341?x\245r\'\310\033\373?\343\004\263\370`&\305\277\321\376tV6\000\307\277!\324\231_Aj\360\277 \211G]\267J\351\277K2eKB\250\316?\023\275j\200k\204\341\277\020l\364%\000\213\344\277\337\030\364D\301l\357?YK\321\230sz\366\277\263\265R\223\211\211\357?\301\231V\347\257\023\306\277B\275\351\026\300$v\277\233A\273\320]\201\327\277*\215[\367\367\362\302?q\213P\316F5\363?\001g\203\005\010\036\343\277\220\255{\306J\231\356?\205\341\201\030R\313\001\300^f\037Df\317\330\277\375\262+\246k\244\244?\340\333\311}\013\372\275\277\306\326\345\3301\035\256?\036\022+\221Y\034\007@\202[\324Y\330\006\252?\3642P\032\302j\367?s\340\021\337%\254\366?\262\311\363\260\337\242\342\277z\345\312F\215-\334?\311\360\001\023y\223\376\277\230\004~\337OP\360\277Yng\253Zl\003@\002z_qA\000\341\277\341\3744\305m\300\246\277\362y\336\206\243|\323\277\263\375\"\307\007\221\327\277\230\222\235\214y\033\364\277\353\220\nj\254E\342\277|\032\343(\023\337\341\277\277\264\\\325\214q\341?}a\312\2203#\331\277\201\030\264\232 i\344\277\254\203\375\036\300\326\007@\202\350\276\374B\275\261\277]\261\257\320T\277\335?\027\365+m\345\356\333?d\251\211\350{\227\365?\312=\213s\013\253\332?++\030\310b3\357?I\311\374\257\222:\262\277mA\232g\351\345\351?\006\355Km\346\266\277\277\377&\237\027\t/\351?\246{\021\305\215\203\317?NXeW7\205\301?\205\346\244\224\204C\354?\033\306\332:J\225\336\277\313\017\333\330K\374\306\277\327\370\014\237\360\322\300\277\"G\021\215\350\005\360\277~s\023\n\247_\347\277\211t\247\014\013\237\245?\240,\324\360r\265\327\277|\270\237\371}\037\316\277\016*\375\36390\341\277\346ku\000\361S\361\277\223\2315~;x\350\277 (\304\225Oz\360\277\034\334\244\021\223\241\354\277\326s\234\301\032$\340?e3\202G\263\336\334\277\247\000\362\235\336&\305?)\026u\371\233M\301??\252\311\237\211\024\325?9\037\026\232\200G\335?c L\314\226\260\373?\026H\2627\261\254\346\277\302\317\010=\032b\331?\250\\\256\223\034\342\357\277F\225<\317\201\224\370\2771\226\336R\233\343\345\277\331\322\376\237\245\203\365\277\366&C\226\243\302\260\277p>\346\213F\317\346?\014\204:W\355\332\277\277\237\253\032f\024\226\376?\340G\354\266p\005\363\277\001\000\320\333\316\205\003@\366\345L*\326\316\301?\r\212b\016F\227\351\277:\313\360_!\022\351\277\001t-tJ!\361?Q\275\030QKu\306?$\234\344*\350B\361\277-&-\216\267$\347\277\003\377b\236o\203\370?\033\275\233fqm\320\2777\373\331\2001\354\341\277\023 i\362R\244\362\277k\241\206T\200O\377?\217\364\315-7\367\276?<\243\341\251/\035\362?\2577/\214\237{\343\277*\236H\207\353b\361\277}\377\263\326\005\255\360\277\233aS8\372,\361\277\017\001m&\343\310\346\277s\013\314y\023 \364\277X\316Z/\306\307\315\277\356\213\203\013\326B\247?\207\202\221Y\373U\352\277#;\234\242\021z\272\277gQm\3678<\332?\216;\372\365r\254\321?\315\273l\010\206\'\365\277_\236\374z\013D\347\277\272-\325\031%\003\362?\366!m\202,\260\340\277\366\030\207\367\322\'\334\277\217\253\227\340P\373\007@\360<\0021\362\013\031@s\303\270\277\201m\322?~\246\177\226\372I\267\277\032\276\264\027\036\374\364?s\373?\035\217\304\317?,\305\205\254\016\310\362\277\345\246\213\275{\256\277?\310\201\2613\304{\333?P\370\256_B\333\323?ht<`K\261\321\277\325\025nSW\"\373?\302\226\230\023\257G\333?~5:}l^\362\277\213\223p\366\230S\320\2779\037\026\232\200G\335?\203T\213\\\020\253\365?`\362i\351\354\221\322?\376\344\254\341\361\256\321\277\026\346\336\003\227\341\347?"
      }
    }
  }
}
node {
  name: "tensors/component_3"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 750
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 750
          }
        }
        tensor_content: "\031\244\007\354\250\304\360?2 \366\3052\024\373?\3445\240\360uo\375\277\201\373\323\2216G\263?9\260\337\322v\323\350\277B!\222\326Z\032\320?_U\203\317G\236\356?Tl.\312fD\220\277!\317\'\221\314#\331\2770@\332\224\260j\340?\274\246\353\203@/\360?4QF\373J\367\352\277Dz\373\035\222r\346?e\034\355\241\230\304\343\277\036<&<\216\242\357\277_U\203\317G\236\356?\250w\027\206\372\007\347?\005d\266\322\3228\363\277\350\006\252\347n\360\325?U\304AvJ\312\360\277\245\323\230\025,\"\371?<\367\036\230*A\361?\016IDx`\010\362?\376\323\314\305\216y\345?\301\327;\271X\022\340\277\270\026\002w\374o\322?\341\236\331\354I\246\316?\246\221\313\304\203\332\364?\253\302\033\372\233\275\344\277\302\031\t\n\001Z\344\277\024\212S\255\037\362\342?\326%\362\245\304@\346?a^\272\362@\014\350\277x\343\360\244\271\241\365?\027m\207&\234]\351?{\233\363\303\034\326\371\277,!\350\241\3467\255?\226\362\317\036\214\232\317\277 \372X\313\025~\226\277\0106m0\277?\325\277t\341\226h@\317\252\277\034\207;e%0\367?\235\013\327\366!\347\363\277\263UjgB\232\004\300&A\230\260\231\310\363?d{\206y\304\240\341\277\244\271\344\326\242O\353?\317m\357\206a\014\322?{j\243\216\004\363\351?\036\3255\267\325\367\274\277\274\353\320\034\3438\340?\216\232\001\350h\262\247\277\357\354\344\363\357E\356\277Tl.\312fD\220\277\326%\362\245\304@\346?\305O\251Qm\352\005\300]\374\031\210\020F\330?\277\316\004\226_\244\346?\261\334ii\365F\337?#\021\365\341tk\335\2774\304t6\001\372\350?9\014r\027\236\305\324?}+\335\320`\225\327\277\020\004\223\237\210\304\240?y\377u5O\241\263\277U\304AvJ\312\360\277!\317\'\221\314#\331\277%\2401\210\305\244\361?\311C|H13\363?\037\215Z@$\334\324\277&h\246\216g\204\000\300\340\232iX\226\317\362?\277\316\004\226_\244\346?r\021:G\315\232\323?\003\3421\231$\034\336?\357\354\344\363\357E\356\277\213\252\364\247\332~\327?\354\242\300\365\272/\265\277\323\010&\037A\254\354?\335\240\252>V\323\316\277\323\361\211(\262\233\332?\005d\266\322\3228\363\277\250w\027\206\372\007\347?=\373\216,\336\027\315?>mTf\345-\361\277\036\325W!\301\247\340\277\033\346\324<Q\014\365?\301\020\322\346\007\354\352?%\220\014\271\356T\335?\301\020\322\346\007\354\352?\021,x\361\334s\370?\003\3421\231$\034\336?\325\204\213}\360\034\344?{\202\262d\246\224\r\300\301A\"\034 \317\372\277H\227\307\244\025\007\340?Iff\272\007L\346\277M;5`\356\024\324\277\345Rlg\221\225\244\277W\006\017\307\362\021\365\277L\'\240\374c\356\303\277\252\347\034\304\300p\357\277\357\354\344\363\357E\356\277v\225\324\350\035*\334?\017\352\252\2404,\364?e\300Z]q\322\307\277:h\342\361\331\007\335\277\206\366\2667e\222\370\277\355kb\232\231x\361\277\216\232\001\350h\262\247\277\370\306%\016\3424\360\277\205\023\203\276\350&\362\277\227\225\241(g\372\363?3\352Uv\222L\270\277W\006\017\307\362\021\365\277\375\033\312\246+E\321?Ve\250\236\036\356\362\277\204\337\032A\326\201\366?\325\204\213}\360\034\344?\255\277\024g\227\323\322?\335\201\204\352\3532\302?I\331\224\365\275N\344? P\273\237\030\311\357?\363 Mq\002\353\331\277\262\354\2168\314\226\363?\005d\266\322\3228\363\277X\212\251hC\241\375\277Y+\020\221\027\305\377\277\220\255\373:\337h\351\277\323\010&\037A\254\354?Iff\272\007L\346\277\257ld+/\336\306?\310\005\037\214<\302\312?\332\251\214G\025\320\356?4T^CE\271\366\277\357\357\374;\352\007\372\277\033\311\010\266\315w\373?\021\364\354\367~S\007\300`\353\234l\200\341\363?\027m\207&\234]\351?\035\372X\353\345Z\353\277Dc_\'\003b\324?\nx:\201g\207\331\277\202\235M\360-:\362?\263-ISQ\017\273?\361\307\343)\313\222\343\277\270\026\002w\374o\322?\222@\375\217\035\352\322\277\037\215Z@$\334\324\277\'\3052R\352W\374?l\347\306\010\235\301\364?\366\032?K\371\026\306?K\033bFf\226\350?\376\323\314\305\216y\345?\'\342\376\330m\354\365?=\373\216,\336\027\315?!\317\'\221\314#\331\277c\345l\334\213]\374\277\245\323\230\025,\"\371?Iw\343\325\227\260\372?\020\213\021\311\010P\366?\377]\227\367\323\214\325?\007~j\021\\\013\341\277\356\035F\336\375\000\350?\345Rlg\221\225\244\277\337\371\0020\302\253\360?v\225\324\350\035*\334?\246\205|Y\220\252\337?\321\306X\316\230d\350?t\311<f0\317\347?\220\177\303M\301G\345?\330g\277\366l\210\352?H\347\371\310S\361\334?\017\352\252\2404,\364?\236\013\327\346\271x\241\2773\022\221\362\234q\362\277H\347\371\310S\361\334?:h\342\361\331\007\335\277\255\033\205A\323\025\333\277:\264>\021_*\260?\312\344\342p\005W\365?\251F\266\233\354L\355\277Iff\272\007L\346\277Tl.\312fD\220\277l\346\263\322y\362\267?\033\311\010\266\315w\373?\2336\010Q;\036\366?5\223\023L\363>\357\277a\300k\022g\252\361\277I\331\224\365\275N\344?!\317\'\221\314#\331\277\313\373~g\224g\367\277\031\351\354\204K\316\340?\243\030~\256\316+\351?\354\333x\215U\271\343?\262\354\2168\314\226\363?\35610\\\302\230\301\277\310\242\025 ]\017\361?\016X\211\321\312\270\261?5\223\023L\363>\357\277Iff\272\007L\346\277\034\314 \376\3079\347?\354\212D\211\277\177\336?\022\344z\020@\250\374\277\246\205|Y\220\252\337?\236\356\np\236R\372\277\031\257TwD\245\355?p@0P\324\031\373\277\276\034!R\373\033\360\277\034\314 \376\3079\347?5\223\023L\363>\357\277\363 Mq\002\353\331\277\036\3255\267\325\367\274\277\321\306X\316\230d\350?\245\360d\234\257\266\362?d{\206y\304\240\341\277a\214\003\225T\005\366?\223\312\307\301b\375\342\277\341\236\331\354I\246\316?9\3369*\200\244\300?%\220\014\271\356T\335?\2726\263.\315u\013\300n]\374\326W\256\364\277\324\021]B:\032\346\277\255\033\205A\323\025\333\2774QF\373J\367\352\277\014\367QX\341p\331?\220\260\023\203\331*\365\277`\217\033\335N\307\341?4QF\373J\367\352\2772=\302L\266\250\364?\330g\277\366l\210\352?\213\245\244\225\206\321\005\300\313\205I\231\331z\367?\033\346\324<Q\014\365?t\341\226h@\317\252\277\037v\276I\225\313\342\277tB\212|\345}\363?`\353\234l\200\341\363?\366\032?K\371\026\306?\365b\032\302\2522\336\277Q\2503\013\260\223\352\277M$\231i_\004\342\277{\351\017\200\270M\323\277(M\264\014\024\337\315?\313\271\261\026\354\037\363\277\033\270\213\232=\023\347\277$b\324\313\3203\311?t\341\226h@\317\252\277`\316\320\345\374L\372?8&\025\2411\300\330\277p@0P\324\031\373\277\325\204\213}\360\034\344?\202\200\201i\252\245\370?0@\332\224\260j\340?\035y\305\334\231\265\304\277\'\342\376\330m\354\365?y\377u5O\241\263\277\235\237\343\177\261!\007\300\323\361\211(\262\233\332?\337\371\0020\302\253\360?7n\022\202\316\213\344\277\362x\200wA\206\276\277\302\031\t\n\001Z\344\277\325\204\213}\360\034\344?G\332R!\017\033\252?\250w\027\206\372\007\347?\'\026gV\200\221\361\277\035y\305\334\231\265\304\277I\331\224\365\275N\344?\357\220cd\276+\374\277\006\350Pt#\310\373\277\245\373\261\'K\227\357?@\212\376\222\345\200\271?\277\316\004\226_\244\346?\024\212S\255\037\362\342?\221\223G\374U\226\373\277K\033bFf\226\350?\257ld+/\336\306?\033\032=\272c\261\360\2772q*\312\310M\360\277\035\372X\353\345Z\353\277\205\006)\037\244=\003\300h%\317\252W\301\303?\301A\"\034 \317\372\277\352_\023/\246H\354?\'\342\376\330m\354\365?\255\033\205A\323\025\333\277\345:\022e\201\225\341?Dz\373\035\222r\346??\257!\267\215u\365\2775,E1&D\340\277\014\367QX\341p\331?\331\317\217\361\221\322\341\277\250\203U<\370_\302\277\037\215Z@$\334\324\277\324\236?\274y\357\361?\257ld+/\336\306?\234\327ny\017B\370?M/\346\364\372\344\376\277\003\3007b\004S\345\277\013\243k\333\200\276\353\277d\222\"pS\261\323\277\007~j\021\\\013\341\277\334\311_a\235N\332\277\037\215Z@$\334\324\277\304rrQ8\262\332\277\313\271\261\026\354\037\363\277\013\002\005\263\254\232\351\277\013\002\005\263\254\232\351\277\276\034!R\373\033\360\277!\254^\221\001\\\004\300\356\035F\336\375\000\350?\351\276\254\006\322$\352?\220\177\303M\301G\345?\034\207;e%0\367?\215\370\020dv\366\360? s\267\266\220\341\320?\372J\300\2572\304\370\277 \372X\313\025~\226\277\371\251Y\207^\240\366\277 P\273\237\030\311\357?tS\007\230u\342\327?\272ok\2763\310\350?\354\212D\211\277\177\336?b-j\275()\370?Dz\373\035\222r\346?\310\005\037\214<\302\312?_J6D\254\275\361?0\006B\207\251A\355?Iff\272\007L\346\277\216\232\001\350h\262\247\277\216k.\3526!\345\277\'\342\376\330m\354\365?\217:\336\264\036>\365?Q\277\317\001?\244\334\277 P\273\237\030\311\357?t\311<f0\317\347?\335\013-\262E\226\336\277\235\364:\000\223\326\361?\002\037\32190/\343\277\035y\305\334\231\265\304\277\347|\337\265)\335\345?\354\333x\215U\271\343?\216=\366\374\030\000\341?q\211\203\314\304\267\234\277\203>\264\030\002^\364?kF`\340\310\235\362?>9\354\350\322\210\365?\356\014\311\302m\234\363\2775\365\304k\031\335\370\277\3557\372\034\207\323\365?\270\026\002w\374o\322?8&\025\2411\300\330\277l\251iL\250P\314?3\216\345\233V\n\300\277y\377u5O\241\263\277I8.\315\351*\342?\222@\375\217\035\352\322\277\241\326\260]&\344\344?\310Bi\022\016d\266?\327\201s5\366Z\370?\242\235\370\315\277\221\007\300\273x\242\341,6\342\277\327\364\220\273\266\205\354\277\331\317\217\361\221\322\341\277\220\177\303M\301G\345?\337\371\0020\302\253\360?6\344GP\211x\324\277b\321\350-\367\016\346?LL\262{~y\370\277\350\270Lw\010\270\215?\301\020\322\346\007\354\352?@\212\376\222\345\200\271?\254c\202\"p\341\346\277\003\3007b\004S\345\277_U\203\317G\236\356?~g\255\250\301\251\000\300\216|\253\005\307\205\371?\341o8\376|\230\360\277\234jp\316M\303\361\277j\245\371\267\364y\360?\020\004\223\237\210\304\240?!\375_~\352D\315\277/N?hF\r\331?y\377u5O\241\263\2779\014r\027\236\305\324?\341b\336^8\257\001\300m\210-1q\345\366?\24722\355W\376\366?\222)a\231\216\331\340\277\001\240dH|\324\331?\004\340\n|\214\321\300\277y\377u5O\241\263\277\325\204\213}\360\034\344?8\017y\252\242\257\346\277\004\340\n|\214\321\300\277\020\213\021\311\010P\366?\313\205I\231\331z\367?\262\215\365`\240\272\365?\324\236?\274y\357\361?\245\360d\234\257\266\362?\007\267\000?\013\345\353?\036\016\356Np\201\353?\227\225\241(g\372\363?\003\321\264}\224\267\371?\201\374\346\307Y\026\360?a\300k\022g\252\361\277Tl.\312fD\220\277\001\270\340\264w\204\260\277\276\034!R\373\033\360\277\347|\337\265)\335\345?+\341@\275\204\216\342?\213 *v\225k\347?\005d\266\322\3228\363\277!\375_~\352D\315\277R\245,x\253\251\330?\331\317\217\361\221\322\341\277\236\013\327\346\271x\241\277\251\007\001\223>\307\364\277\301\203\357l\310\026\377\277\335\201\204\352\3532\302?\347|\337\265)\335\345?`\217\033\335N\307\341?\013\311\031k\303O\305?\251\200N\251\363u\340\277\255\033\205A\323\025\333\277\006\364\237\337\026\370\320\277a\022\253JN\235\000\300\255\033\205A\323\025\333\277\206\264\351\346\274J\364\277\034Y\362\302\0217\351\277\220\255\373:\337h\351\2774\242z\377\3400\320\277\370\271\313n\235K\001\300z<Z\354\360\371\373\277\223\220/\264[\324\357\277\206\366\2667e\222\370\277\221Qz\253\255N\367\277\270-\236m\213\200\344?\004\005\035\373\246\\\365\277\204\337\032A\326\201\366?Q\277\317\001?\244\334\277y(\326=\\\253\345?\217\336\\%\355#\343?n]\374\326W\256\364\277\327\215\2406\376\332\271\277\3253WyZ\343\336?3\352Uv\222L\270\277%\220\014\271\356T\335?\370\306%\016\3424\360\277\205UP\017\221n\366\277\226\323\251\312!\372\302?M;5`\356\024\324\277\301>\n\324%\r\357\277\037v\276I\225\313\342\277.\234[$\342\204\362?\270-\236m\213\200\344?\335\201\204\352\3532\302?\245\360d\234\257\266\362?v\254p\337\254:\356?]\367\311u\274\230\006\300\005\246\203#{\200\367\277\004\340\n|\214\321\300\277y(\326=\\\253\345?\324\343$U\034\371\341?p\202\375\240|a\377\277\216\231w\214J\032\363?\263\360\376\314\177m\317?u\013\n\267\330\026\354?\201\373\323\2216G\263?\237\224\343\014~\234\340?\2336\010Q;\036\366?\036<&<\216\242\357\277\361\307\343)\313\222\343\277\034),\351\027\354\255\277brOV\3132\350?\301\327;\271X\022\340\277\207\321\223\023\275\235\274?t\341\226h@\317\252\277x\343\360\244\271\241\365?\270-\236m\213\200\344?\272ok\2763\310\350?\340}\235\321\022;\371?K\033bFf\226\350?t\311<f0\317\347?\323\361\211(\262\233\332?kF`\340\310\235\362?\346\304\334\226\306\250\321?\215\370\020dv\366\360?\300F\013\266&\276\266\277tS\007\230u\342\327?\301\034\020\235\005D\306\277\330E\305\277L\277\321\277\321\306X\316\230d\350?\221Nbc\263\214\353\277\020\213\021\311\010P\366?\255\033\205A\323\025\333\277\341o8\376|\230\360\277(K\332\007\344\357\006\300\004\303O\252\376\024\361\277\2336\010Q;\036\366?\354\212D\211\277\177\336?\370\271\313n\235K\001\300V1@!\014I\367?\335\201\204\352\3532\302?4QF\373J\367\352\277r\021:G\315\232\323?\002Xgg\337\010\356?\362/_\n\266k\301?\005u3\356b\235\347? P\273\237\030\311\357??\016\273\216\271Q\363\277\275\240\273\363K\253\370\277\332\207\222\020\365\006\326\277\304\007\360\335H\357\312\277/N?hF\r\331?8\017y\252\242\257\346\2776\315\253Y\372g\342\2773\373\364\373\ra\360?l\346\263\322y\362\267?\177V\016+z\314\351\277o\237\311\'\000\366\370\277\035K\215\357{\224\320\277\024\212S\255\037\362\342?p@0P\324\031\373\277\275\240\273\363K\253\370\277\202\235M\360-:\362?VN\014\250\217\335\360?\356\035F\336\375\000\350?\005\246\203#{\200\367\277\245\373\261\'K\227\357?\272ok\2763\310\350?y(\326=\\\253\345?\372J\300\2572\304\370\277\362\t\261zs\332\347\277\007\313\352\274\317|\305\277\002\222\377t\3461\341?\304[\326Z\251\241\350\277\310Bi\022\016d\266?\251I\316\343\346\016\371\2776\344GP\211x\324\277\357\220cd\276+\374\277\031\257TwD\245\355?yY&st\216\365\277\002Xgg\337\010\356?\300F\013\266&\276\266\277\226\304\2271ny\333\277\222)a\231\216\331\340\277\275R\2377\2603\357?\232WDlr\211\313?\247\004\351JD\005\351\277(\203e\001B\020\370?\244s\312>F\210n\277\272ok\2763\310\350?\236\030)\224\224\272\277?\35610\\\302\230\301\277\0033f\235\272U\343?\263\360\376\314\177m\317?\326S*\223\342a\352\277\361\307\343)\313\222\343\277\3030\245\000\220j\326\277I\331\224\365\275N\344?\377]\227\367\323\214\325?\216\231w\214J\032\363?e\034\355\241\230\304\343\277F\274\310n:\272\352?]\374\031\210\020F\330?~Y\025\276~\266\313\277M]/\227\016\336\354?\257]R\222{]\337\277\243\030~\256\316+\351?\332\251\214G\025\320\356?:h\342\361\331\007\335\277O\253:\236\264}\314\277mka\252\355P\375?\335\201\204\352\3532\302?/N?hF\r\331?I\331\224\365\275N\344?\2465J5R\300\342?\362/_\n\266k\301?\330E\305\277L\277\321\277\340\363\322\237\315\'\371\277\262\354\2168\314\226\363?\354\242\300\365\272/\265\277\314\234\345\217h\213\371\277Tl.\312fD\220\277\214b\367\306=\263\353?J5\026\205\357h\366?\023\205\3418\024\314\376\277\034\314 \376\3079\347?/e\333^\325\035\353?r\021:G\315\232\323?\033\346\324<Q\014\365?!\375_~\352D\315\277\324\021]B:\032\346\277\324\021]B:\032\346\277\0329\037\251\211\270\335?\246\221\313\304\203\332\364?f\324\357\300\373\370\327\277\327\367\250\003\261G\370\277\313\373~g\224g\367\277\250f\232jj\243\362\277\217\336\\%\355#\343?\006\272\007\222o\025\204\277\357\357\374;\352\007\372\277\366P\360?\'H\360?\217:\336\264\036>\365?\365b\032\302\2522\336\277I8.\315\351*\342?\035\375p3\340\034\367\277\270-\236m\213\200\344?\004r\033\246h\333\373?M\355\030\244R\235\372\277\226_\001\341\372i\002\300\272\350\270\324\350v\364?d\222\"pS\261\323\277w\346\010\355\263c\341?\24722\355W\376\366?6\344GP\211x\324\2778b\345x\222\324\001\300\035\375p3\340\034\367\277I\331\224\365\275N\344?~g\255\250\301\251\000\300\226\323\251\312!\372\302?\353\365,\314\336\213\361?\006D\322\003U\342\355\277\335\240\252>V\323\316\277\341\236\331\354I\246\316?\362x\200wA\206\276\277:\264>\021_*\260?\002\222\377t\3461\341?\300GR\254\024S\362?\2531\353\366ii\273\277\241\326\260]&\344\344?l\251iL\250P\314?\221y\373=bO\233?l\251iL\250P\314?\366\032?K\371\026\306?>\277\223\236\314 \000\300\251\007\001\223>\307\364\277\034Y\362\302\0217\351\277\273x\242\341,6\342\2779\3369*\200\244\300?\245[+u\343\022\262\277\245O\376s\333\222\360?:h\342\361\331\007\335\277\354\226\223\364\262\257\363?\247\004\351JD\005\351\277 s\267\266\220\341\320?m\033/\206\257f\360\277\0329\037\251\211\270\335?\034\314 \376\3079\347?\206\264\351\346\274J\364\277\nx:\201g\207\331\277\245\360d\234\257\266\362?\031\257TwD\245\355?B!\222\326Z\032\320?\226\323\251\312!\372\302?K\n\345*\3261\364\277!\317\'\221\314#\331\277\003\3007b\004S\345\277\335\240\252>V\323\316\277`\217\033\335N\307\341?8\017y\252\242\257\346\277\370\222\275\220\317\217\364?\250\245Os\030)\353\277m\210-1q\345\366?\357\354\344\363\357E\356\277=\230\205\300\376d\363?\216=\366\374\030\000\341?\261\334ii\365F\337?G\332R!\017\033\252?\017\264\371\253\006\373\311?{j\243\216\004\363\351?d\264\034\247sz\354?\335\240\252>V\323\316\277\373\234\262\317\261[\321\277\243\001\342\267?\033\327?\332\265\312\375\022(\312\277\300^\356\242\243c\364\277l\251iL\250P\314?\360&}\001\367n\341\277\270-\236m\213\200\344?\257]R\222{]\337\2771\177\217\235^\360\370?m\210-1q\345\366?\243\030~\256\316+\351?3\216\345\233V\n\300\277%\2401\210\305\244\361?\252!\265\321\307\231\342\277\235\364:\000\223\326\361?\341;\320\200j\363\364?!\375_~\352D\315\277yY&st\216\365\277H\363H4G!\362?\301\020\322\346\007\354\352?\302\031\t\n\001Z\344\2779\260\337\322v\323\350\277u\013\n\267\330\026\354?VN\014\250\217\335\360?\300GR\254\024S\362? \372X\313\025~\226\277v\225\324\350\035*\334?W\247u\357\3065\367\277Dc_\'\003b\324?\032(\242\215\371S\371?\033+\272\325\363\025\345?\347|\337\265)\335\345?\306\264?\242\340\371\336\277\245[+u\343\022\262\277y\377u5O\241\263\277\235\217q\230rv\374\277k\020\257\353\232l\310?\335\013-\262E\226\336\277\270K( `\341\243?\0329\037\251\211\270\335?Dz\373\035\222r\346?6e\240\345\021F\020\300y\027Y\"\314F\361\277\272\350\270\324\350v\364?\021\001G\227\303<\366\277a\214\003\225T\005\366?3\022\221\362\234q\362\277{\335\300\024\305\035\376\277\263-ISQ\017\273?b-j\275()\370?\037v\276I\225\313\342\277\24722\355W\376\366?d\222\"pS\261\323\277\355\377n#)\263\004\300\220nF21\343\360\277@\212\376\222\345\200\271?\261K(\020\370r\361?Dc_\'\003b\324?\272ok\2763\310\350?\2531\353\366ii\273\277F\274\310n:\272\352?_U\203\317G\236\356?\243\001\342\267?\033\327?f\324\357\300\373\370\327\277q\211\203\314\304\267\234\277q\211\203\314\304\267\234\277\220nF21\343\360\277\216\231w\214J\032\363?1\177\217\235^\360\370?\321\257\274\327\tT\326?\014\367QX\341p\331?\004\340\n|\214\321\300\277\263\360\376\314\177m\317?"
      }
    }
  }
}
node {
  name: "tensors/component_4"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 750
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 750
          }
        }
        tensor_content: ",\033\342\301nm\274\277C\000\014-\244 \274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277/\\\n\320u\246\231?3\353\006^\3171\270\277,\033\342\301nm\274\277\316\002\262\234Nk\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277oL\1775Ij\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277\264\357\315r\375J\262\277QV\025\314\r\002\262\277,\033\342\301nm\274\277,\033\342\301nm\274\277k\357-dH\020\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277\362\t\372\352_0\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277nEYS\346\271\272\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277\250\336\336\336\3566\273\277,\033\342\301nm\274\277,\033\342\301nm\274\277\240\245Gn\266\220\352?D^\337\032-\271\273\277,\033\342\301nm\274\277n\301\261\004\275\370\261?,\033\342\301nm\274\277\n\363\241\204\356i\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277a\237\204\334\023j\274\277\354\212\277\217k\\\251?,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277\214\357\232W\026\177\262\277\233cA\2672o\273\277,\033\342\301nm\274\277\231\324\346\022\200\372\272\277,\033\342\301nm\274\277@WGox\311\260\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277\334\273i0\036e\274\277\253\266\020\000\034l\274\277,\033\342\301nm\274\277l\0347\354\030f\274\277\261Y\273Iqk\274\277\330\003\2042\364 \274\277,\033\342\301nm\274\277\267\233\024\241\027\267\273\277,\033\342\301nm\274\277,\033\342\301nm\274\277z\371%0\267L\274\277\260.\361X\315X\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277\244\265\377&\260I\273\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277\332\2342\3130=\274\277\361\276\005\323:Z\004@\325C_(\211i\274\277\010U\237B\tk\274\277`\226\262\004\022\001\274\277p\270\225\020\360\237\267\277q\354\2367\010\221\266\277h\370\253\335\202[\274\277,\033\342\301nm\274\277q\016\271\'\375U\274\277\203\353l\224\235\311\267\277,\033\342\301nm\274\277\022\270n\226\311!\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277\022!t\313\274\261\264\277,\033\342\301nm\274\277\211\360\315\200\266i\274\277\240E\033+\261i\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277\013\324\276}\310_\274\277,\033\342\301nm\274\2774\272b;2\004\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277\025d\227YYl\274\277U\265\231\360\341\261\273\277,\033\342\301nm\274\277\212P\340\005lE\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277\250\221\034\325\250z\273\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277\304\n\323\2712y\214\277,\247\327a\246\036\272\277L\026\031w\036\033\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277[\010\227\315Xd\274\277\340\264T\375\363k\274\277\023\025l\t\003^\274\277;!\247\346\243}\264\277,\033\342\301nm\274\277w~^\3405\311\271\277%\257\224\364sk\274\277,\033\342\301nm\274\277\021\207\357\26709\265\277\373\364f\363\031\'\274\277,\033\342\301nm\274\277\346S\201\030\360\344\273\277\202\204\200\263\273g\274\277,\033\342\301nm\274\277L\216\215\307\027u!@;\256M\275&F\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277\263\261h\177\312\276\271\277,\033\342\301nm\274\277\344 Nl\'P\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277T\n.\250\366k\274\277,\033\342\301nm\274\277\316\002\262\234Nk\274\277,\033\342\301nm\274\277\234\357\'\246\334z\361?,\033\342\301nm\274\277\236X\027HYk\274\277,\033\342\301nm\274\277,\033\342\301nm\274\2777\205n\005\350X\274\277,\033\342\301nm\274\277\341*\242`\261\367\273\277 [\353K\221k\274\277 \355\006\244\370a\274\277v\014\370\235{?\274\277,\033\342\301nm\274\277V\211#4\322Q\274\277,\033\342\301nm\274\277\r~~\372GX\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277\343\241X\340Kj\274\277-\265f\325\372\345\273\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277x\334-b\366g\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277E2i^\035Y\274\277\275m\335Z\206@\274\277\335\360\261\304/.\274\277,\033\342\301nm\274\277\366\272vW\230]\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277\351\r\246\255Fl\274\277\004\207T\267\363g\274\277Z\271\225,\346d\274\277\270\016Q^!\235\270\277,\033\342\301nm\274\277,\033\342\301nm\274\277\375\356j\352\315\360\271\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277\267\374e\223\306j\274\277\032\201\271\326\375_\274\277[\010\227\315Xd\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\2777a7U\031l\274\277\327\014\002\254.l\274\277nG\223\336]\200v?,\033\342\301nm\274\277\244\265\377&\260I\273\277\303\013^\252\026l\274\277\236\342\nZ\312\200\326?,\033\342\301nm\274\277\214YI\353\3032\273\277,\033\342\301nm\274\277,\033\342\301nm\274\277:@?f\252-\274\277\214YI\353\3032\273\277\353\214\2339\"R\274\277 [\353K\221k\274\277\307Gc.\341i\274\277\261\003Q\027\rU\274\277\332\2342\3130=\274\277,\033\342\301nm\274\277M\325=WVg\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277\211?\317!)i\274\277,\'\237\374\010g\274\277\244\373\301\221\256j\274\277w\007\316\243\266k\274\277\024\273\370\336H*\264\277<\265\340\375\373k\274\277;&\260\010-\006\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277\023\360\317\250\037\204\270\277,\033\342\301nm\274\277,\033\342\301nm\274\277\361\201\\6f\360\273\277\004\r\263\324\300d\274\277\242\276\033\033}\242\265?,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277\347W\377FIk\274\277,\033\342\301nm\274\277\270\232h\325\253i\274\277Kb\333V1l\274\277\327\014\002\254.l\274\277,\033\342\301nm\274\277\267\374e\223\306j\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277\006=\321n\rZ\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277\231\324\346\022\200\372\272\277,\033\342\301nm\274\277,\033\342\301nm\274\277\207;\224\242^I\272\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277\037\222\265&^\336\272\277,\033\342\301nm\274\277\377\226~q\2560\273\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277\030\240\234\335#j\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\2772x\312\240\305K\273\277\321\206%\201\266B\274\277f\212\235\206\006C\274\277,\033\342\301nm\274\277\256IV1\232\334\273\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277Q\274\220\270\201\211\262\2772\314\2249y@\211?qR\032$|\030\267\277,\033\342\301nm\274\277,\033\342\301nm\274\277\351!\017S\224N\272\277a\267\376QH]\274\277,\033\342\301nm\274\277\277\262\232\215@\270G?,\033\342\301nm\274\277,\033\342\301nm\274\277)\330s\254\262X\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277\250\221\034\325\250z\273\277,\033\342\301nm\274\277\305/\277\t\311g\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277\274\326mYvg\274\277\257S\262\375\264w\265\277[ \021C\215W\274\277\203\353l\224\235\311\267\277a%\343\371\340f\274\277,\033\342\301nm\274\277\374\037\017\rk\036\266\277,\033\342\301nm\274\277\303B\273&qi\274\277F\343\221l\216h\274\277]/\214\242\354\016 @,\033\342\301nm\274\277/\022\177hi\001\237\277,\033\342\301nm\274\277,\033\342\301nm\274\277\006\356\371|~i\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277Rs\001Vu\371\272\277,\033\342\301nm\274\277,\033\342\301nm\274\277\214\013\261f.\032\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277\021o\004x\301\326\271\277!\005\253\310\020d\274\277,\033\342\301nm\274\277\3166\376r\365\302\271\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\2773\353\006^\3171\270\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\2772\305\214\252\013\010\273\277,\033\342\301nm\274\277i\320mZ\224Z\316?,\033\342\301nm\274\277\361\276\005\323:Z\004@\240\023\350\250\033@\274\277ZvQ\306\r_\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277\r/\247\010\271g\274\277\376\252\372<\301\210\367?,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277q\263$\373\323k\274\277.?C!!i\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277Y\241\361\007\316b\274\277\260|\301i\013\242\231\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277\255\353\202C\021D\274\277,\033\342\301nm\274\277]o<\223\343e\274\277\277\260KpBU\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277\312\032\330\263\273@\274\2777\342\243\004\312\305\232\277Lc\333\200d\327\273\277\340\367n\264\350b\274\277,\033\342\301nm\274\277x\334-b\366g\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277hZ\323J\201k\274\277,\033\342\301nm\274\277\346\270.b\245\003\267\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277_t\220<\214H\274\277,\033\342\301nm\274\277\231\247\232\333 >\274\277,\033\342\301nm\274\277\352\004\376\204(\022\274\277W\306\227\225\023\343+@,\033\342\301nm\274\277\336\376\255\226\366j\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277h\264 \350>\327\251\277\203\250\341\022nc\274\277\312\t\307\317xd\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277\347W\377FIk\274\277p\247=\021Vc\274\277a\237\204\334\023j\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277\236i(,\234G\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277\231\212\314\274Ch\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\2771\336E\2159\323\273\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277Wo\224\326T*\274\277D\304Z\007\241@\274\277,\033\342\301nm\274\277c\267(\001,l\274\277,\033\342\301nm\274\277\240\002\327\304\330c\274\277,\033\342\301nm\274\277O\302A:\256e\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277P\307\225\343VH\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277i\t\275\301\3057\274\277\017\3568Gc)\273\277,\033\342\301nm\274\277\240\245Gn\266\220\352?,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277\36661\216\334\216\271\277,\033\342\301nm\274\277,\033\342\301nm\274\277s\016\343\326\340d\274\277,\033\342\301nm\274\277\362\235T\332\363i\274\277,\033\342\301nm\274\277\332%\246\372y\331\273\277\213\335\321c\016h\274\277,\033\342\301nm\274\277\017\375\2355\007M\274\277,\033\342\301nm\274\27741\357\013\351g\274\277\\\365p\001\315S\274\277,\033\342\301nm\274\277\210\226\345\037\371\314\273\277,\033\342\301nm\274\277,\033\342\301nm\274\277\324\205W\336\367\331\266\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277\033@\004\037\200\323\002@,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277\204m\006h\272\337\273\277IJ72\031j\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277xOf\2637T\274\277,\033\342\301nm\274\277\207\374`\014mT\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277P.\347J\032,\274\277\236\341\212w\242\007\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277\257\307uB&f\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277\217\233\341\2050\353\273\277\242\275\247%\2338\274\277,\033\342\301nm\274\277B\032\233\212!H\274\277\253\266\020\000\034l\274\277~\021\364\003\263]\274\277,\033\342\301nm\274\277\253lc\010RO\274\277\266\271!-\356d\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277\346\352Y\302\310\206\245\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277\247\031\017\202\276<\225\277,\033\342\301nm\274\277\205\007\213{FX\273\277\026z\374\346D+\274\277p9Yi\275Y\274\277\310\226d\317Si\274\277,\033\342\301nm\274\277%M^\326\347\265\364?\201\257 \365{k\274\277,\033\342\301nm\274\277T\n.\250\366k\274\277\014\013F\251\006l\274\277,\033\342\301nm\274\277\246bgW9l\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277\275m\335Z\206@\274\277,\033\342\301nm\274\277\310\327i\236\377+\274\277\304T\027\274\006\013\264\277\034+\243\002ag\274\277\331}\222s\231\231\272\277,\033\342\301nm\274\277|xEkvA\274\277,\033\342\301nm\274\277y\210sG\030Q\240\277,\033\342\301nm\274\277\013\353\323B\350e\270\277,\033\342\301nm\274\277 \270/\332!\010\270\277,\033\342\301nm\274\277\244\373\301\221\256j\274\277,\033\342\301nm\274\277\312\336&\216\270`\274\277\267?\016\204\2651\212\277.\271\344\003Tl\274\277\035\021\352\365\3770\274\277,\033\342\301nm\274\277\376\374\371]\"\270\273\277,\033\342\301nm\274\277,\033\342\301nm\274\277Z\271\225,\346d\274\277,\033\342\301nm\274\277\035\307\226\035\227\336*@\322 \252\224B\273\273\277\222*<*\343_\274\277\246\037#\361`f\274\277,\033\342\301nm\274\277\244+\266|\027Q\274\277,\033\342\301nm\274\277;!\247\346\243}\264\277H\333_\312\305\033\300?,\033\342\301nm\274\277(\313\272\263\255\355\271\277,\033\342\301nm\274\277\235\277h\257\034O\274\277a\342\236\223\010a\274\277BE;\314\341K\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277\256IV1\232\334\273\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277|xEkvA\274\277\r/\247\010\271g\274\277\264\3172\\\022\006\274\277,\033\342\301nm\274\277Y+;\262f[\273\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277[\2028\260\213g\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277\216\310\260\027\355\325\221?\223w\3763)\034\274\277,\033\342\301nm\274\277\005\002\366\303Y\326\273\277\337\234\260\330\333i\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277\216\223x\312\013i\274\277,\033\342\301nm\274\277.\001Sd\361E\274\277,\033\342\301nm\274\277\363h\243S8%\273\277~\371y\216~j\274\277\353\311\"\332t\216\273\277,\033\342\301nm\274\277-\002)\337@\242\273\277,\033\342\301nm\274\277\246bgW9l\274\277P\313\355\316\224\271\271\277,\033\342\301nm\274\277,\033\342\301nm\274\277\351\r|\376b]\274\277\004\340\323\373\323\035\274\277\374\207\376\215#z\373?\342RW?\331j\274\277\025\224\213D\302R\274\277,\033\342\301nm\274\277\341\034\023\355\\0\272\277:@?f\252-\274\277\243\342\261\242\225{\356?,\033\342\301nm\274\277\310\214S\212X(\273\277,\033\342\301nm\274\277\307=\007\207\365\340\005@,\033\342\301nm\274\277\321\357\265\177\246i\274\277ZvQ\306\r_\274\277\001\232P\324\233i\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277\253\266\020\000\034l\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277\367\334\230\037\036\026\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277\220\274-\323fG\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277\264\202pR\314I\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277s\347\336\355\221,\350?a\342\236\223\010a\274\277\356\230\254\322\203i\274\2775B\000\360+D\274\277,\033\342\301nm\274\277\305Z_K\211k\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277\3166\376r\365\302\271\277y\364\321\206\016j\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277\037ei\357\376!\274\277,\033\342\301nm\274\277w\007\316\243\266k\274\277\265NW=\371h+@\033\007B\243\256k\274\277,\033\342\301nm\274\277b\325\315\300w\327\307?,\033\342\301nm\274\277V\211#4\322Q\274\277,\033\342\301nm\274\277;\262Vk\233\260\254\277,\033\342\301nm\274\277,\033\342\301nm\274\277\205\'\001N-X\274\277,\033\342\301nm\274\277\373\205\212\371\336\245\266\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277\373\364f\363\031\'\274\277\326\300\025\0358\014\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277,\033\342\301nm\274\277\307T\320V\316\367\240\277,\033\342\301nm\274\277"
      }
    }
  }
}
node {
  name: "tensors/component_5"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 750
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 750
          }
        }
        tensor_content: "nu\\\251\0146\271\277\177K\230-^\225\334?R\035\037\227\352P\355\277nu\\\251\0146\271\277R\035\037\227\352P\355\277M\307]7\310\226\370?M\307]7\310\226\370?M\307]7\310\226\370?nu\\\251\0146\271\277\304{\215v\321\004\363\277\311\321N\326\363\276\327\277\340h\213\241-a\367\277\340h\213\241-a\367\277\177K\230-^\225\334?\304{\215v\321\004\363\2772\332_\014l:\364?2\332_\014l:\364?\366\377\307lg\003\347?$.A\003\333G\306?\177K\230-^\225\334?2\332_\014l:\364?R\035\037\227\352P\355\277R\035\037\227\352P\355\277$.A\003\333G\306?\366\377\307lg\003\347?\366\377\307lg\003\347?$.A\003\333G\306?\340h\213\241-a\367\2772\332_\014l:\364?2\332_\014l:\364?M\307]7\310\226\370?nu\\\251\0146\271\277M\307]7\310\226\370?-\332\303\302\037\274\357?\340h\213\241-a\367\277\366\377\307lg\003\347?\177K\230-^\225\334?-\332\303\302\037\274\357?\340h\213\241-a\367\277M\307]7\310\226\370?\304{\215v\321\004\363\277\177K\230-^\225\334?\366\377\307lg\003\347?\177K\230-^\225\334?2\332_\014l:\364?\177K\230-^\225\334?\366\377\307lg\003\347?$.A\003\333G\306?\340h\213\241-a\367\277M\307]7\310\226\370?$.A\003\333G\306?$.A\003\333G\306?nu\\\251\0146\271\277\177K\230-^\225\334?\177K\230-^\225\334?\304{\215v\321\004\363\277M\307]7\310\226\370?-\332\303\302\037\274\357?-\332\303\302\037\274\357?\304{\215v\321\004\363\277$.A\003\333G\306?\304{\215v\321\004\363\277\304{\215v\321\004\363\277\177K\230-^\225\334?\311\321N\326\363\276\327\277$.A\003\333G\306?\304{\215v\321\004\363\277\033C#A2\230\344\277M\307]7\310\226\370?\033C#A2\230\344\277\366\377\307lg\003\347?-\332\303\302\037\274\357?\311\321N\326\363\276\327\277\340h\213\241-a\367\277nu\\\251\0146\271\277nu\\\251\0146\271\277\311\321N\326\363\276\327\2772\332_\014l:\364?\177K\230-^\225\334?nu\\\251\0146\271\277\340h\213\241-a\367\277-\332\303\302\037\274\357?M\307]7\310\226\370?\304{\215v\321\004\363\2772\332_\014l:\364?R\035\037\227\352P\355\277$.A\003\333G\306?M\307]7\310\226\370?-\332\303\302\037\274\357?\177K\230-^\225\334?2\332_\014l:\364?\177K\230-^\225\334?M\307]7\310\226\370?2\332_\014l:\364?M\307]7\310\226\370?\311\321N\326\363\276\327\2772\332_\014l:\364?\340h\213\241-a\367\277\311\321N\326\363\276\327\277M\307]7\310\226\370?\340h\213\241-a\367\2772\332_\014l:\364?R\035\037\227\352P\355\277\304{\215v\321\004\363\277\340h\213\241-a\367\277\340h\213\241-a\367\277R\035\037\227\352P\355\277$.A\003\333G\306?\304{\215v\321\004\363\277M\307]7\310\226\370?M\307]7\310\226\370?nu\\\251\0146\271\277\366\377\307lg\003\347?$.A\003\333G\306?nu\\\251\0146\271\277\033C#A2\230\344\277-\332\303\302\037\274\357?\366\377\307lg\003\347?nu\\\251\0146\271\277\304{\215v\321\004\363\277M\307]7\310\226\370?2\332_\014l:\364?\304{\215v\321\004\363\277R\035\037\227\352P\355\277\304{\215v\321\004\363\277$.A\003\333G\306?2\332_\014l:\364?\304{\215v\321\004\363\277nu\\\251\0146\271\277\340h\213\241-a\367\277\366\377\307lg\003\347?-\332\303\302\037\274\357?nu\\\251\0146\271\277\366\377\307lg\003\347?\340h\213\241-a\367\277\033C#A2\230\344\277\366\377\307lg\003\347?\033C#A2\230\344\277\340h\213\241-a\367\277\033C#A2\230\344\277R\035\037\227\352P\355\277\340h\213\241-a\367\2772\332_\014l:\364?\304{\215v\321\004\363\277\311\321N\326\363\276\327\277\340h\213\241-a\367\277M\307]7\310\226\370?-\332\303\302\037\274\357?$.A\003\333G\306?\340h\213\241-a\367\2772\332_\014l:\364?\304{\215v\321\004\363\277$.A\003\333G\306?R\035\037\227\352P\355\277\340h\213\241-a\367\277\177K\230-^\225\334?\366\377\307lg\003\347?\366\377\307lg\003\347?\177K\230-^\225\334?\366\377\307lg\003\347?\177K\230-^\225\334?2\332_\014l:\364?M\307]7\310\226\370?\340h\213\241-a\367\277M\307]7\310\226\370?\366\377\307lg\003\347?M\307]7\310\226\370?2\332_\014l:\364?\033C#A2\230\344\277\311\321N\326\363\276\327\277\304{\215v\321\004\363\277\311\321N\326\363\276\327\277nu\\\251\0146\271\277-\332\303\302\037\274\357?\340h\213\241-a\367\277nu\\\251\0146\271\277$.A\003\333G\306?\304{\215v\321\004\363\277\366\377\307lg\003\347?\340h\213\241-a\367\277\033C#A2\230\344\277nu\\\251\0146\271\277M\307]7\310\226\370?M\307]7\310\226\370?\366\377\307lg\003\347?-\332\303\302\037\274\357?2\332_\014l:\364?M\307]7\310\226\370?nu\\\251\0146\271\277\340h\213\241-a\367\277-\332\303\302\037\274\357?\340h\213\241-a\367\277nu\\\251\0146\271\277\033C#A2\230\344\277\304{\215v\321\004\363\277\304{\215v\321\004\363\277\311\321N\326\363\276\327\277\304{\215v\321\004\363\277R\035\037\227\352P\355\277\366\377\307lg\003\347?2\332_\014l:\364?$.A\003\333G\306?\340h\213\241-a\367\277\366\377\307lg\003\347?\177K\230-^\225\334?\177K\230-^\225\334?\340h\213\241-a\367\277-\332\303\302\037\274\357?$.A\003\333G\306?\177K\230-^\225\334?R\035\037\227\352P\355\277\177K\230-^\225\334?\304{\215v\321\004\363\277\304{\215v\321\004\363\277\177K\230-^\225\334?\304{\215v\321\004\363\277\366\377\307lg\003\347?$.A\003\333G\306?\177K\230-^\225\334?R\035\037\227\352P\355\277\304{\215v\321\004\363\277\033C#A2\230\344\277$.A\003\333G\306?\340h\213\241-a\367\2772\332_\014l:\364?R\035\037\227\352P\355\277\177K\230-^\225\334?R\035\037\227\352P\355\277\177K\230-^\225\334?R\035\037\227\352P\355\277R\035\037\227\352P\355\277\311\321N\326\363\276\327\277nu\\\251\0146\271\277-\332\303\302\037\274\357?$.A\003\333G\306?R\035\037\227\352P\355\277\177K\230-^\225\334?\304{\215v\321\004\363\277\177K\230-^\225\334?M\307]7\310\226\370?\177K\230-^\225\334?nu\\\251\0146\271\277\366\377\307lg\003\347?$.A\003\333G\306?-\332\303\302\037\274\357?M\307]7\310\226\370?R\035\037\227\352P\355\277\340h\213\241-a\367\277R\035\037\227\352P\355\277\304{\215v\321\004\363\277\340h\213\241-a\367\2772\332_\014l:\364?\340h\213\241-a\367\277\340h\213\241-a\367\277\177K\230-^\225\334?\366\377\307lg\003\347?R\035\037\227\352P\355\277\177K\230-^\225\334?\340h\213\241-a\367\2772\332_\014l:\364?-\332\303\302\037\274\357?-\332\303\302\037\274\357?M\307]7\310\226\370?\304{\215v\321\004\363\277nu\\\251\0146\271\277M\307]7\310\226\370?$.A\003\333G\306?-\332\303\302\037\274\357?\366\377\307lg\003\347?R\035\037\227\352P\355\277\033C#A2\230\344\277R\035\037\227\352P\355\277\177K\230-^\225\334?\340h\213\241-a\367\277-\332\303\302\037\274\357?-\332\303\302\037\274\357?R\035\037\227\352P\355\277\177K\230-^\225\334?nu\\\251\0146\271\277\304{\215v\321\004\363\277\304{\215v\321\004\363\277\177K\230-^\225\334?\311\321N\326\363\276\327\277\311\321N\326\363\276\327\277-\332\303\302\037\274\357?M\307]7\310\226\370?\311\321N\326\363\276\327\277\177K\230-^\225\334?\366\377\307lg\003\347?\311\321N\326\363\276\327\277$.A\003\333G\306?nu\\\251\0146\271\277-\332\303\302\037\274\357?\033C#A2\230\344\2772\332_\014l:\364?\177K\230-^\225\334?\177K\230-^\225\334?\366\377\307lg\003\347?$.A\003\333G\306?$.A\003\333G\306?M\307]7\310\226\370?nu\\\251\0146\271\277nu\\\251\0146\271\277\177K\230-^\225\334?\304{\215v\321\004\363\277\366\377\307lg\003\347?nu\\\251\0146\271\277\340h\213\241-a\367\277\304{\215v\321\004\363\277R\035\037\227\352P\355\277\366\377\307lg\003\347?R\035\037\227\352P\355\277-\332\303\302\037\274\357?\366\377\307lg\003\347?M\307]7\310\226\370?\177K\230-^\225\334?R\035\037\227\352P\355\277\177K\230-^\225\334?\304{\215v\321\004\363\277\304{\215v\321\004\363\277\304{\215v\321\004\363\277\304{\215v\321\004\363\277M\307]7\310\226\370?R\035\037\227\352P\355\277\304{\215v\321\004\363\277\311\321N\326\363\276\327\277\366\377\307lg\003\347?\311\321N\326\363\276\327\277M\307]7\310\226\370?2\332_\014l:\364?2\332_\014l:\364?\340h\213\241-a\367\277R\035\037\227\352P\355\277\304{\215v\321\004\363\277$.A\003\333G\306?nu\\\251\0146\271\277\340h\213\241-a\367\277nu\\\251\0146\271\277\304{\215v\321\004\363\277M\307]7\310\226\370?R\035\037\227\352P\355\277\366\377\307lg\003\347?$.A\003\333G\306?nu\\\251\0146\271\277\366\377\307lg\003\347?R\035\037\227\352P\355\277\311\321N\326\363\276\327\277R\035\037\227\352P\355\277\304{\215v\321\004\363\277-\332\303\302\037\274\357?\366\377\307lg\003\347?nu\\\251\0146\271\277\311\321N\326\363\276\327\277\311\321N\326\363\276\327\277\340h\213\241-a\367\277R\035\037\227\352P\355\277$.A\003\333G\306?\177K\230-^\225\334?2\332_\014l:\364?\177K\230-^\225\334?2\332_\014l:\364?nu\\\251\0146\271\277\366\377\307lg\003\347?-\332\303\302\037\274\357?\340h\213\241-a\367\277\340h\213\241-a\367\2772\332_\014l:\364?R\035\037\227\352P\355\277M\307]7\310\226\370?\304{\215v\321\004\363\277R\035\037\227\352P\355\277\311\321N\326\363\276\327\277M\307]7\310\226\370?\177K\230-^\225\334?M\307]7\310\226\370?M\307]7\310\226\370?2\332_\014l:\364?2\332_\014l:\364?\304{\215v\321\004\363\277\177K\230-^\225\334?\311\321N\326\363\276\327\277\340h\213\241-a\367\277\366\377\307lg\003\347?$.A\003\333G\306?M\307]7\310\226\370?\311\321N\326\363\276\327\277\366\377\307lg\003\347?\311\321N\326\363\276\327\277nu\\\251\0146\271\277\177K\230-^\225\334?\366\377\307lg\003\347?\304{\215v\321\004\363\277M\307]7\310\226\370?$.A\003\333G\306?\366\377\307lg\003\347?\340h\213\241-a\367\277-\332\303\302\037\274\357?-\332\303\302\037\274\357?R\035\037\227\352P\355\277-\332\303\302\037\274\357?\304{\215v\321\004\363\277\366\377\307lg\003\347?M\307]7\310\226\370?nu\\\251\0146\271\277nu\\\251\0146\271\277\340h\213\241-a\367\277R\035\037\227\352P\355\277nu\\\251\0146\271\277\340h\213\241-a\367\277R\035\037\227\352P\355\277-\332\303\302\037\274\357?-\332\303\302\037\274\357?R\035\037\227\352P\355\2772\332_\014l:\364?$.A\003\333G\306?\340h\213\241-a\367\277\366\377\307lg\003\347?\177K\230-^\225\334?\340h\213\241-a\367\277-\332\303\302\037\274\357?\304{\215v\321\004\363\277\340h\213\241-a\367\277\340h\213\241-a\367\277M\307]7\310\226\370?R\035\037\227\352P\355\2772\332_\014l:\364?\366\377\307lg\003\347?\177K\230-^\225\334?R\035\037\227\352P\355\277\304{\215v\321\004\363\2772\332_\014l:\364?\177K\230-^\225\334?M\307]7\310\226\370?M\307]7\310\226\370?nu\\\251\0146\271\277\033C#A2\230\344\277\340h\213\241-a\367\277\340h\213\241-a\367\277nu\\\251\0146\271\277\340h\213\241-a\367\277\340h\213\241-a\367\277\366\377\307lg\003\347?$.A\003\333G\306?R\035\037\227\352P\355\277\177K\230-^\225\334?2\332_\014l:\364?nu\\\251\0146\271\277\311\321N\326\363\276\327\277\177K\230-^\225\334?\311\321N\326\363\276\327\277\311\321N\326\363\276\327\277nu\\\251\0146\271\277\177K\230-^\225\334?$.A\003\333G\306?\304{\215v\321\004\363\277\304{\215v\321\004\363\277\340h\213\241-a\367\277$.A\003\333G\306?M\307]7\310\226\370?R\035\037\227\352P\355\277-\332\303\302\037\274\357?\340h\213\241-a\367\277\311\321N\326\363\276\327\277\177K\230-^\225\334?$.A\003\333G\306?\340h\213\241-a\367\277\340h\213\241-a\367\277nu\\\251\0146\271\277M\307]7\310\226\370?\340h\213\241-a\367\2772\332_\014l:\364?\311\321N\326\363\276\327\277\304{\215v\321\004\363\277R\035\037\227\352P\355\277\177K\230-^\225\334?\177K\230-^\225\334?nu\\\251\0146\271\277M\307]7\310\226\370?2\332_\014l:\364?\304{\215v\321\004\363\277\311\321N\326\363\276\327\277\304{\215v\321\004\363\277M\307]7\310\226\370?2\332_\014l:\364?nu\\\251\0146\271\277nu\\\251\0146\271\277\311\321N\326\363\276\327\277M\307]7\310\226\370?R\035\037\227\352P\355\277nu\\\251\0146\271\277\366\377\307lg\003\347?nu\\\251\0146\271\277\304{\215v\321\004\363\277\340h\213\241-a\367\277-\332\303\302\037\274\357?\177K\230-^\225\334?\366\377\307lg\003\347?\304{\215v\321\004\363\277R\035\037\227\352P\355\277\311\321N\326\363\276\327\277\366\377\307lg\003\347?\340h\213\241-a\367\277\366\377\307lg\003\347?-\332\303\302\037\274\357?\340h\213\241-a\367\277\304{\215v\321\004\363\277\304{\215v\321\004\363\277\340h\213\241-a\367\277M\307]7\310\226\370?nu\\\251\0146\271\277\304{\215v\321\004\363\277-\332\303\302\037\274\357?\304{\215v\321\004\363\277\366\377\307lg\003\347?-\332\303\302\037\274\357?$.A\003\333G\306?M\307]7\310\226\370?\340h\213\241-a\367\2772\332_\014l:\364?\366\377\307lg\003\347?\177K\230-^\225\334?\304{\215v\321\004\363\277\340h\213\241-a\367\277\340h\213\241-a\367\2772\332_\014l:\364?$.A\003\333G\306?\177K\230-^\225\334?2\332_\014l:\364?M\307]7\310\226\370?R\035\037\227\352P\355\277\304{\215v\321\004\363\277$.A\003\333G\306?\340h\213\241-a\367\277R\035\037\227\352P\355\277$.A\003\333G\306?\304{\215v\321\004\363\277M\307]7\310\226\370?\304{\215v\321\004\363\277\366\377\307lg\003\347?\304{\215v\321\004\363\277-\332\303\302\037\274\357?\311\321N\326\363\276\327\277\311\321N\326\363\276\327\277\340h\213\241-a\367\2772\332_\014l:\364?M\307]7\310\226\370?\311\321N\326\363\276\327\277R\035\037\227\352P\355\277\304{\215v\321\004\363\277-\332\303\302\037\274\357?2\332_\014l:\364?\304{\215v\321\004\363\277\340h\213\241-a\367\2772\332_\014l:\364?2\332_\014l:\364?\340h\213\241-a\367\277\311\321N\326\363\276\327\277\311\321N\326\363\276\327\2772\332_\014l:\364?\033C#A2\230\344\277\366\377\307lg\003\347?\177K\230-^\225\334?\033C#A2\230\344\277R\035\037\227\352P\355\277M\307]7\310\226\370?\366\377\307lg\003\347?R\035\037\227\352P\355\277\304{\215v\321\004\363\277R\035\037\227\352P\355\277nu\\\251\0146\271\277\177K\230-^\225\334?\033C#A2\230\344\277M\307]7\310\226\370?-\332\303\302\037\274\357?M\307]7\310\226\370?\311\321N\326\363\276\327\277\340h\213\241-a\367\277\177K\230-^\225\334?R\035\037\227\352P\355\2772\332_\014l:\364?\311\321N\326\363\276\327\277\033C#A2\230\344\277$.A\003\333G\306?\304{\215v\321\004\363\277\366\377\307lg\003\347?\340h\213\241-a\367\277nu\\\251\0146\271\277M\307]7\310\226\370?\340h\213\241-a\367\277-\332\303\302\037\274\357?R\035\037\227\352P\355\277\340h\213\241-a\367\277\340h\213\241-a\367\277R\035\037\227\352P\355\277\340h\213\241-a\367\277nu\\\251\0146\271\277M\307]7\310\226\370?\304{\215v\321\004\363\277\311\321N\326\363\276\327\277\340h\213\241-a\367\277R\035\037\227\352P\355\277\177K\230-^\225\334?\304{\215v\321\004\363\277\177K\230-^\225\334?$.A\003\333G\306?\033C#A2\230\344\277\366\377\307lg\003\347?\366\377\307lg\003\347?\340h\213\241-a\367\277\311\321N\326\363\276\327\277M\307]7\310\226\370?$.A\003\333G\306?\177K\230-^\225\334?\304{\215v\321\004\363\2772\332_\014l:\364?nu\\\251\0146\271\277nu\\\251\0146\271\277-\332\303\302\037\274\357?\304{\215v\321\004\363\277\311\321N\326\363\276\327\277\311\321N\326\363\276\327\277\366\377\307lg\003\347?R\035\037\227\352P\355\2772\332_\014l:\364?\304{\215v\321\004\363\277\311\321N\326\363\276\327\277nu\\\251\0146\271\277\177K\230-^\225\334?\304{\215v\321\004\363\277M\307]7\310\226\370?\340h\213\241-a\367\277-\332\303\302\037\274\357?R\035\037\227\352P\355\277nu\\\251\0146\271\277M\307]7\310\226\370?-\332\303\302\037\274\357?\340h\213\241-a\367\277$.A\003\333G\306?\304{\215v\321\004\363\277\177K\230-^\225\334?M\307]7\310\226\370?-\332\303\302\037\274\357?M\307]7\310\226\370?\366\377\307lg\003\347?\366\377\307lg\003\347?\033C#A2\230\344\277-\332\303\302\037\274\357?-\332\303\302\037\274\357?M\307]7\310\226\370?\177K\230-^\225\334?\340h\213\241-a\367\277\311\321N\326\363\276\327\277-\332\303\302\037\274\357?$.A\003\333G\306?\340h\213\241-a\367\277-\332\303\302\037\274\357?nu\\\251\0146\271\277M\307]7\310\226\370?nu\\\251\0146\271\277R\035\037\227\352P\355\277M\307]7\310\226\370?M\307]7\310\226\370?2\332_\014l:\364?\177K\230-^\225\334?2\332_\014l:\364?\366\377\307lg\003\347?R\035\037\227\352P\355\277\177K\230-^\225\334?nu\\\251\0146\271\277\304{\215v\321\004\363\277$.A\003\333G\306?$.A\003\333G\306?M\307]7\310\226\370?\366\377\307lg\003\347?-\332\303\302\037\274\357?R\035\037\227\352P\355\277M\307]7\310\226\370?\177K\230-^\225\334?R\035\037\227\352P\355\277\177K\230-^\225\334?\340h\213\241-a\367\277\311\321N\326\363\276\327\277M\307]7\310\226\370?$.A\003\333G\306?\177K\230-^\225\334?\304{\215v\321\004\363\277\340h\213\241-a\367\277nu\\\251\0146\271\277\304{\215v\321\004\363\277$.A\003\333G\306?M\307]7\310\226\370?nu\\\251\0146\271\277\304{\215v\321\004\363\277\340h\213\241-a\367\277\311\321N\326\363\276\327\277\366\377\307lg\003\347?M\307]7\310\226\370?M\307]7\310\226\370?\033C#A2\230\344\277\340h\213\241-a\367\277R\035\037\227\352P\355\277R\035\037\227\352P\355\277\340h\213\241-a\367\277\177K\230-^\225\334?2\332_\014l:\364?R\035\037\227\352P\355\277nu\\\251\0146\271\277M\307]7\310\226\370?$.A\003\333G\306?\311\321N\326\363\276\327\277\304{\215v\321\004\363\277$.A\003\333G\306?\304{\215v\321\004\363\277\177K\230-^\225\334?\304{\215v\321\004\363\277nu\\\251\0146\271\277\366\377\307lg\003\347?M\307]7\310\226\370?nu\\\251\0146\271\277\340h\213\241-a\367\277-\332\303\302\037\274\357?\311\321N\326\363\276\327\277\366\377\307lg\003\347?nu\\\251\0146\271\277\311\321N\326\363\276\327\277-\332\303\302\037\274\357?R\035\037\227\352P\355\277\304{\215v\321\004\363\277nu\\\251\0146\271\277M\307]7\310\226\370?-\332\303\302\037\274\357?nu\\\251\0146\271\277\177K\230-^\225\334?\177K\230-^\225\334?\340h\213\241-a\367\277R\035\037\227\352P\355\277\177K\230-^\225\334?\340h\213\241-a\367\277-\332\303\302\037\274\357?-\332\303\302\037\274\357?\340h\213\241-a\367\277$.A\003\333G\306?\177K\230-^\225\334?\366\377\307lg\003\347?-\332\303\302\037\274\357?\304{\215v\321\004\363\277R\035\037\227\352P\355\277-\332\303\302\037\274\357?R\035\037\227\352P\355\277nu\\\251\0146\271\277"
      }
    }
  }
}
node {
  name: "tensors/component_6"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 750
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 750
          }
        }
        tensor_content: "\021\314\200n\031\261\342\277d22;\004m\340\277\030\330[\243\235h\334\277\207L#\003(\001\354?]\031C\205[\332\334\277\275q\233\247\004\033\276\277\233Q\300\212\037\310\355?g\265,\324P\377\002@\352,A\253\035\224\213\277\242\236\213\035\305O\352\277\304\272}\250\305\310\345?\005\204\300\346\235=\332?\370\217\034 \331\377\366?\251MK\027\254}\345\277*\327\276\230\361U\344\277^!9z\321\343\361?\264\276J\375\307\205\323\277\313+\026~\244\314\355\277\371\260\314\231@\217\355?pu(\306\211U\351\277\217\376\377\305\340\033\374?3\204}\317\373\236\357\277\241Z*g\031L\335\2770\020:\036`\030\251?\372\240\256\320\316\204\337\277d22;\004m\340\277\2710\005L\354\303\272?\220~3N\377\035\347?\326\226\333\321\034\373\341\277\356\264\000\377\177P\341\277h\034\221-\016\250\263?=\334[ \351\034\346\277\356\264\000\377\177P\341\277\217\277\274\233\343\351\343\2775\017\tvlL\331\277\332P\340h\321\026\353\277uV\257L\341\306\360\277D4\342\217G(\307?fKS\3202\367\327\277\'TnG\001g\344\2775Sj,\030P\346\277\nd\204T\272(\316\277\216U\215\337!\205\333\277\017\217\233\310\023\006\022@\r\266i!8V\357?\203\202\000\243\001\333\324\277\316\347\033\3305\315\346\277-\373\213\333*\322\357\277\377#f2\374w\345\277\265_\307\356\020\023\337\277\221U\364\357^\211\341\277^!9z\321\343\361?=\321\003\002\227q\367?\r\352\254\016rO\356\277\241Z*g\031L\335\277\206\375\025\237q\013\353\277\260V]\022\027\217\357?\267l\376\037\rT\274\277q\210\017\311\024\006\347\277\230\323\215\305\335\252\362?\251s\031\035\302\336\340\277_\363\333\217\202}\347\277\216U\215\337!\205\333\277Zx\306\223\022M\321\277i\364\305\266\361\215\370?\200\341\265\220>E\315\277\211\271\033\371\002\014\344\277\245+h\304\364\374\270?g\217\264\206\336\372\344\277\007\323%,\343\245\340\277\261\326<\013}J\345\277d22;\004m\340\277I\024\246\375c\023\333\277a\211\023\344\375\034\345\277\016I0\035)\302\342\277\026\277\210\022\313\001\234\277f\227Ck\027\000\364?\323\226t\301\337\366\333\277\321\243\313y#q\002@\366\361U\347$[\352\277}@9\237\365\267\301\277\221&\313<\3755\267?\030\034\275YIl\351\277\372K\"zj\000\360?-<|9L\242\322\277?\342\225\262\214\366\337\277\265\266\017\250G\307\351\277\342-\375L\007\253\360?o.\376\325\304\253\354?\251s\031\035\302\336\340\277\233\002\263&i\322\354\277p\036\340\014S\241\336\277/\345\356\037\0139\363?a\211\023\344\375\034\345\277l\260\313\020\203\216\361?\007\303\007cq\233\302\277x7\317\302\3733\342\277\350\372\224W\2160\322\277i\3546\322\270\210\351\277V\367\267\0233\314\325?\352,A\253\035\224\213\277\341:?[\333Q\276?\372\275j\333y\324\300\277\217b\304\020\036\306\270\277\356\264\000\377\177P\341\277\265_\307\356\020\023\337\277\246\244,\300\245-\352\277\310\303\347\204\277L\325\277\t\035\301t2\203\347\277\253\214:\262\360h\330\277\007\323%,\343\245\340\277zP\360W*\276\331\277\225H\256\217\264\266\343\277\326\226\333\321\034\373\341\2773\366\347\340=\302\341\277)\314fz\237\252\365?\302\221>J%4\340\2773\376v\305v\307\360?\230\323\215\305\335\252\362?\022\013\304\230\026\343\372?SV\324\021\255:\344?x\021\001\275\345\322\346\277*\355\026\364\006:\354?x7\317\302\3733\342\277\352\243\007>M\307\362?\260\303U\010\362\231\347\277d22;\004m\340\277AA\031\301Ci\324\277\253\214:\262\360h\330\277\306KC\341\331O\351\2773\366\347\340=\302\341\277\365\366\307\002\214s\344?\356\274\217\343\270U\360?\277\221\3279\350/\332\277n\343\027\341%\335\234?\265_\307\356\020\023\337\277Dx4\027E\232\343\277+\335\370*\225/\336\277\302kpD\017\323\344\277\267\020\311\271\010\257\336?\310\303\347\204\277L\325\277\211\271\033\371\002\014\344\277\234\260C\231\326:\342?\350}\362\266\262\252\250\277\334\310\204\014\267\023\327\277\002\201\350}\326\005\352\277\021\314\200n\031\261\342\277>nl\tb~\016@\032\237\r\2539[\351\277\352\243\007>M\307\362?\371\032}\352\367\376\021@\232\025\232)\364\202\352\277\342\273M\333\272\322\311?\233NO2\225\224\343\277)\304\327\225f\245\346\277\330\363]\035\367\210\346\277\020\271\231k\216\000\345\277\366\300\352b\262\231\313?\257\361\262\362@\000\362?>.\206Mq\377\373?\230\323\215\305\335\252\362?x`\016!\234\310\347?\372\240\256\320\316\204\337\277\0317\337\261T\333\320\277i\3546\322\270\210\351\277\253\214:\262\360h\330\277\324m\360\0025\255\361\277\335\330\242\325(\036\345?\374\250\244\305D\216\364?\221&\313<\3755\267?\335\346\027\275L\266\350\277V\020\331\250aV\355?5\300\nAd\350\330?\037\265x\207\323\374\361\277d22;\004m\340\277_\363\333\217\202}\347\277Zx\306\223\022M\321\277\006\300>)X\365\342\277T\222f\325\220\306\257\277\302\221>J%4\340\277\237\271\255u\320\276\321\277\237\271\255u\320\276\321\277\356\374u\237\251\324\002@\"\025\030\234\177w\353\277]\226YD\250\357\342\277s\013`\032\005\365\346\277\315\354\215\363\234\345\340?\021\317\361\306\243\344\354?\204\316\360=\346\343\360?\004\323\276\033\246\241\332\277\007\303\007cq\233\302\277/\315Ar`)\306\277\366\300\352b\262\231\313?\220\034\351.\032\033\013@\030\034\275YIl\351\277I`\226\230H\034\367?T\222f\325\220\306\257\277:8\257\344I\345\344?\366\300\352b\262\231\313?e\323\256,M\372\353\277\341YJE\313\232\312\277\016Q\277\001b\307\361?X}\321\236<a\345\277\030\330[\243\235h\334\277\356\264\000\377\177P\341\277 \222\307J\217\210\353\277\245Js\256\344E\305\2775\017\tvlL\331\277\245+h\304\364\374\270?RS\355y7q\263\277?\342\225\262\214\366\337\277$\263\336\3243\034\370??\342\225\262\214\366\337\277zP\360W*\276\331\2778\326\272}\010?\346\277\300B\331\004\340\313\331?V\367\267\0233\314\325?zP\360W*\276\331\277R\367P\003\366\307\357?+)\351\305y8\372?\203\202\000\243\001\333\324\277Cj\277/!\002\340?F\234\001Z~\026\357\277\235\276\270\200\372\322\345\277\340\2176\024S\006\344\277\227\207\235*\371\241\326\277\216U\215\337!\205\333\277p\215\201\344{\036\341?\2265\307\214)\006\346\277\227\207\235*\371\241\326\277>.\206Mq\377\373?V\020\331\250aV\355?\251s\031\035\302\336\340\277\nV \305/8\003@\265\266\017\250G\307\351\277\tC\217zH\344\342\277_\003\246\311;A\360\277?Q7\212\265s\342?A\223\227}\204\222\337?\225HV\256%D\316?\245G\252t\313\237\345\277\350\372\224W\2160\322\277\244Z\221wVP\343\277\225HV\256%D\316?\341YJE\313\232\312\277I\024\246\375c\023\333\277zP\360W*\276\331\277R\367P\003\366\307\357?\tC\217zH\344\342\2777\270{\\+\343\371?\200\341\265\220>E\315\277\302\221>J%4\340\277\327\373\354\0010\216\365?\372\240\256\320\316\204\337\277\314t\351O\267\350\324?\346\206k\256c\270\000@\334\024u\247\233\034\363?\275\241\365\002Z:\350??\342\225\262\214\366\337\277\234\260C\231\326:\342?\372\240\256\320\316\204\337\277\305\252\024\364\354\345\224\277\356\264\000\377\177P\341\277z\224Q\016\326\301\346\277\227i~\230\324\216\241\277\362\025\376D\025c\000@\234\273\233\267(\346\360\277\221U\364\357^\211\341\277-<|9L\242\322\277\377#f2\374w\345\277\204\222\036ls\345\342?\315\354\215\363\234\345\340?-\216\372\365\214\313\335?\267g\275\343\206\034\364?\267l\376\037\rT\274\277Dx4\027E\232\343\277\255\0327\261\353I\354\277\030\330[\243\235h\334\277\030\330[\243\235h\334\277\351\233xY\024\302\343\277\324\365\367\317\226i\320\277\007\303\007cq\233\302\277N\204v\\\006V\343\277\356\264\000\377\177P\341\277x$\350\277p\203\344\277\222\247\331\274\334\266\302?X\032t-O\246\254?\371\3771\337\205\367\323\277\354\370\372\244\356O\350\277\253\214:\262\360h\330\2773\376v\305v\307\360?\'A\207Dv\266\346\277\272\261\023\314\313D\306?\335\014\346\302b\027\344\277\342\354\270_-\224\350\277]\031C\205[\332\334\277fKS\3202\367\327\277\217b\304\020\036\306\270\277\350\372\224W\2160\322\277]\031C\205[\332\334\277n\343\027\341%\335\234?\346\233\021I\327\275\335\277_\031\252\225\230\336\342\277\241Z*g\031L\335\277\263lt_\370\351\342\277\2710\005L\354\303\272?zP\360W*\276\331\277)\304\327\225f\245\346\277x7\317\302\3733\342\277.\006\237\231r\310\351?+\335\370*\225/\336\277\030\330[\243\235h\334\277\004\213\344\321Yk;?\3456T\250|q\357\277\004\323\276\033\246\241\332\277\222\247\331\274\334\266\302?\031\350\340|Lw\320?\272\261\023\314\313D\306?\372\240\256\320\316\204\337\277\025\254S\013\344-\347\277o}c\033\n\024\323\277*\355\026\364\006:\354?\302\221>J%4\340\277\356\241\031\374\364\237\343\277\004\323\276\033\246\241\332\277\r\266i!8V\357?\243\013,2\021\350\334?p\036\340\014S\241\336\277U\357(/\372\306\366?\227l{\322\3552\357\277x7\317\302\3733\342\277\271\205\246L\300\033\003@\302\221>J%4\340\277\365\366\307\002\214s\344?>NP\362?\252\261\277L\356>\010\213\266\345\277\323\226t\301\337\366\333\277\257\222/\344\211\215\375?e\037K8y\274\342\277\203\202\000\243\001\333\324\277\330\006E \2029\344\277-<|9L\242\322\277\267\247\243\237w\233\006@\324\246\371\232\216\005\320?\356\264\000\377\177P\341\277x7\317\302\3733\342\277\233Q\300\212\037\310\355?\254\205\210j\253\360\022@\323\000\244}\241[\344\277o}c\033\n\024\323\277\372\275j\333y\324\300\277C\322\336\371W\360\307\2773\366\347\340=\302\341\277\341:?[\333Q\276?\005\204\300\346\235=\332?\351\233xY\024\302\343\277\251:d\024!\315\347\277\221/&\352H(\346\277L\024\r\016\241\027\341\277\277\221\3279\350/\332\277\374Q\260\233\306 \337?]\203rA\035?\345\277\375\215.\336\200\330\347\277\351\304\267\267\264V\351?6\037\'?\336V\347?\007\303\007cq\233\302\277\275q\233\247\004\033\276\277[e3 @\343\370?\277\373\006\366\251\224\342\277\266\243(\245\274\026\354\277\321v8/\374\341\277\277\225\"\340\211\236U\350\277\342-\375L\007\253\360?\222\247\331\274\334\266\302?\nd\204T\272(\316\277\256@\005\267\001\253\347\277^!9z\321\343\361?\326\226\333\321\034\373\341\277\254\343\202k\'\035\343\277\2338\237\365\360=\326?Q\341\370\247\340\343\347\277\204\316\360=\346\343\360?o}c\033\n\024\323\277\r\005\317f}\276\325\277d22;\004m\340\277\221U\364\357^\211\341\277F\234\001Z~\026\357\277\326\226\333\321\034\373\341\277O&|[\212)\023@+4A\344\313\343\350\2775\017\tvlL\331\277sG\206{0:\352?]\031C\205[\332\334\277\246\254vD\324}\304?\032\330\302\263\332l\342\277\2076\313\247\022\035\344\277\346\030(\010$\323\343\277\210\'_\237B\361\000@\341YJE\313\232\312\277\200C\271&.}\314?o}c\033\n\024\323\277\372\240\256\320\316\204\337\277i\377\035\325C9\347\277P\316\021\245U3\352\277U\324\262G6\021\352\277X9\177\027?\357\310?RS\355y7q\263\277\204\316\360=\346\343\360?^)\310^\n\351\320?Yj\224\343\rT\n@\256\330*M\325q\364?:8\257\344I\345\344?C\322\336\371W\360\307\277\032\262\364\255\304\013\347\277\260\303U\010\362\231\347\277\326p\r\314\006\232\346\277W\327{\201O\267\311\277]\031C\205[\332\334\277d22;\004m\340\277\240jH0\213V\353??\342\225\262\214\366\337\277\220~3N\377\035\347?Q\007\307\255\366D\343\277?\342\225\262\214\366\337\277x7\317\302\3733\342\277IX\007\264\017\027\350\277\000\021\177/q\307\347\277\314d\313\206E\336\346\277\237T\360\324ur\343\277Z\023\t\363\267\000\343\277?\342\225\262\214\366\337\277}\336\354V%\237\355\277p\036\340\014S\241\336\277\251s\031\035\302\336\340\277\026\350yl\017s\352?L\024\r\016\241\027\341\277\302kpD\017\323\344\277\351u\252S\376`\350\277*\327\276\230\361U\344\277\225\374\021\204\210\364\354\277\200\255\331\263AP\344\277\245Js\256\344E\305\277\007\303\007cq\233\302\277\351\304\267\267\264V\351?mo1k\005\033\014@I`\226\230H\034\367?3\320\031\333\'a\346\277\214\361\203(T-\360\277\361\305\346>.\034\357\277m]\'\211&\377\266\277F\244\220>\267\033\376?\302\221>J%4\340\277\032\330\302\263\332l\342\277\002\247\266\203\354f\345\277\277\221\3279\350/\332\277Nq\217Y{\245\345\277v\203XM\2438\370?\372\240\256\320\316\204\337\277SV\324\021\255:\344?\245\017~ye\324\020@\033\340Q\230\023r\361?\265_\307\356\020\023\337\277>NP\362?\252\261\277}\027L\247\"T\t@n\343\027\341%\335\234?8\326d\305d\342\010@\200\341\265\220>E\315\277Zx\306\223\022M\321\277\007\323%,\343\245\340\277\326\226\333\321\034\373\341\277\030/\244\\\324\034\347\277[\000\"\360,P\345\277\332=\371eFf\355\277\227\207\235*\371\241\326\277\007\323%,\343\245\340\277\261\326<\013}J\345\277\210\253\246\021\337s\340?X\032t-O\246\254?\345\253/\022I\310\353?5Sj,\030P\346\277\344\212\177\230\3418\365?\271O\0206\334\014\307\277fKS\3202\367\327\277\023\0035\264\335\335\353\277\211\271\033\371\002\014\344\277&3\022]R\036\343?\032\330\302\263\332l\342\2775[\371\020QU\365?\345\253/\022I\310\353?\265\316h\3069\220\341?\323\226t\301\337\366\333\277\2338\237\365\360=\326?8\351\241\200\223\357\343\277\253=<}\350\004\330?\251s\031\035\302\336\340\277\004=\356\327g\006\343\277\263N5>\033\216\366?G\325\266b\037(\350\277\233Q\300\212\037\310\355?\354\013\342\247y\000\346\277\372\240\256\320\316\204\337\277_B\351\3638s\350?\372\240\256\320\316\204\337\277\260\351#\016\010\373\342\277\221U\364\357^\211\341\277\323\226t\301\337\366\333\277l\260\313\020\203\216\361??\342\225\262\214\366\337\277\004*\007\325\334U\345\277\361\266z6^\360\013@\004\323\276\033\246\241\332\277\346\030(\010$\323\343\277\256S\354\271\214[\345\277?\342\225\262\214\366\337\277#r;\375SM\020@?\342\225\262\214\366\337\277d22;\004m\340\277\360\315!\224\256\332\330\277bP^\333\\\013\354\277\336y2H\366h\361\277\007\323%,\343\245\340\277\243\003\235M\330\342\375?\274,\032\231\215\343\353\277D4\342\217G(\307?\344\202\360\263\2503\346\277\323\332\325w\213\372\350\277\221E\326&\355~\303\277\004\323\276\033\246\241\332\277\0166I\032\236\021\345\277\232u_H\323J\215?AA\031\301Ci\324\277Z\010\261\324eU\364?\034*\250\200X\232\303?\321v8/\374\341\277\277\265_\307\356\020\023\337\277\026\277\210\022\313\001\234\277]\031C\205[\332\334\277E\003\024Mn\216\362?\267_.\377M\027\345\277\200C\271&.}\314?p\036\340\014S\241\336\277\323\226t\301\337\366\333\277\356\264\000\377\177P\341\277}*\211bQa\344\277\363\201\354\230\277\034\350\277\346\233\021I\327\275\335\277\374\350\212\2015\r\007@\007a\273\032\241\202\356\277\324\246\371\232\216\005\320?\346\233\021I\327\275\335\277l\356\247\3274\315\021@x]G\020n8\000@\351\304\267\267\264V\351?\314d\313\206E\336\346\277A\223\227}\204\222\337?RF\266H;0\326\277\036\001\002\022{\001\350?\370\232t>+\253\345\277\214\003\267AR\351\352\277\314\215\n\345\345r\354?L\310p\002uU\352\277sG\206{0:\352?\004\323\276\033\246\241\332\277\241Z*g\031L\335\277\237A\t\322\352\301\345\277G\373\204h5\211\343\277\270r\025\002\331\307\342\277\277\3258\360\2233\347\277`\006\303\222\r.\345\277\311\323\005N1W\343?\200\265h\230zU\363?\220\034\351.\032\033\013@\237A\t\322\352\301\345\277\362\231\356\026.&~?\030\330[\243\235h\334\277\2320\020\021\2708\367?+\335\370*\225/\336\277\334\024u\247\233\034\363?\225\"\340\211\236U\350\277;3=\311\342\314\352\277\304\272}\250\305\310\345?\243\013,2\021\350\334?x$\350\277p\203\344\277\227\207\235*\371\241\326\277\036i!\334\261\357\317\277k\250<,J\211\342\277\2320\020\021\2708\367?\324\365\367\317\226i\320\277k\202n&4(\347\277}\027\242_\306\260\346\277!\nl\356t\205\327\277@\022W\036\037\032\260??\342\225\262\214\366\337\277V\301\313D\253`\354\277^\201\022\224:\242\025@@\022W\036\037\032\260?\272\261\023\314\313D\306?\274,\032\231\215\343\353\277\017%\013\371`\323\301?\334\310\204\014\267\023\327\277\275\200E\211\362\252\361?\221U\364\357^\211\341\277\324\246\371\232\216\005\320?g\242\233\211i\253\342\2776@\203)\215\237\350\277\265_\307\356\020\023\337\277\324Gv\214\327\222\333?\270oL\310\277!\323?\243\013,2\021\350\334?\216U\215\337!\205\333\277RF\266H;0\326\277z\224Q\016\326\301\346\277\233Q\300\212\037\310\355?\263F\246Y\342\210\347\277V\rhP\327\"\343\277\333vX\266C\033\t@_\031\252\225\230\336\342\277\230\323\215\305\335\252\362?\373\037nqi\014\300?\265_\307\356\020\023\337\277>NP\362?\252\261\277L\024\r\016\241\027\341\277\225\"\340\211\236U\350\277\326\226\333\321\034\373\341\277]\031C\205[\332\334\277?\342\225\262\214\366\337\277\225HV\256%D\316?e\371|2c[\347\277\210\253\246\021\337s\340?\356\264\000\377\177P\341\277SV\324\021\255:\344?\215\346R\0306\014\317\277\244\203\320\325\366\344\350?\030\306\207\352\251`\315?\"\003\272\246/\r\022@\007\006\000\017q\212\245?\253\214:\262\360h\330\277\354\000\212\211\'U\367?\2265\307\214)\006\346\277\272\261\023\314\313D\306?p\036\340\014S\241\336\277\356\264\000\377\177P\341\277\327\373\354\0010\216\365?w\330K\264D\301\355\277\337\373\305\377\201\374\241?\261\326<\013}J\345\277-<|9L\242\322\277\023\0035\264\335\335\353\277YX\212\001/8\265\277\275\236.\362+\252\000@\326\226\333\321\034\373\341\277\272\274\260J(\245\351\277L\024\r\016\241\027\341\277\326\236j\266U\000\361?x7\317\302\3733\342\277\035H,\002@\253\344\277\007\323%,\343\245\340\277\275?\001\234\030\224\351\277K\001&\013\026g\343\277\334\024u\247\233\034\363?\315T\255\275\323\323\310\277\256@\005\267\001\253\347\277|\371b>\351T\372?\2265\307\214)\006\346\277\243\013,2\021\350\334?\344\\\"\256\222\322\352\277\335\330\242\325(\036\345?h\331O\317-\330\353\277m]\'\211&\377\266\277\375\240\025\341\013\211\345\277\302\221>J%4\340\277\251s\031\035\302\336\340\277\305\252\024\364\354\345\224\277{\2478\021ar\344\277\221&\313<\3755\267?\036\001\002\022{\001\350?\221U\364\357^\211\341\277\373\035\305\217\033\232\345\277\302\221>J%4\340\277RF\266H;0\326\2773\366\347\340=\302\341\277\241Z*g\031L\335\277B\362\032\214;\005\324?\005\204\300\346\235=\332?\200\265h\230zU\363?\337\373\305\377\201\374\241?;Y\013\317\370-\346\277?\342\225\262\214\366\337\277\232\025\232)\364\202\352\277\265\331\300\344\213;\360\277\272\261\023\314\313D\306?\t\035\301t2\203\347\277I`\226\230H\034\367?\326p\r\314\006\232\346\277\037\313|S0\232\344\277\371\260\314\231@\217\355?\216\231\356\225\315\210\350\2778\326\272}\010?\346\277a\211\023\344\375\034\345\277P\316\021\245U3\352\277\016#b\027\023a\347\277.\202W\'\326E\n@[\332S\352\026\357\351\277l\260\313\020\203\216\361?\270\210m]\356\253\352?\030\330[\243\235h\334\277\374\250\244\305D\216\364?\204\263zV\".\344\277\223\214\2505#\266\352\277\304\272}\250\305\310\345?\221U\364\357^\211\341\277\251:d\024!\315\347\277\302\221>J%4\340\277Ee\367[\026\215\010@U\372\200MLr\345\277\r\266i!8V\357?\204\263zV\".\344\277?L\305nN[\350\277\326\226\333\321\034\373\341\277\366\027$\355:\274\345\277\005;\216*\205i\023@\263lt_\370\351\342\277r&\326\001\311\252\363?_\363\333\217\202}\347\277K=LlA\254\346?\342\022\207eC\365\343\277]\031C\205[\332\334\277Nq\217Y{\245\345\277S\212\027\377\3463\343\277\t\374d\212\203:\346?\356\2162\371i\357\345\277\356\241\031\374\364\237\343\277\346\233\021I\327\275\335\277\326\226\333\321\034\373\341\277\211\271\033\371\002\014\344\277Cj\277/!\002\340?ERf\021/9\350\277\270LG\374\302f\347\277gD\314d?-\361\277p\036\340\014S\241\336\277\177a=\250\025\216\355\277-<|9L\242\322\277\007\006\000\017q\212\245?\033\310\244\352hb\304\277Zx\306\223\022M\321\277\337\373\305\377\201\374\241?-<|9L\242\322\277\272\261\023\314\313D\306?\'\215\315\227\376\033\000@E\352\213\247\002\000\365?"
      }
    }
  }
}
node {
  name: "tensors/component_7"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 750
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 750
          }
        }
        tensor_content: "\240F\3267/;\362?6\214\256n\377\365\362?@\251k\'/9\367\277\006\347\245\026(W\347?\2500F\024\362\312\341\277\023l\3569NZ\367?Xy|(\342>\367?:\231\376\237u\371\276?\3228\205sI\235\332\277&\314\217\372\037\305\315\277\035\214\356\373\201F\215?\206\227\0050}\206\364\277\236\321c\312^F\366?\305=\261\'\025E\344\277\032\250Dw%\324\340\277\242\202\341\032\244\217\330?%\231\200\2134\305\341?(\233\315\273\216e\357\277|\005\326\t}N\364?\211>\222!=\325\377\277  v\367\355\\\346?\231\005?`\347\263\335?\245\r\212g\262z\345?t\275\314>\350\337\355?\254e9H\031\262\325?z\243\37684v\335?\221\032\373]0\267w\277C\217\235!{\317\366?\003\263U\202\301\217\327\277\246\004\341FO?\345\277u\021\377\262\267\203\347?PY\345\242\333\207\360?\203z\323xo\351\347\277y\260?\200\r%\315?\221\030j\265+\n\304?\276\346\244\346n-\330\277\356Fbi\n\013\331?}\340\210\353\'0\352\277\014\337\"aa\003\262?J\202\233d\302\272\335?\350\234\374\307\022/\351\277\326\231\335t\023\020\353?C%\366CM\233\325\277\345\014\216=_p\020\300\301\246\312K\'\277\362?.\006\331\256\\\037\336\277W\2660\177Q-\331?lC3\324\346\326\321?*\002\344\270D\221\217\277\003Ka\301`j\302\277-/\0308\'+\327?\306:\274\240_\361\350\277p\020AY\030\204\332?\004|\232#Z\235\330?\034\305\240\322\256\245\302?\326\244\371\324$\334\021\300\252b_{B>\343?\254\025\237\372\277\201\333?\227Y\214\216\2257\340?T\277;\240\365\353\225?\332\305BB\266\233\347?C\366j2\322\217\325?\036\356\\\220\235\351\344\277#.u\230f\013\323?\341\307\276\365\364\232\341\277\222\221\300\300s~\340\277\346_\331F\377`\306\277>*\354\203[\203\355?k\263\365|\242\336\361?\323\'>\343@.\314?\240\204I\005\335\017\357\277lKOX\315>\355?u\021\377\262\267\203\347?Y\204\374]\"\332\356?\316zmwH\'\275?\214\342\351\344\207O\333\277\351\227\272\020\003;\340?f\022\304\375/\344\331\277)j&7\334\345\351?\216\025\334_V\242\322\277\270\023h\315\251-\355?\313zzd)\231\367\277\240\263\243Y5\357\346\277\361;e\241x\243\231\277#\237\200\234\343\270\327\27743\027\220}\212\300\277\321`\353\350\225\311\315?\350\341\220~\221sS\277\210\r\263\003C\034\311\277d\247\270\nb*\353\277\352pK\203n\227\313?\237=\323\322\314\205\302\277\250\001\007zx\313\322\277>$\225\242}8\023\300\304}o\353\336\354\362\277\000\246\203=\276)\313?\005\317?\373\254m\355\277tWcC1\245\314\277\274n\0145\306\270\330?\2216a\217\343p\265?\213%\367s\006\305\344?\007\3642\325\002\022\330\277\374G\235\367\315B\277\277\250Z/.VW\344?\017\255Uq\022\234\341?\316\315-\tz\327\312?\244\247\324\364\3713\343?uT\263\032\326e\377\277\222\221\300\300s~\340\277\225\350\226\215\\\326\332?\316\207|!\342\255\320\277s\323b^-a\303\277\205jl\355\275\272\344?\'SM\270\335\317\324?\350\202I|=\245\341\277\374`\3179\346\231\364?\236\334.Z\001\007\321\277\247\003\255\3212\377\361?\031\326\305\267\377\323\342?\226\306n\276\016\350\263\277u2?\254\270\324\351?\230\023Y\273>B\323?\r\371<\336\026y\323?7\302\325\027C\035\332?\246\313\356\272\321\370\327?\232q\327\3571A\301?f\'PL\324Y\341\277\333W\350\2033\024\376\277`yR\204f\n\302\277\304-J\234c\026\341?r@o\nT\257\336\277\356\224\021\001O\363\305\277\270\333NU\252\306\325?\374\323\365\223\373\324\360?\330\217\033\231rt\360\277\240\031\343\260p\365\362\277\205g\355\201\205\247\377?\273\365\354\316A\266\n\300@\t\254\212Z2\353?\216W\260\212$6\223\277\275D\2316\337l\374\277Z\336.\343\240q\336\277\213\t\016\3337\343\242?P\332e\377\007\322\326?}\033\227\352\334\352\334\277K\244\345.d\027\316\277NQ@W\021G\351\277\230\260\311\214^{\324\277V\026\027\236}\254\355?\315\221\255\'\')\354?\351\231|?;5\366?\216=B\325\242\316\305?\372\271\235\251\304\253\346?\207\207\371\005j\270\336?\275r\277\025\033\014\341?\206\304\370\266;\314\363?\203\241\307\013\036\"\357?X\240\273\025\363\234\361\277\341\273e\2546 \364?k\265\234\361\373\370\356?U\374cR\250\"\346?\373\274wv\233\037\331?\2253\'\322\241\237\331\277a\267\323\036\022M\335?xr\276\345a\342\321\277b\026+g\203+\321?\336Y\3315Pm\340\277!\221\234\265I\352\303\277\266\366\013r \\\313\277\301\273\314\265Hu\340?\021\036\025\376\215=\325?o\257\234\340L\005\311?O\370\313+2\257\346?\027\304\02362\322\355?\023l3\230\250n\305?\220h6\240\304b\252?\016\026\241Z2\325\271?\350\377\327m\364\001\331\277J+4\302}B\364?(\327M\235\341\023\336?\001eg`\\\r\364?\023(\310\357\221\204\323\277\326?\367f\226\204\354\277N\247s\2049\177\337?\037\025Q#L\"\354?\177\224\373\302\"\315\367?0\260\343\356\265\232\360?NJ\263\251\345\177\356\277-\220\327j\321\211\341\277\033\247kc\247\364\352?\350m\275-\231/\332\277#p\233Fi3\370\277F\334\350\243\0372\326\277\340\302M\273\000H\354?\242ibD\353E\364?\"b\366\351\357\376\352?\236\225\253O\304^\266\277w~&\031\275\261\333?\222y\016.\367\210\325?\325r\351\341d\327\343\277\017\257\242\241l<\357\277\255R\236\253\221\225\360?\200\373\310\323y\215\326?\2115^\377\267\363\347\277\214t\004%\343!\332\277)\310e\341\256J\361\277\264\210\332:z\"\351?\334o\364Z\257\203\350\277\303Wds\352\316\353\277\316\215\301\270\271L\262\277\305}\311/\336f\322?(\267\027u\201\316\311\277\265\225g\371T\335\331\277r\217\316\311\351\247\262?\277\020\030\345Uy\364?wV\300\243p\205\310\277<\357\370>\205\250\343?Z\333\010\237\310\361\332?\220E5\275\370\224\275?\331.\216+\326\324\277?\036\326\252\375 \364\331?\032\352!\"\367\022\020\300\273\301\314\306\367h\326\277?\375\235\233\376\334\360\277!\376\250ap8\337\277\356\364\306bXF\342\277\260\352\367\206\274\365\353?Jqg\225\3247\361\277(ih\335<\346\334?\356\364\306bXF\342\277\310]2\347Y\232\245\277o\257\234\340L\005\311?\217ro\230\252\344\003\300\301\001\345\316\300\212\344?\321`\353\350\225\311\315?\017\007\315,\035\261\261?\004\224L\266\326\222\343\277b8\237\325\240\274\366?\275\016\314\321\232\277\364?oVt,oy\347?\334\n\235\001\217\261\336?(\"\336\341&\335\334\277\361\227\237V$[\327?v\352\n \tK\340\277`xyp\350*\334\277\277\310>\272DP\350\277\236\261\324=\034\203\266?`\225\211Tp\360\274?\017\007\315,\035\261\261?\355C\210\2343\227\346?\322Y\224\257\'\302\324?\231\327\330\331\353\223\344\277\nLW\264G\243\360? i\203\227\033\306\345?\276\244$\364l\213\323\277\356\364\306bXF\342\277ItAb\253\253\363?\213F7m\007\026\347?\010~\321d\327\274\005\300q\250\243kQho?qO\347~C\262\354?\301\273\314\265Hu\340?i\351\354\205b\300\316?\317\306\326\317\013\320\321?\256\266v53\002\324?\244\026z\316wY\231?\270\231\316b\250$\321?\240\263\243Y5\357\346\277+\t5g\362^\263\277\321`\353\350\225\311\315?\"\217\217,\257\312\372\277Zf<\355\370\202\377\277*7\331Zo2\365?\203\320\006\246\227!\336?\254\025\237\372\277\201\333?\316\315-\tz\327\312?\3277\226p\356<\004\300\364q\356\"/\267\317?\3251\370\305\035\326\337\277\000\206M\025^\344\326\277\256\245\234\347\306\343\240\277\333V8\367\221\202\277?g\253P1\330\235\352\277^gT\213\227\374\353?\241T\326\365F\320\374\277X\366cA\371.\300?\362w\223\322?J\370?\205\315,\331\300\255\353?(\363\014U\262\326\360?\202\237 \227\304\007\362?\021i\245B\323\006\324\277{\3431\373\333w\304?\0078\236}\031\374\311?\252\321\364,\331~\232\277\316\226\001\350\002\244\220\277Z\303G\"\257\247\363\277\321\321\224r\315\036\262?/e\212;\315w\361?w\266\344/\036\270\365?4e\025=\357\035\351\277Yo\016\2258\014\267?4~\257\315\206G\366\277\226\340f@p\357\333?\236\366V\244\264\352\360\277  v\367\355\\\346?\017 }\350\306\275\353\277\003\373\277\202.\331\322\277\024\032\256\224:\366\335\277m\204\250\025+q\264\277g\203\203\212\253\205\355\277\231bfl\033\237\350\277\264#/I\306\271\271?\022\370\257A\232\245\356\277\246\346\014\370k\025\266?\214\235C\256\255-\323?\035\n\321\355\013\207\364??\246\353\236W?\344?\357\210\342[\014\255\335?\327\215\317\205\267\272\360\277h\242vSR6\342?i7\234\035\247\250\333\277\r\371<\336\026y\323?W+;\333$:\267\277\300vW<\221\177\340?3\366\002!\325\247\267\277^\177`b\023l\366?A1^w\250j\337?\023\306sOu\365\252\277\026@\023Q.\216\344?\214\210\267_\t\270\353?\005\317?\373\254m\355\277\377\245\317\264\2775\354\277\206~k\237\345\\\347\277\267}\265f\330\347\356?\r8\343\003B\247\345?\335\337\tW\221\244\322?.\371\360\216\343\003\360?\362\331\030XM\234\306?\227G\332\014\3105\353?pX\253Y\205\315\325?<\362x\307\\\242\366\277+\t5g\362^\263\277d=kq3p\351\277NZ\226\017\232\025\263?\367\256x\325\"q\354?\324\301\252\033@(\350?\014\027\243\nAV\343?\023\024\256\203\213\002\350?G\264uA\362\223\370?`~c~S\322\322\277\214a\303\314Z\177\344\277y+W\235\356\254\361?\221\236\001\010M-\340?/\037\261\254u\374\303?\330\322\317\000\221V\330\277\007 \362\346\244\027\364?.\003\263j\204\237\332?\317g\204\2709Z\233\277\257\344C\355\016\016\347\277\331\222\365eI\350\362?^F`\t\230\267\312\277\3023\244\361\021\204\366?\363\245/W\254\217\022\300@\0269I5\355\333\277v?\314j\223\217\332\277\374G\235\367\315B\277\277bry_97\346?c\266[+\270\364\257?\020\221\013\270\0373\307?\343!\245\003r&\340?\000\314\332,\264S\363\277\351\354J\236jS\302?\350\341\220~\221sS\277\n\247&\335~I\317?eW/\373k\330t?0\022pe\234M\324?\242\202\341\032\244\217\330?p\222@\205\3033\347\2778\270n\235@\342\354? A\266\360\356\255\350?\200\014\356\270\312\273\346\2773\212b[D<\363?/\037\261\254u\374\303?\020\366\340%\2019\276?wV\300\243p\205\310\277\177\361aYwR\351?\212\260\320}7\334\311\277`y\331jeA\001\300\302\300}\227\374H\372?\014\003J\024\032:\361?d0E\3448\241\302\277\'SM\270\335\317\324?]\222\373\376\232\210\333?\342`|\346\277\200\312\277\355\214\225<a\000\346?\367\002\253I\362\024\346?YCU\177\236\027\340\277;:z\213\234\266\202\277\311\030H2B`\363?\356\246H\2106\212\355?\035%l7\374D\316?\325\234\267A\352\203\335?C1y1\207J\350?\003Q\363\257V\021\351?\230\345\330Z\201>\245?\364\202\023\010\200\345\357?\252.\026\330\264\327\310\277-\220\327j\321\211\341\277\024\016\372\351\335\032\343\277\374p\334\200\230N\310\277\265~\216zV\307\344\277\214Sg\\@\266\210\277\"\336\365\004\354\272\341?hG\003\251X\327\316\277\232q\327\3571A\301?rC\331\217\347\\\362\277\030\020\373\2426\257\337?3\373\014*\351\016\303\277\023l3\230\250n\305?\177l\324\327\366:\333\277\325\252\274\312\003x\000\300&b\242\241\370\225\260\277\262\373\204}\n\014\272?\253&\337\231\357\217\324\277*\352\t\360O!\301\277\221#6bm\261\374\277\273a\346\247\313\351\341\277(\"\336\341&\335\334\277T\332P-\3127\004\300\362/\272\247.!\354\277$\377\360w\304`\310?\264!\202(\001\274\342?\037!\252l\n\235\371\277\262\270\371\331Jb\323\277&\336\200\006\016a\371\277\234\003>\247\216\037\341\277\300iqVV1\376\277l\210\331\n\301\370\331\277\326+\263.F7\316?0\244\212\245\367\037\323?\223\304\r\235\3401\365\277Q\360\200$g\350\336?[\237\210\275uC\354\277>\236\240\227\214x\334?\301:\001\'\210\234\304\277\220\370\n\241\236\365\240?\356\246\355&\230)\360?&\242\016\362\270 \311?B!\367\353\366;\314?Pz%\234\334\330\362?\360\010\221\266>\"\210?\031\344j\024y\010\360\27773\341\033\300\312\336\277\307\211\311Q<N\316\277!\271\002+\226\026\327?\374\264G)\2578\332?@K\321\033\276s\362?V7W\227~\375\357?u2?\254\270\324\351?\321\204 iLn\313?\017\233\243\357D\232\354?7\343\273\314D\364\374\277pA\215|,\243\362\277\276u\231\342\361\177\323?:7H\205\023\022\326?\314\001\303#\tJ\306?\023]\216\201\271\256\007\300\323^\352/=5\341?%\342\215+b.\341?Dzk\027\326\323\336?_\343S\246\223\270\342?\311\245!\330,%\367?\274\000\'u!\213\327?\272\375L\250J\027\345?\016\320\004F%\316\317\277r\313\346\231?n\343?^\302\023\255\222g\340?2\354\n\251\250\265\355\277/\3430\313\"N\345?\350\234\374\307\022/\351\277\261\365\034[^0\346?RL\376\237\001S\340?\"8\202\316i\314\360?\332(\250\314\032.\361?\203\352yJ\255*\361?\023\030F\252\001v\347?tH\377oy\212\364?\352\325\242\334\216i\345?\016\357!\333\025J\307\277\n\247&\335~I\317?\277\227\343\254\223\334\303\277\003\343\r\360\261\343\347?5\223\342\364\312)\314\277\272u?\236\362\005\364\277R\257\276\213\004F\347?u)\261E4y\322\277\271\251\0324{s\353?\002\004N\351\2624\352?3~\331q\002|\313?\356\215\016$? \006\300\"r]u\241-\356\277&\003\316$c\177\343?\364\231\"\373;\273\326\277w\036q\267\263^\357\2772\262n\214\221\356\306?l\251\350F\237\035\324?J\302\032\236k\310\345\277G\211(\022\356\201\330?\210\r\263\003C\034\311\277\376\177\231{\260\374\301\277D\246\320\344x_\333?\013\204\312pF\204\327?\252\n\341W\3762\313\277t\204\370j\315\001\004\300.\211J\275\245\302\346\277V\342\225L\364\270\325?wV\300\243p\205\310\277\014#x\320\324\243\223\277\003\265@8\326\327\304?f\315\035\307U\302\321?\234\354\333Fo\000v\277\201\363\301r\272u\246\277xV\271\262\227$\323\277\347\226\374\266c;\323?\330\3639\306\333r\315\277\223\034NS\243\211\344\277\246\001\354\277\231\353\351\277R\216~\222\003\365\344?\334\226\215\214\277[\362?C\'HE\177\377\206\277\326\255\334&;\262\355\277T_$>\253\025\355?\337\307r~\363\216\300?\346\217\212\303\026T\341?\233\362\276}>w\361\277\357\346\254\007\001\270\354\277\036\334\224\013\214\233\320?\262wv\313\010Z\362?\346_\322U&\000\321\277\207\031\024F\305\212\335?[.\256v\033\302\357\277\021\nb\303g\247\343\277N!\315G{\007\367\277\320ZR\t\307\301\341?f\353VQ\200\342\001\300r%sc\275\177\362?\023\000\224\027\205\200\314?>\257\305|\335\246\354\277i7\234\035\247\250\333\277T\034~\340\014\214\275\277hk8)\017|\314\277T)\375\224g\356\365\277\006\203R}\354+\252?\316<\354\334\234\344\321?\376\016\360\361x\247\275\277\255\370\021\342\023\204\341?\345\026;\251\247@\312?y\3166Z\305\213\276?|\016\n,\0020\354?}7[\254\210\256U?\014\223\034\21145\224?\231m\213@\275\331\342\277\014\266\343\327\226\367\310?\001W\302\003\343\330\326?W\2660\177Q-\331?\247?\324\213%\032\357\277\0273\305\267#\354\222?_\375\006\362hB\352?q\342\216[\033X\300?:`\351\210#v\337\277|g2\340\337\273\315?\340\302M\273\000H\354?F\374\036\314\177w\312?\344tJ\333\304\366\324\277p@\245~\021o\300\2776)I\344\232c\351?R\216~\222\003\365\344?\2772\0268\366\311\363\277\236\334.Z\001\007\321\277Y\204\374]\"\332\356?T_$>\253\025\355?\330\317\251\274\270\326\324?B\3557-\354\224\373\277\225]\232\320\210\353\365?7\224U\267\205\031\254?He\034~d\254\251\277\373\350\334C>\253\325?K\177\301\227\353F\353?\025w\023\016\360\224\361?W\006\266\372l\303\000\300\022|\2232\201<\303?G\354\2761\247\251\314?G\211(\022\356\201\330?<\211\271\347I\242\367?F\214NV\306\001\334\277\317\371\336M\036o\350\277\211jQ3\337\332\333?\2452b\207)?\347?\245\n\225\340\374&\352?\357\263<x\3610\270\277.\006\331\256\\\037\336\277\364v\005\031$\220\365\277PKq\003\205\177\333\277\205\263y\215\353#\344?\233\366\260\350\263d\320?\240\031\343\260p\365\362\277\366\026\314\246\321\367\306\277\316\262\222\277\211\031\361?*O\346N\212\210\335\2776\2304Z\275-\000@RK+t$\271\000\300\364v\370+C\036\273?2\312\226:\213$\370?b=\206+\022P\322\277\004s\014\275\325A\341\277\035\177\236\274z\334\355?\226\340f@p\357\333?c\332\252\2050}\342\277\237\237\211\355.m\333?\206\220\tX\255\337\330\277\337\036\206\304\331\322\000\300\311\274\273\314\n\241\305\277\236\334.Z\001\007\321\277p\222@\205\3033\347\277\031\256\370\020\323\273\345?`\025\023\311\344\261\364?\030\235\037\243\203\231\346\2778`\323\205\337)\340?\035\323\3200J\200\347?i\351\354\205b\300\316?{\277\374z%\323\306?\034\332]\336uG\342?\305o\257\324\206\330\334?H\347\246F\341\200\306?\231\037\rf\233\035\356?Ey`f\030\314\274\277\035\227PO\367\321\330\277\224d\226\250X\222\321?\310\347G\206/M\334\277\266\001\273\026\336\212\000\300f\271j\214/,\340\277\236\334.Z\001\007\321\277\027BJ~D\342\322?\352\366\342\325\217\272\347?\006NJ\240\242\311\316\277L\025t\376\274\214\351?\260:p)^\345\307?o\036[\264o\022\320?\304\010\375}\016\370\366\277\227\337[\217\262\347\271\277\223P\317\244,}\334\277\205ty#\301{\362\277\346J\025J_^\341?a\237\022\242\370\002\366\277@\204\036\t\332\032\335\277\341Qst\246\306\357??,\203\361xb\320\277\321\\qz\202\276\001\300\244\026z\316wY\231?\000\301\372\312\323\370\005\300\203\367aj&F\337\2770\022pe\234M\324?\264P\301\302z\273\321?(ih\335<\346\334?\244\002\252\0319\353\326\277?\205\253\245V\356\341?q\365\000q\306&\356\277\316\210y\005\242G\364?\2606?4\310]\322\277\366\341jP\361\303\343?I\277@\321\224T\323\277\033a8\220P\377\335?k!\351\tEz\261?5J\211\335\233\264\353?L\223C\025\357\260\264?VV\360\033&4\365?\265\222A\265|]\326?\037HC\236\032u\343?\300\321,a\3206\324\277J\277\232\025\224\316\362?@\310\244\1776\260\006\300\264c\002\033\003^\347?\230\335\214s\231{\351?c\266[+\270\364\257?|g2\340\337\273\315?\362\257\2451\230\271\274?\217\366\234\037\256\345\354?\270SAKR\265\364?\203\352\324\253K\213\356?\031\256\370\020\323\273\345?\365[\037u\321\254\350\277\r\005\226\'\325\363\360?\273\273\342\270\214\301\337\277rC\331\217\347\\\362\277\346\007}\271\276B\360\277M\231\031\202\"p\365?\234$~\240\217p\343\277rf\217@\037\234\311?\333-th\255\341\343\277\036\206\020\260\307\303\337?\354\357U(d\363\354?\303\363\312si\374\356?)^\013[\237\036\265?\315\262\355 (z\356?\251\267\305d.\"\360\277\375\377\265\302<\301\352?\325\216]?\323t\363?\301\033\230\032\226\024\354?@\341\336\343-\032\356?l\325M\024B\251\320?\312\323\332\261N^\272?.\003\263j\204\237\332?A\362\2759\036\202\003\300z\304\006\2049:\262?\213\305\266\020\333\313\360\277\205\301x.d\322\320?\242\234\257 X\371\350?8r;\312\351\354\337?[;C\307\rR&\300\376~\206s\001m\212\277n\007g{\222\034\302?+\0142\347k\246\365\277\255\235R\300\030\031\355?\220h6\240\304b\252?\244\352\210\\\030\026\373\277\347\270p%\201\314\370?\364v\370+C\036\273?\374\264G)\2578\332?\000\204[F\242\244\366?\030\207\360\264\036\004\333\277\350\346\014\252\355\021\023\300xN\211e\253=\324\277j\352 #M\227\317\277  v\367\355\\\346?Z\336.\343\240q\336\277?\000xh\325P\363?\007\234|\003\303y\342\277\303\255_\362\026z\264?\252Gy\327\357Z\366?\031s\203\340=\025\271?aZ\023D\276M\354\277h\233\351\245&o\347?b\026+g\203+\321?\342\224\314z&H\352\277@\237^\361+x\351?\362\257\2451\230\271\274?\014\266\343\327\226\367\310?\0078\236}\031\374\311?#\rf\\\210\346\330\277\372\221\320\002\230\223\351?"
      }
    }
  }
}
node {
  name: "tensors/component_8"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 750
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 750
          }
        }
        tensor_content: "\013\324*h\343\023\330\277\037\347\214\355\340\003\341\277\370\361@\240\370w\346\277\365\242\233\235\322#\342\277&\343\275\327\216<\331\277\002)d\221\213$\271\277\016\370a\324[q\320\277Z\250\2770\255\323\370?\014\232{\357\371\340\340\277r-\266\\\r\356\357?_\250\005\002Qy\240\277~\260\306\366\276\352\374?\002F\336Gy\254\343\277\264\236\274\340>o\346\277\032=\276\231\240i\342\277\270\000\000\377\021\270\002@P[\344x\367\272\344\277\204hq\007\203\243\006@Hbp\"\221\314\341\277\377\355q\212\246\260\336\277\007\360\254\233\271F\342\277\377-+*\365@\341\277\257tBp\032P\231\277<E\305_\262\200\346\2775\325\245\204[\031\337\277\253\334:ozi\345\277\316{\037\312q\205\362?\277\273g\243\035\273\341\277\231N\014\032h\204\020@\3311\035\355A\231\375?x\r\272\222Il\347\277\231\217)q\223F\345\277\277D\274\036-B\335\277)>\347(\251\202\323\277!m$\325\250@\347\277\304$\300Ti\300\304\277J\201\340\365\237\r\262\277\010\200\310@\324/\322?[\324u\217\226Q\343?\370\361@\240\370w\346\277a\337\347[\200\306\346\277=\016\323z\020\230\344\277*/\246FmF\350\277\203*eU(\270\342\277\216@N(<\350\364?\226\366KK\014\374\377?\033\006\314\264\376\200\340\277\236\002\006\3401\370\341\277u\205\"\032\340\351\324?\233\252\231\"_\374\334\277\010\200\310@\324/\322?f5\247+_\035\r@\312\0314\211\214#\337?\365\016\200\326t\257\331?l3\205\003\001\373\343\277\317Y@\314\210T\017@RvT*\303p\334\277\336\253\273K\253f\343\277n\230\335\222\tu\336?d\372W\rL|\336\277#/p\000<<\374?\001\223\203\271\375\272\333?\347\313#\242\321\374\323\277\233\341\213\007\001\345\336\277\275\333~\020\372A\010@\306\227\276Z\304N\016@\323F\205S_\311\005@\377-+*\365@\341\277Z\257\201 x\357\341\2779-\022B.\025\344\277\250v\272\364\216\263\005@vGi\0133\237\336\277\334\031\240\025\3577\347\277\201\230I\037l\211\346\277\354\027\014\021\260\006\343\277U\321}{\335\266\326\277\325\3519\332\346`\342\277\033\006\314\264\376\200\340\277\237\313\023\373\217\017\340\277\200\235\013~\225_\363?\001\200\215\300b\337\332\277Y\222d\201\270\224\013@\266\371\3451Y\265\340\277\014\312\253\344\320\255\371?n\230\335\222\tu\336?R\022\364\035\322K\342?\335\256x\337\362\260\330\277\275)Lma\214\345\2773\2725\323\217c\347\277\nB\0172\'\345\333\277\351\002\026\207s\345\325\277\222\221\356\201\303;\272\277nN\365\264\314\260\333\277\361\301\332d\360\240\341\277\035Z3\026N\253\361?\255\376qJQ\201\321?!m$\325\250@\347\277:\366\037]\214,\342\277P\220\326\314\367]\332?\231\215)\340\361\000\331?\210\236\376\306ln\350?_\211\200i\217V\371?\322L\307zY\302\000@w\331\204A\357\315\332\277\320?k\206\246\306\343\277\006^\221e\375\027\346\277\203\366/\004\316\031\326\277\016\352\335\364\3059\356?\257>~\215M\262\001@-\236\214\007I\371\242?*\233\212\177\017\322\337?\323\216\020\211\314\032\350\277:\366\037]\214,\342\277\223\345Z\035S\254\346\277\023\312\341*\002\270\345\277\031t\260~BR\344\277\3476K\330\315\203\342\277\241\223\031\010d6\262?\234\017G1\314\356\340?-\035\250\320\351\277\347?\312\204\003\342\232\303\004@/nMd\261Y\330\277\306\264\333\371\203\251\344\277\000S\037\231\023\243\342?\377\226H[\317\365\274\277%Q\242\241\322\r\335\277\201\230I\037l\211\346\277\374B\3463\300\021\307\277\177\t\353|\367\244\337\277-S\335\262\345\243\340\277\222!\017a\036k\365?y\237\325\310\005\233\343\277\351\274\342\277\225\300\350\277Y\346s\005\032\330\343\277\277D\274\036-B\335\277\335\342\2550MO\345\277\363\344\316Bm\275\306?\341\303ni/\322\345\277\324W\036\244*2\346\2777d\004\'\320\375\345\277\2462l\033:\317\346\277\277{\256\003\317*\337\277\253\021-\303z\014\333?0\242\202\265\013\370\344\277\232\343\220\322\342p\366?jjw\350\242\343\345\277\035Z3\026N\253\361?\320v]kH\257\345\277\320\204\214\313yn\316\277\337t\311f\t~\341\277>\014\323\351nR\330?\201\230I\037l\211\346\277\202aW:\312\240\344\277\255\376qJQ\201\321?\321\010y\241\004\336\341\27714\236\353\307&\341\277fU\201^f\302\330\277\231\215)\340\361\000\331?`\251\262y\204\342\355?\312\0314\211\214#\337?5LQ\tL\222\343\277\304e6\367]U\340\277\021\004\221\243\353\352\334\277Hbp\"\221\314\341\277\024(\310\017dH\325\277%\214\224\250\267\201\267\277\351\243\'\224\207d\272?\247\304\207Q\366\375\342\277\267KH\310\306S\332\277u\276\024\220#\030\343\277\321\310\277\001\266M\337\277\321\010y\241\004\336\341\277\264g\312\373\234\206\344\277\277\033D\245\240\004\247\277\336w\206\372P\310\326\277\021{<(\334c\341\2773\2725\323\217c\347\277\221\354\027\323\335\201\264\277u\276\024\220#\030\343\277)\217\311\366E\376\216\277\375\322\001\331\332\372\346\277C\256\035\021\376\205\311\277a\330]\375si\021@m\305\2409\275)\340\277@&\206\230\224\003\347\277\010\200\310@\324/\322?!U\242\303\025\231\265\277)\341\330\351\005\374\n@\213y\3234k9\221?\357\373\211\335\331\323\330\277\021\253l\035\2630\372?\250\353{Q\266\245\320\277&\343\275\327\216<\331\277>\327\340\225n\257\342\277\177\t\353|\367\244\337\277\213S\t\241es\376?\264\236\274\340>o\346\277\344\312\2106\350\324\007@\241\301\217==c\306\277>\014\323\351nR\330?\035Z3\026N\253\361?3\2725\323\217c\347\277\032=\276\231\240i\342\277\006\225\203J\237\000\350\277\340\377\"\255\372\220\364?\322L\307zY\302\000@o\024F<\343}\344\277\3308\337\334\014\265\346\277\001\200\215\300b\337\332\277\266\371\3451Y\265\340\277\216Z\374\234!S\270\277t\004HW\001=\320\277\270\177}\031!\362\346\277\377\355q\212\246\260\336\277+\014*#7\\\205?\253\245H\212\330\200\343\277%\032\260\2740%\333\277\031t\260~BR\344\277\205\260\374<\360\364\350\277|\274JE\263\334\362?\207\t&\375h\365\326?\222_\3035\213o\340\277\360\370\314I\222\211\343\277A\204l}\366\223\326\277\212#\331\253\216\246\345\277m\305\2409\275)\340\277C\270\322\332A\366\263\2775\263s\343\304G\376?\266\371\3451Y\265\340\277m\305\2409\275)\340\277\206\337tia\003\304?\321\010y\241\004\336\341\277\220\315\247\377\316@\344\277:\371\334\360\323v\327\277\335\256x\337\362\260\330\277\023\312\341*\002\270\345\277\310\006\027\370\200\020\244?B\270\241\316P2\343\277\241\223\031\010d6\262?\025\223\357E`\317\343\277\271\021\231O\335 \343\277d\372W\rL|\336\277\341\303ni/\322\345\277!m$\325\250@\347\277j\241i\315D\314\347\277\375\034\222\331)\330\000@Ec-%7\321\352?T<\245\261\331=\345\277\023\312\341*\002\270\345\277b\024\332\257\200i\334?\220\226\265\032-X\342\277\341\372`N\321\272\347\277\315\255_\333\\3\243\277-S\335\262\345\243\340\277Z\250\2770\255\323\370?2\277\3671\2719\364?\367\036\257\307G\264\316\277\227\334J\372\354\004\241\277\2369\370\304\323\340\343\277\014\312\253\344\320\255\371??S\364\277\343?\317\277\310\006\027\370\200\020\244?\r/T\271\375Y\322\277\346c\271\377\034\300\312\277\006^\221e\375\027\346\277\242\021\313\252\230\204\251?\264g\312\373\234\206\344\277\025\214-V\225\263\372?\226\002\320\231\000\356\365?\360\370\314I\222\211\343\277\365b\342\375\203\223\337\277oK8!\205f\346\277w\331\204A\357\315\332\277\304\256\333F\237\330\277?\336\253\273K\253f\343\277\032=\276\231\240i\342\277O\222\326]\231\243\346\277\232&\370W\270x\254\277\377\266\177\245\004\310\334\277\006\331\321#\364\344\006@\027\254_f\212?\357?\277\273g\243\035\273\341\277\353N\376\365Q\357\344\277\372;\321\240GU\000@\016\307\351\026I\035\311\277\324\354\366m.\253\327\277\214\253p$\370(\310\277\220\315\247\377\316@\344\277\306\222\244\036\255\221\310\277\034\214c\234\306\275\346\277\375\322\001\331\332\372\346\277w\313p\204\326\023\000@O\222\326]\231\243\346\277;\277-x\352C\340\277Ec-%7\321\352?r-\266\\\r\356\357?\003\017\354b\327\303\341\2775\365\334\316\220\353\316?_YPt\270\211\340\277\020\351 \362\0375\345\277Ec-%7\321\352?\347Z=PT\004\255\277\354\340\031,\016\036\341\277Kz#@\0258\344\277X\035f\352\273\300\345\277\200\215\362\365\232\031\001@%Q\242\241\322\r\335\277o\024F<\343}\344\277\343\025\321\377\234p\337\277\037\244\026\272J)\351\277\331\001\355\367j\314\344\277\214\265\364\341J\325\341\277\201\230I\037l\211\346\277\036\036\177\322\202\354\342\277\227\"\002\252\365y\352?]\376&#\236C\346\277\267\202:\255h<\334\277G\231b\0073\265\343\277\317e\304\032}F\005@\334\031\240\025\3577\347\277t\344m$\372\227\004@\306\264\333\371\203\251\344\277.\331t\232\255\340\346\277V\316\300\347\225l\341\277]\376&#\236C\346\277J}\340\323\\\202\331\277\235ff\354\"\035\314\277\022\001\324\017\244\240\347\277y:(\272\230\250\317\277\032\306\022\025\260\360\335\277!m$\325\250@\347\277\032\375\004\372Q\331\337\277u\205\"\032\340\351\324?\313*u\374i\245\326\277\306\264\333\371\203\251\344\277\226\325\\8qk\322\277\332SO\216\330j\336\277\006^\221e\375\027\346\277J\201\340\365\237\r\262\277<\241\253\263r\313\351?\333\002\305\235)\326\013@\226\002\320\231\000\356\365?C\256\035\021\376\205\311\277\000S\037\231\023\243\342?)\217\311\366E\376\216\277\304\354\212\341\313\226\357?\302\237\345oG\210\327\277\203Qa\356\237\\h?\363\344\316Bm\275\306?\372;\321\240GU\000@\364\020\200g\026\365\345\277\231\215)\340\361\000\331?>`5\021~6\336\277<E\305_\262\200\346\277\020\351 \362\0375\345\277\242\021\313\252\230\204\251?s,\371Yg\351\346\277\372E\250\001H\242\367?\376d\035\017\227)\343\277\200\215\362\365\232\031\001@\321\310\277\001\266M\337\277\307}\351\024\342\300\342\277A\204l}\366\223\326\277e\303e(\252\223\334\277\302\274?I\334\304\010@Si\023\331(z\315\277P[\344x\367\272\344\277>u\365T\211M\377?\210\236\376\306ln\350?\2235\002\027\021\342\241?6\204\033\224\254\204\014@\245\034\271\216W\251\300\277\275)Lma\214\345\277\210\3243\251hR\341\277?b:\334_\302\365?[\324u\217\226Q\343?\270\000\000\377\021\270\002@\222\013\264\261),\010@\345\232\253\344\276\250\314\277\017\220\3671\2474\307\277\212Z\313\2200\217\347\277\177\t\353|\367\244\337\277\260O\027\336\030\033\342\277#\310M&\303\206\341\277\237\304Q\013\305\363\366?\234\247\334\216\027\262\347\277\215PG\323\335\342\315\277~\307\362W\316[r\277;k\036\364\210\000\010@0\242\202\265\013\370\344\277\332\223\010.\'\373\340\277\341\303ni/\322\345\277\371\315:@q\336\276\277\307\255\031\n\271\215\373?\310F\367/@\330\340\277-\035\250\320\351\277\347?\247\307D\345=H\330\277\272\332\246j;8\341\277\311\317K\253O_\334\277\305\355\315o\307\327\302\277k5\205\224\242@\300\277\276\362Y\210\277\243\343\277\253\023-T\034R\347\277?S\364\277\343?\317\277\237\370\201\"\337K\310\277[o\310\200)_\337\277o\024F<\343}\344\277\213y\3234k9\221?tya\221\026\026\204\277\244\321\310\242\220\364\341?O\222\326]\231\243\346\277t\365\006u\305\000\345\277#\310M&\303\206\341\277B\313\215Sk\201\275\277%Q\242\241\322\r\335\277\226\362\266\021\006\250\003@\030\332\032\220UI\301?\203\210K:\212H\322\277\336w\206\372P\310\326\2770k\220\320i\017\343\277\310F\367/@\330\340\27714\236\353\307&\341\277\037h]<?$\277\277T\005\263\3147U\343\277l3\205\003\001\373\343\277\377\355q\212\246\260\336\277&\254\313\362\354S\327\277%N\345\r\213\303\347\277\2462l\033:\317\346\277\316{\037\312q\205\362?\022\001\324\017\244\240\347\277\276\362Y\210\277\243\343\277\205y\nXN\014\347\277\315k\006Bw?\000@F\320T\354\324\235\345\277\020\351 \362\0375\345\277\372E\250\001H\242\367?\210\3243\251hR\341\277\235p\352\251u\311\345\277\344\336\336\032\373\207\335\277\370\361@\240\370w\346\277\224CA\002\265<\326\2779-\022B.\025\344\277\271\021\231O\335 \343\277,\361\361q\000B\375?vGi\0133\237\336\2777d\004\'\320\375\345\277\343\025\321\377\234p\337\277\277D\274\036-B\335\277\217\377\322K\007\r\276\277\332\312\372\022\311\343\342\277x\r\272\222Il\347\277\275\2250\246\003\030\335?\014\232{\357\371\340\340\277\257\275\373\247\\\354\345\277w\020w&\221\266\334\277:\001\004\315\312\304\222\277s,\371Yg\351\346\277\312\204\003\342\232\303\004@\356\316\033\266\212\227\340?\007\'\237\200[/\344\277\201\230I\037l\211\346\277?L\337,k\203\010@mXyr\037]\345?\277D\274\036-B\335\2772\251\234\202\304\372\006@7d\004\'\320\375\345\277\332\223\010.\'\373\340\277\246\373y6\230\346\344\277T<\245\261\331=\345\277\tvD\203\201\203\350\277t\004HW\001=\320\277\021;\203\210\215\323\336\277\n?R\236\337\232\346\277\343U\212\237\353\000\342\277\022\001\324\017\244\240\347\277q\335SWA\225\342\277@\217;\232\232!\234?\306\271\235X\255\177\361?a\337\347[\200\306\346\277\304\256\333F\237\330\277?c\001\0377W\336\322?\026\361\325*\302_\323\277\224\256h8\261\303\344\277G\231b\0073\265\343\277\275\317\207\351\351\t-\277\233\341\213\007\001\345\336\277\376d\035\017\227)\343\277k\367\313\205\365\365\271\277\nB\0172\'\345\333\277f\211\266\257\300`\345\277\024(\310\017dH\325\277\250\206\323|\211\371\367?\375\233\017\3648\022\345\277\327q\321RP\343\304\277\007\'\237\200[/\344\277\215\201\277\220\3606\325\277\231X7\214\361]\343\277\262h\207\376B\213\355?\013\010`\271=\262\344\277\272\335c\376\202\202\326\2777d\004\'\320\375\345\277K\261\025%\267 \346\277\017 \023\327\301\035\347\277o\024F<\343}\344\277\r/T\271\375Y\322\277\024\230\261\244\211\245\360?jjw\350\242\343\345\27717[\177\017q\326\277\264\236\274\340>o\346\277m\274\331~\020\202\337\277Ts\227\226{&\347\277M\005}\206\006K\367?]s%\272\232\027\014@\275)Lma\214\345\277oK8!\205f\346\277\237\304Q\013\305\363\366?\317\255OP\352\227\347\277\372E\250\001H\242\367?[o\310\200)_\337\277\234\017G1\314\356\340?\227\"\002\252\365y\352?\310\006>\220\361G\336\277O\222\326]\231\243\346\277&1kW\235;\275\277\272\367\0149(\247\256\277\201\230I\037l\211\346\277%\032\260\2740%\333\277\351\365\3245\331\356\306\277\030\342\224H\206#\350\277w\305.]\334\032\005@\324 ,\277\210I\344\277\324 ,\277\210I\344\277\253\334:ozi\345\2777\233\366\013r\346\347\277\365\016\200\326t\257\331?\";\364N0.\362?y^_&\021\006\310\277\355\240`\214\277\215\336\27714\236\353\307&\341\277%\034\265\207\022\261\362?\023\312\341*\002\270\345\277\312\314\216\027\010\025\347\277\312\314\216\027\010\025\347\27780\317\325u_\331\277#\210\224\206t\366\336\277\21505\240A\242\002@\317\233Q\332f\021\347?\226\362\266\021\006\250\003@\321\010y\241\004\336\341\277\226\354t\352\013\257\010@~\307\362W\316[r\277h\033\322\345|\217\341\277\370\347\274\342\245\313\314\277\372\203\\\326\264\246\342\277l\374\222\036_\022\342\277\001\264\302\021\275}\347\277\220\315\247\377\316@\344\277\376d\035\017\227)\343\277\270\000\000\377\021\270\002@\260O\027\336\030\033\342\277\352\341\326.\264\"\352?\246\373y6\230\346\344\277\306\264\333\371\203\251\344\277hK\002\333S\\\372?\034\214c\234\306\275\346\277\010\271\272\266\027^\340\277y\237\325\310\005\233\343\277\"62\360\006X\345\277\377\266\177\245\004\310\334\277\'\340\000DG\362\343\277>\327\340\225n\257\342\277\220\226\265\032-X\342\277,\210\317\006\346F\326?0\242\202\265\013\370\344\277\351\2241\275/\024\322\277R\240\005\276\312b\317\277\337\357\t%\000K\002@\014\321m\324\233\311\342\277\317\233Q\332f\021\347?\006^\221e\375\027\346\277s,\371Yg\351\346\277\356\316\033\266\212\227\340?\331\001\355\367j\314\344\277\214J\315\253NN\323\277\364\020\200g\026\365\345\277\031t\260~BR\344\277A\345\017\366\237n\313\277\355\242eW\241\031\366?~\267\210\346\211\006\346\277*\370\263a\313]\346\277~I\244\034F5\342\277jjw\350\242\343\345\277t\365\006u\305\000\345\277C\270\322\332A\366\263\277\276\362Y\210\277\243\343\277\215\201\277\220\3606\325\277b\250\365v\336\335\344\277\276\362Y\210\277\243\343\277\323\216\020\211\314\032\350\277\266U\314\205\031\000\344?\351\243\'\224\207d\272?\206\337tia\003\304?\025\\\375`\276\346\341\277\345\244/\242\021U\346\277\335\342\2550MO\345\277\276OH\352\t\337\262\277\203Qa\356\237\\h?\365\016\200\326t\257\331??b:\334_\302\365?\034\214c\234\306\275\346\277M\005}\206\006K\367?\302\330\334\037\313\374\360?y:(\272\230\250\317\277\271\021\231O\335 \343\277\210\224z\t\032\302\336\277\354\340\031,\016\036\341\277RvT*\303p\334\277q\246ar\237\254\340\277l\374\222\036_\022\342\277R\255F\017eY\336\277@]x}6\354\350\277\014\321m\324\233\311\342\277\222\013\264\261),\010@y\326\307\255\247\203\345\277r;:<\243%\322\277\341\303ni/\322\345\277<\342!Vg`\305?\177\334|U\250h\347?\r/T\271\375Y\322\277m\205\347\231n\231\335\277o\322\030\256:\363\224\277Z\250\2770\255\323\370?s,\371Yg\351\346\277n\230\335\222\tu\336?y\326\307\255\247\203\345\277\026\361\325*\302_\323\277cq\003\222<\365\342\277E\007G\321v\206\347\277\357/\277.4r\345\2777\240\270j\233\274\364?oK8!\205f\346\2777d\004\'\320\375\345\277\374\341B\273\0267\322\277C\256\035\021\376\205\311\277\306\222\244\036\255\221\310\277K&\267\244\205\307\267\277.\3341.\365*\334\277/nMd\261Y\330\277e\204\207\347\202\255\226?\214\354\346\306\354\275\343\277\271H\2134\177\t\345\277\222\221\356\201\303;\272\277\037\263W\234\206e\324\277\344\247\3545Y\237\333\277\277\273g\243\035\273\341\277\261\255\375\302z\253\321\277\025\\\375`\276\346\341\277.\331t\232\255\340\346\277\352\205\360\332\363\327\346\277XTX\317]\251\347\277[\324u\217\226Q\343?\250\215\225lT\025\341\277\266\371\3451Y\265\340\277\372\220\235\'O\235\341?{\240\255n\304\244\n@\2462l\033:\317\346\277F\002\2008\rj\277\277Q%\257\226\373\326\353?\236\002\006\3401\370\341\277\324 ,\277\210I\344\277?L\337,k\203\010@\304\354\212\341\313\226\357?\306\264\333\371\203\251\344\277XTX\317]\251\347\277\027\355\325\010\177\324\312?\310\006\027\370\200\020\244?\334\031\240\025\3577\347\2775\325\245\204[\031\337\277A\273^b\230|\330\277\252\347{/s\032\310?Ts\227\226{&\347\277]\376&#\236C\346\277\272\335c\376\202\202\326\277\'\340\000DG\362\343\277]\3074>\374Z\344\277\253\245H\212\330\200\343\277\356f\261\023\326Z\347\277\363\037\301IR1\321\277\027\355\325\010\177\324\312?\002\370\020\353\021b\006@\222_\3035\213o\340\277\177\362/\342\212\216\315?\226\362\266\021\006\250\003@Q%\257\226\373\326\353?\030\027\207\234\206\306\335?|\236\315\272{\252\267?\325G \277H\361\321\277\2369\370\304\323\340\343\277\247\220R\000\234_\326\277\202aW:\312\240\344\277r;:<\243%\322\277XTX\317]\251\347\277\277\027N\367\335\005\345?\236\002\006\3401\370\341\277\242Q\253\342WL\346\277-\310\333I\342w\006@\367\036\257\307G\264\316\277m\305\2409\275)\340\277<\241\253\263r\313\351?\320o\233{}\223\374?s,\371Yg\351\346\277\244S\253s\371\221\302\277\017\241\225\274\262\343\002@>\014\323\351nR\330?\365\242\233\235\322#\342\277\311\230Y\306\255v\332\277n\211\347\273\261$\266\277ie\260O9\307\275\277\031yr\335k(\361?\352\341\326.\264\"\352?@&\206\230\224\003\347\277\262\240\274q\340\264\302\277\021{<(\334c\341\277\362g\211\271\224d\016@Wc\231\261\231\345\322\277d\372W\rL|\336\277w\020w&\221\266\334\277\344\247\3545Y\237\333\277\'\02019\036\277\374?c\001\0377W\336\322?[o\310\200)_\337\277\272\332\246j;8\341\277\335\342\2550MO\345\277\277{\256\003\317*\337\277J\264\322\270\376j\333\2772E\325\352$\034\242\277\375\322\001\331\332\372\346\277~I\244\034F5\342\277Y\346s\005\032\330\343\277h\036\217y\304\331\326\277\362V\263.\364\031\323\277\327\'F\214AL\006@\027\254_f\212?\357?#\210\224\206t\366\336\277]\3074>\374Z\344\2779\2244\034\247\312\376?O\222\326]\231\243\346\277\302\323\032\301\241&\344\277,\210\317\006\346F\326?"
      }
    }
  }
}
node {
  name: "tensors/component_9"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 750
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 750
          }
        }
        tensor_content: "\n\302\303\245\225\341\343?1\t{~nf\350?\367i\210\360\211G\366\277=\231*\303\242`\350?d\336]\260N4\333\277\271\023\335\017+#\267?\346\220\006\373\376\030\346?\2348\375\351w\204\260?\313\356\343#\347\343\343?g\330\265\014\371\305\360?\206i\006\326\317\317\371?x,N\377\302\215\365?\220\236\275\263;\242\304?\236\313\360\030yF\365?\243\204\245\332?\353\327?\245\304*K \361\313?O\023p\270BG\266\277\251wtL B\365?\355\330\225\372\303\223\266\277\203\345\214\221V\213\352\277\260 \257\227\023\214\341\277\264^p\217=#\332?\361\277\234[\3472\360?p\220\355\300\217\276\343\277c\351.\377\373\216\300?.\2645\037\236\205q?a\35346\036\207\324\277i\365\340<\313;\361\277\364\367.C\325\257\365\277\n\302\303\245\225\341\343?\312\332<\032\005^\362\277\266\t\350\t\013\253\360\277\236k9\202T\024\321?A#f[\200\253\254?\2760:(\220p\353\277Mmc\24785\323\277\226\207i\233\360:\217\277QU\331M\213\037\357\277\334\010\355\214r\256\342\277\344\\\327%\2775\350?t\254H\371\336\360\344\277V\001\232\207\313\260\327\277\330D:^|O\372\277\231\322BPq\266\216?Bk6=k\262\371\277><\204\004B\373\001@\324\241\360\352\2316\255?\034m\024\017P\314\354\277\260A\220\347\360\255\360\277M\364\2002\304\335\361?nNg\321_\264\353\2772\003\001\346\254K\376?\310\275\000\276K\332\372\277\320\203\201\n\346\216\371?\357\307{\016\370\n\357\2774:4*n\275\352?\351Kv}\2409\311?s\234jl\321\360\347\277\213\201\226N*,\304\277\213\004P`-\350\344\277\351\303m)\275X\351\277\026*\006)2W\373\277+\371<\270%E\350\277u\311\200x\231\360\310?j\350wr#u\351\2770\270<\216\001\332\372\277\353\227\365,\345\304\343?\"OzvD\220\342?\336>\031\004\003\022\321?K3\237\213l\275\360?\310\275\000\276K\332\372\277X\376R\363\003F\332?c@R\231W\037\321?\371\225\246\344\021\205\302\277\205\256N\334\231\225\227\277R\244x\244\000\201\360?]\315xED/\334\277\024\313\347\243\026\247\343\277\201\350\014O\270\007\355\277\264\2771\256Y\375\310?\271\023\335\017+#\267?j\240g7c\031\332?\371\325AK\352\020\341\277\354\030k\361\020\204\360\277d\"&\2525\353\364\277\017Mf\211_\273\364?\262/\314\330\000\327\000@\215\366z\3504\376\223?/\034\207\"[#\347\277\005\336\227\224\010\343\343?@\374P\252\316\321\221?^\256\023\177\306\'\346?\327k\355\013K\222\352\277\203\233wRx\030\362\277\361\323\226O\034P\321\277\r[\241|l\221\352\277\303\210\305@\376y\367\277\267\260\327\222kU\340\277\232\362\301\036\r\246\370?\264\326@+\2712\354\277}>\336\310\024\204\001@\205o\200n\221\352\343?VIu0\376\221\372\277\002I\004S\367\036\311?\264m\023\360\220{\367?x\r\232\366\250s\270\2777w\367\r\327\317\223?\021\315)\256\315S\365?\333\254\222\327\020K\354\277\376\242\240\235\203c\346\277\307\373\230Q\350\032\357\2770:\000\334\260\032\375\277\r\037\353\271K\334\344\277\221\262\002A\302\266\360?\226\354\211V\365\230\352\277\340N\030p\306V\362\277\237\014\261\265\023\364\310?\233\0178\327d\034\300\277\304\202\2672\202\037\360\277\013\005\376v1\325\352?\235\330*_t\342\362\277\323\017\377\340.\357\366\277$\002/\232=\301\310\277l\034\356\362\351\324\372?<\364\376\262\370$\364?\323\345\033\331`\237\342\277\337\177k\302k\270\373\277\220-\327\\\213K\365?\\\010\252\273q\034\321?\221\224\356\212\270X\321?e\r\215b@\212\351?\303\274\261\360\367\200\306?\343\324\313J\353,\347\277\207U\216P\232t\362?\330-:\247\331\\\304\277\031Xi\321k\344\341?~\003\220-\267_\366?\214\3264\312T*\370\277\234\252\364+\277\252\223?I\000\205\026\026J\323\277\n0g3?\315\365\277\243\263I\275\024p\340\2778\026\036\266\200\026\364\277\357=\252\211\213\307\343\277MQ\321\231;8\363\277\226\361\226\267_\271\371\277$\265\233\340\035\"\360\277\307\263\n\205\'\201\371\277\241d)N\256\250\327\277\246\030\373h\246\337\361?\304-\032\244i\025\354?\010\207+\351\373\n\266\277\333\360\244&\233*\226?\233Y\313\247C\315\336\277\260I\257J\225\276\360?\214\357\210\373e\257\365\277\342\353U\322Zx\377\277Y8\346YA\307\343\277\267\315%\261_\367\257?()\326\010@\351\354?g\265Zv\334\331\372\277e\301\246l\217\025\346\277\032\333\254\263;\371\344?KI\027:\343\300\371?<\305\242\277z\364\355\277\0063m\007y\231\276?\357\204\326\031\361\251\353\277!\360nN\362\271\360?\0344pNi\007\370\277\367\237\363\236\225\014\374?;\342\374s\371\224\370\277\363\323\027\213\0271\300?w\210\3363\304_\350?\r\037\353\271K\334\344\277\223=\321\376=\030\323\277fdK\n\034x\367\277\323\331H\252\235)\332?\256XV\037\3532\357?\310\362j\277Ee\350?\357H\356K3\242\372?;3\035\014\241\004\363?\332\2605\232R\035\365?\342\017DZa\022\374?I\366q\257\242\367\001@\314?\320m\321\260\360?\355\217\2005\363y\373?}\202\345\3051/\311?\000\364\231%\212\303\322?\244\346\354\233]\351\331\277#\276\004\023\300\246\007@<\374\3209+\356\366\277\336j\276\036]\005\267\277\010\321\277\017\351\027\267\277\010d\307\317K+\300?\212\206\0265\315P\310\277\033\354\377\331m\212\365?\343t\325YA\036\304\277k\257\203N\332@\366?\373\211\024vm\262\000\300\325<\206/\017\243\352?\205En\342\026p\345\277\0077\260mu\317\354?\366\034/\244\324\221\341?\036\331}\006N&\371\277\244\032X!(\006\356\277t\026\277\363y\261\353\277\305\372yL\021\304\343\277\255u\225\002\225\336\327\277\311\245n\002\321-\356?\377\261\220\332H\003\361\277\243=\033B\201\263\353\277+5\363zF\372\355\277\206K\332\370\353\037\321?!aU\245\242\020\300?9\313\333\272\226\342\266\277{\277*\006:v\324?\306\005\324\025}\033\311?\302\365\355\003\230\t\334\277,}\363\0028\037\360\277/\372\004_\247\350\342?\251\200\306gs\337\370\277\241a\260\235}\364\352?\\,\271\".\373\361?\320\260\376\263\330[\362\277c\025\252\202\304J\347\277=\206\204f\322\024\357\277\274\243\304\\\021\311\320\277\034\'\336B>e\323?\250\250\360\024\221~\266?=\206\204f\322\024\357\277En\026W\022\313\266?\363\323\027\213\0271\300?K\2647\203:\010\330?!\360nN\362\271\360?\262/\314\330\000\327\000@\'\362\306<ch\351\277\253\245\300\227\207\366\372?\221i\037d\204t\351?#\214\327\335&)\347\277\341=<f\331`\277?\373\214\017>N@\266\277,\356\344B\2464\371\277\t-_\371\374>\267?\300\355\2311p\371\266?;)\207\351\255Q\315\277\311\327\013j\367\364\373?\271\034\340\372\0372\367\277T^k\031r\365\363?\'\362\306<ch\351\277\024V\334-c@\365?7,\210\342\n\257\336?\232\006\246.\210\301\342?X-o6\356=\357?\361\351\301!!\014\315\277\251\0045\261\360\340\372?&Vi\250*<\340?\357\274f\320\374Z\342\277\022J\241c\227\022\321?\334\265B\373\274=\344?\337\252\222\256\317\242\352\277\364\223\227\322\t\037\334\277K\374\300t\0363\346\277\031+sqUH\332?\306\343\210\004m0\334\277\357a\352\267\024!\321?\221\240\333y\344\317\250?dZ\227\262m#\346?%h\023\020\274A\361\277]4^h\324\351\354?\004\023\265\271\220&\364?\327\366n\020_\'\347?-=hr8E\366\277\023\035NQ6}\327\277\032\221\030\215N\354\343?s\234jl\321\360\347\277Y\365@e:f\340\277\211|x\260\014\007\272\277jP@\352\377L\357?\207\024\007\335\231\330\343?\264\304\025\2536\307\343?E\311\207c2\313\326?\317.J\022\214\251\001\300`\306\206\214m[\355?~\0344\302*T\362\277I\0264\253\006\017\357\277\234\273\360\202?\336\000@\376\026y[\210=\361\277\311@h)\314\326\372?\212|\001q\337\371\310?\203\242DO\232#\311?\220\314\305\332\014\002\370\277`9\3213e\366\310?\270t\313;\375e\362\277C\253\217\302\3159\350?D\350J2\t(\321?\246\217\337\367\371\336\343?\275\031\234\355H\357\372?\034\231&\304\013\357\354?\2207\330\220\253\347\343?o\230\356\313n\262\360\277xT\267\006\325\004\000@uh\277Y}\026\332?\355\252\240A\210\004\355\277\270%pF\202\210\006@/H\263d\371Y\246\277\234\250o\331\225\235\327?w\367\311_\211\363\002@\356\263\324\' \000\305?.t\021\324\356\331\354\277\362)\344\321\325\310\354\277\251\271/\274\237B\266\277A\363\202\317>\234\007@\0077_\306B\210\277?\025\305\nK)C\365\277i\265L\364\357n\334?\320)\236\024\323\315\310?3\216\246b\245\321\343?\226\242`u\013\347\315?L\327o\2401w\006@.@-\230\000\356\331\277\343\031\240\354\337`\366?$\002/\232=\301\310\277\246\r\304\257\322\230\277\277?5\317H\345\372\001@-\361L\331-_\362\277\217\007]\230V`\362\277\342\237\352\325\355\"\375?O\372_\274\223\r\357\277\234AF\222M\205\220\277\362\037H\347\204\267\001@\303\210\305@\376y\367\277LG\322\250;\354\326?<\247v\342\226D\365?\344\326\035\032\257\224\351?\033\377\025#H.\357?B\010\223M\323L\334\277;\310\nV\002\037\347\277\333\226\t\375\2629\334\277`4\310\214\357\336\265\277\374\035\244=\371\"\365?\336\376\'\t\335K\372\277]4^h\324\351\354?\306\342\002bk\014\311?p\233\2529[h\371?W\232\371\353%\252{?\302G\\%\303\372\373?\351Z\332\203n\265\327\277s\0369\265|t\367\277`9\3213e\366\310?\037\323\003n\214\013\357\277:\214\376\376\223/\371\277H\346\242\316\367\205\366?\366\320\344\206\035\201\363\277\250\227u\316\241n\340\277\0020\302\221\235\177\341\277N\"\353\325\360\256\352?\362\362n\276\334\326\343?\037\237\0372\236\037\334\277xYW\274\242\003\363\277U}\253O\323l\001@\005vn\215\342\215\350\277\304\257 )\235\266\360?\203\177/w\362\277\366\277\265\340sjv!\326\277\274\032\256\306A7\352?T\002\314\373\251e\334?\267\214Ou\213\247\360?,\373\\\271\260\211\002@\320#\032\327#\314\343?d\374\2272)\312\371?\302C\177\365\026?\357?\317\314\322\242K]\362\277\215\366z\3504\376\223?\224]?\370\026\371\320?\347*\027\234\302\331\343?\006G\004*\266v\307?\245\304*K \361\313?*\350u\245\340\\\374\277\273\244\004d\250\337\327?\2366{/-\237\315?/\230Q\002x3\332?\216\007\250\016\236\334\265\277\242\365\032\t2B\000@\371\276M|UU\350?|\251\n\035\363x\362?4&\322\022\363\"\221\277\014\272\032`\346\363\355\277\254\2076\262J\361\355\277d\264\251,-\017\341\277\206\035\274\270\030\277\353\277\314\204\226j\317\376\331\277\353\255~\007C\326\323?\254\214\255\003\034\236\276?\200/\240\237R2\364\277M\\\242\305\336\027\341\277\245[iw3\177\362\277\204\246n8\256\253\353\277@U\206Rl\221\373?\324\312*?:\273\327\277\317\034wW9D\000@\302\022\345\367\352`\362\277>\007)\257\252\376\345\277r\\\242\347v\005\311?\212\0070W\312\205\352?\230\"\356\346\341\225\222\277\2568\373\224\031\260\352?\356\234#m\005*\347\277\244\346\354\233]\351\331\277\027Rs\352\311\333\343?f\375E\007&\361\265?\025e\177\216\266\230\342\277\305:\267\252\220\372\355\277al\247sY\036\360\277\271\221\233\rq)\347\277\323\345\033\331`\237\342\277\353\341\273^o$\360\277\372S\035n\361R\351\277\301\030\363\005g\273\371\277\223=\321\376=\030\323\277\210\025\3376\352\262\373\277\002\305\215\246:\371\336?(E\214\237\355\315\371?\273\220\363i_\315\264\277\373\242[5\0357\365?J)\230&aV\370\277Z\330\330\351N\373\253?^\206la\220\260\315?\357\007\361\272=\343\321?\322\337\014u\326\350\350?`^\033\307\333|\311?l}e\337\216\n\305?\201\350\312\220L~\304?\206Th\304\311\366\332?q\264V0\234\363\355\277M\006\014\354\201j\375?o\305F\226\242;\372\2776m{X\023F\223\277]6\207!;!\002\300\026\271\263Yz\304\374\277\212\261kO\317\t\357\2773\365Z\276h\021\370\277|L\257\272\177\333\343?\022Yb\034\260\207\341?\204\002\347E\325+\365\277mHw\033\251v\367\277\246LQ+}W\266\277\212}\207\023\341\035\334\277\212\241\336i\364P\277\277\225*FsB\301\373\277\213^\"Mc\026\346?\010\302\377U \033\332?\222\016\243K\234:\310?\276`\372\210K$\356\277\275\004\3646U/\361\277\3053\2377\'s\323?\264\"\2549d\014\322?]\3450\315\217\023\370?\1770\027|\227\023\332?\235\330*_t\342\362\277\344\215\371\302\325\240\370?\271j\312\007\335\311\343\277d\326Y\036\177\030\375?z\247(Lw\355\343?\352\030\331\2548\020\342\2771\357L\260\354\266\360\277\223\241\364\202\366Q\361\277\225\277\221\305\3740\344?\"\351\346sD\356\277?\300[-\330t<\340?\204+^lZ\335\320\277\330\366\222\210C\030\360\277d\215|\2256\034\267?\200*%\203\300\205\363\277\2772\"*\367\306\343\277\354\324\243;\372\244\265\277\021\377\217/zY\340\277\234WW^\325I\216\277\233S\377z=w\367\277\303\\\204\007\226,\315\277t\254H\371\336\360\344\277\233q+j_\253\323?\'\371\265nI\024\347\277\226\006\037\345\253\220\341?\355q\312u\004\355\354?\202\241\331}\334\357\005@\027a\026K\0354\361\277r](\212x)\334\277\030V\201\317\004\216\351?\241\317;\004M\216\363\277p\307r\274\237\346\304?Yx\372v=\"\321?\262\366\240\263q\237\277?\325\020\224R\235\034\003@=J\316\243\261_\351\277\336\257\372m\230u\345\277ia\206\344S\317\343?\347\036\217\365\204d\362?\"(t\357\356\254\266?t\346\277[C\234\341?w\226\240p\255f\377\277\316\024\332H\\J\222?\341\"$\023\320P\325\277\325\307e\031r\022\364\277\025\260\250\351\255\243\334?\241P\204\230\270i\334?\326\353,n\315!\313\277\247l\034\327\2401\346?+\005\364\342\017\345\343?\216?\310o\243\315\371?\342>\256\317\313\255\360\277\035\376\366\035q\327\343?\202\330%-\331\217\274?\274\327\250\230\377\264\343\277\232\006\246.\210\301\342?,\212\273\260\014\253\310?`\322\226\322\225]\362\277|\251\n\035\363x\362?\366\237\021\367Z)\357?\325\203\217\235\236\360\373?9\331hw0\363\344\277:\233\014\224\036\354\366?\272\r\360\275Z\222\354\277\313\305\343pe\261\364\277\340g\306\251\'2\351?i\231\227\263P\346\361?\354\036\347\272\264j\351\277;4\201y\336\207\357\277\361\300\177\2603P\365\277\216T\345h\270@\361\277\327K\0138\235\336\344\277\255\341\010\237\200\037\357?\205cC\n\305\177\252\277\354U\0255ed\362\277\316\333\210`h\217\325\277\n\222H\255@Z\362\277\\\341z\255\204g\351\277\217[s\013Uo\371\277\352R\217F\030\035\346\277\373)k\033\262\371\355\277\256\302\243\330\002\030\311?R\031#\213jj\351\277\034F\004\322@\013\342?\003\256\034\234\263[\362\277S\330\317e\'q\350?\014\215%V\336\263\330\277\202\314\016\311\263\316\315?\275\335\345*(:\365?^\341C\330\326\234\372?\230\272\020x\177\271\371?\217\322\270\027\264g\315\277(\'\362\343\327\026\310\277Q\376\247 w-\354?V\371\307\000\231\347\344\277\243be\325\3679\354\277\tBXFWO\372\277\351Kv}\2409\311?\347\316\244\277\206$\344?(Z\251\230\002A\361\277U\025\234\357\013\351\344\277KQ\313hPm\351\277p\220\355\300\217\276\343\277\361q\021^\357\230\003@\236\322\337J_\362\362?\245Q>\254\201\253\304?\247\205\336\303\331B\365?\021\'\354\304*\320\361\277<g\205\347p~\336\277\3039\020\006\317\026\357?\373\246\000)A\325\354?dc\305D\020\331\354\277\323\331H\252\235)\332?\010d\307\317K+\300?D\371c\331\222K\372\277\275\004[\261\006\206\003@\3011\002\317\021\024\346?\031Z\t\301qk\340\277\212\225\347\325\374\373\320?d  P\tx\351\277\200\315\t\213\3563\253?\231\2009\355\253\343\355\277\267\203\331\320\207\"\360?\374\317\2710<\213\350?R\232\307\323BT\340\277\026;\245,\206\267\265\277L\247H\305\304l\361\277.\365T\215}F\356\277\303<ZD\221$\365?\034?\231bFh\304?\311O\341\362\215\367\310?\002\277\373\325\322\225\347\277\230s\372\356\335S\300?\223\226\330\275\001{\350?+\005\364\342\017\345\343?\362\346>\335\316g\351\277U}ch\230H\267\277\214\354\002\r\031h\351\277\371m \270\317\326\361?\tH\236mQL\277\277\227e[\302\214]\334?\201\217\r\004\000\300\363\277j\207\225tQV\366\277\250|$\373?i\302\2772\321\322\240\210c\350?\241\270nEY\342\370\277\353\206\005\307\336|\367?\031Xi\321k\344\341?\333r\262\246\237\006\311?|\005T\246m\316\361\277>WJ\313\"\000\367\277|`\261\"\300\023\321?q\373\340\310Z+\332?d\365!\267f\355\372?H\032\370L\376%\334\277\240W{` \025\252\277Z\270\307\326t|\367\277\267m\251\377)\357\265\277\355\252\240A\210\004\355\277\244\217\276\344K\037\220\277\300\355\2311p\371\266?\300m\207\334\243\322\362?\371\215R\357\337\371\365\277\225y\303q\351\006\357\277\200\315\t\213\3563\253?*\350u\245\340\\\374\277\260v\234\340\221\343\331\277ZT\233\232\340O\376?\256E\027\203O/\365\277e\rj@j\365\362?\273VbX\200 \321?\031+sqUH\332?^\013^\223\230\300\221\277\025t@G\317\r\323\277\002sg\206\244\340\344\277hr\265\201\325x\367\277\200\177\375kUm\353?hJY\354$\002\346\2779 \363\017\357*\321?\377\302\342\252l8\357?\340rc\207\ro\351\277\262V}\006K\232\353\277\332&\326D\020\202\334?\351(\350\356\324\006\370\277+\314G\256\035\005\323\277\353Z\235}\325\037\357\277[\205O|\317.\375?\374\203\230fF\332\372?\350\261\010*\222\177\351\277~\0344\302*T\362\277\345\013~d}\264\310\277N;J\023\312m\311?\226\242`u\013\347\315?\017E\231\335\ta\311?\250\211e_8\304\371?5\263\024\177\314?\321?\302\247\tK\362\300\224?ZO\023Rp\224\341?,\366\324!\236\032\357\277\006v\354A\355F\266?\212|\001q\337\371\310?wLO\201D\272\340\2773\213\224`k\341\362?\006G\004*\266v\307?,\264\232!\316c\304\277\250\250\360\024\221~\266?\233\367\206m\026\367\355\277-\217\247\017\267\013\374?\351\254\240j\311\254\356\277\203\3702\356&\327\343?d(\362\326;A\334\277\214/\250\001 \311\354\277\327\003[6\030\244\310?\211\324.p(\267\354\277\215\030\234\013\261\273\352?\317\314\322\242K]\362\277\202D\006u\320\355\355\277\261MJv\301\372\265\277((\363\263\363\313\327?P\315\243\333%\337\336?\337#\203\310:\340\361?\243b\306dA\267\341\277q\230Y\000\246\026\321?|\353M\325\236\"\350?\213n\306Z\310\250\353\277U\034\213!\362\224\342\277\323\331H\252\235)\332?S\3755\037\017\273\355?,\216@\325tj\277\277\344\233^p~)\365?\363\316\310H7\014\321?Y\311\231\344\265\247\360\277\nE\004\001u\316\305?\233\333\211= \032\321?\371\377\324\357U\361\366?\353\341\273^o$\360\277q2W2by\325\277\262\231\"\373Q\373\356\277j\2109\222\"\022\364?g\320\001\336\213\031\321?7]\2762\371O\367\277\265\234`\372G\356\310?\356\2012\323\336E\334\277\362\203\267\024\032S\340\277][0\304v\245\342\277e\271\305\374\225\216\336?K\024\232 \240\273\241\277e\210+\377i\260\361?\337\020U\022\003\371\001@\013\234\356\202\002D\365?\324m\306$\353*\356?\2776\330I\002s\362?+H\022\216:\025\346?\362\362n\276\334\326\343?\363\301.\311\000O\340?\377a.\007\321 \003@\004\224\256@\250\356\320?lFtHm+\315\277\177\351\177\267\372\314\361\277\336S\240\2706\022\357\277!\362\303\265r@\330?i\327`u\260\345\221\277\001\262\337\347\234\026\375?\030\327\202\247\035\366\372\277<\247v\342\226D\365?fdK\n\034x\367\277\222\262\323\274\025\214\346\277-0\305:&\225\352?\222\215\211)\237\005\346\277\264\"\2549d\014\322?\241\312+\034\362E\323?2\321\322\240\210c\350?Y5\020\010\222\020\371\2779(\226\022u\311\371\277\3158-\261\202\371\331?\177\207\027\364\034\017\364\277\243\263I\275\024p\340\277~J\200\r\222\010\370\277\t\303\374\216/9\361\277\\-c\347\351\302\222?\223}\345\033:s\340??\245\234s\350O\377?\240\207\354n\007V\325\277\212s]\236=\246\360?(\271\001\025\211\231\223\277\255\327\270]\014p\364\277\0173\260\033\363~\351?S\3755\037\017\273\355?\227\002\324\371\327H\323?\270t\313;\375e\362\277U3<\334\014k\300?4\277\251Q\350\303\336?"
      }
    }
  }
}
node {
  name: "tensors/component_10"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 750
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 750
          }
        }
        tensor_content: "+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?\323\000\375\250`\366\n@+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?\323\000\375\250`\366\n@+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?\201\225G`\214\005\t\300+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?\365\ncZ^@#\300+\265V\213D\r\277?\201\225G`\214\005\t\300+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?\201\225G`\214\005\t\300+\265V\213D\r\277?\323\000\375\250`\366\n@+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?\323\000\375\250`\366\n@+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?\201\225G`\214\005\t\300+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?\201\225G`\214\005\t\300\201\225G`\214\005\t\300+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?\365\ncZ^@#\300+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?\201\225G`\214\005\t\300+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?\323\000\375\250`\366\n@+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?\365\ncZ^@#\300+\265V\213D\r\277?\300\235\213\373\333\277)\300+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?\323\000\375\250`\366\n@+\265V\213D\r\277?\201\225G`\214\005\t\300+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?\201\225G`\214\005\t\300+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?\201\225G`\214\005\t\300+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?\201\225G`\214\005\t\300+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?\201\225G`\214\005\t\300+\265V\213D\r\277?\323\000\375\250`\366\n@+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?\201\225G`\214\005\t\300+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?\201\225G`\214\005\t\300+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?\201\225G`\214\005\t\300+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?\201\225G`\214\005\t\300+\265V\213D\r\277?\201\225G`\214\005\t\300+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?\201\225G`\214\005\t\300+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?\201\225G`\214\005\t\300+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?\201\225G`\214\005\t\300+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?\201\225G`\214\005\t\300+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?\201\225G`\214\005\t\300+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?"
      }
    }
  }
}
node {
  name: "tensors/component_11"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 750
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 750
          }
        }
        tensor_content: "\362@\022\276^it?k\311\326\305\004\316\374?\275\217=\345\336\327\342\277\257\010\277T\312_\372?FK\270\327\252\303\364\277\271C\177\246\304\254\352?N\301\332\202\254\222\342?\020{f\247\315\272\376\277\3724\354$O\313\337\277Zz\210{3R\336\277(\265\320\353as\363?\016\327\303\276\t\332\347\277\217\"\347+\347\"\301?]J\241\216\372P\344\277\203e\266\210\206}\371?\320\243)\326\250\321\363?\333\"_\r\263N\334?\256\006w\331\220\031\341?m\262\213\020Q\033\342\277\364z\311\352$\316\340?\202\373\341\203\3517\365?\244[\352\253\300\'\361\277\351P\\w\245\324\357?\205\004\365\017\362\345\377?\276\343\306\037\204\246\270\277\221\2306\210\016%\365?\3522F\261\"\272\343\277\024\355\2312\032O\377?\227\332c\362\344\016\324?\233\255\227\272{\\\331?\217\343\215\334\341\363\262?N\301\332\202\254\222\342?n^\215\177\304J\365?\n\303\016p\224>\223?\210\372lBF\372\361?R\247T\263\234\004\331\277\2245-\224@G\342?\n\303\016p\224>\223?\261\373\373l\302\230\355\277\034G\356\222\322I\372\277\342ay\276\216\004\245\277)\237f\307\240\252\267?\366m\006\003\035\007\364\277\3522F\261\"\272\343\277\027\265r\363n\250\340?\013W\244\357t\035\265\277a\223\231\t\240\242\344?I\272\017r\335*\361?\350 u\212l\323\325?\234\362\212\350\306\037\360\277\350?\t\231*\201\360?y\374V\305\214u\370?\356{>,\310\013\344?\217\"\347+\347\"\301?\237\3219\010\350)\305\277\230*\262\'r\306\356\277\025\304}V\260\265\326?>Y\360\000V\310\344?f\365-\274\312B\364?\035\325\331;\303^\341\277>\316U\305\362\212\276\277\214\277\n\351>x\364\277\002v\244M\202w\373\277\324h\307|\241O\366\277\330\220n\027h\253\333\277\3233]\372\322,\364\277+\022\342\010\367\361\352\277c\225\341\204\331\350\375?!\363\357\001Fy\355?\210&\2731t\031\316?\rm\357\271l\224\343\277\223_\254\334\206\257\000@\373\3623\021`\343\327?N:\272\352\212\345\334?6\3049G\226K\354?\247\324\311\023\237z\373?\304\031\267\346bw\222\277\303\205!g\202\230\260?w\317,\2250\370\352?\033\256\326^\031\246\000@\230\033\247\3040\271\330\277\333\"_\r\263N\334??\350\177gc\200\000@V\302\255\274B\233\370?\204\315B\022\352|\344??\201\227\233\034$\372\277!\363\357\001Fy\355?\r\257\034$C~\362?\236\236\214W:O\343?\273d[0\274\240\356\277\266\322\337\220X\377\364?\367\220h\274\340\344\233\277z\205\277\330\347h\347\277\337;\373D8\235\373\277\360\243\345\306\216g\371\277\265\235u\016\212\334\362?@\017\203D\r9\341\277D\026NU\334\240\362\277\201cn\rM7\340?\275\321jO\265\301\361?\010\361I\216\031h\321?DyWI\252~\345\277\314a\374k\322\347\344\277\010\306g\331\3660\335?\342@~\332\315\276\363?{W g\350\255\366\277D\341\343\322\r~\360\277\201!A\243vM\361\277p\204\354\236Q`\361\277g\033\215\333WX\360\277\205\365\351\254\260\330\371\277\332\312[/\314\357\345\277\225\300\335\"\325\200\352\277\276\352\006\207:\020\321\277\332\251\177\245\324\373\341?\275\217=\345\336\327\342\277+E\004\020\214\316\363\277\005{\'\343\027\231\363?\241\313\266\207\226\314\360?Hf\021\341PZ\324?\025\004\rI/\251\242\277+E\004\020\214\316\363\277\260\332\037\343\312\244\351?\034\004L\347X\"\330\277\266\322\337\220X\377\364?R\224\221\370\206\303\247?\010\3308\000\255\027\353\277\327O+E\034\001\327?\321\313\320po-\351\277\333MA\302\325\205\320?8\203\000\330\035\306\376\277(\226<\335\243\305\330?\036\211\033\375\2503\351?>\3717z\025\302\262\277B\353k\240\271i\376\277\035|X\025\241l\374\277\013W\244\357t\035\265\277\321\376\362w\004\n\362\277~\233\225L\370\335\376?i\224lC6\253\372?\353\234\032\266\277\377\347\277@\017\203D\r9\341\277E\324 \353\005\267\323\277y-\274\372\000\n\301\277{\010\245k\361\376\321?\325\2351\377or\370\277\310P\240\206\277>\332?\010\013[\007B\364\363\277\307\254\336i\276\264\353?\003F\275`Iv\361?Q\266_\026\336\021\357\277\246\237_\221\320W\371?^\325\217\321!.\227\277\013W\244\357t\035\265\277\205\004\365\017\362\345\377?%{\343\323\375.\371\277\377z\276\036\255\026\254\277\024\0066j\237\235\336\277a7[&\241,\323?\220.b\203q\337\360?\306A\225#~1\344?g\263\000R\364X\345\277-\257\330\024)\024\370\277\311\312\3756\331$\363\277\375F2\242\354\263\364?\243\276\363\237\216\005\344\277\036Lq(hk\362?\032\202P\354\331\313\367?+\022\342\010\367\361\352\277\256\236\352O-\032\366?v]\030>!\r\362?\330\327\036\027\324\266\362?\334\216\204\224!0\325\277\020 \2749\257+\350?f\374\370\314\231\252\345?\025\004\rI/\251\242\277Cp\260\014\361|\266?Z\340\314\211]\013\340\277x\366\3374\231\357\376\277\001\331\255APU\356\277\221\2306\210\016%\365?d\360\252&5!\374\277>\224RZ]J\322?\0301\030\037\302\324\322\277\250\200\313\202\022\252\336?@\017\203D\r9\341\277\351ts\033\371\243\362?\266\322\337\220X\377\364?|\035R\251M\273\251\277ey\023:\220\024\333\277v9\001\232\315=\357?\327`\207*/\252\341\277\207\203\325U\241\355\340\277\265\235u\016\212\334\362?\367\037\000I\311\225\322?\255i\200\315^\367\363?b\014yq~\365\336?u\t\032\255\224<\325?\250\200\313\202\022\252\336?@-\231\n\220S\355?|\035R\251M\273\251\277\020\316\034\202P\330\270?\2056%\203\'h\245?D\341\343\322\r~\360\277\3522F\261\"\272\343\277\201cn\rM7\340?\007\"\246\274\365\246\356?\033\022\204\020\004\'\370\277\231\307\2503\244\350\373\277\236)=\346\316\210\353\277\024\0066j\237\235\336\277\301\226\010\366\255?\364\277\006\026a\035)s\300\277\177\366^\356S\026\375\277\241\010a\\\327\224\347?\375\004\0058\026\312\345\277\263r\223Yg\245\376?\0222\215`e\022\326\277\260\332\037\343\312\244\351?rw)\267I\231\324\277\240r5at\332\353?\n\252\231\216\255\\\372\277\204\315B\022\352|\344?\236\236\214W:O\343?~Yh\342!\364\357\277\376_\316\331q\002\324\277\247(\310\244+K\350\277\332\312[/\314\357\345\277\034\004L\347X\"\330\277\376_\316\331q\002\324\277N\216\270{\027\266\371?\330\327\036\027\324\266\362?\353\317<\275T\334\360\277O\202=$\215\371\311?!\363\357\001Fy\355?\345:\206\003\225_\370\277\257\010\277T\312_\372?\016\344\206\246\021\241\364?\375\352~h\006<\314\277\006\267\\v\265#\347?\321\r\376\332E\027\370?hP\367]&{\362\277\317\323\020\303\341\322\375\277-\344B\227\3676\372\277\210Q\235\346\226P\302?\214\277\n\351>x\364\277\213\212\240fpU\362\277K\323\253\251by\320\277\345:\206\003\225_\370\277\371\027K\240o\356\306\277\325\2351\377or\370\277\272\314\347\271\037\240\371\277\371\021\310\037\036\221\362?\221\240v\332\200\312\351?FK\270\327\252\303\364\277\311H\353\335e\227\316\277V\224\016KC\340\347?\214\277\n\351>x\364\277Z\340\314\211]\013\340\277\376{\234$\273\326\366?u\t\032\255\224<\325?\362\r\272\313+\255\375\277\227t\003\277f\226\000\300\276\006\325\321\203\344\363?\2455\213\2143\022\365?\343\252R\337j\004\370?\006\267\\v\265#\347?\362a\270\\\270}\332\277\033\303\010\025\rx\323?q\233\313\004\266f\260\277FK\270\327\252\303\364\277\225b\230\025\335\230\376\277\373=\026\017L\260\316?I\357y\364\253M\363?>Y\360\000V\310\344?\327O+E\034\001\327?\312\244\236\027L\017\367?5{A\314\360\371\353\277\262\354\360\t\201\213\327\277@\251>6\343\177\337\277\034\004L\347X\"\330\277\0301\030\037\302\324\322\277 \247:\312\303\243\360\277\026\030|\347<\206\363?\307\227\313\347\007\214\000\300\210\333\3303\210L\327?\336N\266\003y\303\323?;z\314\212M\274\350\277\033\335\031\2165\004\366\277\266\322\337\220X\377\364?\037\005\301(\374_\333\277M$\344vzp\365?>\3717z\025\302\262\277p\204\354\236Q`\361\277e\300\3039\374\037\362?\3443\273\362\305\367\346\277.\013\214N\017\214\300?\247\007\354\0324W\344?\263h\013\214\273\271\360?l$\240g`\006\373\277\3233]\372\322,\364\277\251\211\365l\017\217\275?v\347a\342n\352\277?\361\335\322\336\362\253\363?A\273\204\263\200h\364?\301\226\010\366\255?\364\2773y\371P\267\263\362\277\256\221\'h%S\351\2774\021m\307S\264\347\277\033\252\367\206\240\'\355\277:\020\370\205\260v\344\277+\022\342\010\367\361\352\277\364\331\262\2659Y\001@`\375m\016=\350\350?\036\201\333\2526\216\364?\034!\217sE4\376?!\251\202E\375\351\351\277\332\312[/\314\357\345\277\3443\273\362\305\367\346\277\256\221\'h%S\351\277\3134\322;vj\367\277\260\332\037\343\312\244\351?\305\315\272\363\265\250\357\277N\301\332\202\254\222\342?\306k\245\372E/\376\277\023\270/\260K,\375?\303\205!g\202\230\260?\217\"\347+\347\"\301?\213W~_\333x\351\2770\351\305,\215X\362?@\017\203D\r9\341\277\320\243)\326\250\321\363?\2245-\224@G\342?\317l\314\311\373\335\317?\310\306d9\316B\305?8\326\nnL2\332\277\034\004L\347X\"\330\277\306A\225#~1\344?\241\000!\ne\357\362?\305\276\257\220t\233\331\277\221\2306\210\016%\365?\033\303\010\025\rx\323?%\375\013\200\242\270\277\277\2018\214X*\000\354?&\\O\305?\201\356?g\263\000R\364X\345\277\2010L\006\270Z\367?peX\220\223\262\346?\226\t\326\235z\322\352?,zn\222Z\361\365\277D\341\343\322\r~\360\277\021\266\3474\022\346\343?\026\037G\370\013\356\344?\214\277\n\351>x\364\277\315\367\'g5\242\340\277\366m\006\003\035\007\364\277\0301\030\037\302\324\322\277\210&\2731t\031\316?{\"\266\344\031\213\364\277\247\007\354\0324W\344?\233\277h\3411C\347\277\310P\240\206\277>\332?\255\'Sc\210\r\345\277!\302\223\323i:\320?R\247T\263\234\004\331\2772\327\177\257\357o\335\277g\263\000R\364X\345\277>\3717z\025\302\262\277\230\033\247\3040\271\330\277\006\260\221e\346\273\365?\374l\221\301y\311\360\277\0222\215`e\022\326\277\r\257\034$C~\362?2D\217\316\350\220\360\277p\002\332E\336\322\314\277\375\352~h\006<\314\277\320\243)\326\250\321\363?|\204J\227D+\344\277\375F2\242\354\263\364?n)#\375\365\'\363?\256\304Io\272/\362\277\204\315B\022\352|\344?\371\334]\235On\360?\321\313\320po-\351\277\3724\354$O\313\337\277V1\220\000\216\000\316\277\276\371\021\352{\035\347\277~Yh\342!\364\357\277\367\037\000I\311\225\322?\361\250h\\$\211\361??\201\227\233\034$\372\277\0301\030\037\302\324\322\277\212/\327\304\024\035\364?\001N\375\262\273\033\346?\322\274\305\r. \323\277\025\004\rI/\251\242\277\212\314\315\320F?\341?H\261\363\336<\'\313?\202$\321\256-\236\307?(\226<\335\243\305\330?3\210\004\264\370\300\370?\217\367\004w\304\353\314?\236Z?\262_a\274?\271C\177\246\304\254\352?N:\272\352\212\345\334?\350?\t\231*\201\360?v\222\202\300\357/\364?|\035R\251M\273\251\277=`F\273=.\317\277#\021\017\317`\351\364\277`\375m\016=\350\350?\201\334Mu+\212\332?\360\243\345\306\216g\371\277y\374V\305\214u\370?R\224\221\370\206\303\247?N\177\255\030\326\250\363\277u\360\010\037(\354\356\277\034\004L\347X\"\330\277f\374\370\314\231\252\345?a\036J\2304\334\354\277\nu/\014\3379\370\277l/\246}G\205\307\277\303\332}\333\275o\374?\331A\363\033q\374\366?\332\312[/\314\357\345\277\205X\363\240~\266\354\277;z\314\212M\274\350\277\345\235\217\367b=\353\277FK\270\327\252\303\364\277X\237\237\nC]\275\277\364\005zy\271\007\351\277\332\014\211\231\242\331\364?\377z\276\036\255\026\254\277\000(\3564\305\357\263\277\250\222\234\251\310\220\354\277\315\221\343X\013\351\336\277{\357\223\335\204\256\353\277\345\235\217\367b=\353\277\334+\211\367\2573\273?e\300\3039\374\037\362?\3443\273\362\305\367\346\277]\214\316\370\320:\363?\000\270\321\267Xa\352?\265~\341\377\313.\330?%\375\013\200\242\270\277\277\030@#\202\003\342\350\277\003\004\220\366r\214\342\277?[8|\217\016\376?\303\205!g\202\230\260?T~8\3272k\360\2775\0308\330\"\034\371\277\327`\207*/\252\341\277\362@\022\276^it?\237\3219\010\350)\305\277\252d\3757\311\325\373\2773\255\277\025i3\000\300\351P\\w\245\324\357?A\273\204\263\200h\364?\025\004\rI/\251\242\277\313\016s\034\351T\373?\304\031\267\346bw\222\277\007nd\373\017\322\346\277`\375m\016=\350\350?!\251\202E\375\351\351\277\000(\3564\305\357\263\277*\352:n0\226\365?\246j\365\016\0025\367?\205X\363\240~\266\354\2777\225\307\233\000\210\325?\371\334]\235On\360?)\237f\307\240\252\267?FZ\303:\354\320\372?\346\337\274a9\'\372?\207\203\325U\241\355\340\277\212\314\315\320F?\341?`\375m\016=\350\350?\001\362\276\317\274\245\324?^\325\217\321!.\227\277\257\010\277T\312_\372?\342ay\276\216\004\245\277\306o4\225}\354\364?Q#o5\3272\362?\211dAG\343?\366?\377\345p)X\034\373?0\351\305,\215X\362?!\363\357\001Fy\355?|f+\312)\273\374?\203e\266\210\206}\371?\3134\322;vj\367\277\334\216\204\224!0\325\277A\273\204\263\200h\364?\016\327\303\276\t\332\347\277\203V\253%Ep\363\277~\316\267S\215\272\347?\302Q\025\310b|\335?vd\343N\360t\343?\360O\3475\002\227\354?\256\006w\331\220\031\341?\240\3063\362\000\253\370\277\026Hc\324u\207\375\277\030sE\211\230\276\361\277\037HQ\377\256\030\000@\375\352~h\006<\314\277D\341\343\322\r~\360\277\345:\206\003\225_\370\2778\326\nnL2\332\277\246q\300\037\321\234\350?o\240\337\025\207I\001\300)\237f\307\240\252\267?*\250\r\004Z\254\346\277\202\213\025\250\023\223\365\277NYN\371H\223\367?|\204J\227D+\344\277H\261\363\336<\'\313?\261\373\373l\302\230\355\277\022\336\216\317\330A\371\277\3724\354$O\313\337\277\375\004\0058\026\312\345\277@\017\203D\r9\341\277j_\002\301g\210\370?\377z\276\036\255\026\254\277u\207\227\206gu\000\300i\224lC6\253\372?\230*\262\'r\306\356\277\001\362\276\317\274\245\324?~Yh\342!\364\357\277\204\315B\022\352|\344?\376\343(\256\036\326\341?2\0360\257[{\364?\2178\352P\035\313\376?\020\316\034\202P\330\270?\301\255S\253a\362\356?\210Q\235\346\226P\302?\205\300\177*\342\265\367\277~Yh\342!\364\357\277\276\371\021\352{\035\347\277\354\004\247?#\377\362\277\006\326\360\204s\321\361\277\277\277$\322\027\331\334\2779\207\217rU\203\365?!\251\202E\375\351\351\277_\\r\265\2607\302\277\017\rv\321U\007\307?\026M\346i\013\251\365?\263r\223Yg\245\376?+\003\327\245\265\344\324\277\2056%\203\'h\245?r#+&\275\310\367\277m\262\213\020Q\033\342\277\271\242\203M8\374\303\277cI,MW\023\341\277\026[\302x]\351\000\300\275\321jO\265\301\361?Y\376\342O\340%\354?\353zL\230h\261\240?_\\r\265\2607\302\277\260w\241\230\025\305\317\277]J\241\216\372P\344\277@Q\260\256\343\"\360?\220\nK\337\035\020\356?(\226<\335\243\305\330?\273\310N\274\024\276\313?\0301\030\037\302\324\322\277N\301\332\202\254\222\342?s\375\313\0060\263\373?{\335\302\266\316\307\335?\025\343\021enc\361?l/\246}G\205\307\277x\270\341\337|E\360\277\033\252\367\206\240\'\355\277.|\266\r\2247\357\277\265\235u\016\212\334\362?\005_Y\230\316\304\320\277\001=\272\034}\204\000\300\306j\261\377\347\312\374\277K\250\311\364?B\334\277\321\376\362w\004\n\362\277\325#\324NV\214\337?\226\t\326\235z\322\352?n^\215\177\304J\365?FK\270\327\252\303\364\277\321\313\320po-\351\277{\"\266\344\031\213\364\277A\303\304\005\363\r\351?\026Hc\324u\207\375\277\035\325\331;\303^\341\277\033\303\010\025\rx\323?\025:B\t\277\271\301?\026\037G\370\013\356\344?\005_Y\230\316\304\320\277\265\235u\016\212\334\362?ggB\023\332-\355?o\240\337\025\207I\001\300\354Oj\343Ez\254?:\020\370\205\260v\344\277m\262\213\020Q\033\342\277\347|\263mkI\347?\235\001\226K\010-\366?Q\036\354\237A\021\372\277<\342X\024\261\273\363\277`\034\002\035\373\225\363\277\022\336\216\317\330A\371\277|\204J\227D+\344\277\322\274\305\r. \323\277*\2071zb\270\342?\035|X\025\241l\374\277\035\325\331;\303^\341\277!\353\257\257\323\323\370?<\342X\024\261\273\363\277\035\325\331;\303^\341\277\232\374\022\266r\013\376\277\227l\337\221H\260\375?\336N\266\003y\303\323?\035\027\007\246\231H\360?\245\031\275A\352=\322\277nf\315\3216\360\351?v\347a\342n\352\277?\233\255\227\272{\\\331?\006\026a\035)s\300\277\272\314\347\271\037\240\371\277J U\334B\263\376\2775\0308\330\"\034\371\277\226\t\326\235z\322\352?|\204J\227D+\344\277\2245-\224@G\342?{S\207i\335\313\310?\024\0066j\237\235\336\277Ag\206\"\364\227\327? ?\256@`\244\345\277\227t\003\277f\226\000\300\255\'Sc\210\r\345\277)\200fi\223P\361?\356j\342F\265b\311?N\301\332\202\254\222\342?\243\244m\320~w\312\277l/\246}G\205\307\277\330\264\020e\324x\267\2779\207\217rU\203\365?\276\343\306\037\204\246\270\277\0133\002\242\010P\331\277\0054w\343\253\215\334\277\354Oj\343Ez\254?\304c\346\356\030c\353\277\3522F\261\"\272\343\277\335\321&@\233W\367\277.\276\343wj!\376?m\262\213\020Q\033\342\277X\237\237\nC]\275\277@\251>6\343\177\337\277\026\037G\370\013\356\344?v]\030>!\r\362?\267q\036\030\304g\373?\n\303\016p\224>\223?\226\t\326\235z\322\352?6\3049G\226K\354?q\320\241\326\3235\356?\022\351\224\345\277\300\305\277\257\277\3453\356_\247\277\370s-V\317\313\000@\227\371&}\034\"\000@\n\252\231\216\255\\\372\277\375\352~h\006<\314\277\247(\310\244+K\350\277\034\004L\347X\"\330\277y\355KbKh\362\277.\340\251\231\354T\314?:\020\370\205\260v\344\277K\323\253\251by\320\277\2018\214X*\000\354?\200\306w\001\033\025\363?\317l\314\311\373\335\317?\026\274\310\255V\016\313\277u\t\032\255\224<\325?f\374\370\314\231\252\345?\257\010\277T\312_\372?\305\005`\220\340\246\360?\326F\001[\037\034\310\277\001\331\255APU\356\277P\225\203\214\346\035\353?2\327\177\257\357o\335\277\3522F\261\"\272\343\277\257\277\3453\356_\247\277\322\274\305\r. \323\277!\302\223\323i:\320?.|\266\r\2247\357\277q\233\313\004\266f\260\277v9\001\232\315=\357?!\302\223\323i:\320?peX\220\223\262\346?0\247\230\302\266n\343\277D\341\343\322\r~\360\277peX\220\223\262\346?\321\r\376\332E\027\370?N\177\255\030\326\250\363\277\311H\353\335e\227\316\277v\222\202\300\357/\364?Z\340\314\211]\013\340\2770\351\305,\215X\362?\rm\357\271l\224\343\277;h\373c\227\325\332?\013W\244\357t\035\265\277\317\227\256~\036\025\304?\003\004\220\366r\214\342\277n\200S\241F~\303?9\202\014\335\277a\375\277\367\220h\274\340\344\233\277\276\006\325\321\203\344\363?\256\006w\331\220\031\341?\354D\027\330\330\240\301\277j\272\313b\303\300\366\277[Wdv\002\030\361?\0301\030\037\302\324\322\277\357n{D\300D\367\277h\013\0040\333\267\333?\0301\030\037\302\324\322\277\337\025\234%\253\207\377?\314a\374k\322\347\344\277\275u\267\025\317I\311\277\3134\322;vj\367\277\010\3308\000\255\027\353\277\236Z?\262_a\274?\215\364tk\r\233\366\2776\275n6\307\343\372?\025\004\rI/\251\242\277\310\306d9\316B\305?\001N\375\262\273\033\346?\254\227\2724-\242\203?3\255\277\025i3\000\300\227\332c\362\344\016\324?FZ\303:\354\320\372?\350\007d\374\377\202\357\277\340\016l\n\253\017\215?|\204J\227D+\344\277\310\306d9\316B\305?@\017\203D\r9\341\277\2366\000\316\326O\370?|\204J\227D+\344\277>\325\225,\251\364\326\277@\017\203D\r9\341\277]\214\316\370\320:\363?\366G\247\343\217\361\367?\334\216\204\224!0\325\277\302\231\230\001e\220\312?n\200S\241F~\303?R\247T\263\234\004\331\277q\233\313\004\266f\260\277\336N\266\003y\303\323?>\3717z\025\302\262\277\336\217\371\325\304m\330\277>Y\360\000V\310\344?"
      }
    }
  }
}
node {
  name: "tensors/component_12"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 750
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
            size: 750
          }
          dim {
            size: 1
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "buffer_size"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1000
      }
    }
  }
}
node {
  name: "seed"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "seed2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "count"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "batch_size"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 300
      }
    }
  }
}
node {
  name: "Iterator"
  op: "Iterator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "TensorSliceDataset"
  op: "TensorSliceDataset"
  input: "tensors/component_0"
  input: "tensors/component_1"
  input: "tensors/component_2"
  input: "tensors/component_3"
  input: "tensors/component_4"
  input: "tensors/component_5"
  input: "tensors/component_6"
  input: "tensors/component_7"
  input: "tensors/component_8"
  input: "tensors/component_9"
  input: "tensors/component_10"
  input: "tensors/component_11"
  input: "tensors/component_12"
  attr {
    key: "Toutput_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
      }
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Iterator"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "ShuffleDataset"
  op: "ShuffleDataset"
  input: "TensorSliceDataset"
  input: "buffer_size"
  input: "seed"
  input: "seed2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Iterator"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
      }
    }
  }
  attr {
    key: "reshuffle_each_iteration"
    value {
      b: true
    }
  }
}
node {
  name: "RepeatDataset"
  op: "RepeatDataset"
  input: "ShuffleDataset"
  input: "count"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Iterator"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
      }
    }
  }
}
node {
  name: "BatchDataset"
  op: "BatchDataset"
  input: "RepeatDataset"
  input: "batch_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Iterator"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
      }
    }
  }
}
node {
  name: "MakeIterator"
  op: "MakeIterator"
  input: "BatchDataset"
  input: "Iterator"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Iterator"
      }
    }
  }
}
node {
  name: "IteratorToStringHandle"
  op: "IteratorToStringHandle"
  input: "Iterator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "IteratorGetNext"
  op: "IteratorGetNext"
  input: "Iterator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/acousticness/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/acousticness/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext"
  input: "dnn/input_from_feature_columns/input_layer/acousticness/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/acousticness/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/acousticness/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/acousticness/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/acousticness/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/acousticness/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/acousticness/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/acousticness/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/acousticness/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/acousticness/Shape"
  input: "dnn/input_from_feature_columns/input_layer/acousticness/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/acousticness/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/acousticness/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/acousticness/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/acousticness/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/acousticness/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/acousticness/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/acousticness/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/acousticness/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/acousticness/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/danceability/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/danceability/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:1"
  input: "dnn/input_from_feature_columns/input_layer/danceability/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/danceability/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/danceability/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/danceability/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/danceability/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/danceability/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/danceability/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/danceability/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/danceability/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/danceability/Shape"
  input: "dnn/input_from_feature_columns/input_layer/danceability/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/danceability/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/danceability/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/danceability/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/danceability/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/danceability/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/danceability/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/danceability/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/danceability/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/danceability/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/duration_ms/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/duration_ms/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:2"
  input: "dnn/input_from_feature_columns/input_layer/duration_ms/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/duration_ms/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/duration_ms/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/duration_ms/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/duration_ms/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/duration_ms/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/duration_ms/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/duration_ms/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/duration_ms/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/duration_ms/Shape"
  input: "dnn/input_from_feature_columns/input_layer/duration_ms/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/duration_ms/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/duration_ms/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/duration_ms/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/duration_ms/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/duration_ms/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/duration_ms/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/duration_ms/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/duration_ms/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/duration_ms/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/energy/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/energy/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:3"
  input: "dnn/input_from_feature_columns/input_layer/energy/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/energy/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/energy/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/energy/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/energy/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/energy/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/energy/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/energy/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/energy/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/energy/Shape"
  input: "dnn/input_from_feature_columns/input_layer/energy/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/energy/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/energy/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/energy/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/energy/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/energy/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/energy/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/energy/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/energy/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/energy/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/instrumentalness/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/instrumentalness/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:4"
  input: "dnn/input_from_feature_columns/input_layer/instrumentalness/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/instrumentalness/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/instrumentalness/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/instrumentalness/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/instrumentalness/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/instrumentalness/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/instrumentalness/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/instrumentalness/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/instrumentalness/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/instrumentalness/Shape"
  input: "dnn/input_from_feature_columns/input_layer/instrumentalness/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/instrumentalness/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/instrumentalness/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/instrumentalness/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/instrumentalness/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/instrumentalness/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/instrumentalness/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/instrumentalness/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/instrumentalness/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/instrumentalness/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/key/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/key/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:5"
  input: "dnn/input_from_feature_columns/input_layer/key/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/key/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/key/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/key/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/key/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/key/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/key/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/key/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/key/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/key/Shape"
  input: "dnn/input_from_feature_columns/input_layer/key/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/key/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/key/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/key/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/key/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/key/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/key/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/key/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/key/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/key/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/liveness/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/liveness/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:6"
  input: "dnn/input_from_feature_columns/input_layer/liveness/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/liveness/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/liveness/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/liveness/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/liveness/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/liveness/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/liveness/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/liveness/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/liveness/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/liveness/Shape"
  input: "dnn/input_from_feature_columns/input_layer/liveness/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/liveness/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/liveness/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/liveness/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/liveness/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/liveness/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/liveness/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/liveness/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/liveness/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/liveness/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/loudness/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/loudness/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:7"
  input: "dnn/input_from_feature_columns/input_layer/loudness/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/loudness/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/loudness/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/loudness/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/loudness/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/loudness/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/loudness/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/loudness/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/loudness/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/loudness/Shape"
  input: "dnn/input_from_feature_columns/input_layer/loudness/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/loudness/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/loudness/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/loudness/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/loudness/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/loudness/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/loudness/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/loudness/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/loudness/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/loudness/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/speechiness/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/speechiness/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:8"
  input: "dnn/input_from_feature_columns/input_layer/speechiness/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/speechiness/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/speechiness/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/speechiness/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/speechiness/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/speechiness/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/speechiness/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/speechiness/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/speechiness/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/speechiness/Shape"
  input: "dnn/input_from_feature_columns/input_layer/speechiness/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/speechiness/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/speechiness/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/speechiness/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/speechiness/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/speechiness/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/speechiness/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/speechiness/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/speechiness/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/speechiness/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/tempo/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/tempo/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:9"
  input: "dnn/input_from_feature_columns/input_layer/tempo/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/tempo/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/tempo/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/tempo/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/tempo/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/tempo/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/tempo/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/tempo/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/tempo/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/tempo/Shape"
  input: "dnn/input_from_feature_columns/input_layer/tempo/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/tempo/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/tempo/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/tempo/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/tempo/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/tempo/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/tempo/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/tempo/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/tempo/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/tempo/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/time_signature/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/time_signature/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:10"
  input: "dnn/input_from_feature_columns/input_layer/time_signature/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/time_signature/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/time_signature/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/time_signature/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/time_signature/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/time_signature/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/time_signature/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/time_signature/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/time_signature/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/time_signature/Shape"
  input: "dnn/input_from_feature_columns/input_layer/time_signature/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/time_signature/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/time_signature/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/time_signature/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/time_signature/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/time_signature/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/time_signature/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/time_signature/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/time_signature/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/time_signature/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/valence/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/valence/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:11"
  input: "dnn/input_from_feature_columns/input_layer/valence/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/valence/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/valence/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/valence/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/valence/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/valence/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/valence/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/valence/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/valence/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/valence/Shape"
  input: "dnn/input_from_feature_columns/input_layer/valence/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/valence/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/valence/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/valence/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/valence/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/valence/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/valence/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/valence/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/valence/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/valence/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concat"
  op: "ConcatV2"
  input: "dnn/input_from_feature_columns/input_layer/acousticness/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/danceability/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/duration_ms/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/energy/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/instrumentalness/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/key/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/liveness/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/loudness/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/speechiness/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/tempo/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/time_signature/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/valence/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/concat/axis"
  attr {
    key: "N"
    value {
      i: 12
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 12
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\014\000\000\000\005\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.5940885543823242
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5940885543823242
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/max"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/RandomUniform"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform"
  op: "Add"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/mul"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 12
        }
        dim {
          size: 5
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Assign"
  op: "Assign"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/read"
  op: "Identity"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/part_0/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/part_0"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/part_0/Assign"
  op: "Assign"
  input: "dnn/hiddenlayer_0/bias/part_0"
  input: "dnn/hiddenlayer_0/bias/part_0/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/part_0/read"
  op: "Identity"
  input: "dnn/hiddenlayer_0/bias/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel"
  op: "Identity"
  input: "dnn/hiddenlayer_0/kernel/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/MatMul"
  op: "MatMul"
  input: "dnn/input_from_feature_columns/input_layer/concat"
  input: "dnn/hiddenlayer_0/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias"
  op: "Identity"
  input: "dnn/hiddenlayer_0/bias/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/BiasAdd"
  op: "BiasAdd"
  input: "dnn/hiddenlayer_0/MatMul"
  input: "dnn/hiddenlayer_0/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/Relu"
  op: "Relu"
  input: "dnn/hiddenlayer_0/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/zero"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/Equal"
  op: "Equal"
  input: "dnn/hiddenlayer_0/Relu"
  input: "dnn/zero_fraction/zero"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/Cast"
  op: "Cast"
  input: "dnn/zero_fraction/Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/Mean"
  op: "Mean"
  input: "dnn/zero_fraction/Cast"
  input: "dnn/zero_fraction/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/fraction_of_zero_values/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/hiddenlayer_0/fraction_of_zero_values"
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/fraction_of_zero_values"
  op: "ScalarSummary"
  input: "dnn/dnn/hiddenlayer_0/fraction_of_zero_values/tags"
  input: "dnn/zero_fraction/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/activation/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/hiddenlayer_0/activation"
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/activation"
  op: "HistogramSummary"
  input: "dnn/dnn/hiddenlayer_0/activation/tag"
  input: "dnn/hiddenlayer_0/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1.0
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform/max"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform/RandomUniform"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Initializer/random_uniform"
  op: "Add"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform/mul"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Assign"
  op: "Assign"
  input: "dnn/logits/kernel/part_0"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/read"
  op: "Identity"
  input: "dnn/logits/kernel/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/bias/part_0/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/logits/bias/part_0"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/logits/bias/part_0/Assign"
  op: "Assign"
  input: "dnn/logits/bias/part_0"
  input: "dnn/logits/bias/part_0/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/logits/bias/part_0/read"
  op: "Identity"
  input: "dnn/logits/bias/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel"
  op: "Identity"
  input: "dnn/logits/kernel/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/MatMul"
  op: "MatMul"
  input: "dnn/hiddenlayer_0/Relu"
  input: "dnn/logits/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/logits/bias"
  op: "Identity"
  input: "dnn/logits/bias/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/BiasAdd"
  op: "BiasAdd"
  input: "dnn/logits/MatMul"
  input: "dnn/logits/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/zero_fraction_1/zero"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/Equal"
  op: "Equal"
  input: "dnn/logits/BiasAdd"
  input: "dnn/zero_fraction_1/zero"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/Cast"
  op: "Cast"
  input: "dnn/zero_fraction_1/Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/Mean"
  op: "Mean"
  input: "dnn/zero_fraction_1/Cast"
  input: "dnn/zero_fraction_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/dnn/logits/fraction_of_zero_values/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/logits/fraction_of_zero_values"
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/fraction_of_zero_values"
  op: "ScalarSummary"
  input: "dnn/dnn/logits/fraction_of_zero_values/tags"
  input: "dnn/zero_fraction_1/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/activation/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/logits/activation"
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/activation"
  op: "HistogramSummary"
  input: "dnn/dnn/logits/activation/tag"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/predictions/logits/Shape"
  op: "Shape"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/predictions/logits/assert_rank_at_least/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "dnn/head/predictions/logits/assert_rank_at_least/assert_type/statically_determined_correct_type"
  op: "NoOp"
}
node {
  name: "dnn/head/predictions/logits/assert_rank_at_least/static_checks_determined_all_ok"
  op: "NoOp"
}
node {
  name: "dnn/head/predictions/logistic"
  op: "Sigmoid"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/predictions/zeros_like"
  op: "ZerosLike"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/predictions/two_class_logits/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/head/predictions/two_class_logits"
  op: "ConcatV2"
  input: "dnn/head/predictions/zeros_like"
  input: "dnn/logits/BiasAdd"
  input: "dnn/head/predictions/two_class_logits/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/predictions/probabilities"
  op: "Softmax"
  input: "dnn/head/predictions/two_class_logits"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/predictions/class_ids/dimension"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/head/predictions/class_ids"
  op: "ArgMax"
  input: "dnn/head/predictions/two_class_logits"
  input: "dnn/head/predictions/class_ids/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "dnn/head/predictions/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/head/predictions/ExpandDims"
  op: "ExpandDims"
  input: "dnn/head/predictions/class_ids"
  input: "dnn/head/predictions/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/predictions/str_classes"
  op: "AsString"
  input: "dnn/head/predictions/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "fill"
    value {
      s: ""
    }
  }
  attr {
    key: "precision"
    value {
      i: -1
    }
  }
  attr {
    key: "scientific"
    value {
      b: false
    }
  }
  attr {
    key: "shortest"
    value {
      b: false
    }
  }
  attr {
    key: "width"
    value {
      i: -1
    }
  }
}
node {
  name: "dnn/head/labels/Shape"
  op: "Shape"
  input: "IteratorGetNext:12"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/labels/Shape_1"
  op: "Shape"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/labels/assert_rank_at_least/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_rank_at_least/Shape"
  op: "Shape"
  input: "IteratorGetNext:12"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/labels/assert_rank_at_least/assert_type/statically_determined_correct_type"
  op: "NoOp"
}
node {
  name: "dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  op: "NoOp"
}
node {
  name: "dnn/head/labels/strided_slice/stack"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/head/labels/strided_slice/stack_1"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/head/labels/strided_slice/stack_2"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/head/labels/strided_slice"
  op: "StridedSlice"
  input: "dnn/head/labels/Shape_1"
  input: "dnn/head/labels/strided_slice/stack"
  input: "dnn/head/labels/strided_slice/stack_1"
  input: "dnn/head/labels/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/head/labels/concat/values_1"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/head/labels/concat/axis"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/head/labels/concat"
  op: "ConcatV2"
  input: "dnn/head/labels/strided_slice"
  input: "dnn/head/labels/concat/values_1"
  input: "dnn/head/labels/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/Equal"
  op: "Equal"
  input: "dnn/head/labels/concat"
  input: "dnn/head/labels/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/Const"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/All"
  op: "All"
  input: "dnn/head/labels/assert_equal/Equal"
  input: "dnn/head/labels/assert_equal/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/Assert/Const"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "expected_labels_shape: "
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/Assert/Const_1"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "labels_shape: "
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/Assert/Assert/data_0"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "expected_labels_shape: "
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/Assert/Assert/data_2"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "labels_shape: "
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/Assert/Assert"
  op: "Assert"
  input: "dnn/head/labels/assert_equal/All"
  input: "dnn/head/labels/assert_equal/Assert/Assert/data_0"
  input: "dnn/head/labels/concat"
  input: "dnn/head/labels/assert_equal/Assert/Assert/data_2"
  input: "dnn/head/labels/Shape"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "dnn/head/labels"
  op: "Identity"
  input: "IteratorGetNext:12"
  input: "^dnn/head/labels/assert_equal/Assert/Assert"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/ToFloat"
  op: "Cast"
  input: "dnn/head/labels"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Less"
  op: "Less"
  input: "dnn/head/ToFloat"
  input: "dnn/head/assert_range/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/All"
  op: "All"
  input: "dnn/head/assert_range/assert_less/Less"
  input: "dnn/head/assert_range/assert_less/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Label IDs must < n_classes"
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x < y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (dnn/head/ToFloat:0) = "
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (dnn/head/assert_range/Const:0) = "
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Switch"
  op: "Switch"
  input: "dnn/head/assert_range/assert_less/All"
  input: "dnn/head/assert_range/assert_less/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/switch_t"
  op: "Identity"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/switch_f"
  op: "Identity"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/pred_id"
  op: "Identity"
  input: "dnn/head/assert_range/assert_less/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/NoOp"
  op: "NoOp"
  input: "^dnn/head/assert_range/assert_less/Assert/AssertGuard/switch_t"
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/control_dependency"
  op: "Identity"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/switch_t"
  input: "^dnn/head/assert_range/assert_less/Assert/AssertGuard/NoOp"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/assert_range/assert_less/Assert/AssertGuard/switch_t"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert/data_0"
  op: "Const"
  input: "^dnn/head/assert_range/assert_less/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Label IDs must < n_classes"
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert/data_1"
  op: "Const"
  input: "^dnn/head/assert_range/assert_less/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x < y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert/data_2"
  op: "Const"
  input: "^dnn/head/assert_range/assert_less/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (dnn/head/ToFloat:0) = "
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert/data_4"
  op: "Const"
  input: "^dnn/head/assert_range/assert_less/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (dnn/head/assert_range/Const:0) = "
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert"
  op: "Assert"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert/Switch"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert/data_0"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert/data_1"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert/data_2"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert/Switch_1"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert/data_4"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert/Switch_2"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_FLOAT
        type: DT_STRING
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert/Switch"
  op: "Switch"
  input: "dnn/head/assert_range/assert_less/All"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/assert_range/assert_less/All"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert/Switch_1"
  op: "Switch"
  input: "dnn/head/ToFloat"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/ToFloat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert/Switch_2"
  op: "Switch"
  input: "dnn/head/assert_range/Const"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/assert_range/Const"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/control_dependency_1"
  op: "Identity"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/switch_f"
  input: "^dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/assert_range/assert_less/Assert/AssertGuard/switch_f"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Merge"
  op: "Merge"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/control_dependency_1"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/LessEqual"
  op: "LessEqual"
  input: "dnn/head/assert_range/assert_non_negative/Const"
  input: "dnn/head/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/All"
  op: "All"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/LessEqual"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Label IDs must >= 0"
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x >= 0 did not hold element-wise:"
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (dnn/head/ToFloat:0) = "
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Switch"
  op: "Switch"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/All"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_t"
  op: "Identity"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
  op: "Identity"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/pred_id"
  op: "Identity"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/NoOp"
  op: "NoOp"
  input: "^dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_t"
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/control_dependency"
  op: "Identity"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_t"
  input: "^dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/NoOp"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_t"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_0"
  op: "Const"
  input: "^dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Label IDs must >= 0"
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_1"
  op: "Const"
  input: "^dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x >= 0 did not hold element-wise:"
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_2"
  op: "Const"
  input: "^dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (dnn/head/ToFloat:0) = "
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert"
  op: "Assert"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/Switch"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_0"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_1"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_2"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/Switch_1"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/Switch"
  op: "Switch"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/All"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/assert_range/assert_non_negative/assert_less_equal/All"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/Switch_1"
  op: "Switch"
  input: "dnn/head/ToFloat"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/ToFloat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/control_dependency_1"
  op: "Identity"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
  input: "^dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Merge"
  op: "Merge"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/control_dependency_1"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/Identity"
  op: "Identity"
  input: "dnn/head/ToFloat"
  input: "^dnn/head/assert_range/assert_less/Assert/AssertGuard/Merge"
  input: "^dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/logistic_loss/zeros_like"
  op: "ZerosLike"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/logistic_loss/GreaterEqual"
  op: "GreaterEqual"
  input: "dnn/logits/BiasAdd"
  input: "dnn/head/logistic_loss/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/logistic_loss/Select"
  op: "Select"
  input: "dnn/head/logistic_loss/GreaterEqual"
  input: "dnn/logits/BiasAdd"
  input: "dnn/head/logistic_loss/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/logistic_loss/Neg"
  op: "Neg"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/logistic_loss/Select_1"
  op: "Select"
  input: "dnn/head/logistic_loss/GreaterEqual"
  input: "dnn/head/logistic_loss/Neg"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/logistic_loss/mul"
  op: "Mul"
  input: "dnn/logits/BiasAdd"
  input: "dnn/head/assert_range/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/logistic_loss/sub"
  op: "Sub"
  input: "dnn/head/logistic_loss/Select"
  input: "dnn/head/logistic_loss/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/logistic_loss/Exp"
  op: "Exp"
  input: "dnn/head/logistic_loss/Select_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/logistic_loss/Log1p"
  op: "Log1p"
  input: "dnn/head/logistic_loss/Exp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/logistic_loss"
  op: "Add"
  input: "dnn/head/logistic_loss/sub"
  input: "dnn/head/logistic_loss/Log1p"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/weighted_loss/assert_broadcastable/weights"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/head/weighted_loss/assert_broadcastable/weights/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/weighted_loss/assert_broadcastable/weights/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/head/weighted_loss/assert_broadcastable/values/shape"
  op: "Shape"
  input: "dnn/head/logistic_loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/weighted_loss/assert_broadcastable/values/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "dnn/head/weighted_loss/assert_broadcastable/static_scalar_check_success"
  op: "NoOp"
}
node {
  name: "dnn/head/weighted_loss/ToFloat_1/x"
  op: "Const"
  input: "^dnn/head/weighted_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/head/weighted_loss/Mul"
  op: "Mul"
  input: "dnn/head/logistic_loss"
  input: "dnn/head/weighted_loss/ToFloat_1/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/weighted_loss/Const"
  op: "Const"
  input: "^dnn/head/weighted_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/head/weighted_loss/Sum"
  op: "Sum"
  input: "dnn/head/weighted_loss/Mul"
  input: "dnn/head/weighted_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/grad_ys_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/head/gradients/Fill"
  op: "Fill"
  input: "dnn/head/gradients/Shape"
  input: "dnn/head/gradients/grad_ys_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Sum_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Sum_grad/Reshape"
  op: "Reshape"
  input: "dnn/head/gradients/Fill"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Sum_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Sum_grad/Shape"
  op: "Shape"
  input: "dnn/head/weighted_loss/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Sum_grad/Tile"
  op: "Tile"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Sum_grad/Reshape"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Sum_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Shape"
  op: "Shape"
  input: "dnn/head/logistic_loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Shape"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Mul"
  op: "Mul"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Sum_grad/Tile"
  input: "dnn/head/weighted_loss/ToFloat_1/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Sum"
  op: "Sum"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Mul"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Reshape"
  op: "Reshape"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Sum"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Mul_1"
  op: "Mul"
  input: "dnn/head/logistic_loss"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Sum_1"
  op: "Sum"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Mul_1"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Reshape_1"
  op: "Reshape"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Sum_1"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Reshape"
  input: "^dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Reshape_1"
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Reshape"
  input: "^dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Reshape_1"
  input: "^dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss_grad/Shape"
  op: "Shape"
  input: "dnn/head/logistic_loss/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss_grad/Shape_1"
  op: "Shape"
  input: "dnn/head/logistic_loss/Log1p"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "dnn/head/gradients/dnn/head/logistic_loss_grad/Shape"
  input: "dnn/head/gradients/dnn/head/logistic_loss_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss_grad/Sum"
  op: "Sum"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/tuple/control_dependency"
  input: "dnn/head/gradients/dnn/head/logistic_loss_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss_grad/Reshape"
  op: "Reshape"
  input: "dnn/head/gradients/dnn/head/logistic_loss_grad/Sum"
  input: "dnn/head/gradients/dnn/head/logistic_loss_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss_grad/Sum_1"
  op: "Sum"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/tuple/control_dependency"
  input: "dnn/head/gradients/dnn/head/logistic_loss_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss_grad/Reshape_1"
  op: "Reshape"
  input: "dnn/head/gradients/dnn/head/logistic_loss_grad/Sum_1"
  input: "dnn/head/gradients/dnn/head/logistic_loss_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/dnn/head/logistic_loss_grad/Reshape"
  input: "^dnn/head/gradients/dnn/head/logistic_loss_grad/Reshape_1"
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/dnn/head/logistic_loss_grad/Reshape"
  input: "^dnn/head/gradients/dnn/head/logistic_loss_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/logistic_loss_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/head/logistic_loss_grad/Reshape_1"
  input: "^dnn/head/gradients/dnn/head/logistic_loss_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/logistic_loss_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Shape"
  op: "Shape"
  input: "dnn/head/logistic_loss/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Shape_1"
  op: "Shape"
  input: "dnn/head/logistic_loss/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Shape"
  input: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Sum"
  op: "Sum"
  input: "dnn/head/gradients/dnn/head/logistic_loss_grad/tuple/control_dependency"
  input: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Reshape"
  op: "Reshape"
  input: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Sum"
  input: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Sum_1"
  op: "Sum"
  input: "dnn/head/gradients/dnn/head/logistic_loss_grad/tuple/control_dependency"
  input: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Neg"
  op: "Neg"
  input: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Reshape_1"
  op: "Reshape"
  input: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Neg"
  input: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Reshape"
  input: "^dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Reshape_1"
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Reshape"
  input: "^dnn/head/gradients/dnn/head/logistic_loss/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Reshape_1"
  input: "^dnn/head/gradients/dnn/head/logistic_loss/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Log1p_grad/add/x"
  op: "Const"
  input: "^dnn/head/gradients/dnn/head/logistic_loss_grad/tuple/control_dependency_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Log1p_grad/add"
  op: "Add"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Log1p_grad/add/x"
  input: "dnn/head/logistic_loss/Exp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Log1p_grad/Reciprocal"
  op: "Reciprocal"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Log1p_grad/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Log1p_grad/mul"
  op: "Mul"
  input: "dnn/head/gradients/dnn/head/logistic_loss_grad/tuple/control_dependency_1"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Log1p_grad/Reciprocal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Select_grad/zeros_like"
  op: "ZerosLike"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Select_grad/Select"
  op: "Select"
  input: "dnn/head/logistic_loss/GreaterEqual"
  input: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/tuple/control_dependency"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Select_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Select_grad/Select_1"
  op: "Select"
  input: "dnn/head/logistic_loss/GreaterEqual"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Select_grad/zeros_like"
  input: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Select_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/dnn/head/logistic_loss/Select_grad/Select"
  input: "^dnn/head/gradients/dnn/head/logistic_loss/Select_grad/Select_1"
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Select_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Select_grad/Select"
  input: "^dnn/head/gradients/dnn/head/logistic_loss/Select_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/logistic_loss/Select_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Select_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Select_grad/Select_1"
  input: "^dnn/head/gradients/dnn/head/logistic_loss/Select_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/logistic_loss/Select_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Shape"
  op: "Shape"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Shape_1"
  op: "Shape"
  input: "dnn/head/assert_range/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Shape"
  input: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Mul"
  op: "Mul"
  input: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/tuple/control_dependency_1"
  input: "dnn/head/assert_range/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Sum"
  op: "Sum"
  input: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Mul"
  input: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Reshape"
  op: "Reshape"
  input: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Sum"
  input: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Mul_1"
  op: "Mul"
  input: "dnn/logits/BiasAdd"
  input: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Sum_1"
  op: "Sum"
  input: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Mul_1"
  input: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Reshape_1"
  op: "Reshape"
  input: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Sum_1"
  input: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Reshape"
  input: "^dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Reshape_1"
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Reshape"
  input: "^dnn/head/gradients/dnn/head/logistic_loss/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Reshape_1"
  input: "^dnn/head/gradients/dnn/head/logistic_loss/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Exp_grad/mul"
  op: "Mul"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Log1p_grad/mul"
  input: "dnn/head/logistic_loss/Exp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/zeros_like"
  op: "ZerosLike"
  input: "dnn/head/logistic_loss/Neg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/Select"
  op: "Select"
  input: "dnn/head/logistic_loss/GreaterEqual"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Exp_grad/mul"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/Select_1"
  op: "Select"
  input: "dnn/head/logistic_loss/GreaterEqual"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/zeros_like"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Exp_grad/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/Select"
  input: "^dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/Select_1"
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/Select"
  input: "^dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/Select_1"
  input: "^dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Neg_grad/Neg"
  op: "Neg"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/AddN"
  op: "AddN"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Select_grad/tuple/control_dependency"
  input: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/tuple/control_dependency"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/tuple/control_dependency_1"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Neg_grad/Neg"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/logistic_loss/Select_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/logits/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "dnn/head/gradients/AddN"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/logits/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/AddN"
  input: "^dnn/head/gradients/dnn/logits/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "dnn/head/gradients/dnn/logits/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/AddN"
  input: "^dnn/head/gradients/dnn/logits/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/logistic_loss/Select_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/logits/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/logits/BiasAdd_grad/BiasAddGrad"
  input: "^dnn/head/gradients/dnn/logits/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/logits/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/logits/MatMul_grad/MatMul"
  op: "MatMul"
  input: "dnn/head/gradients/dnn/logits/BiasAdd_grad/tuple/control_dependency"
  input: "dnn/logits/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/logits/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dnn/hiddenlayer_0/Relu"
  input: "dnn/head/gradients/dnn/logits/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/logits/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/dnn/logits/MatMul_grad/MatMul"
  input: "^dnn/head/gradients/dnn/logits/MatMul_grad/MatMul_1"
}
node {
  name: "dnn/head/gradients/dnn/logits/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/dnn/logits/MatMul_grad/MatMul"
  input: "^dnn/head/gradients/dnn/logits/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/logits/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/logits/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/logits/MatMul_grad/MatMul_1"
  input: "^dnn/head/gradients/dnn/logits/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/logits/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "dnn/head/gradients/dnn/logits/MatMul_grad/tuple/control_dependency"
  input: "dnn/hiddenlayer_0/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "dnn/head/gradients/dnn/hiddenlayer_0/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/BiasAddGrad"
  input: "^dnn/head/gradients/dnn/hiddenlayer_0/Relu_grad/ReluGrad"
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/dnn/hiddenlayer_0/Relu_grad/ReluGrad"
  input: "^dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_0/Relu_grad/ReluGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/BiasAddGrad"
  input: "^dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul"
  op: "MatMul"
  input: "dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/control_dependency"
  input: "dnn/hiddenlayer_0/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 12
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dnn/input_from_feature_columns/input_layer/concat"
  input: "dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul"
  input: "^dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul_1"
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul"
  input: "^dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 12
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul_1"
  input: "^dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 12
          }
          dim {
            size: 5
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 12
        }
        dim {
          size: 5
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad/Assign"
  op: "Assign"
  input: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad"
  input: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad/read"
  op: "Identity"
  input: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad/Assign"
  op: "Assign"
  input: "dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad"
  input: "dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad/read"
  op: "Identity"
  input: "dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/kernel/part_0/Adagrad/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/kernel/part_0/Adagrad"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/dnn/logits/kernel/part_0/Adagrad/Assign"
  op: "Assign"
  input: "dnn/dnn/logits/kernel/part_0/Adagrad"
  input: "dnn/dnn/logits/kernel/part_0/Adagrad/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/dnn/logits/kernel/part_0/Adagrad/read"
  op: "Identity"
  input: "dnn/dnn/logits/kernel/part_0/Adagrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/bias/part_0/Adagrad/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/bias/part_0/Adagrad"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/dnn/logits/bias/part_0/Adagrad/Assign"
  op: "Assign"
  input: "dnn/dnn/logits/bias/part_0/Adagrad"
  input: "dnn/dnn/logits/bias/part_0/Adagrad/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/dnn/logits/bias/part_0/Adagrad/read"
  op: "Identity"
  input: "dnn/dnn/logits/bias/part_0/Adagrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/Adagrad/learning_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.05000000074505806
      }
    }
  }
}
node {
  name: "dnn/head/Adagrad/update_dnn/hiddenlayer_0/kernel/part_0/ApplyAdagrad"
  op: "ApplyAdagrad"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  input: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad"
  input: "dnn/head/Adagrad/learning_rate"
  input: "dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/Adagrad/update_dnn/hiddenlayer_0/bias/part_0/ApplyAdagrad"
  op: "ApplyAdagrad"
  input: "dnn/hiddenlayer_0/bias/part_0"
  input: "dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad"
  input: "dnn/head/Adagrad/learning_rate"
  input: "dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/Adagrad/update_dnn/logits/kernel/part_0/ApplyAdagrad"
  op: "ApplyAdagrad"
  input: "dnn/logits/kernel/part_0"
  input: "dnn/dnn/logits/kernel/part_0/Adagrad"
  input: "dnn/head/Adagrad/learning_rate"
  input: "dnn/head/gradients/dnn/logits/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/Adagrad/update_dnn/logits/bias/part_0/ApplyAdagrad"
  op: "ApplyAdagrad"
  input: "dnn/logits/bias/part_0"
  input: "dnn/dnn/logits/bias/part_0/Adagrad"
  input: "dnn/head/Adagrad/learning_rate"
  input: "dnn/head/gradients/dnn/logits/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/Adagrad/update"
  op: "NoOp"
  input: "^dnn/head/Adagrad/update_dnn/hiddenlayer_0/bias/part_0/ApplyAdagrad"
  input: "^dnn/head/Adagrad/update_dnn/hiddenlayer_0/kernel/part_0/ApplyAdagrad"
  input: "^dnn/head/Adagrad/update_dnn/logits/bias/part_0/ApplyAdagrad"
  input: "^dnn/head/Adagrad/update_dnn/logits/kernel/part_0/ApplyAdagrad"
}
node {
  name: "dnn/head/Adagrad/value"
  op: "Const"
  input: "^dnn/head/Adagrad/update"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "dnn/head/Adagrad"
  op: "AssignAdd"
  input: "global_step"
  input: "dnn/head/Adagrad/value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/ones_like/Shape"
  op: "Shape"
  input: "dnn/head/logistic_loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/ones_like/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/head/ones_like"
  op: "Fill"
  input: "dnn/head/ones_like/Shape"
  input: "dnn/head/ones_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/mul/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/head/mul"
  op: "Mul"
  input: "dnn/head/mul/x"
  input: "dnn/head/ones_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/head/Sum"
  op: "Sum"
  input: "dnn/head/mul"
  input: "dnn/head/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/truediv"
  op: "RealDiv"
  input: "dnn/head/weighted_loss/Sum"
  input: "dnn/head/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "loss/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "loss"
      }
    }
  }
}
node {
  name: "loss"
  op: "ScalarSummary"
  input: "loss/tags"
  input: "dnn/head/weighted_loss/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "average_loss/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "average_loss"
      }
    }
  }
}
node {
  name: "average_loss"
  op: "ScalarSummary"
  input: "average_loss/tags"
  input: "dnn/head/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "init"
  op: "NoOp"
  input: "^dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad/Assign"
  input: "^dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad/Assign"
  input: "^dnn/dnn/logits/bias/part_0/Adagrad/Assign"
  input: "^dnn/dnn/logits/kernel/part_0/Adagrad/Assign"
  input: "^dnn/hiddenlayer_0/bias/part_0/Assign"
  input: "^dnn/hiddenlayer_0/kernel/part_0/Assign"
  input: "^dnn/logits/bias/part_0/Assign"
  input: "^dnn/logits/kernel/part_0/Assign"
  input: "^global_step/Assign"
}
node {
  name: "init_1"
  op: "NoOp"
}
node {
  name: "group_deps"
  op: "NoOp"
  input: "^init"
  input: "^init_1"
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_0/bias/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "dnn/logits/kernel/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "dnn/logits/bias/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "dnn/dnn/logits/kernel/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "dnn/dnn/logits/bias/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/stack"
  op: "Pack"
  input: "report_uninitialized_variables/IsVariableInitialized"
  input: "report_uninitialized_variables/IsVariableInitialized_1"
  input: "report_uninitialized_variables/IsVariableInitialized_2"
  input: "report_uninitialized_variables/IsVariableInitialized_3"
  input: "report_uninitialized_variables/IsVariableInitialized_4"
  input: "report_uninitialized_variables/IsVariableInitialized_5"
  input: "report_uninitialized_variables/IsVariableInitialized_6"
  input: "report_uninitialized_variables/IsVariableInitialized_7"
  input: "report_uninitialized_variables/IsVariableInitialized_8"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 9
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 9
          }
        }
        string_val: "global_step"
        string_val: "dnn/hiddenlayer_0/kernel/part_0"
        string_val: "dnn/hiddenlayer_0/bias/part_0"
        string_val: "dnn/logits/kernel/part_0"
        string_val: "dnn/logits/bias/part_0"
        string_val: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad"
        string_val: "dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad"
        string_val: "dnn/dnn/logits/kernel/part_0/Adagrad"
        string_val: "dnn/dnn/logits/bias/part_0/Adagrad"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 9
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables/boolean_mask/strided_slice"
  input: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 9
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 9
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_variables/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables/boolean_mask/concat/values_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  input: "report_uninitialized_variables/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables/Const"
  input: "report_uninitialized_variables/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables/LogicalNot"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/GatherV2/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/GatherV2"
  op: "GatherV2"
  input: "report_uninitialized_variables/boolean_mask/Reshape"
  input: "report_uninitialized_variables/boolean_mask/Squeeze"
  input: "report_uninitialized_variables/boolean_mask/GatherV2/axis"
  device: "/device:CPU:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_resources/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/GatherV2"
  input: "report_uninitialized_resources/Const"
  input: "concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_0/bias/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "dnn/logits/kernel/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "dnn/logits/bias/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "dnn/dnn/logits/kernel/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "dnn/dnn/logits/bias/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/stack"
  op: "Pack"
  input: "report_uninitialized_variables_1/IsVariableInitialized"
  input: "report_uninitialized_variables_1/IsVariableInitialized_1"
  input: "report_uninitialized_variables_1/IsVariableInitialized_2"
  input: "report_uninitialized_variables_1/IsVariableInitialized_3"
  input: "report_uninitialized_variables_1/IsVariableInitialized_4"
  input: "report_uninitialized_variables_1/IsVariableInitialized_5"
  input: "report_uninitialized_variables_1/IsVariableInitialized_6"
  input: "report_uninitialized_variables_1/IsVariableInitialized_7"
  input: "report_uninitialized_variables_1/IsVariableInitialized_8"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 9
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables_1/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 9
          }
        }
        string_val: "global_step"
        string_val: "dnn/hiddenlayer_0/kernel/part_0"
        string_val: "dnn/hiddenlayer_0/bias/part_0"
        string_val: "dnn/logits/kernel/part_0"
        string_val: "dnn/logits/bias/part_0"
        string_val: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad"
        string_val: "dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad"
        string_val: "dnn/dnn/logits/kernel/part_0/Adagrad"
        string_val: "dnn/dnn/logits/bias/part_0/Adagrad"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 9
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  input: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 9
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 9
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape_2"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_variables_1/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables_1/boolean_mask/concat/values_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2"
  input: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables_1/Const"
  input: "report_uninitialized_variables_1/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables_1/LogicalNot"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables_1/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/GatherV2/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/GatherV2"
  op: "GatherV2"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape"
  input: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  input: "report_uninitialized_variables_1/boolean_mask/GatherV2/axis"
  device: "/device:CPU:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "init_2"
  op: "NoOp"
}
node {
  name: "init_all_tables"
  op: "NoOp"
}
node {
  name: "init_3"
  op: "NoOp"
}
node {
  name: "group_deps_1"
  op: "NoOp"
  input: "^init_2"
  input: "^init_3"
  input: "^init_all_tables"
}
node {
  name: "Merge/MergeSummary"
  op: "MergeSummary"
  input: "dnn/dnn/hiddenlayer_0/fraction_of_zero_values"
  input: "dnn/dnn/hiddenlayer_0/activation"
  input: "dnn/dnn/logits/fraction_of_zero_values"
  input: "dnn/dnn/logits/activation"
  input: "loss"
  input: "average_loss"
  attr {
    key: "N"
    value {
      i: 6
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save/StringJoin/inputs_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "_temp_9df1fbdcd17749f38a99ba812f5e32c9/part"
      }
    }
  }
}
node {
  name: "save/StringJoin"
  op: "StringJoin"
  input: "save/Const"
  input: "save/StringJoin/inputs_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "separator"
    value {
      s: ""
    }
  }
}
node {
  name: "save/num_shards"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "save/ShardedFilename/shard"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "save/ShardedFilename"
  op: "ShardedFilename"
  input: "save/StringJoin"
  input: "save/ShardedFilename/shard"
  input: "save/num_shards"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/SaveV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 9
          }
        }
        string_val: "dnn/hiddenlayer_0/bias"
        string_val: "dnn/hiddenlayer_0/bias/t_0/Adagrad"
        string_val: "dnn/hiddenlayer_0/kernel"
        string_val: "dnn/hiddenlayer_0/kernel/t_0/Adagrad"
        string_val: "dnn/logits/bias"
        string_val: "dnn/logits/bias/t_0/Adagrad"
        string_val: "dnn/logits/kernel"
        string_val: "dnn/logits/kernel/t_0/Adagrad"
        string_val: "global_step"
      }
    }
  }
}
node {
  name: "save/SaveV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 9
          }
        }
        string_val: "5 0,5"
        string_val: "5 0,5"
        string_val: "12 5 0,12:0,5"
        string_val: "12 5 0,12:0,5"
        string_val: "1 0,1"
        string_val: "1 0,1"
        string_val: "5 1 0,5:0,1"
        string_val: "5 1 0,5:0,1"
        string_val: ""
      }
    }
  }
}
node {
  name: "save/SaveV2"
  op: "SaveV2"
  input: "save/ShardedFilename"
  input: "save/SaveV2/tensor_names"
  input: "save/SaveV2/shape_and_slices"
  input: "dnn/hiddenlayer_0/bias/part_0/read"
  input: "dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad/read"
  input: "dnn/hiddenlayer_0/kernel/part_0/read"
  input: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad/read"
  input: "dnn/logits/bias/part_0/read"
  input: "dnn/dnn/logits/bias/part_0/Adagrad/read"
  input: "dnn/logits/kernel/part_0/read"
  input: "dnn/dnn/logits/kernel/part_0/Adagrad/read"
  input: "global_step"
  device: "/device:CPU:0"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
      }
    }
  }
}
node {
  name: "save/control_dependency"
  op: "Identity"
  input: "save/ShardedFilename"
  input: "^save/SaveV2"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/ShardedFilename"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/MergeV2Checkpoints/checkpoint_prefixes"
  op: "Pack"
  input: "save/ShardedFilename"
  input: "^save/control_dependency"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "save/MergeV2Checkpoints"
  op: "MergeV2Checkpoints"
  input: "save/MergeV2Checkpoints/checkpoint_prefixes"
  input: "save/Const"
  device: "/device:CPU:0"
  attr {
    key: "delete_old_dirs"
    value {
      b: true
    }
  }
}
node {
  name: "save/Identity"
  op: "Identity"
  input: "save/Const"
  input: "^save/MergeV2Checkpoints"
  input: "^save/control_dependency"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/RestoreV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 9
          }
        }
        string_val: "dnn/hiddenlayer_0/bias"
        string_val: "dnn/hiddenlayer_0/bias/t_0/Adagrad"
        string_val: "dnn/hiddenlayer_0/kernel"
        string_val: "dnn/hiddenlayer_0/kernel/t_0/Adagrad"
        string_val: "dnn/logits/bias"
        string_val: "dnn/logits/bias/t_0/Adagrad"
        string_val: "dnn/logits/kernel"
        string_val: "dnn/logits/kernel/t_0/Adagrad"
        string_val: "global_step"
      }
    }
  }
}
node {
  name: "save/RestoreV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 9
          }
        }
        string_val: "5 0,5"
        string_val: "5 0,5"
        string_val: "12 5 0,12:0,5"
        string_val: "12 5 0,12:0,5"
        string_val: "1 0,1"
        string_val: "1 0,1"
        string_val: "5 1 0,5:0,1"
        string_val: "5 1 0,5:0,1"
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2/tensor_names"
  input: "save/RestoreV2/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
        shape {
          dim {
            size: 5
          }
        }
        shape {
          dim {
            size: 12
          }
          dim {
            size: 5
          }
        }
        shape {
          dim {
            size: 12
          }
          dim {
            size: 5
          }
        }
        shape {
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
      }
    }
  }
}
node {
  name: "save/Assign"
  op: "Assign"
  input: "dnn/hiddenlayer_0/bias/part_0"
  input: "save/RestoreV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_1"
  op: "Assign"
  input: "dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad"
  input: "save/RestoreV2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_2"
  op: "Assign"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  input: "save/RestoreV2:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_3"
  op: "Assign"
  input: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad"
  input: "save/RestoreV2:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_4"
  op: "Assign"
  input: "dnn/logits/bias/part_0"
  input: "save/RestoreV2:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_5"
  op: "Assign"
  input: "dnn/dnn/logits/bias/part_0/Adagrad"
  input: "save/RestoreV2:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_6"
  op: "Assign"
  input: "dnn/logits/kernel/part_0"
  input: "save/RestoreV2:6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_7"
  op: "Assign"
  input: "dnn/dnn/logits/kernel/part_0/Adagrad"
  input: "save/RestoreV2:7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_8"
  op: "Assign"
  input: "global_step"
  input: "save/RestoreV2:8"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_shard"
  op: "NoOp"
  input: "^save/Assign"
  input: "^save/Assign_1"
  input: "^save/Assign_2"
  input: "^save/Assign_3"
  input: "^save/Assign_4"
  input: "^save/Assign_5"
  input: "^save/Assign_6"
  input: "^save/Assign_7"
  input: "^save/Assign_8"
}
node {
  name: "save/restore_all"
  op: "NoOp"
  input: "^save/restore_shard"
}
versions {
  producer: 26
}
