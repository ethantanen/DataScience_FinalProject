node {
  name: "global_step/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global_step/Assign"
  op: "Assign"
  input: "global_step"
  input: "global_step/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global_step/read"
  op: "Identity"
  input: "global_step"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "global_step/cond/Switch"
  op: "Switch"
  input: "global_step/IsVariableInitialized"
  input: "global_step/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/switch_t"
  op: "Identity"
  input: "global_step/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/switch_f"
  op: "Identity"
  input: "global_step/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/pred_id"
  op: "Identity"
  input: "global_step/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/read"
  op: "Identity"
  input: "global_step/cond/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/read/Switch"
  op: "RefSwitch"
  input: "global_step"
  input: "global_step/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/Switch_1"
  op: "Switch"
  input: "global_step/Initializer/zeros"
  input: "global_step/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/Merge"
  op: "Merge"
  input: "global_step/cond/Switch_1"
  input: "global_step/cond/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/add/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step/add"
  op: "Add"
  input: "global_step/cond/Merge"
  input: "global_step/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "tensors/component_0"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 750
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 750
          }
        }
        tensor_content: "\320\302\022qM/\351\277\245\362\320^\025\375\211?\260\246\221\032\330\377\n@M8f\\\315\244\344\277\325\270\">\021\224\371?R\3109\251/Q\362?=\345\315\275\377\216\350\277:\223\254\025\234\344\345\277\221U\371\345B\317\376?\231n\004\245\0061\343\277\255\016i\214\236\324\345\277[\377py\271\373\251\2771@\246{2\363\336\277\201e_\014\234\205\014@\030\013O&\2178\346\277\237%\211\023h\r\321?4\004\2657wl\351\277\302\371\313\214\033\215\322\2779f\277#B\331\361?\316\r\217\tJ\313\336?_a\002o\331\250\351\277PF\030[\346<\263\277\316\r\217\tJ\313\336?\220x_lg\365\340?\024\216\003l\320u\350\277!12\220\256l\345\277i\325\364\223\203\371{\277D%\245\226S\214\351\277\300Z/`\335<\344\2777\210\322\274\304\334\344\2778\r\022%Y\343\350\2777\210\322\274\304\334\344\277\021\310wD\226k\334\277\243\332\220\310q]\320\277\262\320~*\364\250\343\277l\367\333\342\365\316\350\277\217\275\353v\001}\363?\272\035K%\\;\275\277[F\363\326\217l\346?nO1\300\247|\325\2778\301\260\350\270\373\333?\257\357U\325Y3\016@P\021\376c\261\204\365?\245I,Q5\373\277?XZ\333\327\024{\317\277\224\261CfJy\341\277t\333\314\\\"}\342\277\250\202\315\357#\324\330\277\373Q\337\17733\377?a\003\264\025L$\350?\314D&\272\326\017\373?\220\006\340\241\204\375\260?\022\335\373[\240\254\325\277N^\372\316\032d\351?k(\230V)s\002@\033tqQ\362\264\343\277\025,\301\302Y\337\350\277\262\320~*\364\250\343\277IR9\005\202\235\300?8\230\001u5\001\342\277\253\237\n\221\340|\324?\370\005\2643!\002\351\277=[9\366\321k\350\277\r3\205\326\212T\346\277%\034\367\241\207;\335?\'Y\023LRk\376?\270\356\345\227f\273\276?\326\254z-Z\220\347\277\250h*\267p(\367?bH@ \346\253\372?\210\">\321\307\310\344\277\'\030\302X\027B\351\277c\353\321\241\027\375\261\277\3248\307\322\002\034\332?\234N\264\353\202 \351\277\035\204\240\tc\331\340\277\246\356\301\362\331{\312\277E;2f1k\337?p.\035Pg^\007@\246\261\356q\362[\372?\212\247\001\207b\273\335\277PC@\265\244\254\345\277,\t\374\337\262P\345\277,\260\010m\300\370\344\277kDWg\320t\324\2772W3\321k{\257?\271\021\034\256\211\224\346?k\241\246^\316\373\254?\313\352V\330\246\203\351\277\314\335\312!\341|\242\277\341+Q\nl\034\347\277\326g\276\262\276\273\272\277\025S,pO\255\321?a\003\264\025L$\350?^\013$v\033|\331?\306p\343\021\214L\346\277\217\275\353v\001}\363?ek\327\027m\273\000@\251\304;\222\020n\351\277\235y\336\375\3358\344\277\3446+cC$\350\277p.\035Pg^\007@\230D\027\225\352\207\n@\364Z#f\321\353\332\2779\'o\351\002-\323\277\325\236\205\323LM\321\277x\341QV`h\347\277\367\014\nL\266\233\333\277\367\333\344\251t\344\346\277@\251`\307J\364\347\277\036&X7\327d\344\277@PmTX\234\347\277bH@ \346\253\372?\016\345k\274o\004\347\277\025S,pO\255\321?\237%\211\023h\r\321?\272\3462\334\242\270\345\277\217\006\2601\203\260\366?Q\314qY\027\375\342?T\247\r\201n\014\347\277\263\207\272oru\340\277\326S\207\272g8\347\277\364\275\300\227\366|\323\277pr\2521\277\000\345\277b\221\004\333g\337\375?\234I\232\376n\333\335?\016\345k\274o\004\347\277\312\302\004\272\357\366\350\277\203\276p\005\376h\343\277_&\344]\200\230\346\277f\262\003H\001\205\350\277u4\242I\245I\014@\224\261CfJy\341\277\331\031\227/\250.\350\277{\252\272\245\323#\373?O\352LB\262T\345\277\377\250\324\240\241\300\345\277.\216;HGW\351\277\274\304\037C \265\362?\323H\255a\2200\346\277\330\236\316\374/]\342?\323&\232\310\r-\363?\234N\264\353\202 \351\2770\315\017\320\214\357\374?\004\336\022l\372\373\272?isx\351\236\374\365?\216\1779\322\002{\350\277\022!k\267\210\303\334\277\247\223W\224~\374\244\277\036\225\026,\363\247\351\277\020k\212^\364\372\256\277}\220\035;\017\335\322\277\257\356SE\240\233\334?\234\223~\317\0312\351\277\020\234\247\001\356\320\343\277\257>\212\321R\221\351\277\240\354\370\035;\246\351\277V\274\221\230xM\340\277\376\275R\352\274\234\305?\336\335\356\306m\274\306\277\212\000+8E\305\361?\234\302\242\270_l\347\277\352$\021DA\223\336\277\361\202\250\r\237|\305\277\207\365\032\241}\013\335\277\372\215\313\217Y\224\347\277\3208~\251\037\014\351\277\006\375\273\335\335\013\333?\354g\342WK\373\316?Ux\351\227(\322\350\277\256?\216.\340\213\332\277\227/\314\"H\253\001@\nw\253\010\220[\314\277(\\jYg\275\340\277\025S,pO\255\321?;\347eH\355\370\003@\364\372\364\371A\323\001@[yR\3274\005\342\277\022\254\326\271^\365\340\277)\376!\207\333H\344\277a\274l\024\"}\263?\013\201\236\360\245\244\345\277\246lbgX\324\347?\367O\2226\335\363\352?\253\351\320\333\033H\t@N\027\263\315\360\274\264?\301<TwB\345\341?)\202\376\313\264|\345?\300\270w2i\261\340\277l\235J\332\302\314\324\277\336 w\261\224\024\346\277\003k\352>\367\224\343\277\375z\312\377\225D\346?/\273\342\305\227\000\346\277\037\354\316\234\023\252\351\277\'Y\023LRk\376?\363W\002\227\254K\334?\206C4\273\230[\334\277\367!\216c\300\334\324\277\235x\221\336*{\276\277a\003\264\025L$\350?\003\264\256\371x\310\346\277\240\237x>\032]\302\277\243u\324W\341\303\n@\212\000+8E\305\361?\275J\000\250l\030\347\277\277\023i\367\337\323\372?\\t\375w\233\350\345\277k\241\246^\316\373\254?\313\324\260\335U\254\347\2775\026a[\335!\350\277\252\003\2173\307\314\344\277B\344xQ\242\364\345?\331\032\362\267V)\341\277\345]\334\204BT\370?\310\337|\177\317{\350\277=lD\035\200\304\366?\354ac,\374t\343\277\367\333\344\251t\344\346\277(B\254\001\2748\005@,\t\374\337\262P\345\2770\313\021~\010%\343\277\302\371\313\214\033\215\322\277*\265]\314Y\025\341\277z\311\262= \354\330\277\265$\035>M\344\347\277\352g\231.h\353\355?\300Z/`\335<\344\277\001.\230V<\263\336\277\251\304;\222\020n\351\277\240\342\000)A\265\341\277\330\005n\240L\350\347\277.\345\201\224\305\375\221?%W\017,\337;\313?\3704\330\034g<\347\277\312{\275jcT\347\277\325\236\205\323LM\321\277\024^\275\237C\245\341\277%W\017,\337;\313?\031dB\231\201\220\346\277\273\244\2758\227\246\351\277Bf\330\334#\234\310\277\320\001\347\370\222\307\374?\241\260\004LW\357\350\277\367O\2226\335\363\352?z:E\311R\300\347\277\037B-\2247\373\207\277\310\177\000\007\366|\245?\326\261\317\214\363\254\343\277\337\322]\227y\304\346\2777\240\365\"\013E\350\277q\212\315\227\005i\350\277\240W\225&k\203\335\277w/kp{\270\346\277\240\206\266\2509\013\377?\225\204 6\000\274\331\277\210\">\321\307\310\344\277\210\n\237\270\207L\326\277\r_\213W#\241\362?\266\243\244#\215\373\354?n\223\240\033\220\223\334\277\234I\232\376n\333\335?\305\371\024\266\376\234\343?\003W\222\231{\222\351\277\030W\353\206R\374\266\277\016q}\357\222\270\350\277\003\256r)\036\355\322?\305\213\235+\002\004\352?\326\254z-Z\220\347\277\306\316\r^\2505\014@i\325\364\223\203\371{\277\244\355\332\201\030\275\342\277$\310\035\034\251(\350\277\352g\231.h\353\355?\025,E\020`\313\335\277^q\342ve\255\320\277\215nl\204Q\254\327\277ZQ\204\006\204d\326\277\006\277\210RP\320\347\277\031\302\212k\r\005\343\277n}5\223\304\223\353?\t\312b\253\'\330\350\277.\345\201\224\305\375\221?\315B(hRE\341\277\314^\311\362\211\273\334\277\251\326\241Am\301\360?\235x\221\336*{\276\277\221\275\2658\021\313\337\277\316\r\217\tJ\313\336?\233k,\261b\245\350\277S\254b\340\007)\343\277B3y\334~\003\335\277yxI\224\021\374\225\277<\271@\210\351\243\352?\224\177G\211`\263\350\277\321\351}\036C\375\321?\004(bT\320<\304\277\256)l\317\367\233\312?\341q\372\303\267\024\325\277\255\016i\214\236\324\345\277O\033r\344\363\013\332\277\003\264\256\371x\310\346\277\224\261CfJy\341\277\307\234<\376_\362_\277\276\033\334\276&\336\350\277\211\035\351q.\254\350\277\3704\330\034g<\347\277\004\336\022l\372\373\272?ow\377\220X\035\341\277*\307\212\326N\004\370?H\035]K\205x\346\277+?v\341\215$\326\277\007\242\312\030g\351\360?\0376\207\357G\211\341\277\022!k\267\210\303\334\277\250{YQ\037\257\017@\237C\350I\tQ\350\2771;\207Z\211\210\366?$\010\306w\037\035\303?U\3302#\260\303\333\277x\\\343\327\253\245\351\277\305\213\235+\002\004\352?\312|\016d\312\246\351\277\310\276EU\212\254\326?\372p\rVp\255\360?\224\261CfJy\341\277P\345\367\342\0308\351\277^q\342ve\255\320\277(\315?@\216<\267?\234\247\247^ux\351\277\341+Q\nl\034\347\277\224\261CfJy\341\277\272\r\344\375\241\350\365?\240\237x>\032]\302\277?=#\233\261<\325\277\233:\213\\\'\332\350\277\231\0229>pM\350\277c\004\233\206\r\343\337\277h\003\345\206\256\r\014@;\354\237\210\216<\346\277L\201*\027O\330\347\277`\335\037\243\376d\343\277\353}\004\2673\353\336\277\254\315\230\177\362\344\350\277\346\244\242\355?\275\341\277\233&b\315\313\223\350\277E\310c\257}B\351\277\372\025\305e\"\233\017@\361\202\250\r\237|\305\277\014\221\315\250\026\311\342\277\271\223{9\013<\311\277\030W\353\206R\374\266\277r)\346v=\315\341\277Y\307k\361OU\341\277i\325\364\223\203\371{\277\346\0317\353i\213\335\277\\GV\372J?\351\277\300Z/`\335<\344\2779k\336D\353C\332\277\256\332\nc\267V\005@VF\252\255\254\\\325\277r(\213\356\216\322\350\277f6\\?\324\314\324?\2337m\364y\354\366?\214\206\013\235\221(\346\277\226c*L/)\342\277\371\002\226\313s\024\367?F\340@\241\272H\365?\336\327\262\366\022\341\342\277A\244&\207\251\260\005@[\275\334Q\025\365\002@zU\005\261\267\334\304\277\220\333\325\"y\242\351\277\022\335\373[\240\254\325\277\020>_/b\\\347\277\n\365K}\016\264\351?\004(bT\320<\304\277<E\223\373\200\224\346\277\231\020\274\322z\274\346\277yxI\224\021\374\225\277\257\356SE\240\233\334?\223I\010\254\250\273\313\277\341@\325!v]\340\277\252a\327\005SA\341\277\034o\034\362X\230\347\277\'\024\347!\273}\240?\271\021\034\256\211\224\346?\353\032\235\303\376\013\372?\305\371\024\266\376\234\343?\314\335\312!\341|\242\277\210{1D\272 \345\277\355C\210Ca\035\341?\324\341\r\276s\245\340?\206V\231\2237\224\010@\037B-\2247\373\207\277\223I\010\254\250\273\313\277\253\237\n\221\340|\324?WY\364fS\274\347\277\343\3357\360P\314\347\277\237%\211\023h\r\321?w/kp{\270\346\277\\\026\265\245\017t\351\277k\241\246^\316\373\254?C\271\217\177\273\030\345\277\324\341\r\276s\245\340?>#\200b\376\220\363?[\377py\271\373\251\277\367O\2226\335\363\352?\226\223p\030\274\371\350\277\272\022\177\321Dg\351\277\210{1D\272 \345\277\330\355\316\207\014l\331\277PF\030[\346<\263\277\304\034E\3762\021\342\277\3370\246i\0059\343\277\3358Y%\311;\274?\321\221q\034\022d\351\277\251\304;\222\020n\351\277E\310c\257}B\351\277\237%\211\023h\r\321?-z\022\271\353\020\351\277\2168\362\202v\330\346\277\253\240\014!\232\024\006@\010v\304\227\316\234\344\277T{\222u\254\241\351\277\227^\325\354\225\014\346\277\243`\211\345>\347\001@\256T\022F\352\314\323\277\342\204D}^t\347\277\207\220\257\215\325\374\304?\350\31177K\227\001@\257\223b\200)y\362?_\204,0\014\r\343\277\207\222\263\255H,\370?\027\262[\263\234\340\345\277H\035]K\205x\346\277\265$\035>M\344\347\277\220\006\340\241\204\375\260?\211\324$\267\254x\345\277\221Y1\226*{\357?`\016EE@\034\330\277z\366\325mj\251\340\277\375z\312\377\225D\346?II-\216-\023\337\277\210{1D\272 \345\277az\235\220\321\254\004@\304\034E\3762\021\342\277i\353c\364\335\034\324\277\334\307\203>\242\274\345\277\346\024\030\312\300 \365?\026\020\244\205(U\342\277\036\335\223|U1\341\2775rg4\371\334\323?SSom\025\321\342\277\'L;\241\366\230\343\277\270\215?i\260`\345\277\236\2722X\220\024\326\277E\311\2767,=\342\277\031\0104%Y\375\320\277\nw\253\010\220[\314\277\226\354c\213\256Q\351\277\373D\007\325\327`\344\277t\332q\324s\202\351\277PF\030[\346<\263\277\252\352\020E\322i\350\277$\232T\273\021\351\342\277i\325\364\223\203\371{\277F^wf\342\217\351\277\002\022\367\313\004=\343\277\367\333\344\251t\344\346\277\221C\314\333M\340\347\277\344\355H\"Re\016@\341\313\213\314\352\026\351\277\325\236\205\323LM\321\277\314\335\312!\341|\242\277\235\364\033\3420\246\351\277\243\332\220\310q]\320\2779\'o\351\002-\323\277\247\223W\224~\374\244\277ER\370v\253e\351\277\372^\247\246\023Z\351\277d\2375AT9\341\277\004(bT\320<\304\277\263)r\235\346\000\344\277\260\300Or\203\204\346\2777*\212\3528h\350\277\344\224s5\317\230\344\277\005N\366\306\035\374\330\277\317g\275\261]\037\001@/r\036\013\026\315\342\277!\217zb:\341\341\277XZ\333\327\024{\317\277\307\266\214\313\327D\324\2776\255\177\276P\335\301?\360\235b\'\0254\331\277k(\230V)s\002@\322\033\2121Fs\336\277\215\372\276\367\350\234\303\277\035\232\005\304?t\350?\372\202:`e\234\327?}Jt\201\303\344\344\277\226\330:\374R\013\351\277\211\337\370A\225\033\315?F\3446\336\375\244\351\2776\271\367^\006\224\331\277\013h \002\261A\351\277\301\316%\026)\\\311?\247\370\264\332\357\304\343\277\355r\264\307\263/\351\277\326g\276\262\276\273\272\277\363.S#)Q\342\277\331\032\362\267V)\341\277\330\005n\240L\350\347\277\215nl\204Q\254\327\277\210\n\237\270\207L\326\277\265\202e\020\331X\344\277W\025\205\013k\245\340\277}Jt\201\303\344\344\277\246\356\301\362\331{\312\277\206k\002\214I\374\347\277x%\334\320@X\010@\242t\322\307\',\331?}\220\035;\017\335\322\277]\211c\t6\236\010@t\177\202\334\032\323\377?\300\177\334ai=\301?\362\036$k\270,\345\277\013h \002\261A\351\277^\371\366k&\215\362?\327c\266r\330\\\344\277C\271\217\177\273\030\345\277\344m\036s\206\216\351\277\352\010p\271\t\035\343\277\234 \353\212\353\340\343\277\3028\034\307Z9\361?\333\237\265m\361\033\332\277\2205\327\201@\235\321\277\235\243\310\246\202/\000@\272\3462\334\242\270\345\277\315B(hRE\341\277\262r6Xh4\347\277\0375,g\231\216\350\277\0138\3325$q\342\277\264\374Nm\234C\334\277\314-\277o@\335\001@\200\"\357\331\365S\352?\304\034E\3762\021\342\277\0054S\216jP\367?f6\\?\324\314\324?\307\266\214\313\327D\324\277g\260Kj\206\034\306\277\345K\257zMe\341\277\314\335\312!\341|\242\277\2522\225\226\235{\014@\360\3050\370\305\324\344\2770\347\262\010@\233\336\277O\214\037\217\036\271\002@X<6-j\325\360?\277v\320\352\024\263\337\277\301<TwB\345\341?g\260Kj\206\034\306\277\246\210\300\344\375\232\350\277\205YVh\343F\351\277\017;\333\330\266\240\351\277\361\202\250\r\237|\305\277\200\244New\373\314\277Ux\351\227(\322\350\277\3028\034\307Z9\361?8j\367\323)\205\342?\245\350\205\"\177\240\346\277u\326w\375\210`\346\277\203U\227\003~\374\326?\247\232l\010dP\347\277$\232T\273\021\351\342\277\334\337\246\244\350$\351\277\\\214 \336\341P\351\277\034\034eO\301\033\313\277\031z\350\223\322g\350\277w/kp{\270\346\277\360R\177-(\370\010@\213\323\327\227\371\272\277\277\300\321\227\364\035\234\351\277\276D\304\327\021=\323?\005\2621@!<\270\277\351\313\035\321N;\336\277\261\326\365l\324[\350\277\0054S\216jP\367?\364\321\361\301^\233\315\277\213\323\327\227\371\272\277\277\303e\t\271\264D\345\277?j(E\214n\006@\307<\205\350\244\316\005@W\205\372\347\353\010\364?\005f\225\337]x\347\277V^I\306\354\330\343\277c\321\370x\326\232\351\277.\345\201\224\305\375\221?\230\274\264^;\374\233?\310\372\373&\300[\333\277i\356~\365\023X\351\277\251\304;\222\020n\351\277\026\267\260\0226\375\341\277\254WHf\030\341\002@}\353\031\3540|\252?(\370\345\266\200m\320?X\330{L\223\323\354?\204\337\257\030\262\013\354?K\371\022\273\026F\351\2779\'o\351\002-\323\277\025\346\266u\014\254\t@w\027\314W;<\330\277M\325\343I\240\354\005@\246Ay\225q\370\346\277^q\342ve\255\320\2770\264\020\373\010S\350\277\215\372\276\367\350\234\303\277H3\302\005b\023\356?<\027\217(d}\300\277\204\337\257\030\262\013\354?6\255\177\276P\335\301?\036&X7\327d\344\277\0048\213>R\374\347?!\217zb:\341\341\277\341\374,!&\342\350\277w/kp{\270\346\277\243\243\340\305\300\242\351\277}\001\260\306A\261\341\277\221H!;\347\374\343\277\247&~;\207\004\351\277\005\2621@!<\270\277=\345\315\275\377\216\350\277(\315?@\216<\267?\014C\376\234\254\240\351\277\010\2669\034\314\221\350\277\335Q\234S\326\313\332\277\264&\232\251Bu\351\277\31385\200<\374\307\277\031\277\262wiy\350\277\215\372\276\367\350\234\303\277\005\2621@!<\270\277\363.S#)Q\342\277R\3109\251/Q\362?\321\351}\036C\375\321?3\231\231\356$K\337\277HvP\276w\320\346\277\215=G\342\017\365\342\277XZ\333\327\024{\317\277T\247\r\201n\014\347\277\317\'\376\367G\225\351\277\316\344\337\225\306\320\344\277T\037\366$6z\350\277k\377\224\036F;\316\277!bW2\360#\332\277\003\3112\021\203\t\340\277\200\"\357\331\365S\352?\330\236\316\374/]\342?\024\216\003l\320u\350\2773\231\231\356$K\337\277\240A*\236\237\203\354?(\370\345\266\200m\320?\004(bT\320<\304\277\275\326\021\333\217\314\350\277\276D\304\327\021=\323?\333\020H\371#\360\350\277^\315\360\352\215@\346\277^\\^_[l\327\277%\202\265\242\321l\324\277\315\267\274e|\023\335\277\001\312\023\264Uc\356?>\272\222B\200;\020@x?\232(\354\334\343\277\352g\231.h\353\355?:\273#\273+\205\351\277\270/\367\226$\354\350\277Bv\001\307\245[\354?H\2419\220^\254\347?\356?P\223yq\360?K\373\023t\022\303\337\277E\311\2767,=\342\277\235\327&\320i\255\340\277\216\337\376\017\204\200\346\277\275\361\0145z\300\346\277\016\345k\274o\004\347\277\230D\027\225\352\207\n@\005\2621@!<\270\277\327c\266r\330\\\344\277\201\220fd\362\354\343?\002\266+enY\350\277\376\275R\352\274\234\305?\024\000u\315\2670\345\277\350\31177K\227\001@\n:\330\207\250;\374?,\260\010m\300\370\344\277ze.\2339\234\350?C\240\021\221\306\265\350\277|\020\255)\247\000h?\266\222\224\310I}\341\277N\027\263\315\360\274\264?\270\215?i\260`\345\277m\305\030\253sm\340\277\350.\273\002t\314\326\277\370\360h\301~%\340\277W\267<9\3370\344\277\345K\257zMe\341\277H3\302\005b\023\356?\331s\337\\Z\034\310?\004(bT\320<\304\277VF\252\255\254\\\325\277,\t\374\337\262P\345\277K\017\261\032[E\341?\311\256\333*\224\260\350\277\nw\253\010\220[\314\277K\314(04\355\321\277\007\265\371\262\025p\t@\320\226\306{\253\200\345\277[F\363\326\217l\346?\034\351\005O\034\203\337\277a\330\312CeH\347\277L\226\256.Y\031\341\277i\325\364\223\203\371{\277\254\227\2320\021%\343?\200\244New\373\314\277\271\223{9\013<\311\277\223\307\250 \'\024\351?\003\017\037\330`\261\350\277\371e\375\276\250\363\333\277\230\372PJ\257\274\325?\245\362\320^\025\375\211?E\372\343\331m\364\326\277\342,8{-\333\316\277\312\254\342\014\245\013\334\277K=\273\273f\301\340\277\247\031\323\331\301\233\351\277\316\232\300R\226\242\350\277\277\316\334\354EL\350?K\013yjs\231\360?\221\352\330h[\210\347\2775rg4\371\334\323?\006\2249\271\034\244\351\277\335~\277\203 \211\342\277*\374\244\315\203\274\265\277Bv\001\307\245[\354?\340\277\023\336\322d\324\277j\205\245\363\223\353\334?\025,E\020`\313\335\277f\214\265pn\245\351\277\006\277\210RP\320\347\277\3203Di~\310\006@\213\323\327\227\371\272\277\277\253\215\247H\373\333\331\277"
      }
    }
  }
}
node {
  name: "tensors/component_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 750
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 750
          }
        }
        tensor_content: "\311\374\211\0038a\335\277[ d\220\264\025\350?\307\210\272H\220\031\322\277\2206\260H4\n\341\277\177\246g\317\315z\317?{T\242\002<\201\345\277<\027]d\225p\352\277\311\037\326\024N\217\332\2777\3476&\034\334\311\277\260\220\341\023\037\\\001@{T\242\002<\201\345\277G\232`Q\233\260\320\277\360\222 \0149a\372\277M\204\203\r\353\377\276?\307\210\272H\220\031\322\277\265\367\276\034R\247\001@\224\371\277\204ef\232\277\2736\371\220\320z\267?\362\300\245\217(s\324\277p\r\253H\206\202\360\277\2635\335\231\003n\334?\034?)\371\354(\321\277\360\360\313\315\241\007\345?eigd\361\177\333\277\346\304e\372\322\312\371\277\227\326\345\326\252\216\367?\274\257\306\304P\237\364\277\264\013S\326\230p\300?rvA\221T\346\356?`OH\253-\312\354\277\264KO~\2665\346\277\362\300\245\217(s\324\277 \374\336\023H\030\361?8\241\236\003\360\177\317\277\310B\"&d\275\327\277\341v`\230\353(\305\277\364W\301[\346\350\334\277P\321\261\253\317\252\377\277\'\237uu\337Q\302?^\177n\351\246^\335?\265\005\267[\212\331\353\277M\205\364\371\253\036\006\300G>VJ\274\214\354?\360\360\313\315\241\007\345?\313~\340m@\330\357\277\232\200\365?qT\340?\036\301\177c\365\237\343\277cD\0179T\346\377?6\230T7\024E\362?\361\373\004@{\353\361\277H?\003\315\271U\340\277P\321\261\253\317\252\377\277q\352^7pT\363\277\t%\n@)s\342\277\341\326Ik#pm?E\247:~\376\026\344?0\255\031\231\311C\370\277\211\023d7\036\334\343\2776-\317HH8\304\277H\033\n9\246^\357?L\021~I\312C\366?\'{\347@\311C\351\277\255r[\372v\273\370?\245\307\354\371&S\365?\006\215A\361m4\346?El\333\315\253\236\366\2775\364\020S\177B\355\277\037\2363R\337q\346\277a\311\263\340\343\250\314?\214\235\245\326x\353\310\277\211\023d7\036\334\343\277\320\221\324\nI(\360\277\363z\rm\374\026\332\277M\204\203\r\353\377\276?\205c\210I&S\367\277\014\367\204\2749a\370?+\312\231%\256\256\361?\373\311\277Q\341\201\362\277\227\332\245AU\346\334?M\204\203\r\353\377\276?XvT\'\356O\377?\270\326\322@\021%\347?eigd\361\177\333\277\226jB\326\t\266\002@%\266F\361\033\274\366? J\243\360z\343\001@\360\222 \0149a\372\277\260\220\341\023\037\\\001@\273n\233\217\314c\343\277\240iA8\276\254\352\277I\0160\014C\370\333\277\334<C\013\231\220\363\277\230\263\231\305\224`\372?\245\360\004\220nD\366\277\361\330\270.e\275\364\277\274\257\306\304P\237\364\277[\010Q\361w\313\367\277\320-]\304\256\276\341\277?\323\335(l\353\257?d\363\213\217\302\314\361?\354\263`\003\310#\331?\227\332\245AU\346\334?\355FcZ\025\325\000\300\020\032\321\315O\217\365?\272cb\035\363\177\366?\336m\310\340\233\307\336?\005\323\331\023\232\220\340?\346-J.\025U\361\277\323\242n\242V\346\310?1\363\261\273\365\237\362\277\377\3421\210\247n\375?L\312\206\217\024E\341?\214\235\245\326x\353\310\277\r\3248\253#3\373?\230\263\231\305\224`\372?q\352^7pT\363\277\242]>\317]=\273?\364eH\013G\030\344\277\342\r|d\251\236\315\277\307\210\272H\220\031\322\277\2466\235\262\232\240\360\277H?\003\315\271U\340\277#Mb\275\3311\377?7.\021lH\030\340?2\215\033\305:a\325?\236\304\236\274\237\007\333\277\341\326Ik#pm?bf\374\262\340q\342?\271\251\372?\037\334\360?\204\035\360&\372\366\374\277_\225\340\315Y&\347\277<\027]d\225p\352\277\"%\367\251\217\t\362\277\234\364\304\372\030\234\353?\361\373\004@{\353\361\277E w&N\177\370?\0262\344l\214\331\325?\315\334\213/\251~\372?\275\005\"\273\207\302\263\277x\227t\273g=\254\277\233]\251.[&\343?\210 >d\201B\327?]\332\313m\210\271\355?\006j\365\337W\006\351?\240iA8\276\254\352\277\302\022\221\210\355?\337?\310en7z\353\324\2770\177;\013\024\305\002@2\177\224\025\3321\356?\273\214z\263:q\367\2777\304\352\024\006\256\314\2772\215\033\305:a\325?\240F\365&\250~\355\277Aj\317\263$3\330?3G\203\242\016\005\333?\361\373\004@{\353\361\277\035\371\220\326\300\314\326\277\323\177\"\221@\270\313?F\204\356l\350\350\346?\207XO\327Lo\352?H?\003\315\271U\340\277\004ob\315\377&\362?\234E\226\217\036\334\362\277\304w\265Q\205r\361?\234\364\304\372\030\234\353?\020\020\264RC\270\263?o^.\362\027\234\376\277q\365\227\251I8\320\277x\227t\273g=\254\277}\214\010y\260\270n\277M\250@\013\302L\003\3003G\203\242\016\005\333?\262m\356\014\317\232\357?\212\006\212\n\273u\300\277\363\210\224\034]F\341\277\274\360`n\244\036\275?\005\260\215\002\204b\343?0\013\305Z2\352\342?`OH\253-\312\354\277\004ob\315\377&\362?\235\321x\351\002n\356?L\312\0330\027\\\271?\233]\251.[&\343?\205\3013\013\217\371\341?^\333x\360\205\202\341\277\035\371\220\326\300\314\326\277M\313\345&\236\347\373?\213\252\177\003\334Q\354\277\205c\210I&S\367\277\016\261\354\231\r\005\376?\226C\212u\227p\324?\234E\226\217\036\334\362\277\002\340r\273H \000@\242:]\035E\370\345?\020C\351c\227\200\366\277El\333\315\253\236\366\277\020\211\201\206\303\334\360\277\242\244\240\350\020%\370?\203\364~\206\354\230\000\300\023\231DZ\316\243\265\277%\344\313t\013\316\340\2775P\033Z^f\301\277<\301l\315[6\363\277\355FcZ\025\325\000\300\277y\361u/\n\277\277\373\311\277Q\341\201\362\277\236\304\236\274\237\007\333\277\361\330\270.e\275\364\277\032oO7f\275\341?\272\221\347\240\342\221\340\277\2736\371\220\320z\267?v\353\275\316\371\366\355\277<\022\347\323=f\206?;\344\270\336qd\360\2774]\365\206\301\314\344\277w\002r\326\254\236\343?\313~\340m@\330\357\277\206f\326\206\255\236\321?\323\242n\242V\346\310?\312\304x\220l4\352\277\212\315\313\024\362\177\351\277\261\341\013\263\352\010\364\277\2075\003\3066A\355?\362\300\245\217(s\324\277w%\276\347\302\314\340?\276\277\211\230[f\271\277\215W\r\264L\217\316\277\274\204N\3713\002\001\3004]\365\206\301\314\344\277\237\214\215I\324\332\347\277\325\353qv\223P\354?\032\350\213\337\265%\366?\213N\303\347pT\361?\235\n7\337\313c\325\277\007G\251\316A\330\353?\320\n\021\263\230\220\344\277\260\371\036R\'S\344?\026.$\002\342\201\360?\235\n7\337\313c\325\277a\320?~\254\236\364?\0262\344l\214\331\325?\312\347\304\241\202b\347\277J\263\322\207a\235\353\277\261\004X\304\0007\361\277x\227t\273g=\254\277\335\310%e}\"\357?{T\242\002<\201\345\277i\346\316\326\350(\275\277\260\034kc=\201\341?i\346\316\326\350(\275\277\277y\361u/\n\277\277\277y\361u/\n\277\2778\241\236\003\360\177\317\277\036\326D\305\252\236\331\277\232\3711\350\300\274\364?bf\374\262\340q\342?\211\023d7\036\334\343\277\212\006\212\n\273u\300\277q\274\331\263\200B\351?\277y\361u/\n\277\277;X\210\231\031\254\373\277\213\343=\371\244G\303\277\037\220\254\242~B\337\277i\346\316\326\350(\275\277\2635\335\231\003n\334?gr\377\033A\341\261\277\270\035\312\372\306#\374?\213\252\177\003\334Q\354\277I\371j\252\215\371\345\277\005\260\215\002\204b\343?\215YUd\020\245\t\300\364W\301[\346\350\334\277\311\037\326\024N\217\332\277\232\271eJ\306#\376\277r\257\377\206\035\334\325\277\311\374\211\0038a\335\277d\363\213\217\302\314\361?eigd\361\177\333\277\276\277\211\230[f\271\277\323\177\"\221@\270\313?\000$]\275+\252\356?\253\270\363\034\243\027\363?\323\177\"\221@\270\313?B$7\221\370\326\335?\320\n\021\263\230\220\344\277\310en7z\353\324\277\023\231DZ\316\243\265\277\242]>\317]=\273?)\023E0\207\231\315?\341\326Ik#pm?6\230T7\024E\362?P\35618\264\025\371?\211\023d7\036\334\343\277Y%\321}\\6\361?1\305,8\006\216\350?i\346\316\326\350(\275\277g\313y\206>\021\000@\206f\326\206\255\236\321?2\177\224\025\3321\356?\341v`\230\353(\305\277\221w\333}\270E\362\277\027\354KJ`}\333?\377\3421\210\247n\375?\334<C\013\231\220\363\277\337x\001Su\253\373?\353\371\370%\364\177\323?\361\330\270.e\275\364\277\374B\374\3710\352\346\277\362\300\245\217(s\324\277\230\220M\264~2\375?\337\203:\305N\217\350\277\361\330\270.e\275\364\277\242]>\317]=\273?\2206\260H4\n\341\277\336\354\036\371\220\031\340\277\274\204N\3713\002\001\300\345\311\322\347z\353\342\277\300\301\r\337[&\321?\213\252\177\003\334Q\354\277Gw\024@\205\202\323\277}2\230\024&3\304?D\211[Z\220\t\360?\270\035\312\372\306#\374?\364eH\013G\030\344\277\025x|\217\2705\320?\"%\367\251\217\t\362\277\t\002\276.\023E\345\277\366\331\027\306\356_\357\277tF\033S\333Q\336\277\226C\212u\227p\324?_r\224\274C\370\351\277r\257\377\206\035\334\325\277w%\276\347\302\314\340?\242\201T\327\372\366\372?:1|\035Y&\331\277\263X)\253\031\234\331?\311\374\211\0038a\335\277Y%\321}\\6\361?\322\305\272\263l\024\306?\356#pS\305\023\377?\235\321x\351\002n\356?\271\251\372?\037\334\360?w%\276\347\302\314\340?\336m\310\340\233\307\336?\364W\301[\346\350\334\277q\365\227\251I8\320\277\260\371\036R\'S\344?#\276\271\371\364\377\257\277\272\221\347\240\342\221\340\277q\365\227\251I8\320\277\371\240\247\273\231\220\361?rvA\221T\346\356?\363z\rm\374\026\332\277\311\037\326\024N\217\332\277\215YUd\020\245\t\300qXbm\346\330\372?\340=\242\242\"3\356\277rvA\221T\346\356?u\326}f9\270\222?\\\350R\035\351\350\324?\343U\265A_}\376?\\\375\027\177\236\347\352?Fa\242[\322\272\351?}2\230\024&3\304?\007G\251\316A\330\353?O\364\375\274\345\330\374\277\237\257\331Z\352\010\345\2772\215\033\305:a\325?\310B\"&d\275\327\277\235\321x\351\002n\356?\273n\233\217\314c\343\277w\002r\326\254\236\343?\3067\351\263\212\331\372\277q\352^7pT\363\277\252\263\206/\373\366\351?F\204\356l\350\350\346?Aj\317\263$3\330?\227\332\245AU\346\334??\323\335(l\353\257?\007U0~\242\007\323?[C\260\241\312C\345?\262\236\301\315E\370\323?\346\246\206\326d\275\345\277\036\301\177c\365\237\343\2770\013\305Z2\352\342?eigd\361\177\333\277)\023E0\207\231\315?[C\260\241\312C\345?\037\220\254\242~B\337\277\315\271?\036\223P\375?\353#\245\000\300\365\240\277\036\301\177c\365\237\343\277\236\347\352\315\2655\330\277@\260g\326P\217\322?\305\270\340\206\t\256\342?\2736\371\220\320z\267?\327\360\336c;q\365?0\350xI\034\274\345? \374\336\023H\030\361?\255\233s\220\276\254\371\277Q]\342\360\'c\364\277 X\233/\263\025\354\277\270\326\322@\021%\347?\002\006~\231\275\234\372?\360\222 \0149a\372\277\275\005\"\273\207\302\263\277L\312\0330\027\\\271?z\225\3157\300\274\366\277 \374\336\023H\030\361?e\371W\024\364\217\365\277\311\037\326\024N\217\332\277{r\201&\252\216\371\277\255O\017\351`\215\373?\032\013\330\360\313S\363?{T\242\002<\201\345\277\327\315\222R%C\370?\223\254\230\352\336(\254?\360\023\030\337\2675\342?\260\371\036R\'S\344?\255\233s\220\276\254\371\277\245\322%l\0007\342\277\355FcZ\025\325\000\300P\034\267\273\243\'\343\277\006j\365\337W\006\351?\256,\303\327J_\376?\303\353\204\014-\272\374?\006j\365\337W\006\351?\237\257\331Z\352\010\345\277\232\3711\350\300\274\364?[C\260\241\312C\345?\274\360`n\244\036\275?\021\337q\035\375\026\350\277G\232`Q\233\260\320\277\026\300\322\340\367\326\357?\341\326Ik#pm?\341v`\230\353(\305\277\260\276\277\241\324\332\366\277\320\n\021\263\230\220\344\277\336m\310\340\233\307\336?1\242\340&\360_\353?\2055\252\273p\324\001@H\033\n9\246^\357?=\2545\010K\341\222\277\264\013S\326\230p\300?-a\265\361k$\372?\036\263\370\263\224p\334\277\333_\217\034\257\276\360\277\0262\344l\214\331\325?Af\017Iz\333\362? X\233/\263\025\354\277=\2545\010K\341\222\277\213\343=\371\244G\303\277\320\n\021\263\230\220\344\277\007G\251\316A\330\353?0\013\305Z2\352\342?\215zY\305b\275\313\277\226\034~\371\326\352\361?\033L\003&P\217\344?\242]>\317]=\273?\234E\226\217\036\334\362\277\212\315\313\024\362\177\351\277\205c\210I&S\367\2777\te%]>\000@wl\265\241x\313\365?El\333\315\253\236\366\277\201:p\263\336a\366?\013Y\335R\263\365\307?\240\243\326\361\211\231\265?qXbm\346\330\372?\323\242n\242V\346\310?\265\005\267[\212\331\353\277\021\337q\035\375\026\350\277\355i\010v\361o\371?\260\371\036R\'S\344?\366\331\027\306\356_\357\2772\177\224\025\3321\356?\210 >d\201B\327?\241\3528\013=\201\362?\350\205S\254Qf\250?\2635\335\231\003n\334?x\227t\273g=\254\277\271\251\372?\037\334\360?\035\034\335\347\326\372\323\277\035\371\220\326\300\314\326\277\3331\n\231\277\254\346?\210 >d\201B\327?\314p/}\332z\250\277B\375*\0258Q\373?\034?)\371\354(\321\277\332\023+uQ\237\362?\323\242n\242V\346\310?Aj\317\263$3\330?\215W\r\264L\217\316\277@\260g\326P\217\322?\332\023+uQ\237\362?\267\\\326\177*\212\316?\037\220\254\242~B\337\277\005\260\215\002\204b\343?\\\350R\035\351\350\324?]\272\214\024E\000\007\300\307\210\272H\220\031\322\277\350\205S\254Qf\250?\360\222 \0149a\372\277\363z\rm\374\026\332\277r\322K\2303\n\323\277\325\353qv\223P\354?\340\231\254\251\001W\302\277\213N\303\347pT\361?\260U\333m\222P\377\277\205\372\243\025\344\310\377\277\333\310\314Z\267\265\003@\215zY\305b\275\313\277u\326}f9\270\222?\264\013S\326\230p\300?\212\006\212\n\273u\300\277\023\231DZ\316\243\265\277\306\225\224u\363\177\345?\361\315\177\274\213\331\347?\221\360\027&\010\256\346\277\215\236\347\371x\313\344?\227\332\245AU\346\334?:1|\035Y&\331\2772\215\033\305:a\325?\260\034kc=\201\341?\373`\333\035\237\367\372\277)\023E0\207\231\315?\213\2073\362\305#\357\277\302\022\221\210\355?\337?\236\347\352\315\2655\330\277\'\237uu\337Q\302?0\013\305Z2\352\342?rvA\221T\346\356?\242\315\270~X\026\371\277 5O\036\235\347\356\2771\212\315\207\263\025\373\277\242:]\035E\370\345?<pB.\220\211\000@|\270\031I\326\352\363\277)6\221A\235\307\312?B$7\221\370\326\335?I\371j\252\215\371\345\277XvT\'\356O\377?x\003\321m6A\376?\270\372}\351\260\365\376?\217T\217l\242\027\365\2770\255\031\231\311C\370\277\333_\217\034\257\276\360\277E\247:~\376\026\344?x\227t\273g=\254\277\307R\t\013\232\230\001\300\316rHd\335Q\350?\262\220:\036\345\310\354?X\231\2408\004~\374?=\2545\010K\341\222\277\0344\360\206\023E\364\277\333TV\252\325\332\343?\'\237uu\337Q\302?\341S\024\207\325\372\307\277`\354\377\361\371\326\311?\032\350\213\337\265%\366?\316rHd\335Q\350?L\312\206\217\024E\341?\236\347\352\315\2655\330\2776u\010&\376\026\365?\363\235Y~\022E\327\277P\034\267\273\243\'\343\277\004ob\315\377&\362?\213\252\177\003\334Q\354\277\315\334\213/\251~\372?\2635\335\231\003n\334?\277y\361u/\n\277\277\n|)d\311#\305?\215zY\305b\275\313\277\025x|\217\2705\320?\037\2363R\337q\346\277\206f\326\206\255\236\321?\033L\003&P\217\344?\344\0042\230\315c\360?w%\276\347\302\314\340?\205\372\243\025\344\310\377\277\242\244\240\350\020%\370?\215W\r\264L\217\316\277\272\221\347\240\342\221\340\277\033L\003&P\217\344?P\034\267\273\243\'\343\277\341v`\230\353(\305\277E\247:~\376\026\344?\241\3528\013=\201\362?\242\244\240\350\020%\370?\272\221\347\240\342\221\340\277\334<C\013\231\220\363\2777.\021lH\030\340?\242\244\240\350\020%\370?\3331\n\231\277\254\346?\261\341\013\263\352\010\364\277\276\277\211\230[f\271\277O\364\375\274\345\330\374\277Q]\342\360\'c\364\277\335\326\254\024\336Q\326?\021\337q\035\375\026\350\277\360\023\030\337\2675\342?\257\333?.\271E\360?1\212\315\207\263\025\373\277\340\231\254\251\001W\302\277\242:]\035E\370\345?\212\006\212\n\273u\300\277\265\005\267[\212\331\353\277?\323\335(l\353\257?\345\347\261\013\351\370\366\277\213\2073\362\305#\357\277\321\005\244\305\360o\373\277\370\024\036l{k\001\300.\033\035\317?\310\377?0\255\031\231\311C\370\277\262\220:\036\345\310\354?\301{u\274/\312\326?l\242\272\372\274\214\332?K\220\206vKo\356\277\265\005\267[\212\331\353\277\307,\260A\261\365\355?\223\254\230\352\336(\254?\340\231\254\251\001W\302\277\323\242n\242V\346\310?\333TV\252\325\332\343?\363\235Y~\022E\327\277&\274\022vM\177\372\277w%\276\347\302\314\340?\020C\351c\227\200\366\277\3331\n\231\277\254\346?=\2545\010K\341\222\277\264KO~\2665\346\277HT\310.oT\326\277\036\326D\305\252\236\331\277\373\203\'/\265%\370\277bf\374\262\340q\342?\363\235Y~\022E\327\277}2\230\024&3\304?\211\267Y0?\270\337?\307\210\272H\220\031\322\277\002\300\214l\313\323\004\300<\027]d\225p\352\277eigd\361\177\333\277\361\315\177\274\213\331\347?\227\377\375l\362\177\370\277\033)\267\024:a\347?\236\304\236\274\237\007\333\277r\322K\2303\n\323\277\307\210\272H\220\031\322\2776-\317HH8\304\277\315\275V\027a\270\206\277r\231\215\242j\024\354?@\260g\326P\217\322?`OH\253-\312\354\277\236\347\352\315\2655\330\2770\255\031\231\311C\370\277\365\037\260\350\032\274\351\277\355FcZ\025\325\000\300cg[Jj\024\375?\025x|\217\2705\320?\323\177\"\221@\270\313?I\0160\014C\370\333\277#\276\271\371\364\377\257\277\332w\242\273\353\010\341?#\276\271\371\364\377\257\2778\014$\362\273\214\375?\\\350R\035\351\350\324?V\002\205lF\010\364?\2206\260H4\n\341\277%\344\313t\013\316\340\277=-\020\316\374\016\010\300\232\3711\350\300\274\364?\365\374c\327\004\216\354\277\227\332\245AU\346\334?h,g\371\024\205\267\277\335\310%e}\"\357?\210 >d\201B\327?\365|\221\263\374\326\261?\237\214\215I\324\332\347\277L4\312Z\340q\363?\030W<\230)s\361\277\3420\310u\277\314\312\277G\232`Q\233\260\320\277F\204\356l\350\350\346?\362\212\364Q2\362\003\3006\n\20372\n\307\277\301Ti@oD\364?3G\203\242\016\005\333?\364eH\013G\030\344\277i\346\316\326\350(\275\277\215W\r\264L\217\316\277\274\360`n\244\036\275?\373\203\'/\265%\370\2775\364\020S\177B\355\277\341S\024\207\325\372\307\277\335\326\254\024\336Q\326?\267\\\326\177*\212\316?\212\006\212\n\273u\300\277q\337%\305\226p\346?Aj\317\263$3\330?\306\240\315\347\314c\362\277r\257\377\206\035\334\325\277\371\240\247\273\231\220\361?z,\351\003~2\377\277]\332\313m\210\271\355?r\257\377\206\035\334\325\277\'\237uu\337Q\302?\235\321x\351\002n\356?\343U\265A_}\376?\212\315\313\024\362\177\351\277\034?)\371\354(\321\277\263X)\253\031\234\331?gr\377\033A\341\261\277P\014\270Q\\\266\001@\273\322\022\326f\315\361\277\3644uJ\320\272\337\277q\365\227\251I8\320\277J\326\036\231w\313\350\277\372\246s@\313S\365\277P\034\267\273\243\'\343\277r\257\377\206\035\334\325\277r\231\215\242j\024\354?G>VJ\274\214\354?\274\360`n\244\036\275?\340=\242\242\"3\356\277\325\353qv\223P\354? 5O\036\235\347\356\277%\344\313t\013\316\340\277\235-\203\360\341\221\322\277\n\274%\014\347\350\352\277\273^\234%\205\362\001@Fa\242[\322\272\351?\361\315\177\274\213\331\347?l\242\272\372\274\214\332?\275\005\"\273\207\302\263\277J\353\343\372,\312\336\277\221w\333}\270E\362\277\221w\333}\270E\362\277\033)\267\024:a\347?e\220s\340\261\005\376\277\340`\356\2638a\353\277Fa\242[\322\272\351?\335\310%e}\"\357?\362\343\361\240>\241\321\277M\204\203\r\353\377\276?\215\345\336\263.\312\371?\353#\245\000\300\365\240\277x\227t\273g=\254\277\340=\242\242\"3\356\277b\255\363l\226p\367?\344\341\345\206\2675\363?"
      }
    }
  }
}
node {
  name: "tensors/component_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 750
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 750
          }
        }
        tensor_content: "\264\206\243,u\322\320\277\327\205\344\241\243\376\324\277\2008\333\247\025\320\312?\023MS\330T\217\350\277\210+\214QkG\t@\234s\217\254G\330\347\277\357\3143\372\023\376\354?\"T\3172\275\320\221\277\014\377\004\022y\343\370\277\340\005\003B\221V\332\277\255\211\010\205\231\'\357\277\252\372\313\201Q\275\372?\007\036W\020\254\206\340\277a\255\\[\313/\343?H&\356\332~\'\342\277\214y\367\330\361\225\340?\360\340d0\022D\257?\005j\037%\362\214\315\277\333\037\344\014\001F\342\277\247\026\345I\351\270\314\277\036\"^\332p\306\272\277]b/?\0314\342?AUy\316iA\325?\244\221\330\023\225\200\304\277\020w\t\335=\036\360?\312_\217\206r\253\330\277\377\305+\265\017\355\356\277\253N\376\010\316\225\352?\327!4\226\232I\323\277\363<?R\000I\334\2779\221\013z\244\266\270\277\033\023\022\321\246{\326?\204\001\317I\026\r\300\277D\231\034NN\252\321\277m\0106\242y@\273\277\341\357\306\251\032\267\335\277\225P\017\247\357\035\022@\214\306/gO\303\326\277\336\377\242\354\371\272\322\277\337\\C2,$\341\277\374w\004\005\336\327\360?\274\317fu\034\253\363?=G\\\316h\217\360?\266\331\023\245\263\t\363?\376\022\313P?:\311\277f\275\007k\324\346\331\277qJ\274\021\264\206\260\2770[\000\027K\230\350\277\202\000y\242\211q\371?GLl/\023\312\305\277\307\225\014?\360\325\344\277\221\202^\216A\302\331?<\315\376*\213X\347?\256\2430\255\020}\336?\220\242&\363Dd\270\277\233\362\344\327\027\262\332\277W\335R\250\007(\346?\354\017\274o\264n\322\277\213\224\223\2519\302\360?\353\375\002\024S\321\350?G\235\"(\300\177\361\277\242\317:jL\277\356\277\233=M\031,\275\360?\306~`-b\017\357\277\365\005^I\227\244\365\277\354:P\233\177\276\325?\031\300v\023\005\376\332?\253 y \034\221\300?>\312\033\007\320\251\331\277\223\214\356_\241\257\344?\226\007\237Xx9\354\277\243_\335l\006\"\260\277\025U*\315/\305\342\277\002\203\235B\203\314\360\2777\255\223\275&\212g\277\253\210\021\267R\021\334\277wa\236\rq\370\346?\277\214\325(\343\325\327\277\004\016_=B\317\362?\345{W\177P\322\361\2773\346\312`\211\223\373\277N\016\205\332x\010\310?.\016q\323\000\250\344?eU\302\204\267>\303\277X\232a\317H+\266\277K\321xeg\002\316\277v\037\361Ms~\366?\232\326H\352\tw\326\277\247?A\360r\220\360\277\343\020\212\3417Z\330\277N\230\347\316\370\236\327\277 \031P \'\361\272\277 \372\004\263s\036\336\277\266\250\006}\354\310\320\277l\200\026\271Z\005\344?\327Ds\307\332l\363?\215i4=w\347\362\277\243\222\376\004\222\340\003@5\332\373\000\202\311\373?\276R}cp\210\352\277wl\274Y,H\345?\004\016_=B\317\362?\037\374\002\247\346\247\352\277|\233\357\311}\341\376?1\3219\357\245\226\262?\027\016/s_\257\320\277nr\3201\3664\314\277\373Evh\rI\351\277\241An\340\033|\363?\241\234&\377\222\374\316\277\021\217\206Iu.\375?\342\352a\'\235\034\262?\223\214\356_\241\257\344?vN\251\314\332r\356? \372\004\263s\036\336\277\"\302\235c;\262\304?\271\241\217\251C]\351\277\032\266\245\037WQ\322\277\237\0304\270\217^\355?\242\305\331Z\t\227\360?\312v\007\004\0363\344?\\\343\241j`X\241\277\335\205\244\252{u\342\277\215~\033ITI\331\277!\311h\022$,\354?#;\267uq\322\343?\t_\027|\010\031\312?\224\216b%8\225\331\277\311C\363\230dp\324\277\243\275\3516\260\237\311\277\017\302\177?\227\233\344\277\214\036\251br\304\356\277o\342\235 :\215~\277\365=\027\004\020\306\304?A\201\334\351\036\014\002@&l\274i\254x\325\277\034\201R\256\017\036\343?\303En\357z&\364?\3350b\256S1\350\277\000\225l\363\265v\331\277\33789\243.g\342\277$\372\325>W(\315?Y\304%S\252\323\262?y\321\227\307^R\344\277\223\227+\270`\300\242\277d\033{BP\204\327?n\024\263\364s\374\353\277\234%\371B\321t\352?\247c \262\363\232\300\277\212&\027\004bF\351\277\331\323{6@\230\335?\330\303\321A*?\347\277Kk\263\365&Y\360\277\276\371\320Y\261\003\372?!\016\232\014d\367\333\277\212\314\344+\272\215\340\277b\260\014\006\227\375\346?r\264\201n\255-\360\277#\230\r\253o\010\003@\313&\247:\027\205\344\277\262\377\\\302X\243\366?\356\337\3106>\310\366?\\a\363Y\344K\323\277\207\357d\367.\004\371?*R \266*[\351\277\217\177\022\027\233_\354\2776*5\002\337\257\265?h\026?F|\331\367?\2738\210\264\350\023\345\277O\212p\215^D\343\277\022a\033\2534I\320?8\nX\005\312\267\261\277\277\013\0148|\026\320?\201\372\261? \266\375?qp\326BV\226\310?\007\301\000\333\255P\001\300r|\267\270B\345\304\277\\\337\227\371\201\027\312?\262\351\236\247x\216\315\277p\000\025\257w\\\000\300\255a\2562vI\347\277aD!\322\215\247\304?E\305\204&V\214\344\277wF\027\216T\212\000@\315\001\375\222\277t\340\277\345\017\r\352\347\212\326?\346p93\225\202\363\277\227\221\267\353]\360\367?`\317\357J\205R\357?\325\036\013@\376j\351\277\201\301\235\203;\023\325\277\n\213\027\034\030\245\355\277\270[\010\200]\212\375?\005\010\220.f\345\353?\177^\315\2564\"\001@\354:P\233\177\276\325?\325+\005\212H\366\333?S\332\220_=i\320?\324\034Z\017\354\341\363\277}\341t_\275\321a\277E\300$\356\204\377\360\277\023MS\330T\217\350\277\327\255\027\017W\006s?\026;\340\256\324!\333\277\232\20205\030*\331?\rHx\256\231]\363?N|\201\221\215\361k?+\363\345\2327q\r@s\221\231zs9\303?V*/\257\262\030\361?\034\200W\212\217p\002@\2527\250\201\006\\\307\277\231\253\023\250\267\204\361?J\271qRm\272\336\277\306\330\243x\342\202\276\2773j>\207\351\334\343\277\266\021e\'4\325\342\277-\374\331m\203X\323?\241An\340\033|\363?\032\274\363\326\357\373\347\2776\244\313\013e\237\346?Y2b+@\213\326\277\"\236\026\024g!\254\277\263\034\263\0222Q\355\277\306Uf\302\344\335\341\277H\314\270(*\272\313\277\330]\273\t\266\252\271\277\274o\n\203r\256\010@\217vkj#\252\340\277\207\254\242\000\363|\253?\304\201n\226\200\004\366\277\247\223\306\257\"\255\332\277 \204\301F\300\004\264?o\276/AQV\365\277v\350?\344L\006\334?\024,\332\347\036\337\255?\376\272Z,\265\235\367?\017\351~\220N\370\342?o\276/AQV\365\277+\005\002r>M\360?\\TaH\222\026\340?\017\372\004\336\023\022\364?s\213\3658\024\002\273?\027\230\200\364\006\213\351\277E\234\262\256\250X\370\277m\337*\304#T\347\277\023j*\200q|\300\277\367\305\236%\'W\353?\377^*`\232[\362\277]\274\034\000\323\032\357\277\226|\223t\005\353\360\277\007\213\217\254\365W\303?z\334N\006H\202\356\277)#+Ta/\326?\034({\327\323\346\343\277\202D\274\035\002\037\307\277\226\007\237Xx9\354\277\246*\255\034\311r\344\277\tGc\031(\251\337\277Z\310\r\336\327\236\334?=1\236\263\210z\307\277\003\341\367\352\200\250\341\277?Y\224\322\206\355\350\277\232\216\".\020\014\347\277\247\333\225\246\374|\241\277\207\251\021b+p\347\277S\266\352\003e\027\350\2777\3039\232\"\366\346\277\256\334\024\3242\010\224\277\302wqB|\263\303?y\346\262\3577_\372?\310\201Dl\020\034\315\277\312\256\1779\325c\002@\356\260R\365\027\361\354\277f\357\002\022cE\336?^\307\360b\332\036\364?\254#\301\222\357\010\325\277\356\216\245\273\354\256\363?\307\2114\220i\023\364?7\264\r\310\202\242\335\277\314\323\330\003\206&\317\277\311b\214\364\236y\363\277\r\005N\367K\024\301?\244n\033\355\327>\306?\226\024\263\3543\344\373?l\311;\357\r\265\361?}\341t_\275\321a\277u\216q?\312\270\351\277\3410*c\236\326\360\2771o{&\312Q\371?\251\372\334|C\344\366\277\333\350\344<m\003\353\277G\'t\251g[\372?s-\351nj\204\301?%g\225\037\235\020\337\277?\024\313\020?x\270?J\246\3449\234\262\272\277!\2500$\326\212\351\277\353\311N\220?\273\323\277\370\376\021\273Q\177\327\277\350\"\306b\0177\364\277U\271\316B\023$\306\277\177p4N\357]\300\277\361\274mn\006\377\204\277G\\\'\2474\266\315?\037\360\250u\366o\315\277\277\315\331\200\007\004\342\277\340\316\017\233)\301\361?\030|\341\034\031\303\254\277imCn\250\315\343\277\004\010\262$J3\344\277\355\036\306Kpt\343?\321\325\210g\245 \260?\345\230\317\305\r\316\300\277u\177T\206\351b\211?\'S\346\336\256I\007\300\001\250a4L\374\321\277\177Q\351\340;\213\323?\347~\366.*y\371?\"\000\202,)\216\360\2774\000q~}\007\271\277V<\264v1w\360?_\304\021Ye\275\006@\236k!\013XV\355\277\213\2170\227\273\200\337\277o\342\235 :\215~\277\337\027Tu-v\357?\343u\230\310YE\341\277\201%N\217D\310\326\277z\276\034]\277\023\315?y\300\262\030:G\352\277\275\254\026I\352`\347\277e\233\307;gt\335?E8\007e2E\251\277~KM\3035\026\361\277\365\006\355f\377\320\376?#\374\312[1M\363\277\276\372\212\274|v\354\2779\206\236\323\010&\003\300\321g\014:\2648\363?\345\r\034\233-\221\010@\306+\332\347k7\343?\315\001\375\222\277t\340\277\244\215fZ\213\021\323\277\277k\235:\2254\305\277Lh\371\363K\221\022@5\342\034\337\020K\357\277\340\204\370\217u\\\004\300\337\036\021{\267\021\303\277\030:\350\241g\254\212?^\007\250\332\327=\363\277\343\276\345\361\334\362\357\277\245%\206\322\271\n\356\277\251Mf\234\346p\360?y\346\262\3577_\372?\322t \316o\343\322?\210m4T\026\252\323\277\327!4\226\232I\323\277\303 \0161\327a\351\277T\354\3630\330y\307?N\373\367\301\247\000\324\277\314\307+\"|\026\355?\020\314\312\t<\217\276?\312\330\030}\023P\362? \325&w9\317\357?\324\"\007(\344}\342?L\251\304cD\374\224\277\031\300v\023\005\376\332?\320\202c{\'\377\314?\311\021\033\023\340\225\323\277}9\001\352x\334\356\277\272\277\326\332\252I\265?\273\261S\350\312\325\374?<\315\376*\213X\347?\204$\3435\363\351\346?$c\314\260\246\336\357\277W\255\356\347\0313\332\277\355J\222W\235\301\354\277V>mS\266.\361\277\225j\315\257\336\007\006@\356G\364J\320\344\332\277$\374\344\245\242l\320\277,@\237\363~\347\262?\305\177\003 i\027\322?\250m\003D\2408\353\277:\2444_PS\346?K\350ODr{\362\277@\313\363\270\337&\302??Y\224\322\206\355\350\277\027\244\332%\367\302\326?\302\001\240\242\031\013\351?[\326n\312\240\354\361\277\232\322]\205/\367\356?A8\231O\264\357\366\2771$\026\277b\373\340?\203\371\325^W\211\335\277m\267\022\257A\223\335\277\363<?R\000I\334\277I\316\224&\271\365\357\277(\211\224<\357\233\350?v\221!\352\225\206\355\277]\013\021Eb\264\323\277\354v>\034m?\300\277\321p\263\346+\356\376?\253\\\314\377T\263\354?3\010\002Aw\r\307\277c\'d\354\310m\364\277H\360\222(\030#\271?\263b1u\262\227\315?\2626\332\017\203p\301\277f&\337\300\354\003\322\277\312\307M\030`d\345\277E\022P2\017V\363\277\203\014\007h\\\350\360?\265T\356\307\372{\323?^\301CJ\342\202\345\277Z\014\376 \035\010\360\277\321*\224\345\n\231\307\2775\342\034\337\020K\357\277(\211\224<\357\233\350?^\314a\226\235\322\343\277`\373\362\304A\223\340\277\370\024qt\322\242\327?\305:j\3550\366\342\277\221\246\223b\242\305\361\277#\3369QI\355\310?&\177I\202}\200\311?\244\360\375\241ib\351\277H&\356\332~\'\342\277\003\230\322\264\315\370\363\277~\020\007\177\373\252\341\277\013\251*\251iz\344\277-\027:v\\\253\350\277\352\246 \342\n+\365?SAf\274\017\022\263\277\303\351\357D\014\206\307?\3722b\013@*\306?BpR\202\023\245\320\277\324\034Z\017\354\341\363\277\223\335\000\340\000\242\333?\277\266\246\032JN\322\277^\314\3619L\272\376\277jwZ\2247\252\350\277\362\205\217U0\253\350?\353\201\023\203\032\222\n@\304\326\205ME\002\327?\374\364\272\235\232\031\340\277J\367\243\t\342\314\354?}\374q%\013\322\343\277\212\'\267\034\274\231\356\277\014O\210tp\251\366\277E\005+\243a\204\347\277\211\002Z8\305\211\361?\301 \177\302\316\304\222\277m\241\213\212\n\336\361\277\215\320\336T\346I\274\277}\317\316\222\364=\355?]\274\034\000\323\032\357\277i\254@\203\332y\360\277\245z\374b\304\215\302\277D\267\266/\317n\342\277\301\231\027\017[&\217\277 4\001\3613/\360\277\244\007v\037\025\352\324?\224\300]\314\306\363\335?DG\254\362\325\201\303\277~\026\264\227\363F\360?k~\301\017\373\270\351\277\340\205\004\257\3470\361\277\241An\340\033|\363?*\333\0266f\265\330?\357f\017)tc\306?\241e\010\023\310 \355?\376\272Z,\265\235\367?\224G\312F\r\276\000@\337~\2353$\"\360\277\377\271\336\341\361\254\224\277Q\266N7\212\202\316\277\\\240f\310S\300\375?-\360]F\257\322\355?<\347\212\206\'\031\355?Q\222ou\tx\376\277+\024\212\313\220\335\344\277\034\307\tw8\035\373\277\244\223\023s\203\255\361\277#WuYc[\340\2773\247\343\264\234\245a?\267MK\204\310\223\367\277\310:\007\3451\301\267?\006F\366y\2756\344?x\211\266\"S\271\320?\010\256\345\305\340y\315\277X\251\237O\032H\314?\0039N\305\231%\306\277\207\265k\223\033\250\324?\033\254\217$\356\252\310?\270\022\027\336\214\031\332\277\225P\032\241\013\342\361\277|C\220\240\345k\311?\356\372\273\274r\267\344?\346o\177\320\311\017\341?\003\322\313\030\341T\330\27764\301\316k\262\327\277\214\334\177\007\021\351\215\277{\341uPW\352\344\277\371\177L30\215\377\277\217\241\334t\344u\340\277\006\3251\332\370\326\362\277\371:\245\337\262\371\361?\347\347\177\036\325\313\344\277t\365_\266\247\300\001\300\251\326T\200\342t\257?\277Pq\326\321\370\264?\205~I\242}\341\331\277\246*\255\034\311r\344\277\241\\afPk\341?E>6\020\307.\337?\361n~\345VC\321\277jZ\310\003\t\217\314?\310\014\245\346\326\200\000\300\236\345\267\024\336E\276\277gB{\256\372>\326\277\330\303\321A*?\347\277\2242\271\255LB\336\277&l\274i\254x\325\277\332<S\214X\265\325?\316;\206\022hL\272\277\340H(\2572\222\304?a\247\264\004f5\247\277b\345\266,\313\363\343\277H\233-\013\346Z\313?d\373<\014)\206\240?\177S]\246\322p\350\277H\032\026,\370d\361?Q\302\306\3141\'\t@\247\220Sp\322\202\367?\272^K k\210\324\277\256,\363\2106\300\310\277\314Nz8\013t\322\277\244n\033\355\327>\306?\216qD \024B\352\277JEU\313)w~?n\024\231\252\002\335\376?\215;\002\215\370&\363?\264<\027D\020\210\265\277\214\036\251br\304\356\277\374\364\272\235\232\031\340\277~\325\257?\317\030\366\277\374\223\352\333\237^\356\277\205=\351\302\246v\364\277\226\340\344\036\257\256\351\277\3615\024\237\253\023\366?\313c-\260\005\227\376\277\334\"\213hM\033\365\277\367\236\260GH\265\263\277\022\260\014\026\027.\327\277\25709\201P\006\001\300\211W\370\273\237\n\327\277%\201\337=\370\263\346\277\375|rN\301\376\247\277\226\340\344\036\257\256\351\277\255\213\177$\335\301\341\277:\355\204b\200\265\302?\256-O}\277\340\023@y\000\253Q\354\240\007@\312\005H&\354t\245\277\"\322O|\252\315\360?\004/l^\023\276\346\277\315\030r6\276G\356\277\323\204l\016\263)\237\2772\200z\037`|\340\277!D\322\324s7\002@P\227\340\250\314+\336\277\002\234\211\205\3059\361\277\214\003\261\222\221\307\270?\243\372a\213Y?\365?\035(\013{\202\316\376\277\304\030\345\246\325\261\352?\032b\003<\211`\335\277\343;\n\005\270#\201?\250\226\'x\364\315\001\300\\\326C\375#:\303\277\275\254\026I\352`\347\2774\304\014,l*\326?\365=\027\004\020\306\304?T\025D&\0348\347\277~\325\257?\317\030\366\277\371\326B\3020{\262?\250\226\'x\364\315\001\300,\373\235\210Np\344\277p\367Cu\034\215\310\2772\3108\243a\221\260\277\260\234\333\317K_\357?\331U\204\346\210\364\301?\302\3114N\016\264\326\277^\322\016\257\225n\362?t\177\351\345w(\365?n\023\371\221\250\211\371?`\304\363\364\255P\351\277\231=\250u\270\303\260\277\321*\224\345\n\231\307\277\256\215\321\363\217Y\336\277j^\315\262T.\361\277E\004q@\226\021\365?\366\214+\220\374.\317?J\323\t\3275(\363?\262\000\027%$\026\351\277\276\330\367\314\302S\340\277\375!p\336\342v\263?7\334%\335dc\347\277\205n\007\346_\336\342?\245\231\300\213{I\340?\336\311\232\352\254\216\356\277&\217\014\226\336\302\361\277\014\375K5\364+\370?c\265\3568\270\223\341\277\3233\376\021\224H\013\300b\2235^z\020\317?\262\000\027%$\026\351\277\017\206]*\307\333\277?\330\366\020\362FH\360\277\247\333\225\246\374|\241\277x\211\266\"S\271\320?!) \020\364\202\322?\320!\205\020\316e\327?\322v\224\223\006\311\347\2773o1=\026\006\320?\027r\337~hd\322\277;\366\2237\275\350\322\277Z\205e1\r7\254?\260\325\362\335\303J\360?\361\314\212\257\000\301\332?\rck4\316L\341?Z\360|\270\331\372\256?\374Xk\251\243\316\341\277\375!p\336\342v\263?z\354\223\234\022:\343\277&s\357P\215H\354?\372\014\226\310$Q\360\277\206\235\2670;8\312\277\273\014X\205\3113\240?\345Q8\237b#\265\277\262v\253Y\013\033\363\277\367\3176\243\371r\361\277NE\243\306C\344\351\277\363\304n\006\253\352\007@\t\203\361{\366\201\247?\242\305\331Z\t\227\360?k\227\255R=&\352\277,\0327\344\210y\363?v_*X\r\353\254?V\004/\330\264\000\341\277\256\373gk\362`\310?)r\034\277C\024\335\277\214\036\251br\304\356\277\361\264X\317\211\306\374?\327w9\314&e\326?\323\204l\016\263)\237\277?\334+(Q\342\273?w\325\262\313{\376\307\277\270D\357c\021\364\332\277\316\202\312\210\371\036\301?`7v3\212\t\256\277C\344gkD\341\354\277\016]\255 \344\211\366?\017i\227\365\202\251\316?\222X\006H\253Z\345?\033B;\327\205\276\276?\240\005\017\330\266\254\350?\330\360I\217\335\214\364\277-\026\200\023\2218\366?S\304\375\021\332\006\346?\212s\224\251\255E\333\277\253\370\213P\235\026\360?\260(\244\3606\325\332?\211\276zhX\333\304\2779\037|\004<)\356\277\226\356\262\0256\314\353\277\360\304\347N\010\312\352\277O\233;\362\0210\360?\223S\236\353\200\013\274?\'\344\001\317\245\006\325\277R\204W\225\316\016\343?\374\220\360G E\361?\234\352\335C\372O\324\277\016\226rA\265\027\236?\277\377\261\006\214\336\342\277\224-\204\272\336\373\303\277\257\035N\373\222\203\256\277!G\331\r\254\340\335\277~\020\007\177\373\252\341\277\322KA\355\374i\005@\214\330\365\357\202\\\004@\201\361\001D)\010\341?\353ut\363U\360\225\277\233\325}\214L\335\367?\364s>\"\224\213\323\277/\245\315\021\313\311\326\277\360\262b\207\211k\353\277\345\255\320\243u\273\351\277\016s\255\360\353O\330\277\024i\357\305b\312\354\277sn\202\264\351\247\316\277q\270\'D\263G\361?*\014b2)Fi?ei\357\265\342\231\334?>`\307\271g\275\337?N\373\367\301\247\000\324\2776\244\313\013e\237\346?\264\271\033\313S\000\327\277G|\022-B\334\337\277\363\'XF#\347\365\277\026\333q\315\305\207\271?\366\243D$/Y\374?\t0\356u)\326\321\2773gl\3469\301\347?8O\340\304)\036\332?=\r\304\263\232\021\252\277\336\262g\204\357\330\336\277\305&\263\235\\\317\354?\331\374\254\017M\275\322?l\200\321\241l3\350\277\325\242mkl\215\365\277\021\270\235\330\0204\325?\315\001\375\222\277t\340\277S\t\307\323!|\266\277?{\343\331b\'\030@\347\244\007\001\032\270\345?j\371\351\230\257\365\326?\030\022:\037\227\376\315\277\007,%\0073\244\342\277\256\300\007U-j\346\277X\254q\360\311c\330?\264\014\245\352\366\214\340\277\246H\232\256c\017\272\277\020\306H\256\215\315\323\277~\005\3512@[\343\277\013\344\212\277.q\306?\207\'\025\333\016\301\361\2772\216H\026\347\231\342\277\330\017j\267-\031\310\277\260(\244\3606\325\332?\235\364\\\242\201\202\310?\201\247\242\000\364\204\236\2772\333\305\2732\231\324\277r+\224\305\n8\327?W\336\241ja`\204\277\027\211\022\345%\032\342\277\271\036q\017}Q\347?p5v,\221\237\346\277"
      }
    }
  }
}
node {
  name: "tensors/component_3"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 750
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 750
          }
        }
        tensor_content: "<\031\333\376\013\000\323?\373\027)>\206\023\321?\367OCf\343~\375\277\365\322\357\031}.\370?\374\250IMvI\000\300$\366\235e\242U\310\277:\330\033\300\350\342\261\277\241\362\021J\222\362\302\277(\205\330\260\313\321\341\277\377\257\241p\275J\215?\244M\373\246D\001\360?cP\351N\321<\364?\"O7\216KP\362?\255*m\021^\342\002\3004\322Q\246\371\006\367?\245\370\001\347\255.\314\277\000\230\364X\372\001\353?h\205b\327L4\342\277\007&\302v\336\302\302?\343\223\017]\247\250\344?A\232\316\263\204x\356?b\222\323u\240Y\342?6I\265UD\033\363\277\224\321\370\305\266\020\366?\014\0047\236\372\004\332\277\255\213\334\232\351\322\353\277\321\315\342\203%K\360?\362)b\337\360\352\310?\203P.\342\021n\364?\301 \007\203.\213\336?\241\231u\323A\202\355?\222\323H\372\277$\371?\202\222\030\t\341\212\342?!\232\211 DG\356?\000\230\364X\372\001\353?e\226s\336\262\201\350?\246\313v\215\257\333\366\277\327@\314M\212\227\264?\203\223@\243\345\024\344?\215\367\331L\251\244\312\277\020\341\203+\022\275\277\277\354\212\000\330\037\034\r\300\205\227\340\013\370<\352?\327M\256\236\2319\372\277#Q\207\302Td\365?\n\364M1\231A\305\277BS\034\212\236\251\370?\005th-\324\242\243?\014\213\203\272\246\334\352\277\n\331CZ\355l\263\277\244M\373\246D\001\360?\365-\002H\003\023\317?\343\223\017]\247\250\344?vK\217\260\316\221\366\277\206\314Y\224s4\370\277p\'\376]\345\021\305?\300\036\267N%w\333?\207\315\201.x\276\371\277\253\211\214f\340\276\350\277\302Nh\324\211\274\361?4\037\313\233\'<\334?\350\215\266\365sI\357\277\215\005s\205\001T\334\277\t\033\241\014\224\261\325?\214\004K\353\374\311\332\277uH\027\342\300\363\361\277\013G\274\352\245\323\275?\202\222\030\t\341\212\342?\301 \007\203.\213\336?\013\244WF\232M\241\277\204R~\026\033\202\367?\264\322e\363\373\313\367?\017\3373\367\010\251\274\277uH\027\342\300\363\361\277\363\324?N\206B\373?\206\212om\244\027\352\277d\307L\376\033Q\360\277\210\376ZN\341\215\321\277\010\'\352\020\343L\304?Ul\277\260\365n\005\300e\354a\372\225\207\005\300DNT\207\207\367\360?\215\367\331L\251\244\312\277\205\211G\323\237\215\350\277N\0079\223\211\005\337\277\267Mi\013Y\010\372\277\007\316\225{z\203\372\277\245\351sR\tL\001\300\241\2215\002\0352\341?\345N\255g\312\355\361?\204R~\026\033\202\367?\362\316O\261j\006\362?\365H+/\303\270\362\277\277\226B\230t\025\351?\314\003\255wy\242\331\277\343\223\017]\247\250\344?\000\231\034\363\376\213\354?\212\000\253\202\352\241\324\277\262\316\305\212\351\243\361?\220\320\320+\262\206\364?\327@\314M\212\227\264?\010\'\352\020\343L\304?\r/\33432\236\t\300\336\2247\367\2532\346?D\307\007k\333\037\360\277\374\222,V\343O\343?S\325\016\010H\326\373?\023\325\204\341\306s\373?\275\032\027\346\022O\325?O\317\036k,\232\362?D\307\007k\333\037\360\277\244\225\325j/Z\347?\013\244WF\232M\241\277p\'\376]\345\021\305?\365H+/\303\270\362\277\277\035\217\264 \355\331?t,\306`\374\303\314?\342\204N\212Jo\341\277L\212\345F#\265\351\277H\205\035D\014\003\342\277\245\226\375\0044\344\350?\004\226\244$\361\355\347?\007&\302v\336\302\302?\013\2113\206\235\310\347\277\314y\2068\317\251b?\217\372Q\033\267B\317\277\215.\026\225\005\330\317?\362\316O\261j\006\362?\214\366\261\262\244\032\311\277\203\223@\243\345\024\344?\244\225\325j/Z\347?.-\321\222i\273\006\300UJ\"\203\211\326\364\277e\211\002@_\\\350\277\016\372=\316\264}\316\277\017\3373\367\010\251\274\277T\321n\2375\256\365?\376\033\311\246\230;\327?\250w\010\226\346\312\251?\tDD\034\2305\271?\262\316\305\212\351\243\361?\345N\255g\312\355\361?\007\316\225{z\203\372\277\345\307`K\036\026\361\277\314\003\255wy\242\331\277\224G4\333\374\232\360\277E\226.KrP\350?\215\005s\205\001T\334\277\202!\245\366\261\262\337?\323\320ZR3\351\364?|\031e%\215b\323?=\032\003\231\020\212\324?u }\\\255(\336?$R\257\\Y\356\366?\327@\314M\212\227\264?S\324\346mCL\372?\004Rj\311\030\275\366?=\032\003\231\020\212\324?\010\321\rJ\210!\377\277\245\370\001\347\255.\314\277\007\317\275\025\177\r\374\277\242\3639\344\226|\304\277g\231\353\254\300\037\355?\245\370\001\347\255.\314\277\'\204\260\026\307G\340\277\327@\314M\212\227\264?\262\316\305\212\351\243\361?\244q\030\371\312\216\240?I\377\370\301d\265\322\277\013\332k\364\361\366\264\277\314y\2068\317\251b?\200\037U\302\250\236\334?\212)N\222\356%\310?\001\221\334!\332;\340??\340[\221\r3\276\277VN\302\353\233\376\372\277\212\210\0379\233\003\347\277\331B\034\202\223\253\267?{\027\025\361\203N\320?\213\002\373\266\363\265\327\277\021@o\273\017K\226\277\262\317\355$\356-\363?\007\204k\203\206\026\340\277d\351\351+\210\351\000\300\226L\374\335\023M\370\277\376\033\311\246\230;\327?uJg\026\312\007\365\277f\311\2342%e\363\277\342\204N\212Jo\341\277\235\252\312\307\275\311\002\300\375\223T\360\347\331\344?\333E\224P\241I\274?\017\252G\343\265\211\252\277{\027\025\361\203N\320?`\230\303\022\274\225\353?uH\027\342\300\363\361\277]\223\373\017\245\343\343?\010\'\352\020\343L\304?d\225KD\256\367\346?<\333\223\216\366\200\266\277~\034\335\363\232\000\330?\002O\362\372\n\037\362?o%\256)\334\375\301?\366o\220_F\003\013\300r\317c\376l\313\362??\036\243\001#\262\332?\371\247a\237\230\372\200?\307\213!.*\004\354\277<\333\223\216\366\200\266\277\010\205\223\035\213\240\341\277\342\204N\212Jo\341\277\312\001]Cp\216\326\277\310\031\357K\016\305\323?\312\0005\251k\004\325\277\204\207\367\236\226y\345\277{\221\360n\334\000\341?WO\352\205\240\210\374\277p&\326\303\340\207\303?\275\032\027\346\022O\325?\377\226\314\276\365w\351?B\222\216\342_(\342?\025\3234\255\275_\370?\004\210\013\354\230>\346\277\304\224\362ck\001\346?\005\313\035\255l\345\365\277\333E\224P\241I\274?\014\334\273(\373\n\270\277\304Q\340\242\227Z\366?m\246\247z\243a\244\277d\225KD\256\367\346?\310\375\274\332]f\320\277\300\037\337\350)\001\335?s+\236\306\3679\313?\036\226\351\2671\037\350?q\254\227\027\277\235\255\277q\254\227\027\277\235\255\277\t\362\375\374\217-\302\277!N\017\364F\306\360?\036\226\351\2671\037\350?\303\223\312\311fw\344?A\231\246\031\200\356\354?\304\225\032\376o\213\347?\226NL\022\035a\373\277\304\224\362ck\001\346?\247\214\0045\356\\\355\277\311\2051\221\016\310\342\277\213\002\373\266\363\265\327\277\331B\034\202\223\253\267?\375\223T\360\347\331\344?\365\322\357\031}.\370?\036\226\351\2671\037\350?\336\2247\367\2532\346?\374\030Q\330\212\235\322?#P_(P\332\363?\346\212>\'f\253\352\277\022\317\224D\2537\362?\204R~\026\033\202\367?\310\204\t\367\t>\341\277>\225\006\261m\306\346?e\312\304\314)\357\364\277\210\376ZN\341\215\321\277\312\207\201\305\027\334\345\277r\317c\376l\313\362?\323\320ZR3\351\364?+\211x\031\336\371\347\277\241\231u\323A\202\355?>\225\006\261m\306\346?\246\311&Y\246\307\363\277g\231\353\254\300\037\355?\325k\253c\363\251\004\300WM\232Q\227t\371\277\343\223\017]\247\250\344?\213\002\373\266\363\265\327\277um,\336:*\007\300~\225\220\327\356(\347?\n\364M1\231A\305\277\312\001]Cp\216\326\277K\002q\220rS\327\277\373\027)>\206\023\321??\035{g\036(\331?\313\002\205\335t\030\330\277I\206E\336\020\215\343\277\210\204\177\320\210\333\340\277\t\377n\233\343R\322\277c\224#\252\251m\345?\211\377\202\350\345\027\323\277<\333\223\216\366\200\266\277\300\036\267N%w\333?e\211\002@_\\\350\277\t\377n\233\343R\322\277\203\224h=\352\236\345?\010B\364\347\216!\266?\205\211G\323\237\215\350\277\036\226\351\2671\037\350?\242\222]\234!\274\342?\377\226\314\276\365w\351?\325G\276\001~\375\360\277\247\214\0045\356\\\355\277J\001I\366m\311\325\277\'\204\260\026\307G\340\277\222\317\250\221\255\374\362?DNT\207\207\367\360?\t\327\363%\344X\260\277f\314\024\0013\003\370\277\241\362\021J\222\362\302\277\013G\274\352\245\323\275?\371\247a\237\230\372\200?g\214z\016m\372\354\277\250w\010\226\346\312\251?&\212\240\263\342\203\351\277\204QV|\026\370\365?\361(:E\354`\307?\207\317\321b\201\322\374\277\"\233\261\272H\321\357?\304\225\032\376o\213\347?F\357\2245c\364\t\300\244M\373\246D\001\360?\007&\302v\336\302\302?\230q^\324\325\365\203\277\301\221z\225]c\341?\010\215\323\356\257\360\355\2776L-$R\271\367\277\246\311&Y\246\307\363\277bO\301\264\314\262\362?\204\207\367\236\226y\345\277UJ\"\203\211\326\364\277G\240y\014\304\226n\277\306\212\371\223%z\352\277\021\316l\252\246\255\360?1\316\261=\347\336\360?\324D\017$\"s\234\277\345N\255g\312\355\361?\346\212>\'f\253\352\277q\254\227\027\277\235\255\277\203T\316J$\226\372?\016\250\367\256\254u\247\277\375\223T\360\347\331\344?\274\030\307\261\t;\322?\034\252\266z\273\004\002\300\266K\031\327O\364\366\277d\207\262\013VH\345\277\345N\255g\312\355\361?K\003\231*w\335\330\277\332Dl\266\234\277\272?\312\207\201\305\027\334\345\277\324D\017$\"s\234\277\277\035\217\264 \355\331?\237\256j0\320\361\010\300\007\214\253T\253f\354\277\323\324\372\272E\021\373?<\333\223\216\366\200\266\277?\340[\221\r3\276\277\003P\032\225\017\251\363?\374\030Q\330\212\235\322?WM\232Q\227t\371\277\352\207\306XX\r\346\2773\321)\014\365|\365?\203P.\342\021n\364?\016\007\257l\010\243\336\277\007\316\225{z\203\372\277\342\222\347\302\242\036\343?\210\204\177\320\210\333\340\277\303\223\312\311fw\344?\247\317\026\366\301\003\375\2775J\335\357H\245\364\277\222\323H\372\277$\371?\n\364M1\231A\305\277\025K\300\366\014\376\365\277\244Q\233\017W)\366?g\315<\2337\215\371\277\205\312\t`j \365\2774\037\313\233\'<\334?&\2309\354:3\353?\343\223\017]\247\250\344?\305\307\033\270\335\344\360\277\204\207\367\236\226y\345\277\277\226B\230t\025\351?\r\005_8\377\216\333\277\235\224\255\320*\320\345?=\224\336\026i<\345?\014,\262\023\372\376\313?\005\340\220\211\203\365\232?\243PsuR\237\364?r\317c\376l\313\362?\246\314\236\'\264e\370\277\361\'\022\253\347\326\305?\250\204\304c\311\014\341\277\203\224h=\352\236\345?r\317c\376l\313\362?\230q^\324\325\365\203\2774\322Q\246\371\006\367?\211\206\317\004\222\357\343\277\207\030=\213\210\330\321?UJ\"\203\211\326\364\277\016<\317R\375\"\220\277\244Q\233\017W)\366?\344Q%6\330\213\366?\362\316O\261j\006\362?\250\205\354\375\315\226\342\277aN\231\032\310(\361?&\2309\354:3\353?\262\317\355$\356-\363?\313\002\205\335t\030\330\277\365-\002H\003\023\317?\211\377\202\350\345\027\323\277\245\370\001\347\255.\314\277\204QV|\026\370\365?(\205\330\260\313\321\341\277\300\036\267N%w\333?\243U;xiQ\374?$\366\235e\242U\310\277\242\222]\234!\274\342?\266LAqT~\370\277\364,\332\255\376\210\315?A!\033\3200P\337?\301\221z\225]c\341?\202N\336\255\010Z\361?&\2309\354:3\353?\277\035\217\264 \355\331?aN\231\032\310(\361?\004\226\244$\361\355\347?\"\223q\351#\201\343?XQ:\272\251\234\377\277\002\222\004\274\336\305\341?\r\005_8\377\216\333\277\211\377\202\350\345\027\323\277\014\213\203\272\246\334\352\277\"O7\216KP\362?\004\225|\212\354c\346?\336\225_\221\260\274\347?\'\320*C\304\310\375\277E\310/\005\340\251\361\277!N\017\364F\306\360?\246\313v\215\257\333\366\277\216\371)\201\262\270\315\277\262\317\355$\356-\363?\311\377\014\017gz\323\277\022\317\224D\2537\362?\253\211\214f\340\276\350\277\266I\311\242F\340\363\277\265Gyn=\314\360\277\366IS\311\307B\364\277\333\220\227\216\231\n\340?\212)N\222\356%\310?u }\\\255(\336?D\352\3142LB\002\300\201\232X\332\005\333\356?E\226.KrP\350?a\221\253\333\233\317\340?\350\215\266\365sI\357\277\374\222,V\343O\343?\343\206\236\276S\203\344\277\250\215,\317\362\346\356\277\006?|\031\201\203\261?\r\006\207\322\003\031\335\277;\030\263d\007v\321?\206$\206\217\327s\300?H\205\035D\014\003\342\277\302Nh\324\211\274\361?\010\205\223\035\213\240\341\277a\221\253\333\233\317\340?\220\320\320+\262\206\364?I\206E\336\020\215\343\277\016\336\013]\004\037\273\277\317\007M\340\213\312\337\277\345\211\026\215a!\351\277\244M\373\246D\001\360?\206\230\010\246\374\306\353?\tzX\312\357\336\254?\275\032\027\346\022O\325?r\323\003g\177\363\370?\256/5\024u\224\n\300\315\005\375\253\202\266\334\277\t\362\375\374\217-\302\277\230P\234F&u\376\277\206\314Y\224s4\370\277\342\221\277(\236\224\341?\311\2051\221\016\310\342\277\203\224h=\352\236\345?\201\232X\332\005\333\356?T\322\2269:8\367?\247\214\0045\356\\\355\277\002\222\004\274\336\305\341?!N\017\364F\306\360?\301 \007\203.\213\336?bO\301\264\314\262\362?\342\232\'\224\307n\357?F\213\r\341\'?\353\277\246\313v\215\257\333\366\277\342\221\277(\236\224\341?\216\006\233\037\006\336\335\277E\226.KrP\350?\013G\274\352\245\323\275?\265Gyn=\314\360\277\360\317wKo\220\363?\303P\270\010\223\320\364?I\377\370\301d\265\322\277\r\006\207\322\003\031\335\277\213\002\373\266\363\265\327\277\214\003#Q\370?\331\277\014\367\305\377\246\337\311\277:\330\033\300\350\342\261\277\206\212om\244\027\352\277\331B\034\202\223\253\267?=\224\336\026i<\345?N\006\021\371\204{\335\277\222\317\250\221\255\374\362?tG\357G\274i\360\277\315\005\375\253\202\266\334\277*\207(\345\324\345\344\277g\315<\2337\215\371\277b\222\323u\240Y\342?T\321n\2375\256\365?\247\214\0045\356\\\355\277\310\204\t\367\t>\341\277r*v,\363\257\311?5K\005\212M/\366\277h\215\242\250q\204\356\277\363\035\031\333\241O\332?q\254\227\027\277\235\255\277\315,\002\331\247\'\006\300\351\205v$O\371\342\277=\032\003\231\020\212\324?|\031e%\215b\323?\301\221z\225]c\341?\006?|\031\201\203\261?\017\252G\343\265\211\252\2774\322Q\246\371\006\367?\025HH(\377_\361\277{\027\025\361\203N\320?A\221fH[\236\340?\n\363%\227\224\267\303\277\275\032\027\346\022O\325?\034\222IO\037\367\341?\230q^\324\325\365\203\277\314\003\255wy\242\331\277\365H+/\303\270\362\277G\240y\014\304\226n\277\235\223\2056&F\344?\t\377n\233\343R\322\277cP\351N\321<\364?\216\371)\201\262\270\315\277sL\267J\323\033\370\277\312\0005\251k\004\325\277\t\327\363%\344X\260\277d\225KD\256\367\346?\201\232X\332\005\333\356?&\312:\246\250\214\364\277|\031e%\215b\323?\332Dl\266\234\277\272?\364\315\'\027f|\360?\004\226\244$\361\355\347?\214\366\261\262\244\032\311\277\374\250IMvI\000\300\237\227%\2378n\352?\013\332k\364\361\366\264\277\310\320\203#\007\277\376\277A!\033\3200P\337?\363\320\237\345s\032\365?\202\222\030\t\341\212\342?\364\315\'\027f|\360?\314\003\255wy\242\331\277$\225\301\035-\225\346?\216\007\303\271\nh\337\277\005\310\245\336^G\361\277\300\037\337\350)\001\335?\312\207\201\305\027\334\345\277\377\257\241p\275J\215?!\221!\265\032m\340?\224\321\370\305\266\020\366?3\321)\014\365|\365?\324D\017$\"s\234\277\340\230\327_\276Z\354?\302S0\327\240n\371?\207\030=\213\210\330\321?=\033+3\025\024\326?\324D\017$\"s\234\277d\207\262\013VH\345\277\235\224\255\320*\320\345?\007\315m\341u\371\370\277=\335\343\302\377\224\271\277\344Q%6\330\213\366?\250\232\235mF\014\357?p\'\376]\345\021\305?A \3635,\306\335?\345N\255g\312\355\361?&\312:\246\250\214\364\277\375\223T\360\347\331\344?=\335\343\302\377\224\271\277\302\232\342\000\207=\357?xPW\263\345C\376\277\004\351\032r\306U\000\300H\215]\0251S\356\277o%\256)\334\375\301?s+\236\306\3679\313?\303\223\312\311fw\344?\262\317\355$\356-\363?g\320\264iE+\376\277\303\223\312\311fw\344?\277\226B\230t\025\351?&\2309\354:3\353?\242\222]\234!\274\342?\314\003\255wy\242\331\277\350\215\266\365sI\357\277\313\211\321\371 \360\350\277{\027\025\361\203N\320?\363\320\237\345s\032\365?\345\226\207+\265F\351?\203\224h=\352\236\345?\325l\323\375\3673\006\300\013\003\017\004\366z\330\277\334\250\004\2725\030\000\300\204\207\367\236\226y\345\277\206\3131\372n\252\366\277\003QB/\0243\365?\211(&\370\351\233\306?\177\226\270q\363\262\350?~\034\335\363\232\000\330?\363\320\237\345s\032\365?o%\256)\334\375\301?\204QV|\026\370\365?\n\331CZ\355l\263\277\216\006\233\037\006\336\335\277\346\311\260\177\'*\364\277\341\231\377\371\302\344\355?\023\325\204\341\306s\373?\343\350\325\336\205$\000\300\211\361\351\257\215h\301\277\007\204k\203\206\026\340\277\010\'\352\020\343L\304?\310\376\344tb\360\321\277B\222\216\342_(\342?\005S\222c\035G\370?\314y\2068\317\251b?\023\321\344x\264K\365?\340\230\327_\276Z\354?\013\003\017\004\366z\330\277(\215\030\202\360!\356\277\t\207\343Q\224\264\344\277vN\007\177\334/\373\277u-\356\372\000N\316?\013\2113\206\235\310\347\277N\006\021\371\204{\335\277\250\232\235mF\014\357?\212)N\222\356%\310?\017\3373\367\010\251\274\277K\002q\220rS\327\277H\205\035D\014\003\342\277q\254\227\027\277\235\255\277\t\033\241\014\224\261\325?\202!\245\366\261\262\337?\374\222,V\343O\343?\377\034\361@\235\305\330?&\2309\354:3\353?d\225KD\256\367\346?\214\366\261\262\244\032\311\277E\211\275\254\036+\350\277~\034\335\363\232\000\330?~\033\265Y\226v\326?\343O\325\001\317w\363?\311\377\014\017gz\323\277@P\244\273\220\013\364?>\225\006\261m\306\346?TG\252\264{8\360\277\217\372Q\033\267B\317\277%S\327\366]x\370?\273\027\237\027\005\261\320?\303\223\312\311fw\344?&\2309\354:3\353?kf\356N\234\005\020\300\310\031\357K\016\305\323?\250\205\354\375\315\226\342\277T\322\2269:8\367?\351\205v$O\371\342\277\206\212om\244\027\352\277\021@o\273\017K\226\277\342\222\347\302\242\036\343?Q\316\366\320\'\020\361?\202O\006H\r\344\362?\345\310\210\345\"\240\362\277\313\002\205\335t\030\330\277\017\3373\367\010\251\274\277Q\316\366\320\'\020\361?\016-\214\377(\212\006\300\352\207\306XX\r\346\277~\225\220\327\356(\347?\303\223\312\311fw\344?\025\3234\255\275_\370?\224\322 `\273\232\367?\230q^\324\325\365\203\277\'\320*C\304\310\375\277\034\253\336\024\300\216\003\300\212\001\323\034\357+\326\277\004\225|\212\354c\346?\346\227\257\305\271\320\352?t,\306`\374\303\314?\362)b\337\360\352\310?\273\027\237\027\005\261\320?\277\035\217\264 \355\331?\224\3752\264\334\003\320\2774\322Q\246\371\006\367?\210\215\347;\262\265\356\277\345\310\210\345\"\240\362\277\014\334\273(\373\n\270\277&\213\310M\347\r\353\277\262\317\355$\356-\363?\014,\262\023\372\376\313?\342\222\347\302\242\036\343?B\222\216\342_(\342?\277\226B\230t\025\351?\327?\244\263\205\r\263?\343P\375\233\323\001\365?\235\223\2056&F\344?\\\253h;A\361\003\300\323\320ZR3\351\364?\203\223@\243\345\024\344?\305\210\251_\034f\347\277\277\226B\230t\025\351?\212)N\222\356%\310?vK\217\260\316\221\366\277\346\311\260\177\'*\364\277\305\210\251_\034f\347\277\334G\344\204\252]\277?\213\365\211\030\240\220\307\277\"O7\216KP\362?\314y\2068\317\251b?tG\357G\274i\360\277\311\2051\221\016\310\342\277\201\232X\332\005\333\356?\247\214\0045\356\\\355\277\'\231a\206?\275\354?\016\371\0254\260\363\314\277\302O\220n\216F\363?\323\320ZR3\351\364?M\2145{,\311\354\277c\224#\252\251m\345?\336\2247\367\2532\346?\327M\256\236\2319\372\277t\321\2632v\337\365?@P\244\273\220\013\364?\007\204k\203\206\026\340\277\206\212om\244\027\352\277Q\316\366\320\'\020\361?\305\307\033\270\335\344\360\277<\031\333\376\013\000\323?\014\334\273(\373\n\270\277u-\356\372\000N\316?\226K\324C\017\303\366\277\343\206\236\276S\203\344\277\245\210d\314\3334\347\277"
      }
    }
  }
}
node {
  name: "tensors/component_4"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 750
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 750
          }
        }
        tensor_content: ">\255\251y\350\215\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277Cf\321Q\233\307\255\277\345^&-\264\343\274\277\231\313qP\203)\276\277\234k\313Z4\230\276\277\341\363/\246}t\276\277\234k\313Z4\230\276\277\370\027\363T\344\244\275\277\314(\227\023\'j\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\267\026\240\317\346\202\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\266\324\351+\336\226\276\277\234k\313Z4\230\276\277E\356\252 \006\240\364?\234k\313Z4\230\276\277\367*z\342\360\226\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\247I\355\357\256\217\276\277\234k\313Z4\230\276\277\036\343\023\000\023\226\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\374W\246iF\202\276\2773\215`\030\346&\264\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277v~Yu\313\226\276\277o\370\216\324lb\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\364\017\324D>\206\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\304\356\214\260\017\225\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\317\235\0132\225o\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\032\311\372\010\321y\276\277\224}\307\266\347\220\276\277;=\200)\2350\276\277Zk\356\275l\220\276\277\234k\313Z4\230\276\277\315\273\316N9@\271\277\337\002\205\016\337\217\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\324\267\307\351\030C\276\277\274\212\207G\344\223\276\277\332@\220D\035\327\256\277\233\0035\030\210|\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277p}\243\254\177\\\352?\016]\277\321\304\177\276\277c$\032\232r\225\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\001\216\333\346p\311\275\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\235o\346\301\244\224\276\2775o\020\262g\231\275\277\032\020Y\272\272V\276\277\234k\313Z4\230\276\277\300Y\342\353\033H\274\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277R\032C\255\253\254\272\277\234k\313Z4\230\276\277\320\264\226h\327\203\276\277\213\264\376\035\272\276\243\277\033n\237\341\244\220\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\2510Hl\213\222\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\376\212\252e/\n\276\277`=\277\035\226\222\276\277\234k\313Z4\230\276\277\243\004\330N\357/\275\277\234k\313Z4\230\276\277\n\276\254\354\000\227\276\277\3779Y\330A\224\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\247opO\224v\276\277\234k\313Z4\230\276\277?\032\213\212\267Q\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\227+/\004\r\225\276\277p}\243\254\177\\\352?\234k\313Z4\230\276\277\234k\313Z4\230\276\277%\356\327\216\363\226\276\277\242\227j;\031\217\276\277\234k\313Z4\230\276\277c$\032\232r\225\276\277\234k\313Z4\230\276\277\035C\214y\354r\274\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\2778\272\375\307\272\225\276\277\276q\342\303\300\226\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\337\213\231c\321X\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\277^r\364\356~\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277c]\r\311)\224\276\277\234k\313Z4\230\276\277S\236\305k$\177\276\277\000\001f\251\212\225\276\277\234k\313Z4\230\276\277\230\337\313\005\204~\276\277\220\013\323|$c\361?\213\031\302M\274\217\276\277\234k\313Z4\230\276\277\214s\220\316w\204\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\344B!e\006\223\276\277\275\230\362\311\026r\276\277\214\247\333\357M\222\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277)k\031I\032\257\226\277\234k\313Z4\230\276\277\232\347H\234\273\305\272\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\223@\271 \300\225\276\277\234k\313Z4\230\276\277\270\317\375* \367\270\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277F\324\240L\354\223\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\035\307\340\273\357\220\276\277\234k\313Z4\230\276\277\005E\300\'dL\276\277\014\377\325\351\230\216\276\277\234k\313Z4\230\276\277[\312\355\2135\217\021@r\264a\244\304D\276\277\234k\313Z4\230\276\277\205+\276\251o\210\276\277\234k\313Z4\230\276\277\247\236\023c\211\223\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\211\262\3762\004\327\275\277\233\0035\030\210|\276\277\234k\313Z4\230\276\277\227:@y\221\001\271\277\342[\365\253r$\275\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\205+K\363IE\272\277H\273\207\313\317s\275\277\234k\313Z4\230\276\2776\'\337\360\203\r\241\277\234k\313Z4\230\276\277\374\202\245\350=e\266\277`G\262\371\231+\276\277\234k\313Z4\230\276\277Nq\231\344\316\223\276\277\364\024\302\323\242\345\275\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\222\3247\201\277\361\271\277\234k\313Z4\230\276\277\234k\313Z4\230\276\2772\231\024\320`\315\002@?\032\213\212\267Q\276\277\234k\313Z4\230\276\277\356lI\271KX\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\336\346Q\312\273\212\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\266FsJ\216K\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277;\366!x\263S\276\277\264\023\315\3246\354\273\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\222\3247\201\277\361\271\277r\325\2315\207\203\276\277\314\250E3\206\216\276\277\345\177/\373-\216\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\264\241+\261x}\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\216\253\366V\276\216\276\277\204_\t\313E\226\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277S\236\305k$\177\276\277\234k\313Z4\230\276\277\016]\277\321\304\177\276\277\031\237\\B{\226\276\277\234k\313Z4\230\276\277\025\177\016\227\347\224\276\277F\033\377\375\325p\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\257\207\273\262\252\351*@\234k\313Z4\230\276\277^w\205tA\364\275\277\031\237\\B{\226\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\020#?\374\234\214\276\2773\0044\276\345\243\266\277\310\004.\001#l\276\277A\001\320\217,Z\272\277A\001\320\217,Z\272\277\324\235\374]\373\201\000@\301<\n\374y\224\276\277\234k\313Z4\230\276\277\216\253\261\034\016\000\274\277\r\215\222LlH\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\302$\362\036\307\213\276\277\202?\273\037\262\224\276\277U\321\311g\r\007\276\277\n9V\277\300\201\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277d\032\020\0004\"\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\211\255\020\244\237w\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\366m\275,jw\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\207\347\220y\307j\276\277\234k\313Z4\230\276\277\\\327+j\220\205\275\277\234k\313Z4\230\276\277\214s\220\316w\204\276\277\363\266\224\370\231E\270\277\267\244\\2\272<\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\021\261X\236.\217\276\277\214s\220\316w\204\276\277\346\233b?Q\223\276\277\250\231\355\323\3508f\277\234k\313Z4\230\276\277\256\251\327\361i\224\276\277\332\000\301P\243!\261?\024G\250\016\241\212\276\277\271\346*\333\320\342\273\277\377\035UWg#\275\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\326\207\337>\335_\267\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277J\247\376R\206\212\276\277fO\024\344\230?t\277P\003\316\355\320\222\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\321c\213\\m|\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277!\330\013\317\360\006\326?\234k\313Z4\230\276\277\234k\313Z4\230\276\277\2773\215\010\254\025\276\277\234k\313Z4\230\276\277\322\263\t\302f\217\276\277\234k\313Z4\230\276\277r\267\'@\362\350\001@P\376kas\020\276\277Xgv\027>K\276\277\234k\313Z4\230\276\277\272\213\024\356T\210\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\2773\0044\276\345\243\266\277\305H[1\313\211\276\277\372k\243\337\210\216\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277e\250\346\365\273U\265\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\200\037mt\036\223\276\277\234k\313Z4\230\276\277\346v\345\366\376\366\347?\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277d\266N\243t\224\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\367*z\342\360\226\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\303\\X\247\r\226\276\277\202\006\310\360\372\225\276\277\234k\313Z4\230\276\277\300\274[\334\032p\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277x\020\216~\315\225\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\323u\206\212\334Y\274\277\000\356\201\334\277Z\275\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277_r\227\345\334\224\276\277\234k\313Z4\230\276\277\276\366\333\261Bc\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\017\014\264\305Zx\276\277\234k\313Z4\230\276\277\306@\317\306\371T\004@\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\026\245\221\366\314{\276\277B\351*i\237\224\276\277\234k\313Z4\230\276\277\201\266I\213\001\203\276\277h\200\030\370\0052\275\277\036\375M\336H\026\360?m\300\313\014h\017\276\277\337D;\262\347{\276\277\017\346I\262V+\271\277\234k\313Z4\230\276\277\010\001\223\367\273.\276\277\325\357\212\261\035\226\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\317h\210\350\r\364p?\234k\313Z4\230\276\277\216UC=s\226\276\277\234k\313Z4\230\276\277\305H[1\313\211\276\277\234k\313Z4\230\276\277\336\305vx\267\224\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\017\232p(.2\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234a\036\000\264m\276\277\234k\313Z4\230\276\277\367\234`@_\224\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\370g\210x\030\222\276\277\234k\313Z4\230\276\277\027^\253^)A\263\277.i\256\257\344\032\276\277\234k\313Z4\230\276\277p\247\203\310\002[\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277_\377\2008\266\237\241\277\231\204\023\237\231L\276\277?\032\213\212\267Q\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\310K\351\361\312\221\276\277\234k\313Z4\230\276\277jv<\332<s\276\277\2515\360yl\203\276\277\234k\313Z4\230\276\277\"\007}\022\027\224\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277-\231\201*\214\343\275\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\\\375\200M\000\270\273\277\234k\313Z4\230\276\277\365|\022\225\313\222\276\277\204C\326\206\"\221\276\277\3554@p\303\226\276\277\234k\313Z4\230\276\277\214x\255 %x\274\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\375\006\233]\334z\276\277\234k\313Z4\230\276\277\230\337\313\005\204~\276\277\255\010N\200\006z\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\021\375vb\007\027\274\277\234k\313Z4\230\276\277\004\335<\231Dg\026@\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\031\237\\B{\226\276\277\234k\313Z4\230\276\277\342\n\273\334\277\210\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277H~<\301\320z!@\234k\313Z4\230\276\277\234k\313Z4\230\276\277\262\333\253\206\240p\276\277\237\2174m8\226\276\277\234k\313Z4\230\276\277\226H\357\356\240\216\276\277\261k|\316\2445\245?\336\305vx\267\224\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\036\343\023\000\023\226\276\277U\321\311g\r\007\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\310U\306Vg0\272\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\002!\264T\036\227\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277!uH\t\025\225\276\277\234k\313Z4\230\276\277~l\351\033\037{\275\277]\254\027\273\004\210\276\277P\330EALr\276\277\234k\313Z4\230\276\277\0101frc\367\275\277K[\341\325\200\342\275\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277SM\272_\272w\276\277\240\217}\3035\244\264\277g\3677W\273\356+@\234k\313Z4\230\276\277\234k\313Z4\230\276\277\262M\036\347\025K\275\277\234k\313Z4\230\276\277\'\373\265j\265\200\276\277\234k\313Z4\230\276\277\2567\361\223\373\226\276\277\032\334j\330\242\221\276\277\210.Ljo\220\276\277\213\304\233\332\341\213\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\206ho\000\331:\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277I\243\343\353\025\216\276\277\234k\313Z4\230\276\2774\325L3\033h\373?\234k\313Z4\230\276\277\234k\313Z4\230\276\277\002!\264T\036\227\276\277\260\\\212\r\262@\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277?\202!\315cm\276\277\226\235\025b{\222\276\277\234k\313Z4\230\276\277\2328\271\335:\263\235\277\234k\313Z4\230\276\277\201NoUx\270\270\277\234k\313Z4\230\276\277\327\272\325\271\265\212\225\277S\2615;\366\226\276\277\245\021\207gh\205\276\277\306@\317\306\371T\004@\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277rm\003\363\332g\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\000\001f\251\212\225\276\277\234k\313Z4\230\276\277\300\312#\236\013\227\276\277\234k\313Z4\230\276\277k\016\357\355\215e\264\277\234k\313Z4\230\276\277<uC\361\241\203\276\277\234k\313Z4\230\276\277rm\003\363\332g\276\277\234k\313Z4\230\276\277(\034L\202\t\350\273\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\'L\301v\037\210\276\277\234k\313Z4\230\276\277$\'\313\275\252\225\276\277\234k\313Z4\230\276\277)\3015\225\215\215\276\277g\340\276\355T\303\274\277@\255 L[P\266\277\234k\313Z4\230\276\277\0177\310t\346u\275\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277J?h\020\332n\276\277\234k\313Z4\230\276\277Z\244\'n\247\375\275\277\211J\177\256\222\225\276\277\352R\215\001\310\204\276\277\316\001\207\r\321\216\276\277\362\\\304\3517\221\276\277\234k\313Z4\230\276\2775(\311\276\270\226\276\277\234k\313Z4\230\276\277y\006\341#Mk\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\017\002d\252\230\226\276\277\234k\313Z4\230\276\277H-\342&7\224\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\334\372N@\376\226\276\277 }d\\;\310\251\277\234k\313Z4\230\276\277)\331Mr@\226\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\346\233\250\300\324\001\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277-\213\320&\326\226\276\277`G\262\371\231+\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\n\243\035\212[t+@\234k\313Z4\230\276\277\234k\313Z4\230\276\277\325-\177&\347\260~\277n\341`\335\350\226\276\277\305i\302\205\326\\\275\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277r\314\326\3005\226\276\277\004\335)\345\2670\276\277\234k\313Z4\230\276\277\323\273U\037\2516\245\277\234k\313Z4\230\276\277\317V\255\200\253\222\276\277\031\237\\B{\226\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\222\320d\245\200\263\375?\234k\313Z4\230\276\277\234k\313Z4\230\276\277\235\005J3\322~\253\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\227\362;\325U\226\276\277\036\216\355\2148\222\276\277\234k\313Z4\230\276\277\375\272}\340\326\322\275\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\177\372\277\021\247\256\264\277E\233\255\0355\225\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\227\362;\325U\226\276\277\234k\313Z4\230\276\277\356lI\271KX\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\307_D\356\236\306\273\277mym[~2\276\277\234k\313Z4\230\276\277\317\005\242tA\213\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\003\373\006\225\020{\260\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277c$\032\232r\225\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277[\350\211\275\222\334\005@\344\227G\330\340\226\276\277RaC\330\003a\275\277\344\227G\330\340\226\276\277\034\344e\351\220\215\274?\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\360\324\016\277@\010\275\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\305i\302\205\326\\\275\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\234k\313Z4\230\276\277\003\354\333\214\327\224\276\277\337\022\2576U\353\202?\234k\313Z4\230\276\277\234k\313Z4\230\276\277\345^&-\264\343\274\277"
      }
    }
  }
}
node {
  name: "tensors/component_5"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 750
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 750
          }
        }
        tensor_content: "\345g,H\330Z\370?\345g,H\330Z\370?\316,\231\206\007\002\330\277Q!\016\222\311Y\355\277\357s\253\345I\010\334?cs\267<\026\003\363\277cs\267<\026\003\363\277\345g,H\330Z\370?\345g,H\330Z\370?+\005|\324\246\004\364?cs\267<\026\003\363\277\341D\227\301\352\\\357?+\005|\324\246\004\364?\316,\231\206\007\002\330\277\222\207^\337\006\245\272\277\222\207^\337\006\245\272\277\035\326g\260GY\367\277\n\322\323-\010_\305?\345g,H\330Z\370?\334[\255\252f\255\344\277\357s\253\345I\010\334?\035\326g\260GY\367\277Q!\016\222\311Y\355\277l\1776\332\207\260\346?Q!\016\222\311Y\355\277cs\267<\026\003\363\277\316,\231\206\007\002\330\277l\1776\332\207\260\346?\316,\231\206\007\002\330\277\316,\231\206\007\002\330\277+\005|\324\246\004\364?+\005|\324\246\004\364?\357s\253\345I\010\334?\345g,H\330Z\370?Q!\016\222\311Y\355\277\222\207^\337\006\245\272\277\035\326g\260GY\367\277\035\326g\260GY\367\277\222\207^\337\006\245\272\277\n\322\323-\010_\305?\345g,H\330Z\370?+\005|\324\246\004\364?\035\326g\260GY\367\277\345g,H\330Z\370?\334[\255\252f\255\344\277\035\326g\260GY\367\277\035\326g\260GY\367\277\n\322\323-\010_\305?\222\207^\337\006\245\272\277\n\322\323-\010_\305?\341D\227\301\352\\\357?\357s\253\345I\010\334?+\005|\324\246\004\364?\345g,H\330Z\370?\n\322\323-\010_\305?cs\267<\026\003\363\277\341D\227\301\352\\\357?\357s\253\345I\010\334?Q!\016\222\311Y\355\277\334[\255\252f\255\344\277\357s\253\345I\010\334?\341D\227\301\352\\\357?\035\326g\260GY\367\277l\1776\332\207\260\346?l\1776\332\207\260\346?\222\207^\337\006\245\272\277\035\326g\260GY\367\277\035\326g\260GY\367\277cs\267<\026\003\363\277cs\267<\026\003\363\277\341D\227\301\352\\\357?\035\326g\260GY\367\277Q!\016\222\311Y\355\277\222\207^\337\006\245\272\277\357s\253\345I\010\334?cs\267<\026\003\363\277\n\322\323-\010_\305?+\005|\324\246\004\364?\345g,H\330Z\370?\222\207^\337\006\245\272\277cs\267<\026\003\363\277\345g,H\330Z\370?\035\326g\260GY\367\277\222\207^\337\006\245\272\277\222\207^\337\006\245\272\277cs\267<\026\003\363\277+\005|\324\246\004\364?+\005|\324\246\004\364?\222\207^\337\006\245\272\277\345g,H\330Z\370?Q!\016\222\311Y\355\277\357s\253\345I\010\334?\n\322\323-\010_\305?Q!\016\222\311Y\355\277\357s\253\345I\010\334?Q!\016\222\311Y\355\277\345g,H\330Z\370?\341D\227\301\352\\\357?\n\322\323-\010_\305?\222\207^\337\006\245\272\277\345g,H\330Z\370?\345g,H\330Z\370?cs\267<\026\003\363\277\n\322\323-\010_\305?\357s\253\345I\010\334?\341D\227\301\352\\\357?\357s\253\345I\010\334?l\1776\332\207\260\346?\035\326g\260GY\367\277\035\326g\260GY\367\277Q!\016\222\311Y\355\277+\005|\324\246\004\364?cs\267<\026\003\363\277\357s\253\345I\010\334?\n\322\323-\010_\305?\n\322\323-\010_\305?\222\207^\337\006\245\272\277\341D\227\301\352\\\357?\222\207^\337\006\245\272\277cs\267<\026\003\363\277\357s\253\345I\010\334?Q!\016\222\311Y\355\277l\1776\332\207\260\346?l\1776\332\207\260\346?\035\326g\260GY\367\277\357s\253\345I\010\334?\341D\227\301\352\\\357?cs\267<\026\003\363\277+\005|\324\246\004\364?cs\267<\026\003\363\277\n\322\323-\010_\305?\035\326g\260GY\367\277\345g,H\330Z\370?\357s\253\345I\010\334?\035\326g\260GY\367\277\345g,H\330Z\370?\341D\227\301\352\\\357?Q!\016\222\311Y\355\277\357s\253\345I\010\334?cs\267<\026\003\363\277\345g,H\330Z\370?l\1776\332\207\260\346?\n\322\323-\010_\305?\341D\227\301\352\\\357?+\005|\324\246\004\364?l\1776\332\207\260\346?\035\326g\260GY\367\277\341D\227\301\352\\\357?\316,\231\206\007\002\330\277+\005|\324\246\004\364?l\1776\332\207\260\346?\035\326g\260GY\367\277\316,\231\206\007\002\330\277\035\326g\260GY\367\277\035\326g\260GY\367\277cs\267<\026\003\363\277\357s\253\345I\010\334?\035\326g\260GY\367\277cs\267<\026\003\363\277\357s\253\345I\010\334?l\1776\332\207\260\346?\222\207^\337\006\245\272\277\341D\227\301\352\\\357?\035\326g\260GY\367\277\345g,H\330Z\370?l\1776\332\207\260\346?\316,\231\206\007\002\330\277Q!\016\222\311Y\355\277\n\322\323-\010_\305?\035\326g\260GY\367\277\357s\253\345I\010\334?cs\267<\026\003\363\277\345g,H\330Z\370?\357s\253\345I\010\334?\316,\231\206\007\002\330\277Q!\016\222\311Y\355\277cs\267<\026\003\363\277\222\207^\337\006\245\272\277Q!\016\222\311Y\355\277cs\267<\026\003\363\277\316,\231\206\007\002\330\277\222\207^\337\006\245\272\277cs\267<\026\003\363\277l\1776\332\207\260\346?l\1776\332\207\260\346?\n\322\323-\010_\305?+\005|\324\246\004\364?l\1776\332\207\260\346?\n\322\323-\010_\305?Q!\016\222\311Y\355\277\035\326g\260GY\367\277l\1776\332\207\260\346?cs\267<\026\003\363\277cs\267<\026\003\363\277Q!\016\222\311Y\355\277\222\207^\337\006\245\272\277\341D\227\301\352\\\357?cs\267<\026\003\363\277\341D\227\301\352\\\357?\222\207^\337\006\245\272\277Q!\016\222\311Y\355\277Q!\016\222\311Y\355\277\341D\227\301\352\\\357?\334[\255\252f\255\344\277\341D\227\301\352\\\357?cs\267<\026\003\363\277cs\267<\026\003\363\277\341D\227\301\352\\\357?\341D\227\301\352\\\357?+\005|\324\246\004\364?\345g,H\330Z\370?\035\326g\260GY\367\277cs\267<\026\003\363\277\357s\253\345I\010\334?+\005|\324\246\004\364?\316,\231\206\007\002\330\277cs\267<\026\003\363\277\222\207^\337\006\245\272\277\035\326g\260GY\367\277\222\207^\337\006\245\272\277\357s\253\345I\010\334?\222\207^\337\006\245\272\277Q!\016\222\311Y\355\277\n\322\323-\010_\305?\222\207^\337\006\245\272\277\357s\253\345I\010\334?cs\267<\026\003\363\277\341D\227\301\352\\\357?\357s\253\345I\010\334?\316,\231\206\007\002\330\277\035\326g\260GY\367\277\345g,H\330Z\370?\341D\227\301\352\\\357?\316,\231\206\007\002\330\277cs\267<\026\003\363\277\n\322\323-\010_\305?l\1776\332\207\260\346?\341D\227\301\352\\\357?\316,\231\206\007\002\330\277cs\267<\026\003\363\277\357s\253\345I\010\334?\035\326g\260GY\367\277\334[\255\252f\255\344\277Q!\016\222\311Y\355\277\222\207^\337\006\245\272\277\357s\253\345I\010\334?\345g,H\330Z\370?+\005|\324\246\004\364?cs\267<\026\003\363\277\316,\231\206\007\002\330\277\341D\227\301\352\\\357?\341D\227\301\352\\\357?\n\322\323-\010_\305?\357s\253\345I\010\334?\035\326g\260GY\367\277l\1776\332\207\260\346?\341D\227\301\352\\\357?l\1776\332\207\260\346?\316,\231\206\007\002\330\277\n\322\323-\010_\305?\341D\227\301\352\\\357?\035\326g\260GY\367\277Q!\016\222\311Y\355\277\316,\231\206\007\002\330\277Q!\016\222\311Y\355\277l\1776\332\207\260\346?\345g,H\330Z\370?+\005|\324\246\004\364?\222\207^\337\006\245\272\277\035\326g\260GY\367\277\334[\255\252f\255\344\277Q!\016\222\311Y\355\277\222\207^\337\006\245\272\277l\1776\332\207\260\346?\035\326g\260GY\367\277\035\326g\260GY\367\277\035\326g\260GY\367\277\316,\231\206\007\002\330\277\345g,H\330Z\370?cs\267<\026\003\363\277\357s\253\345I\010\334?\345g,H\330Z\370?\357s\253\345I\010\334?\222\207^\337\006\245\272\277cs\267<\026\003\363\277\316,\231\206\007\002\330\277\222\207^\337\006\245\272\277\316,\231\206\007\002\330\277\341D\227\301\352\\\357?cs\267<\026\003\363\277cs\267<\026\003\363\277cs\267<\026\003\363\277\345g,H\330Z\370?\222\207^\337\006\245\272\277\316,\231\206\007\002\330\277Q!\016\222\311Y\355\277cs\267<\026\003\363\277\222\207^\337\006\245\272\277\334[\255\252f\255\344\277\n\322\323-\010_\305?\357s\253\345I\010\334?\222\207^\337\006\245\272\277+\005|\324\246\004\364?\035\326g\260GY\367\277\345g,H\330Z\370?\357s\253\345I\010\334?\n\322\323-\010_\305?\222\207^\337\006\245\272\277\357s\253\345I\010\334?\334[\255\252f\255\344\277cs\267<\026\003\363\277Q!\016\222\311Y\355\277Q!\016\222\311Y\355\277\357s\253\345I\010\334?\357s\253\345I\010\334?\341D\227\301\352\\\357?\035\326g\260GY\367\277Q!\016\222\311Y\355\277\n\322\323-\010_\305?\n\322\323-\010_\305?\035\326g\260GY\367\277Q!\016\222\311Y\355\277\n\322\323-\010_\305?Q!\016\222\311Y\355\277l\1776\332\207\260\346?\345g,H\330Z\370?\035\326g\260GY\367\277Q!\016\222\311Y\355\277\334[\255\252f\255\344\277\222\207^\337\006\245\272\277\345g,H\330Z\370?\035\326g\260GY\367\277\357s\253\345I\010\334?\357s\253\345I\010\334?\341D\227\301\352\\\357?Q!\016\222\311Y\355\277\345g,H\330Z\370?\345g,H\330Z\370?\345g,H\330Z\370?cs\267<\026\003\363\277\035\326g\260GY\367\277\357s\253\345I\010\334?cs\267<\026\003\363\277cs\267<\026\003\363\277\035\326g\260GY\367\277\334[\255\252f\255\344\277\345g,H\330Z\370?\222\207^\337\006\245\272\277\222\207^\337\006\245\272\277\357s\253\345I\010\334?\357s\253\345I\010\334?\316,\231\206\007\002\330\277cs\267<\026\003\363\277Q!\016\222\311Y\355\277\334[\255\252f\255\344\277\345g,H\330Z\370?cs\267<\026\003\363\277\316,\231\206\007\002\330\277l\1776\332\207\260\346?\341D\227\301\352\\\357?+\005|\324\246\004\364?cs\267<\026\003\363\277\222\207^\337\006\245\272\277\334[\255\252f\255\344\277Q!\016\222\311Y\355\277\357s\253\345I\010\334?\334[\255\252f\255\344\277\n\322\323-\010_\305?+\005|\324\246\004\364?\357s\253\345I\010\334?\341D\227\301\352\\\357?l\1776\332\207\260\346?\345g,H\330Z\370?+\005|\324\246\004\364?\357s\253\345I\010\334?\345g,H\330Z\370?\345g,H\330Z\370?Q!\016\222\311Y\355\277Q!\016\222\311Y\355\277\345g,H\330Z\370?l\1776\332\207\260\346?l\1776\332\207\260\346?l\1776\332\207\260\346?l\1776\332\207\260\346?\035\326g\260GY\367\277cs\267<\026\003\363\277\357s\253\345I\010\334?cs\267<\026\003\363\277Q!\016\222\311Y\355\277\357s\253\345I\010\334?Q!\016\222\311Y\355\277+\005|\324\246\004\364?Q!\016\222\311Y\355\277\035\326g\260GY\367\277l\1776\332\207\260\346?cs\267<\026\003\363\277l\1776\332\207\260\346?cs\267<\026\003\363\277\345g,H\330Z\370?cs\267<\026\003\363\277\357s\253\345I\010\334?\341D\227\301\352\\\357?\035\326g\260GY\367\277cs\267<\026\003\363\277\316,\231\206\007\002\330\277+\005|\324\246\004\364?\316,\231\206\007\002\330\277\345g,H\330Z\370?\035\326g\260GY\367\277\035\326g\260GY\367\277\n\322\323-\010_\305?\035\326g\260GY\367\277\341D\227\301\352\\\357?\341D\227\301\352\\\357?cs\267<\026\003\363\277l\1776\332\207\260\346?Q!\016\222\311Y\355\277\345g,H\330Z\370?\345g,H\330Z\370?cs\267<\026\003\363\277cs\267<\026\003\363\277\357s\253\345I\010\334?\357s\253\345I\010\334?\341D\227\301\352\\\357?cs\267<\026\003\363\277\345g,H\330Z\370?cs\267<\026\003\363\277cs\267<\026\003\363\277cs\267<\026\003\363\277+\005|\324\246\004\364?\222\207^\337\006\245\272\277\222\207^\337\006\245\272\277l\1776\332\207\260\346?Q!\016\222\311Y\355\277Q!\016\222\311Y\355\277\035\326g\260GY\367\277l\1776\332\207\260\346?\341D\227\301\352\\\357?cs\267<\026\003\363\277\035\326g\260GY\367\277\035\326g\260GY\367\277\345g,H\330Z\370?\n\322\323-\010_\305?cs\267<\026\003\363\277\035\326g\260GY\367\277\316,\231\206\007\002\330\277+\005|\324\246\004\364?Q!\016\222\311Y\355\277cs\267<\026\003\363\277\n\322\323-\010_\305?+\005|\324\246\004\364?\345g,H\330Z\370?Q!\016\222\311Y\355\277\345g,H\330Z\370?Q!\016\222\311Y\355\277\341D\227\301\352\\\357?+\005|\324\246\004\364?\357s\253\345I\010\334?\n\322\323-\010_\305?+\005|\324\246\004\364?\357s\253\345I\010\334?\341D\227\301\352\\\357?+\005|\324\246\004\364?cs\267<\026\003\363\277Q!\016\222\311Y\355\277\357s\253\345I\010\334?\341D\227\301\352\\\357?\222\207^\337\006\245\272\277\222\207^\337\006\245\272\277\035\326g\260GY\367\277cs\267<\026\003\363\277\035\326g\260GY\367\277\357s\253\345I\010\334?l\1776\332\207\260\346?cs\267<\026\003\363\277cs\267<\026\003\363\277\341D\227\301\352\\\357?l\1776\332\207\260\346?\345g,H\330Z\370?\345g,H\330Z\370?\357s\253\345I\010\334?Q!\016\222\311Y\355\277\345g,H\330Z\370?Q!\016\222\311Y\355\277l\1776\332\207\260\346?\345g,H\330Z\370?\341D\227\301\352\\\357?\341D\227\301\352\\\357?\357s\253\345I\010\334?\316,\231\206\007\002\330\277\357s\253\345I\010\334?\341D\227\301\352\\\357?\357s\253\345I\010\334?\035\326g\260GY\367\277cs\267<\026\003\363\277+\005|\324\246\004\364?\035\326g\260GY\367\277cs\267<\026\003\363\277l\1776\332\207\260\346?\222\207^\337\006\245\272\277\345g,H\330Z\370?\316,\231\206\007\002\330\277\035\326g\260GY\367\277\345g,H\330Z\370?\357s\253\345I\010\334?\341D\227\301\352\\\357?\341D\227\301\352\\\357?l\1776\332\207\260\346?\035\326g\260GY\367\277\357s\253\345I\010\334?\345g,H\330Z\370?\357s\253\345I\010\334?\316,\231\206\007\002\330\277cs\267<\026\003\363\277l\1776\332\207\260\346?Q!\016\222\311Y\355\277\035\326g\260GY\367\277+\005|\324\246\004\364?\341D\227\301\352\\\357?\316,\231\206\007\002\330\277\357s\253\345I\010\334?\357s\253\345I\010\334?\035\326g\260GY\367\277\345g,H\330Z\370?l\1776\332\207\260\346?Q!\016\222\311Y\355\277l\1776\332\207\260\346?\n\322\323-\010_\305?\316,\231\206\007\002\330\277\357s\253\345I\010\334?\n\322\323-\010_\305?cs\267<\026\003\363\277Q!\016\222\311Y\355\277l\1776\332\207\260\346?Q!\016\222\311Y\355\277l\1776\332\207\260\346?\341D\227\301\352\\\357?\035\326g\260GY\367\277\357s\253\345I\010\334?\222\207^\337\006\245\272\277\035\326g\260GY\367\277\345g,H\330Z\370?l\1776\332\207\260\346?Q!\016\222\311Y\355\277l\1776\332\207\260\346?\357s\253\345I\010\334?+\005|\324\246\004\364?\222\207^\337\006\245\272\277\316,\231\206\007\002\330\277+\005|\324\246\004\364?l\1776\332\207\260\346?Q!\016\222\311Y\355\277cs\267<\026\003\363\277Q!\016\222\311Y\355\277l\1776\332\207\260\346?\222\207^\337\006\245\272\277\035\326g\260GY\367\277l\1776\332\207\260\346?Q!\016\222\311Y\355\277\316,\231\206\007\002\330\277l\1776\332\207\260\346?cs\267<\026\003\363\277\357s\253\345I\010\334?+\005|\324\246\004\364?\316,\231\206\007\002\330\277\334[\255\252f\255\344\277cs\267<\026\003\363\277\357s\253\345I\010\334?\316,\231\206\007\002\330\277l\1776\332\207\260\346?+\005|\324\246\004\364?\035\326g\260GY\367\277\035\326g\260GY\367\277l\1776\332\207\260\346?\357s\253\345I\010\334?\345g,H\330Z\370?\n\322\323-\010_\305?\345g,H\330Z\370?\n\322\323-\010_\305?\035\326g\260GY\367\277\345g,H\330Z\370?l\1776\332\207\260\346?\334[\255\252f\255\344\277\222\207^\337\006\245\272\277\n\322\323-\010_\305?\222\207^\337\006\245\272\277\222\207^\337\006\245\272\277\n\322\323-\010_\305?\345g,H\330Z\370?+\005|\324\246\004\364?\n\322\323-\010_\305?+\005|\324\246\004\364?Q!\016\222\311Y\355\277\035\326g\260GY\367\277\035\326g\260GY\367\277\345g,H\330Z\370?\357s\253\345I\010\334?\341D\227\301\352\\\357?\222\207^\337\006\245\272\277\341D\227\301\352\\\357?\345g,H\330Z\370?+\005|\324\246\004\364?cs\267<\026\003\363\277\341D\227\301\352\\\357?cs\267<\026\003\363\277\n\322\323-\010_\305?\n\322\323-\010_\305?\n\322\323-\010_\305?+\005|\324\246\004\364?\035\326g\260GY\367\277\357s\253\345I\010\334?\334[\255\252f\255\344\277+\005|\324\246\004\364?+\005|\324\246\004\364?\341D\227\301\352\\\357?\357s\253\345I\010\334?\334[\255\252f\255\344\277\341D\227\301\352\\\357?\n\322\323-\010_\305?+\005|\324\246\004\364?\035\326g\260GY\367\277\357s\253\345I\010\334?\357s\253\345I\010\334?cs\267<\026\003\363\277\222\207^\337\006\245\272\277\341D\227\301\352\\\357?\345g,H\330Z\370?\035\326g\260GY\367\277l\1776\332\207\260\346?\035\326g\260GY\367\277\n\322\323-\010_\305?\345g,H\330Z\370?\n\322\323-\010_\305?\345g,H\330Z\370?l\1776\332\207\260\346?\035\326g\260GY\367\277Q!\016\222\311Y\355\277cs\267<\026\003\363\277l\1776\332\207\260\346?Q!\016\222\311Y\355\277\035\326g\260GY\367\277cs\267<\026\003\363\277\316,\231\206\007\002\330\277l\1776\332\207\260\346?cs\267<\026\003\363\277\357s\253\345I\010\334?\035\326g\260GY\367\277cs\267<\026\003\363\277\316,\231\206\007\002\330\277cs\267<\026\003\363\277cs\267<\026\003\363\277\345g,H\330Z\370?\345g,H\330Z\370?\341D\227\301\352\\\357?\357s\253\345I\010\334?Q!\016\222\311Y\355\277cs\267<\026\003\363\277\345g,H\330Z\370?Q!\016\222\311Y\355\277cs\267<\026\003\363\277\357s\253\345I\010\334?\222\207^\337\006\245\272\277\035\326g\260GY\367\277cs\267<\026\003\363\277Q!\016\222\311Y\355\277+\005|\324\246\004\364?\222\207^\337\006\245\272\277l\1776\332\207\260\346?Q!\016\222\311Y\355\277\222\207^\337\006\245\272\277cs\267<\026\003\363\277\341D\227\301\352\\\357?\357s\253\345I\010\334?l\1776\332\207\260\346?Q!\016\222\311Y\355\277\345g,H\330Z\370?cs\267<\026\003\363\277\n\322\323-\010_\305?\341D\227\301\352\\\357?\345g,H\330Z\370?+\005|\324\246\004\364?Q!\016\222\311Y\355\277Q!\016\222\311Y\355\277\316,\231\206\007\002\330\277Q!\016\222\311Y\355\277cs\267<\026\003\363\277\035\326g\260GY\367\277\334[\255\252f\255\344\277\341D\227\301\352\\\357?l\1776\332\207\260\346?\222\207^\337\006\245\272\277\035\326g\260GY\367\277cs\267<\026\003\363\277cs\267<\026\003\363\277\316,\231\206\007\002\330\277\316,\231\206\007\002\330\277\222\207^\337\006\245\272\277\334[\255\252f\255\344\277\357s\253\345I\010\334?\357s\253\345I\010\334?\357s\253\345I\010\334?cs\267<\026\003\363\277\035\326g\260GY\367\277\357s\253\345I\010\334?+\005|\324\246\004\364?\345g,H\330Z\370?\357s\253\345I\010\334?+\005|\324\246\004\364?\357s\253\345I\010\334?\035\326g\260GY\367\277\357s\253\345I\010\334?cs\267<\026\003\363\277+\005|\324\246\004\364?Q!\016\222\311Y\355\277\035\326g\260GY\367\277\341D\227\301\352\\\357?\035\326g\260GY\367\277+\005|\324\246\004\364?\357s\253\345I\010\334?l\1776\332\207\260\346?+\005|\324\246\004\364?Q!\016\222\311Y\355\277\341D\227\301\352\\\357?\357s\253\345I\010\334?\345g,H\330Z\370?\222\207^\337\006\245\272\277\222\207^\337\006\245\272\277\035\326g\260GY\367\277\341D\227\301\352\\\357?\222\207^\337\006\245\272\277Q!\016\222\311Y\355\277\341D\227\301\352\\\357?\345g,H\330Z\370?\035\326g\260GY\367\277l\1776\332\207\260\346?\345g,H\330Z\370?\n\322\323-\010_\305?\341D\227\301\352\\\357?\222\207^\337\006\245\272\277l\1776\332\207\260\346?l\1776\332\207\260\346?Q!\016\222\311Y\355\277\222\207^\337\006\245\272\277\222\207^\337\006\245\272\277\n\322\323-\010_\305?\345g,H\330Z\370?\341D\227\301\352\\\357?\222\207^\337\006\245\272\277\345g,H\330Z\370?\345g,H\330Z\370?"
      }
    }
  }
}
node {
  name: "tensors/component_6"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 750
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 750
          }
        }
        tensor_content: "J\n\266u\216\314\346?\322\367a\333\301\202\246\277\0146\335\266\'\217\352?\234EW\302\357_\331\277\233\253\321\n6S\370?\317f\241ZL\355\320?\253z\rrIo\330\277\234EW\302\357_\331\277\317f\241ZL\355\320?\302\252\350\333#\236\345\27795U\226\2337\360?\025\216\024~\334\275\361\277@\312\236\371O\006\327\277\252\275)\303\216\341\341\277\237E\270\320u\275\341\277\203\032\327\243\260N\351\277\355\212\256\245\207.\346\277O\377T\251\251\025\326\277\230#\211\034[E\252\277@\312\236\371O\006\327\2773\026\204\211\365?\350\277\'\022\363u\326\367\n@\026OG4\376\217\366?\235i\"\014\253\027\366?w\342\374\'\272\263\355\277@\312\236\371O\006\327\277\036k\223f\201\236\351?9\351\330/\354u\226\277\314\306\225\034-\n\361?\364D\317\226+\216\350\277Xy\234\014;n\356\277\221q\337\006\327\005\377?5\325\340\316\236\335\344\277\214\020\241\022\226P\332\277\323\236\373\320&K\341\277u\251\330\204\233\372\343?\002\253M\362\305K\272\277aq~\003\211\"\335\277\000C7\024\337\030\326?\020\356\010@\275\332\321\277\366\300\017\213\217\271\333\277\214S\275c\333\302\343\277S>A\352\035#\344\277\241\'s\r \334\363?\241\271y\255\241?\313\277\005\366\305:\351\310\332\277o\2464\263\3421\334\277\000\357qi\263R\t@\214\020\241\022\226P\332\277\223\316R\"\221r\340\277\331V\243+\334\232\335\277\250\376\314}\345C\345\277j-\030\213\033\222\345\277\210\323-h\020S\322\277\366\300\017\213\217\271\333\277\234EW\302\357_\331\277\345\271\326\235\233X\272?\356\326\321#Y\'\315?Z|\337\317m\331\355?E\025\027Bs\203\307?\026l\200\263\037\230\345\2774\373b\222<\352\366?\364&\314\352\305*\360\277\372?\223B&P\356\277@\312\236\371O\006\327\277\236\205OG\230F\346\277\245\001\361I\202\317\341\277\260\\)\275y\353\362?\374\376\357\207\317\355\352\277\353\213\272\351\273\007\345\277e\244\0346\262\371\004@\212\270\312Yg\177\373?l+\000\003\263\337\347\277\244A\210\300\244X\346\277\365\247g*\305s\360?\241\'s\r \334\363?\016-u{\025\253\304\277D\007\022\244\325\003\337\277\370G\022Z^\371\347?\313!\355{\202\213\336\277d\261v\2101\t\352\2773\326\354\022\323\266\343\277C\324t\211#5\027@\344N\3460\260\254\324\277\014\364\016\301\006t\345\277\367\002 \230\240R\346\277aq~\003\211\"\335\277\312le\304\245\010\317?\244\307~K?\277\323?\036#\277\357\026\352\320\2779\314\227\212\"\331\301\277li\301\010]4\324\277\374\276X\021\255d\346\277k\354t\320\304/\342\277Y\260\352>\341\362\317\277S>A\352\035#\344\277\330\241\033t\377\027\316?\234\022\272\247=\221\021@\213T\311\247\017\234\342\277\343\204\005\n\0004\013@\001\374\313\2732b\356\277\370G\022Z^\371\347?R<\310S/\023\336\277\034\3725H,\217\010@\233\317;Fk\255\334?\276\255\014\250\300)\342\277\314\306\225\034-\n\361?\276\255\014\250\300)\342\2777\2231\320\023\242\342\277\263\231\234g\377\350\372?\314\306\225\034-\n\361?g\345\240\356:\002\317\277\353\213\272\351\273\007\345\277\013\264wJ\344\352\340\277\374\276X\021\255d\346\277V\374\221\353\222\347\341\277\225\260\r_;\221\362?\341\226\272\247\032a\355?\232\204\303\375G0\314\277\2663\203-?S\344\277#`2\232\234\347\330\277\371\342\004d\322<\360\277\221\217$\312,\347\354\277\337\024U;\327\274\343\277\362\r\201d\205\t\327?\302\252\350\333#\236\345\2779\314\227\212\"\331\301\277\'Z\313\025\005k\023@\222\023E\344N\031\342?8\322\274\002\002R\350\277\024\217 \302\020\227\360\277\350\213Y\3335\252\334\277\342\215Rl\010}\307\277\206\027\263\327\023\303\354\277HL\306\202\237e\321?\234EW\302\357_\331\277-\033\300\335\372}\342\277\214O\rN\356 \315\277r\247\241\005\235h\343\277\363\005Dd=\336\342\277\260\352\036O\370C\010@ze\317\346\267\216\336?\300\354\227\332\256\331\347\2775\322[\364{\364\337\277\213T\311\247\017\234\342\277o\2464\263\3421\334\277\305#\346\014U^\311\277\215\227\243\341d\220\346?_4\311A\023\247\357\277\177\235)]\222\354\356\277\331V\243+\334\232\335\277\350\213Y\3335\252\334\277\343\"\025[s\341\215\277\341\023I\367\242\343\344\277\370G\022Z^\371\347?6\366&>7\254\374?\327\335\245\372\252\332\351?\214S\275c\333\302\343\277\251=\232\307\303q\320\277\224\r\336T\177\"\346\277#`2\232\234\347\330\277h\021\353O.c\365?b\370\200\322Wb\351?v\032W\236\224\021\316\277o\2464\263\3421\334\277j,\014G\347\270\346\277\350\213Y\3335\252\334\277\326\2402P%\335\341?N\202\010q\021\021\344\277\021p\260\303\360\374\340\277g\256R\274\224}\355\277D\007\022\244\325\003\337\277\016x\355\3038(\325?\275\3546\314(|\337\277z\346K/!\370\353?\034gD_\032Z\353\277\"A\233s\006_\252?\333\373K\314\206\031\360?{ \037<\352e\342\2777\2231\320\023\242\342\277\226\013\306\314\026p\350\277\260\356/]\373N\312\277\000C7\024\337\030\326?\324X\234\274\256m\310\277|O\260]\364\007\256\277t\245\211}4\266\345\277{`\266\262\014\357\346\2772\225\350I\366\366\327\277\363\203\234\340\t\274\323\277\373\277dU\341=\345\277Q\277{\033\227\016\354\277\212U\325\353Cu\341\2775\322[\364{\364\337\277u\251\330\204\233\372\343?\325\243\024\005\322\352\330?\236\205OG\230F\346\277&\263J\365\233\025\014@\253z\rrIo\330\277)\314:\232(\300\242\277\235\222\310\233\345\257\324?aq~\003\211\"\335\277\023+|\352B\330\331\277\275\3546\314(|\337\277\374\303\263\\H\202\343?\024n\230;\210J\343\277\323a\004\370\300Q\356?\214O\rN\356 \315\277J\n\266u\216\314\346?\220P\231\227>7\347\277\263\265\311\242\354\027\353\277\3368\277v\014\027\370?z\236w\270\266C\323\277\205\372yX\362\272\375?\323a\004\370\300Q\356?OAe\266\272\256\340\277\234\207g\317\000\371\343\277\307k|\240\313\315\342?\303\273\360)\0223\016@7\2231\320\023\242\342\277\350\213Y\3335\252\334\277*]o\334\205\271\344\277\227\313.V\364\346\343\277O\377T\251\251\025\326\277\252Oj>\3509\274?aq~\003\211\"\335\277R<\310S/\023\336\277\350\213Y\3335\252\334\277Z\214_\010\010\221\002@\360H\377\246\374\362\343\277\271\257\303!\243~\327\277ze\317\346\267\216\336?\246 aH\242i\361\277\257}\261C\0028\340?SJ\315\361\314\222\306?b\177\203\241&\242\305?\014\363\002}\322\232\346\277\214O\rN\356 \315\277o\2464\263\3421\334\277SJ\315\361\314\222\306?q\250\255I\321A\342\277\321\022\334\257 \'\004@\351\302\010\034b\214\306\277D\007\022\244\325\003\337\277\341\226\272\247\032a\355?\"A\233s\006_\252?R<\310S/\023\336\277\253l\010\324\253\357\277\277+\\c\230Q\340\345\277\345@\341\222\022-\274\277`X\326\242\276\334\361?\304\251\334\227\357\304\346\277-\240I\026\333\255\350?\215\345\375\3364\033\276?\253l\010\324\253\357\277\277\260\356/]\373N\312\277n\215\214R\030\354\360?e\244\0346\262\371\004@\375~\301\232\212\333\341\277\344N\3460\260\254\324\277\016\2262\207\216\t\363?\235qb(xs\020@]4\013Y\003%\325\277\033\343eg  \022@\356\326\321#Y\'\315?\234EW\302\357_\331\277\346\317\201p\257\365\344\277\343\0211o:1\347\277\350\213Y\3335\252\334\277\006}\310\t\270\010\347?\210\323-h\020S\322\277\366\300\017\213\217\271\333\2776\323\310F6+\347\277W\314\364z\034\362\260?ep\323\315\332\246\346\277li\301\010]4\324\277\366\300\017\213\217\271\333\277\201[z^\007\261\354\277\032v\3642fU\312?\357\210\226\035\037|\350\277\335V\004:b\370\345\277\335\026m\303?o\341\277\346\317\201p\257\365\344\277\036#\277\357\026\352\320\277\204\231\234r7c\341\277\252\210\022\020\347\356\300?\253z\rrIo\330\277\235\222\310\233\345\257\324?\013\264wJ\344\352\340\277\275\3546\314(|\337\277\236\305\346\275\272\317\352\277\252\374\264\365|\221\347\277\0077\312\003\306\210\346\277}\333\352b<A\333\277J\n\266u\216\314\346?<\021JOn\036\361\277\253\274\035\177Z\010\343\277K\304\267o\234L\346\277 \010\\\341m\026\372?n\352\\H\\}\344\277\260\231\336~\357f\360\277\327[@\216g6\340\277f\361\017\031\322\256\361\277\253z\rrIo\330\277\220P\231\227>7\347\277\356\326\321#Y\'\315?\330\241\033t\377\027\316?\371\001\024Tly\347\277\016x\355\3038(\325?\260\356/]\373N\312\277\227n^`\260U\360?\264\272$\356\2075\350?OAe\266\272\256\340\277#`2\232\234\347\330\277N\206WxxU\342?D\007\022\244\325\003\337\277\350\213Y\3335\252\334\277\253z\rrIo\330\277Q\242B\234u\006\375?\214O\rN\356 \315\277aq~\003\211\"\335\277\355J\027/e\245\341\277\377`|\3274\372\363?\312\010E\033\270E\363?\030%\025f\253[\024@\327[@\216g6\340\277\342\215Rl\010}\307\277\266s\032\244a\334\350\277\227\010\344\027jb\321\277\360H\377\246\374\362\343\277!\244Z/\0263\341\277\344N\3460\260\254\324\277\327[@\216g6\340\277<Pv\215T\215\341\2773Y^\303J4\354?\007\"\321\240q\334\021@\357\373j\270\344~\014@\326\033\006\362\316\321\355\277#\242B\247\255\200\343\277\323\236\373\320&K\341\277\251=\232\307\303q\320\277\032)\305p`\203\344\277h\261\225\177\307\350\354?\335\026m\303?o\341\277\035\255\243s\2227\324?=OjI \264\342\277\272R\261\024oo\376?\331V\243+\334\232\335\277?0\031B\226\371\365?\241\271y\255\241?\313\277\331V\243+\334\232\335\277\331\231\277|!\r\347\277\014\231]\267 H\216?\001\271R\220c\313\322\277\371\204\205\004\344\366\357?\366\300\017\213\217\271\333\277\377\367\276\313\273\233\305\277\366\300\017\213\217\271\333\277\314\306\225\034-\n\361?o\2464\263\3421\334\277\326\0310\201V\235\325\277\373\377\373\313\003\307\351\277\257}\261C\0028\340?Oe\317\361\357\010\365?\214\020\241\022\226P\332\277\252\001\020A\030\257\344?\030\r\2305sT\364?\253z\rrIo\330\2776\324\324\212j\004\346\277\356\216\375\254\356r\344?O\377T\251\251\025\326\277F\310\347\177m\261\341\277\245\200\023\363\222\010\354\277G\007s\262[a\347\277j-\030\213\033\222\345\277\275\356\257b\027\214\345\277\233[\374ri\220\004@li\301\010]4\324\277\037%\225`\217\036\351\277\023o\244\177\274#\342\277\'Z\313\025\005k\023@W\373\205\247^\016\343\277%\240*\037E\316\345\277\247>d\364\007\315\351\277o\2464\263\3421\334\277\374\376\357\207\317\355\352\277O\377T\251\251\025\326\277\234EW\302\357_\331\277@Q\241\310\036F\343?\033\343eg  \022@q{\221\177\201\374\277?\000}\251\022\")\344\277\223\316R\"\221r\340\277\024\221\3662\211\313\370?M\203\024\265E\352\342\277\002\253M\362\305K\272\277\311\244\240C\352\206\354\277\016\2262\207\216\t\363?v\032W\236\224\021\316\2773i\336\373\344\353\000@-\240I\026\333\255\350?\313!\355{\202\213\336\277\260\356/]\373N\312\277OAe\266\272\256\340\277z\004\362\000\3756\362?\366\300\017\213\217\271\333\277\257\333Kf\212$\375?\233S\\`\215\337\301?o\2464\263\3421\334\277\222\275k\317F\345\260\277\255\236\330\273\004\'\365?\350\213Y\3335\252\334\277\005\366\305:\351\310\332\277}\333\352b<A\333\277\325\234\343H\276\230\343\277@\312\236\371O\006\327\277\037\025\272Qyj\270\277% Y\014\212\340\356\277\260\\)\275y\353\362?\331V\243+\334\232\335\277-\240I\026\333\255\350?@\312\236\371O\006\327\277te\362\006\022-\341\277\317f\241ZL\355\320?Oe\317\361\357\010\365?6\224=\024H{\341\277\303jQe\001\025\341\277\313!\355{\202\213\336\277\332{K`u.\236?)\314:\232(\300\242\277%\240*\037E\316\345\277\226\351L\361\323\331\242?O\377T\251\251\025\326\277\344N\3460\260\254\324\277\001\216\257\\\002\226\266?|\037\023\370\265\214\343\277p\2649Q\200\261\304?6\340`\222\031t\310?\346\323\201ew{~?OAe\266\272\256\340\277\327[@\216g6\340\277i.$\317Ok\344\277}\333\352b<A\333\277\313!\355{\202\213\336\277\214\020\241\022\226P\332\277\366\300\017\213\217\271\333\277\005\366\305:\351\310\332\277\272\323\216k^6\364?\344#C\375Nw\270?)\235\006S\250B\351\277E\025\027Bs\203\307?\215R\261\037\247\351\344\277\252Oj>\3509\274?5\322[\364{\364\337\277\351l\302\264\237!\256?\252\210\022\020\347\356\300??T\203}\313S\332?\371\204\205\004\344\366\357?\027\353\242\\0\321\357\277\276m\322\013(\305\357\277\204\3313\351Y\354\345\2771\037\315\315qD\333?\350X\274\300\203\333\024@\275\3546\314(|\337\2779\321\260\276\315x\351\277\350\213Y\3335\252\334\277\362F\347\036\224@\346\277{ \037<\352e\342\277\313c\375\210\223$\351\277`X\326\242\276\334\361?7\2231\320\023\242\342\277\215\345\375\3364\033\276?\0068\326G\372a\345\277\n\365\032\005;M\344\277\214O\rN\356 \315\277\350\213Y\3335\252\334\277o\2464\263\3421\334\277\351\302\010\034b\214\306\277\326\333n{\254H\351\277@\312\236\371O\006\327\277\314\306\225\034-\n\361?\377\367\276\313\273\233\305\277|O\260]\364\007\256\277\345\264`y\366\237\363?\346\361\323#|\235\373?B\013\243\302,\306\342\277\"\306\254\342\342\332\367?\214\020\241\022\226P\332\277OAe\266\272\256\340\2775\322[\364{\364\337\277\016x\355\3038(\325?\204\275\006\256l\275\365?\036\370\033\274\265\264\264?\214\020\241\022\226P\332\277g\345\240\356:\002\317\277\025\262~\271\021\030\346?\326\177\252\311\234\220\364?\232\204\303\375G0\314\277\246\377\330\301\031\035\344\277.\032\264\231\306\244\343\277O\377T\251\251\025\326\277\014\231]\267 H\216?\225\337Zp\177\007\t@k\360\303\327+t\340?\313!\355{\202\213\336\277\307\344y\321\374\215\326\277\322\367a\333\301\202\246\277\344N\3460\260\254\324\277<\177&\261,\211\266\277\326\2402P%\335\341?aq~\003\211\"\335\277\327[@\216g6\340\277\232\204\303\375G0\314\277\304\214\243\030\316\274\367?G\001N:|\350\300\277\375~\301\232\212\333\341\277\345\320\215\264\343\316\343\277\252Oj>\3509\274?\032v\3642fU\312?\317f\241ZL\355\320?\316E\270\305=C\373?\312le\304\245\010\317?\000}\251\022\")\344\277\350\213Y\3335\252\334\277!\244Z/\0263\341\277\275\3546\314(|\337\277z\025t2m\234\246?\215\345\375\3364\033\276?\215\227\243\341d\220\346?\205\033\002\337z\007\353?\246\377\330\301\031\035\344\2775\322[\364{\364\337\277\331Y(\006\377\203\342\277#`2\232\234\347\330\277\213\224`\0362%\347\277OAe\266\272\256\340\277`\264\232T\316\224\346\277SJ\315\361\314\222\306?li\301\010]4\324\277\363\203\234\340\t\274\323\277\204\231\234r7c\341\277\275\3546\314(|\337\277\313!\355{\202\213\336\277\350\213Y\3335\252\334\277R<\310S/\023\336\277\342\215Rl\010}\307\277\3368\277v\014\027\370?\272\323\216k^6\364?\327[@\216g6\340\277\327[@\216g6\340\277\203\336\2164\365\t\343?\2220~cp!\361\277\244\307~K?\277\323?\325\243\024\005\322\352\330?\366\300\017\213\217\271\333\277\302*\027\311h\260\356\277\361G\363b\310\031\345\277\016-u{\025\253\304\277o\2464\263\3421\334\277\316a\345\000+r\353\2772\225\350I\366\366\327\277\2220~cp!\361\277\323\335\206\003\025\373\346\277\023+|\352B\330\331\277\316!N\212\010\351\346\277\277\355\243\036\343\262\346\277o\251\271\215\005\033\341\277\212\324\367\224T\256\353\277<\217\001\300B=\347\277uS\377o\223\306\262\277\"\352\026\036\0305\334?z\240M)/x\353\277\007k\023l\235\333\004@\223\316R\"\221r\340\277\330\241\033t\377\027\316?\317f\241ZL\355\320?\363J\364\016\013\007\337?\272\323\216k^6\364?\350\213Y\3335\252\334\277\252\210\022\020\347\356\300?j\355\200\024\371\010\341\277\275\3546\314(|\337\277\037\025\272Qyj\270\277<\317\2306e\306\353\277\256yb<\233\363\341\277\260\356/]\373N\312\277K\304\267o\234L\346\277\327[@\216g6\340\277k\360\303\327+t\340?\275\3546\314(|\337\277T=5\246\351I\345\277\234EW\302\357_\331\277\223\316R\"\221r\340\277\350\213Y\3335\252\334\277\210\323-h\020S\322\277\034\313\3506\350\030\362?&\204\375\343W\237\365?\307\344y\321\374\215\326\277_\265\246\230\002n\345\277z\025t2m\234\246?\205\033\002\337z\007\353?\260\\)\275y\353\362?\234EW\302\357_\331\277\217\021\016eP\207\341\277\363\203\234\340\t\274\323\277\272\203\271\323\221s\000@6\340`\222\031t\310?\377\274@\211D\262\350\277\313!\355{\202\213\336\277\322\367a\333\301\202\246\277\366\300\017\213\217\271\333\277U`\223\235\352\312\372?\253z\rrIo\330\2779\314\227\212\"\331\301\277KG) \024\312\356?\264u2,\312\216\346\277:\027\020\323EV\322?\2174l\\Q\010\367?}\333\352b<A\333\277\377\274@\211D\262\350\277\316\365\342-q\200\007@\0068\326G\372a\345\277\250~\373j*V\356\277\204\275\006\256l\275\365?\331Y(\006\377\203\342\277R<\310S/\023\336\277t\245\211}4\266\345\277\234\207g\317\000\371\343\277W\314\364z\034\362\260?\326\0310\201V\235\325\277\005\366\305:\351\310\332\277\016x\355\3038(\325?\350\213Y\3335\252\334\277\232\204\303\375G0\314\2771X3\210\200{\352\277M\2119-%c\331?\313c\375\210\223$\351\277OAe\266\272\256\340\277\307\344y\321\374\215\326\277`\3641\313\360\035\353\277\356\216\375\254\356r\344?k\360\303\327+t\340?o\251\271\215\005\033\341\277\036k\223f\201\236\351?\307\344y\321\374\215\326\2779\321\260\276\315x\351\277\240\367\027\236)p\013@\016-u{\025\253\304\277\2663\203-?S\344\2775\322[\364{\364\337\277\236\205OG\230F\346\277\245\200\023\363\222\010\354\277p\2649Q\200\261\304?aq~\003\211\"\335\277\254\273\021;&/\344\277\3368\277v\014\027\370?\222\017\366\334\347\324\343\277u\227#\347\200\315\001@q\250\255I\321A\342\277\023+|\352B\330\331\277Y\372yc*5\344\277\234EW\302\357_\331\277\300\353\213\226z\000\351\277\247\"7\271\032\236\371?vd\346\302\335S\342\277\037\025\272Qyj\270\277GG\n)~\352\353\277\013\032\221\204\244\200\367?\2709\250\245\036\314\332?\373\277dU\341=\345\277\223\316R\"\221r\340\277\276\221\337l\323\372\361?2\225\350I\366\366\327\277\330\241\033t\377\027\316?j\363\245\214\330\201\327?\001\271R\220c\313\322\277\226\013\306\314\026p\350\277\314\306\225\034-\n\361?N\206WxxU\342?\331V\243+\334\232\335\277\271\257\303!\243~\327\277X?l%\350\333\345?\027^\032\035l\257\001@y(\\<2\221\326?}\036\007\264\201\263\344\277R<\310S/\023\336\2779\314\227\212\"\331\301\277\3368\277v\014\027\370?Y\351\222\020\340\247\264\277\351\302\010\034b\214\306\277\326\0310\201V\235\325\277\226\351L\361\323\331\242?o\2464\263\3421\334\2772\225\350I\366\366\327\277\r3\232\363\364#\353\277\020T\203\210\003\316\360?}\333\352b<A\333\277#`2\232\234\347\330\277\350\213Y\3335\252\334\277\306J\364\031C\201\365?^\266\262\3346G\344\277\r\362\3668\236\301\347\277\371\301|\335I\360\342\277\0068\326G\372a\345\277i\255Fx`\244\356\2775\322[\364{\364\337\277\024m\214\367Sq\344\277\266s\032\244a\334\350\277\373\377\373\313\003\307\351\277*]o\334\205\271\344\277\312le\304\245\010\317?_6\343\343\371u\360\277\005\\@\203/\274\371?R<\310S/\023\336\277\264u2,\312\216\346\277\205\033\002\337z\007\353?/\031\250U\222\313\344\277\251=\232\307\303q\320\277@Q\241\310\036F\343?\253l\010\324\253\357\277\277D\007\022\244\325\003\337\277\005\\@\203/\274\371?2\027\220\315)\031\347\277\205\230\220.\003\212\342\277\331V\243+\334\232\335\277\002{\221\212\271v\346\277c\225IMD\332\371?k\354t\320\304/\342\277hn\273Er\364\350\277\177\2367\273D\342\360\277\343\"\025[s\341\215\277z\346K/!\370\353?HL\306\202\237e\321?\202\333Kq\302\236\343\277K\247~\360zD\367?aq~\003\211\"\335\277B\013\243\302,\306\342\277I\005[*\363\256\351\277\\\267\276 k \343\277\310\326t3_\016\276\277\034\347\025r\325G\342\277\331V\243+\334\232\335\277\001\271R\220c\313\322\277#\3474ik\'\345?g\256R\274\224}\355\2776T\003x\257\026\357\277\366\300\017\213\217\271\333\277q{\221\177\201\374\277?\371\301|\335I\360\342\277\002{\221\212\271v\346\277\275\3546\314(|\337\277"
      }
    }
  }
}
node {
  name: "tensors/component_7"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 750
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 750
          }
        }
        tensor_content: "\256\331\326\322\351@\265?\254\372\265\001\323\366\366?\207]!\250\304O\372\277\307w\375o\217\344\274?d}Q\346<?\006\300\255/\375\nu\226\355\277\316\313d]\3420\343?\335\325\314\364\027\323\320?\345\006\303\300S\316\347\277\035\212\211\335\221\024\322?g\322F\266\267\237\323?`\352\247\257\354n\355?\273\371g\005\024\306\344?\341a\365\342\343\263\351\277\315!\343\263WE\366?\014$\276b\266\232\321\277\210)\331\222\231g\266?d\252\017OL\354\332?\276\207\313i\334\375\347?\014|\211\251a\227\311?\220\260\240w\007\326\351?\r\257U\257\243\371\306?\214\00195\303\336\317?\366\304\275\034\030\272\354?\260\324\312\350\344\260\353\277\254\036\313\340\272\325\353\277\211u&bz\346\227?>\0216\344\0207\361?\316\313d]\3420\343?\201\301\'\3018\350\361\277\330\370]P-a\353?\355^\366[\261%\346?@7C\373\023\037\221\2771\0278\254\3528\362?\304#F\277\020\026\234?\202PvB\204S\340?\037n\004\377\036~\367\277\336\241[v\345\373\335?\343\020b\201U\013\265?(\326\032\rv\355\277?\3059\322R\212\363\262?\344\226f\327g\275\022\300\373\201\2032+Gw\277y\237(\251\272V\362\277b\306\306\372]\275\363?\0042R\210\277\327\311\277\3666\365{Y\222\345?]\374\005?\217\301\276\277\363\005u\304\224\235\365\277\340\270`\263\226\356\324?)?9\214B\314\362?\010\030\014\332\275}\363?\260\t\322d#j\323?\'2.\3553C\000\300\033\010=>\270\351\360\277SQ\257\254M\210\345?\333-e\314k\032\303?\305A-\207\355\223\332\277\030D\265s\217\212\354\277\330\t\220z\347!\355?\212\237\323\211C\005\354?[\004G7\332\377\343\277>\'\265@5\346\340\277\360\207\361\323R\020\310\277^\322\020/\244\177\333?n\002\255\202\315\223\256?\260\t\322d#j\323?5\023\030\201!W\353?\344\032\370+\265\002\347?\226c8\002\224M\350\277\331\264\225\247D^\344?e\246z\312\r|\342?\035o\357\033\242\261\342?\004P\271\003C\216\356\277\362Y\335S\240d\363?8q\032u\001\373\344\277\013\254N\264\207\240\337\277\370\330\277\030\"9\346\277\010\320\210B\002\211\351?!<z\222\002\\\003\300\010\324\006\312\027i\021\300ws\303V\301\025\362?cqsN\317\302\332\277\312\351\3126\255l\300\277\005\005\365\37262\305?\374\366\216\350WJ\321\2770\210\351*\237\315\343\277\256\243\261\312\320\236\374\277\366\254\363,x\025\325\277=\331\034\254d\346\325?\340,\256\331A\024\363?\271\211\324\022:\032\264??B\0355\206\016\302?Qh\031&\365j\340?5\023\030\201!W\353?) M\322\352L\316?\260V\325\235\240\002\301?\373D\277(v\357\345\277\272Ch\375\351\352\344?\003\320\355~\370x\355?\276\374$\242\231C\007\300\010\320\210B\002\211\351?<\350Ig\375\013\020\300\360\021\363\"4\215\350\277-\031\265\014\005i\350?SXGr3l\313?\321\236\024\356e\274\367?q\\#V\006\023\377?\213\334\003mF$\335\277H\213f:2-\362?\200\262\245f\360\014\314?\021\320\276\311\025\251\341?\226c8\002\224M\350\277\264\242aqW{\335\277?B\0355\206\016\302?\002\343\220\246\302\260\301?\035@\356!\262\337\325?$\246\347\257\267\256\332\277N\224F\224 \231\333\277\005\205%\274w7\332?Q\027\264\327\220\027\320?\240\210\325\036\303b\341?\200\336>\343B{\347?\211\251\243u+\002\320\277B\244\346zC]\342\277N\224F\224 \231\333\277\356\007\213\213\376\352\332\277\341\362\300\304IO\356?\"\201\262\347:\364\267\277`5\307\356\236\364\363?\236\313p\300\nY\321?*\254\303\177K)\005\300N\220;\373\333\352\006\300KWL81\232\342?\226p\243\332pc\323?^\322\020/\244\177\333?\t\306\356\335-\254\315?\014|\211\251a\227\311?\017n\214\215\355\204\323?\200F\334\335\257v\304?\260ki\335A~\345?\266\2275\311\353\241\326?\216\242\243[\223\303\343\277\023(\356\252\376\032\346\277#4K\024\200\346\335\277\316\352*\255\245.\355\277FJ\024\317\2539\335?\331\215\357\341\267,\277\277\227\022\241\346\220\277\311?\244\306ex\276C\357?\321\340+\014\333a\335?<?\1770\325\212\330?[\335\225\260\373\217\362?\311H`\020\335\207\354?\341\244\371z\226\177\307?1t\202\362\236^\346?7%i\362\267x\363?S\360\251w\306p\356?H\261\370y4<\375\277\261\356\322f=\027\340?y\341\330-\177\031\347\277\211u&bz\346\227?W+\030\370\324\033\313?\006\350M\326t\315\277\277n8@D\275n\330\277\035\034\254\023\234\232w?\210 %\357\032^\364?\3747\357\023\243\351\306\277\321\314(n\030h\314\277%U\202aS[\352\277\233\2439Y\237\245\330?\367\213\357N\374U\356?%0\204\302\242;\347?\"\225\265\205\375\355\330\277s0F\222\333\330\312?(/\222E=\262\003\300fS?B\243\301\353\277\2632\233\017&\032\347?\365NZ/\003G\311?S\312G\250\250\251\304\277\363\007\364\201i\300\330?0A\354sp\034\341?:\253\025J\276k\332\277\226c8\002\224M\350\277\353\274]\214\207\271\343\277\317\220~k\242\214\362?hb\323\026\264e\001\300\374\204\362L \202\324\277\232\206\"7\225\022\363?\346\274\302\310}\251\347\277>\014\351\261\246H\323?\274=0\256\374\310\353?4\271\344R\010)\274?;\311\262LUB\347?\006\026\213\277.h\303\277n\002\255\202\315\223\256?\251\2028\223\337P\344?\216,\245\252t@\324?E9\342\244\361x\333?\313w\312\0008/\307?Il{;\334%\323\277\000\243\364\213\255H\345?k\205\025j\020\262\261?\275\245\006\326\352T\017\300\352\221\361\026\326W\357?\340\270`\263\226\356\324?\323\3670I\214T\324?\271\256\341,\261]\375\277\276(72e]\303?Bd\201\211\372\217\305?z\252E\326_\014\323?\327O\304\304\262;\265\277M\241\244g\034\014\261\277\350\365+Z\243\035\342\277I,\022\220\036s\354\277;\330\314R\353\302\366?\3061\201=\300\026\360\277\230\267m\"H_\300\277\213\334\003mF$\335\277\024m<4ta\364?\360QY\2665\325\334?\240\312\205\243\207%\366?Z\234\256\230\232d\270?\032\324\356\021^)\326?\230\023\000\273\320\006\357\277\241\007\023\345\021\350p?8\232\343\037\004\253\330\277\304P\251\303\257e=?\241\343\007ASH\343?\310\025\312\221\256E\347?%$\237\312Ri\363\277\231\256e\001\013\177\337\277\250di\303\251?\331?\264\202\323V\351`\340?iZ\r\217\234\305\331?T}\340\324\355\233\332?\272\253\000\234)\206\260\277\235\314\002\004\242U\354?\264\202\323V\351`\340?\231\373\373\2064\001\234\277\300N\375\233\300\231\351?\330{\307\331(\372\345?\243cn\211\247m\340\277\201\300o\023\rj\334?\020\345\267E\255\024\332\277\351IZ\250&\337\315\277Vf\250(\345\363\335\277\301\n5\363\327\226\342?<\205\352\243l?\340?\317\262\342\277\026\016\366?~(?\333\030\240\347?9\250\242\252-\304c\277\243\3477\211\233\310\327?M\254F\013\324]\353?`\216\337\217P\247\326\277\3048\262i\365\027\365?\331\264\225\247D^\344?a\210\253\372\327j\327? \240\010:\266\303\361?\277<5t\372\366\322\2774gM\241\325h\323\277H\372\255\rq,\203\277M\200HR\213\377\313?\033\375\267\274`\331\351?\337V\373\007\027\025\341\277\231\253\"3\000%\363?\014\345\352\264\004\312\337?,T\210\311\t\004\311?\347\225\356\357\306\"\336\277\224\223$\031\007S\360\277\327\336\342\325\031_\362\277\251B\322\377\335\010\320\277\275X\374<\213f\331\277\020\035\253L{\030\022\300+\340K{\337\364\355?SXGr3l\313?\207\016m\344\323Y\353\277dA\256C\251\271\304?\257\276^\301\212B\001\300war\345*\364\351?\307f]\363<\356\273\2779\326\347\235\0368\312?{\257\324\362\347\323\334\277\263\312\313G\032\344\333?\362H\253)\346\243\361?\232\346\241\213\217\346\342\277\313w\312\0008/\307?E0\231T\2307\364?\251B\322\377\335\010\320\277-\301\267\370\2721\342\277OJJV\277Y\325?\377R\274D\352\001\354?\231y\036\370h\337\370\277\225\343l}I8\347?x\230\303R,(\362?:L\201\022G\313\345?\013\254N\264\207\240\337\277\365\030&\254#\201\332?=]N\000\013\234\343?\312\360\236\266\203\240|?\017n\214\215\355\204\323?\244\235\234\315\273\223\333?Q3\022\252\266\261\330\277\221\376\235H\316\305\330\277\332\017c\215\336S\342?4\235~\014\371\303\317?\031\rX\243\203\235\320?s\256\247\353F\307\345\277\370@]\023\2174\323?\257\261\273O\035\331\205?\201\"\007\214+~\356?s)5\271\355\021\277\277[\232_K\252\211\366\277\367\326\016\216\256\333\364?\341\026\372\260\013\275\300\277)p\276F/$\016\300D@\2547v\227\357?\262[\0038\247\277\300?\202J>\363\2261\347?_\260yk\330H\322\277\272!\004\251ui\341?{\257\324\362\347\323\334\277\014\013\243^\233Z\365\277\360%(\216\225\301\347?O>\247H\215`\335\277N\220;\373\333\352\006\300\265\2037\207V\010\267?\000D;\245\243\236\373\277\227\210\237\227\257B\351?K\034fF\361\365\361?\376EU&\202\321\332?\251!3^X9\355?\201\215\246%\207r\321\277Y\204\340\356\205\332\346?p\342(\207\370<\366?\300\330b\205\337\213\306\2773\205\264\034Y\037\350?\334k\220\351p\013\315?\222hQ\n\245\016\373\277-\'\344\365\027\266\354\277\224\223$\031\007S\360\277\034)\354\374\274W\321\277\355^\366[\261%\346?\027\254\267\252\362u\335?}\027\r\261^\337\345?\263Mg\236\264\267\324\277~\241\327\326s\301\306\277\201I{d;u\021\300\004\340\2772\272w\322\277\374\347\333{r\254\362?\242\226\237\313\337\277\341\277\320\245c\020Ft\263\277b\374\370 \203\220\365?V\037x\002_\215\305\277\327\336\342\325\031_\362\277\313\353\'\304\370a\215?\216\034\005\304Q|\355?\316\313d]\3420\343?\330tb\203\232\313\325?Yp\253\203$\246\347\277S\360\251w\306p\356?~\241\327\326s\301\306\277\035o\357\033\242\261\342?\340._d\265q\344\277\005\000\016\300\304\253\360\277a\353\306\366\310\317\363?\240&o8\330\177\202?\024-\242v\031\354\364\277\032H\327\373\022_\360?\017\213p@\240b\363\277}w\214\005Y\263\365\277\367\345\217-\365>\325?\342\035-:\373\260\342\277\260\t\322d#j\323?\211\037\237\016\216\032\355\277?\327\3415h\217\353\277\001\036\251e\241\217\360?\\\316{\252e\017\343?\005\374\271j\242\234\336?]~\250\237\230\270\355?M\254F\013\324]\353?\253\013\225i\320X\317?\234f\326\006E\321\341?\375\022\211 @o\335?\264\2003\244\366\031\322\277\004\223\274\371<\337\304\277\031\243\265\271-k\301\277>\0216\344\0207\361?M\200HR\213\377\313?\261d\237J\275_\321?\241\343\007ASH\343?{,<\264\tk\326\277+\321X\201\226p\260?\321\315\025\350U\216\364\277\362\371)\325Lc\310?\005\270\361\301\271\231\327?\302`N\rW\273\361?\313\343\223\211x\305\316?m\264Dw*\331\342\277\351h(l\323\247\333?9\244\260\363/=\352\277R\275\023\371\227.\351?\022\366\351og\325\333\277\237\3429\337\342\344\216\277\365y\'\'6\263\327\277\222\363q\240b\354\321?\317\350\024\346;\341\367?\026\334\204)\002J\307?:\220I\273/\316\354?\322\326^8\257\317\353?\353\r\221\rM\322\325?\036\264\326\013g\025\360?\0223\350\205\313\271\356\277\324\226\306\327\016M\331?\366Y \371\277\265\264\2774\224i\346\370\257\363?\234B\317\347!\236\335?H\340\310\2545\323\200?~\241\327\326s\301\306\277\351h(l\323\247\333?\323;\371\361tW\333?\200\274\332\216\316\371\343?\312\250s\310\376\025\000\3002\343\266\0209\303\341\277aw\020\332\262\324\327\277*\004\206\tZ\335\307?;s2\231%;\367\277\231\222\007/\345\344\326?\367\213\357N\374U\356?\230\302\3149\013\356\314\2773\356\025(\374Q\356\277=\320\3443\214\273\301\277\261d\237J\275_\321?Ic;O\0320\253\277I9\2575\232\303\325\277\272\364\2639\371\364\365?\246\177\232\216.\315\352\277#\242 ^\332\003\344?I\227H3\017\222\261\277\331\3469\251\r\027\006\300W\276;\331\267vj\277\353Q\360\277\312\377\336\277\231\326\317\327\315\347\335?\242\214j\243\001\323\331?;GFs_k\260\277\331\351\334\260\346\375\372\277hq\334D:\230\330?\253\035\023\370F#Z\277\n\327\204\242%\342\313\277_\376\016\350\354\335\352\277\331\251U(\307\221\313\277<\222Rd\215\352\270?\246\035\2513-\004\237?\214/v\036}y\263?4\314L\227\221\340\346\277\263\215\3151\266\377\350?\344\277\305\t%\035\345?T\033\026\355w\322\342\277SQ\257\254M\210\345?\234\005\321\321\275\271\352?\027y\356\274l~\322\277\035e\360z\327\344\302?m{v\251\016u\344\277\314\017\222B\301#\356?\231\3312\371=\353\275\277\377\201Y\244\234^\274?\354\036\3037\007\223\327?\371\304X\340!\312\350?\210\236AF\254\010\321?\213\334\003mF$\335\2777Y\351\322gv\276?h\2517g\223\371\004\300\362b\213\340\357\225\336?\272\253\000\234)\206\260\277\313\203s\314\223\003\000\300\"\226;f\2121\360\277\305,4\013V(\342?M\327\002\250\212W\235?j>F\306\013V\323?Q\226\373\330\010\334\366?\'R\350\026\027\275\352?x/\322D\321#\274\277\330\326\371\373\270\337\347?\202\262D\344n\002\262?*\255\265\374\260\262\350?@$\2002\3577\345?\274\351+\271.w\272\277\334[\024\020(\326\363\277\314\206\026\324l\352\364\277\337\026e\353\347\207\255?\003\356\357\275\205?\316?\340aZ\037\332\243\355\277\004\201\345V\222\251\315\277\222K8\213\340\210\310\277\2359\206\227\310\\\366?\331/\257\275.\225\363?;\271\337\366\332\310\312\277\333\024\260\277HB\360\277\3037\223\"\031\267\356?\304\3542\264J\320\321\2774\217N\201-\374\323\277\334k\220\351p\013\315?\224\332\210i\346\346\363\277\3351\307\341R\325\345?\316\265~g\r\237\362?v\275\231C\327\320\253\277{\\Y\335\0313\367?E\350\256#,`\351\277\201\207\323\022\220@\334\277O\253\264\307<a\320?p\255\210\244jf\377\277*\267\202\320\334D\332?\330{\307\331(\372\345?\177O\360a\367\017\371\277a\210\253\372\327j\327?\351IZ\250&\337\315\277\355\351\273\273\310\331\357\277=\211\261\365I\352\326\277\2025t,\342\225\312?>\'\265@5\346\340\277\274\344\247\266\375\352\002\300\255\247\321\365\231\200\343\277<?\1770\325\212\330?h{\333\345\004e\350\277D\036H\343\001\026\354?\326]]F\351\330\336?f\220o%\246\340\314\277\372\325\212\n\334\212\352?w8v\313\320\216\320\277\227\222\324\277\215/\321\277\303Xe3\366;\327?\246\365\230?MP\312\277\236q\320\341\021p\352?\243\003\3574\255\231\360?\357o(\206k\346\347?\310\007\315u:3\341\277\233\371\353\331m\347\366\277T%\032\352o\377\263?|\203\014\301\262\225\345?\263\312\313G\032\344\333?\2119\247\214\346\200\341?\230\342\326\177=V\322\277\301F\300]yx\003\300\207\275p\214\332\333\310?\025\244)\0078 \260?\210\372\005\254\323\352\355?hq\334D:\230\330?\341\014\373\017A\360\340\277=;\352\253\226\032\340?\316\252\304\031\244\346\310\277\253\214\240*\025\363\321?I\214\202iR#\306?\326\355cu`\302\342?$\343\345\305\033\223\355\277\336\n\305\365q\371\267??\324\254\'\"\341\357?M\332;\363\261\017\007\300\313\242\227\370j\233\325\277\035B\237\254%=\367?\n\217j\001\325\302\377?\253\214\240*\025\363\321?I/\025\321\305\346\351?\361Z\224F\312j\303?\347>\r\013\235\341\373\277\345\253\220\236\303\350\345\277\200\274\332\216\316\371\343?s\020?de\333\327\277\246I\317\001\272\334\351?j\205v\354\221\274\313?\341\370\223\327@\201\343?\331\026`\217\272\'\314?\270\366\311\000cB\353\277d`t\223l\267\336?eV\247\277@%\355?\211\251\240]o\227\335?\016\265\033\362\203\000\247\277\310\001\225&M\021\350\277\373\177\245\032\266\223\366\277\216\034\005\304Q|\355?\217\203-\317\373G\244\277m\247\332@\006>\317?\251+\0002\204\313\336?.\3332s\3163\373?\217\324z%\271.\241?R\303@\207\025\243\273?D\0165\000$\266\360?\341\014\373\017A\360\340\277\202\262D\344n\002\262?m\247\332@\006>\317?\330\370]P-a\353?\335\344\303\250\325<\350\277\366\"\300\020\370]\346\277\322\346\376\036\322\223\322?\272!\004\251ui\341?\350!^$\374\253\276?\230\272\325\237\345\302\321\277\204\014\274Y`\374\371?\310\027t\274?M\000\300/\310\352\201\252%\324?\320\213198\236\324?H\340\310\2545\323\200?\305N\230_\312\251\345?r+>bK.\353\277}\200n\274\001\022\354\277\342\300U\tK$\241\277L\177\331\262\336vn?) M\322\352L\316?\232-mu\037]\347?\362\024\366c\333\000\346?\206\223S\316\351\"\374\277\275U\224\277\355\002\310\277\265r\227\n\004\022\266\277\324\211[\37717\356\277\306\217]\307\0139\357\277<}\2320[\335\364?\212\216\241_\211D\352?\356\004#\016a\207\311\277\364\004(j\216\347\272?) M\322\352L\316?\032\005\241\226\301X\364\277\250\252\3246A\364\340?\370p\276\203w\310\314?\003\356\357\275\205?\316?k\320p|\2618\355\277\005\321\347\026B\320\316\277\354~B\214\001g\367?=\\\310\037~X\374\277\032\312!>2\227\344?\305\021\314\026\005\000\301\277\273\371g\005\024\306\344?\266\263\223\233\021<\337\277\2002\331?\355|\323\2775\200\233\024H^\365?\235S\001\022\334^\337?BX5\370\371\332\360?\201N\323w\325\241\337?\237 k\223\255\034\332?}\215\331\224\336\'\327?lk\326\302\353\260\335\277\223\257\265Z\204\242\376\277!\204\203[C-\327\277\377U\361R0\260\347\277\375\007*\t}\340\320?]]c\222\000\230\360?x\353\016\370\025\201\306?\201ku@j\246\323?\273\206\003\2371\341\324?\005\205%\274w7\332?Ss\023\001\302\t\351?fwy\320\035\252\325?\260U\203\347l\354\364?\310\025\312\221\256E\347?\224\3106V\227J\264\277O/\260\224\317\366\345?\210\372\005\254\323\352\355?;\355\354\332\317*\301?\307?\027\300\203F\365\277\026\022\n\022\344{\362?\263+6\271\227\353\326?=]N\000\013\234\343?*k\236\336;\r\363\277:1\272\337\345\215\251?\321h\342\307@\351\365?I9\2575\232\303\325\277\316\006\344\265q\362\362\277\331\026`\217\272\'\314?\255!\316!bI\351?\264\266d\017\032u\316?5.\344\017\260\364\330\277\224\337W\\w\311%\300:\t\264\243`\232\307?\006\244\212\211\271*\312?\271\343\201\017?4\364?\362/\302\362i\236\323\277z\032B\277\244\215\341\277\216e\245E/\337\320\277\206=\241M\033\341\335?B\323\265\247\224\364\320?\363\016\276\024\356\336\354?/\364Mw\351s\347\277Q\221\265_\206@\247?\373\022V\261\350\271\327\277\334 \225\267\230\024\344?\370WgSh\212\005\300\322\227\343\3010\273\362\277\3666\365{Y\222\345?w\207\221(rg\360?\245\316\335\231\325\034\244?\265\234\202\373U\220\364?rv\304:\256\226\362?3\356\025(\374Q\356\277\331\272\356\353\300l\003\300\315\0010\352V!\344\277\'\242\273!\344\023\340??\256\346\275\306\244\311?\3507\352\267u\211\245\2777\365z~\212\200\336\277\344M\216\252\343D\354?\230h\207\221\270.\363\277\267|6\313\005O\343?p\257\222\010\312\372\360?\245\317m\231\373#\340\277\360\030\275\265\270\253\334\277\250\372\306\331S\r\312\277\007gY\004\376\220\341\277|2\014\257D2\331?\354\343\216-Ke\275\277S\360\251w\306p\356?\360QY\2665\325\334?\354\265a,d`\301?\n5#\374\307\020\331?\344)\357\337rl\336\2779\341\255g\333\246\265\2778)\227\335E\006\373\277\234^\206\2233o\366?\237d\'\337d\257\205\277Z-u\036\323\237\333\277\007N\346\341\370\221\272\277\307\325\226m\004\263\330?\315\013/\213!\356\303\277\377\202\232\202O^\245?tut\3414s\343\277\202E\212\'|`\370?\220\302\231\312\2638\267\277)\222M\010`\212\307\277\276\3333\371\347\304\325?i\005\252\305\216,\323\277\023\004\264\034\2042\314\277\0264nfX\375\365?\034)\354\374\274W\321\277<}\2320[\335\364?r\320\013@\273H\351\277\226\t\361\374\206\233\361?\255\2152n\254\357\354?\337\377\364sZ\312\311\277\216\013\323\231\227\273\353?\3201\221Z?\265\355?\314\357\336x\300\377\373\277\2603\037\223\370j\361?w\344\333n&\215\344?\334\361\223\275\250B\327?z\032B\277\244\215\341\2774\235~\014\371\303\317?1\244\0250&-\356\277\352W,\311,\007\322?!IW\305p\312\300\277C+\023\234\247\273\271\277\262\2616u\023\270\316?,\\\353qVo\324?\326\373\222^s\017\347\277"
      }
    }
  }
}
node {
  name: "tensors/component_8"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 750
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 750
          }
        }
        tensor_content: "\374\373\334\277\370\240\340\277\036d\337\253|C\262\277\341b4{\202 \017@\231L\315\223.+\335\277\264\375u\375\0079\342\277/@Px\020\362\341\277\314=\001_\026\344\344\277\325\331\037\362q\360\362?\325\303\377\223\333\373\006@E>5\310E\240\311\277\357\2744\300\016\030\344\277)\201\001\252\222\234\221\277\006\373\276t\326\305\331\277tzZE\006_\344\277\255\006\301\235\007B\332\277\367\366\244\330\354&\364?\324\207\365\253Fs\346\277\n\220\305YY\277\343\277\023\204O\240\302\013\002@\303\302\265T\'V\344\277\340\367\364h\357\372\341\277gRB\007\031\227\007@\275\232\2517h`\335\277S\264\201\023\377\274\276\277\274\334OIA]\350?\3331\227\306\255\002\331\277\334\341\267\313\2468q\277\345\360\211\217\274\212\321?\357\353\212\320\206\031\326\277\206\241H\027\243y\344\277\221\321\201\211?\235\334\277\253\202*\363\030\253\341\277\'\250\022Y\310{\370?AX\317\274_\247\335\277\033\250D\236\250t\337\277\340\367\364h\357\372\341\277I\365#\33593\316\277C\321\002-o\337\212?\032\225\252\025\013\334\343?\177\271\002E\360\347\340\277\2507\014:\230n\003@\221\340\360\026\215\002\341\277:\277|\366\022\026\327?}\026y\330ak\362?\324\207\365\253Fs\346\277\036A,\367>\004\336?\222\021H\324K\001\340\277$\263^\246\016\202\375?\354\023~\214\035\317\235\277\237\022+6p#\346\277\360\355\213}\315\026\343\277\352\324\356\355[\206\340\277{$\374_m\356\326\277\377\201t\027.5\346\277q\347T\r\312b\347\277-\255J@\324\365\344\277a\"\025\266\252E\345\277\'=\262`\273\361\005@\365s#\325\002\253\350\277\374\373\334\277\370\240\340\277\374\005\377\240\356\371\010@\356Z\206E\221\032\346\277_/\315\035\356J\277\277Y4\314\334#\274\312\277\272\207\017\257\312\307\341?\276\332o\202t\304\340\277\336d\3570\263\376\344\277i\215\334\213GS\364?\023\013\021dHM\344\277\2609\031\010\r>\346\277\217|A\357\310\007\326\277\230\371\215\246\376\222\343\277\350r@s\336\210\342\277\373\335\264\035!9\305?\212\246$\224;\376\251\277\315\217+\245Aa\361?\247\227\230!U\n\017@\231*\345c\275\221\342\277\226\256o\355}V\005@\251 |x\233\255\343\277,\017s\252:\n\020@\254\323\211\031|\252\303\277\212\246$\224;\376\251\277\013\262\255\211\312X\336\277E\005\367\254\277\222\000@3\204A\276l\211\314\277\377P\035Zo6\347\277\337\272:\004\363\333\021@i\314\266\320\021\325\327\277\346C\311|\354\"\353?\331\317\350K0\005\333\277S\277\203\331\010&\341\277\244)\307\030\233\266\333\277n\222\024sS\315\340\277\251 |x\233\255\343\277.\017\371\272Q\363\342\277\261\312\035\223\002=\326\277\336d\3570\263\376\344\277\177\320\222\006\355\250\000@\035\n\363\030&r\335\277KD8\317\031\230\340\277\226\256o\355}V\005@d\265\032\356\346A\342\277\023\\p\212\253L\306\2773\221\257\236s\361\303\277na\275\265\224\316\341\277\263\274\232\013\367\271\361?P\254\247\204w\304\312?d\246\253`\231\334\335\277\377\014y\261:8\204?\3011\220\343\267\362\356?Q,~\241\314)\344\277\2609\031\010\r>\346\277\271\364\350\220\024g\337?\244)\307\030\233\266\333\277\244)\307\030\233\266\333\277\256\327j\215\217@\350\277\375\035\305\357i:\333\277\231L\315\223.+\335\277\277\374W\262\345]\333\277\323\035\347w?\263\234\277\r#\313\221\225\273\340\277_\374*,\254\261\320\277\373\273\026u\354<\335\277\3666t\375\r\373\222?\257\010\302JN?\347\277`\300f;-H\347\277P\254\247\204w\304\312?z\244F)\222\355\322?\013\262\255\211\312X\336\277.\336\241\375\222\364\343\277\024<h!\007L\343\277\000\263\313\324\3543\345\277@6\347\214\356\r\343\277\356Z\206E\221\032\346\277\357\357\367\227\312\025\270\277\222@\236\344\303\002\322\277\367V1\300\251\302\377?\r#\313\221\225\273\340\277o\2346TI&\t@\213\213n\260\"\244\357?\033\250D\236\250t\337\277\007{!\345[\221\240\2777<\373\362(\232\373?\357\213\335\002P\031\345\277@e=\235f\017\325\277\004w(\312\347.\341\277\263\274\232\013\367\271\361?\350c\321\345\220#\336\277\326\013\214V5\n\337\277\033\206\\n7\333\344\277\303\221^\227hW\345\277f\267\206\010\344@\267\277~WT\312r\352\342\277\253\244\022#\212D\334\277\356\232\n\304\251\265\336?\265.\315\272\3067\341\277\3343\230s\364\377\345\277o\262\034\334\367\315\303\277\273\370\352\352\241a\311?\202\016C\337f}\347\277\345_d\036M\'\314?Vpo\347(\301\316\277s\251\260U~`\326\277\341J4V\037\223\333\277\"\237\371\375\250k\347\277\375\214\341J\356\237\320\277\253\244\022#\212D\334\277f\027\311hd?\340\277[8\3166\261\266\324\277\3043\221\220\376\357\333?\252Bd\250\014G\336\277\263\314\036@I:\343\277\031\024*\277g]\365?*K\234\305V\370\346\277\356Z\206E\221\032\346\277\3043\221\220\376\357\333?\351\243\2270\235\207\341\277Y\247\311\253\273\267\344\277F5\275 \236`\006@\217\215o]i\241\334?w>\267:\001Z\340\277\254\\\206`06\004@\301\274\262MS^\315\277$\001\250x&i\345\277\177\210\253\2071\351\341\277+\253I\223\215\370\327\277\007\314hd^\304\347\277$\001\250x&i\345\277*2f\023u\353\000@K5\311A\3142\334\277\204?\232\234%|\346\277$\263^\246\016\202\375?\244\t\277\257\366\265\350?bSlsiD\344\277\276\332o\202t\304\340\277olp\340jX\003@\037\333\275\356\'\325\320\277m0f\370\325\317\342\277r\030\254\312\210a\346\277\0027b\177\333\312\335\277\211\020\226\351F\247k?X\326\037\2743\271\326\277\337\206\327`$\230\337\277\243\007\337\350)\035\341\277a\"\025\266\252E\345\277\204?\232\234%|\346\277\377\301\031|\3004\344?\304\025\365AW\356\335\277\'\250\022Y\310{\370?\324\270Li\005r\345\277\22551\261\003\230\347\277\2116.\026\254\016\351?\314p8\343\241{\353?WE\0331>\272\346\277\301\274\262MS^\315\277i\235`\300\231\323\345\277\313\014\252\241W\345\345\277d\246\253`\231\334\335\277jl\t\003\333\324\346\277\363\200\221\265\t\023\340\277R\216,\034J\'\342\277\226\312\026\260\014-\354?\306w\243\274\324\353\333\277\312\333R\344\230\346\346\277\237\264~\025\200 \342?#\320P\273gj\346\277KD8\317\031\230\340\277\355)/\210\322\033\347\277\247\215v@_\261\346\2776Y\355\007\202\202\344\277;\303~P\240\020\301?\331\317\350K0\005\333\2777\273\233\202\377\177\342\277\306U\273\214cR\341\277r\030\254\312\210a\346\277\256\307\346X=\300\366?\351\347\210v\371\036\314\2777\273\233\202\377\177\342\277\204`m%\222\372\363?\262\275\257\262\373\324\336\277%2\3775\345g\344\277\3707\200\312\375\245\344\277\350r@s\336\210\342\277b\263\031A\240D\325\277\'\305\004n!d\341\277\235\341\323x\261$\347\277\332\321\351\370v\002\350\277\332\261\341\217\322\001\325?\355\211\334U\t\034\330\277\235\341\323x\261$\347\277\325\351\243&\304p\344\277\205p\361Y\344z\345\277z\023!\270\"\212\315?-\255J@\324\365\344\277B\247\343\256?\014\340?\217|A\357\310\007\326\277a\"\025\266\252E\345\277\377\201t\027.5\346\277\324\207\365\253Fs\346\277\237C\202\363.\"\345\277=r\212\227\363\022\347\277\272\207\017\257\312\307\341?@6\347\214\356\r\343\277i\314\266\320\021\325\327\277\253\202*\363\030\253\341\277\333~\200\346\263m\256\277\355)/\210\322\033\347\277\037l\241\223\243o\333\277|\304N\2226\356\345\277\n_n\234\232\300\344\277\003F\321\014)0\342\277f\027\311hd?\340\277\237\324\206~$!\325\277~|)Hh;\253?\346\337:;\242\214\345\277&\222\254\003\034h\325\277-|\363\202\025\367\345\277\026\236\026\234\204I\341\277\217~B\234\017\005\343\2778L\240\r\365~\322\277\330>\005\247\264j\320\277\013:[S\222|\000@9\035J\375|}\340\277(\347\354\235\222\375\333\277P\373&\344\r+\345\277r\030\254\312\210a\346\277\340\350\205\333\241\225\335\277\032U\005\261x\334\345\277\227\3106\351?\224\344\277&\205>#\025\000\336\277\202=\231\357\336~\331\2774\367>\215\004\205\346\277\206\335\302\266\334\365\234?O\316\310A\303\216\245\277\377\301\031|\3004\344?\206\032\207S\0358\002@\n\001\302{\252\275\340?8\354\362?\276~\341\277lc\235|ag\351?3\204A\276l\211\314\277i%\216W_c\260?\240ej#\240\273\337\277]k&\241\266\262\340\277\255\202\236\237\350D\264?]k&\241\266\262\340\277\272\345\273\317\272\312\345\277a\"\025\266\252E\345\277\340\350\205\333\241\225\335\2776\241\324\206=B\003@\001D\320_\3422\325\277&cV\363\243f\343\277|\304N\2226\356\345\277!\316O\016!m\331\277AX\317\274_\247\335\277\217~B\234\017\005\343\2778\335\203\262p\031\335\277\2373\376\276\334\241\363?K\244\345\234P\230\321\277Z\330 iz\266\343\277\031$\256\363\271\335\346\277\257Hg\257\340>\345?\177\350XUh\351\322\277\352\337Cz\273$\240?V\004@?-;\366?\000\263\313\324\3543\345\277\235\341\323x\261$\347\277a\361\275\370\353F\346\277\310Dl8IT\305\277\370f\326\332u\247\326\277v\240\331aN\361\260?:\014\373\250b\177\304\277H\2612\227\335\233\343\277\225\271\023\036\037\250u\277\310\331Q7R\351\331\277O;\314H\240*\343?\324\270Li\005r\345\277\233\035\230i0\216\320\277#\320P\273gj\346\277z\333\336S3\257\005@\237\324\206~$!\325\277\315\351\027\323\223\n\267?\000\263\313\324\3543\345\277\352\324\356\355[\206\340\277\2116.\026\254\016\351?\275[\317\362\235\336\371?^N4\214]\312\367?$\001\250x&i\345\277\023\\p\212\253L\306\277(\366[+\340b\340\277bj\313\302\017\207~\277\313\014\252\241W\345\345\277\262\233\307\202\212;\344\277\247\234P;c\030\263\277\n_n\234\232\300\344\277<1\257\245\342\223\366?+\t\366\263}\373\313\277\357\353\212\320\206\031\326\277\0027b\177\333\312\335\277O\312\317&O,\346\277\274\334OIA]\350?~WT\312r\352\342\277\237\264~\025\200 \342?a\361\275\370\353F\346\277\237\223\212\246\231=\377?\246^\377ImK\357?Xvr\356\374\270\345\277\22551\261\003\230\347\277\301\210\351\321\325Q\255\277%\270\237\3143\224\244?\004P\363\355\036\211\n@a\361\275\370\353F\346\277L\037\204m\225[\277?{$\374_m\356\326\277\370h\327\207\274\244\343\277B\325lW\334\320\021@\317a\013\"H\337\321\277\371\310\204U\363\244\324\277E\376$\366\374\236\323?$\324R\025\365d\340?\357\2744\300\016\030\344\277\240t\331\260\355 \344\277\006um\024\267P\013@@6\347\214\356\r\343\277v\376\360\357\364\365\334\277}0\037\356\251D\014@\275kt\rj\303\320\277\233\256{\016\254(\333\277\272\207\017\257\312\307\341?\234\370c:\256\345\006@~\250\263\360\325\351\304\277h\377\210*\000\350\020@\346p?\306\227\213\325\277|\304N\2226\356\345\277\032U\005\261x\334\345\277\177y<\372\343\203\335\277\367P\221\006?\320\271?\na\332\266\227\277\271\277c\375\001m\242\001\001@\244BX\207\336t\010@2\304\346\"\377\210\332\277AX\317\274_\247\335\277\255\006\301\235\007B\332\277\207\265\255\277\010\220\372?\2104NO\337u\341\277\211e\245\014\236t\340\277~\250\263\360\325\351\304\277\252Q\3235Z\254\342\277\202=\231\357\336~\331\277\317\001^T\021\337\340\277\032U\005\261x\334\345\277\347A\351\265\037\212\343\277,\235\306\013\202u\363?\227I\226Yi\256\375?Xvr\356\374\270\345\277\023\\p\212\253L\306\277\374\373\334\277\370\240\340\277\336d\3570\263\376\344\277^N4\214]\312\367?\244BX\207\336t\010@I\323\032\307N5\336\277\026\236\026\234\204I\341\277\314=\001_\026\344\344\277:?2-\356\026\333\277\244\234\273\250\031\032\253\277T\220\014\343\026\300\351?\252Q\3235Z\254\342\277%2\3775\345g\344\277jl\t\003\333\324\346\277Z<;\376\364\262\266\277\304\025\365AW\356\335\277\22551\261\003\230\347\277\003\363\374\214\257\231\260\277\2609\031\010\r>\346\277Xvr\356\374\270\345\277\022\332\271\246\211N\345\277\365\213D\340\337\234\001@\177\271\002E\360\347\340\277\350c\321\345\220#\336\277\345_d\036M\'\314?%S\322\276Q\346\361?\214\252ar\302\211\365?o\2346TI&\t@\024<h!\007L\343\277\241\207s9\213\271\317\277\252Q\3235Z\254\342\2776\241\324\206=B\003@E\355\325\241\342\240\347\277\0036M\330\326\257\360?\202=\231\357\336~\331\277\336~\025y\375k\266\277\226\312\026\260\014-\354?\336\225F\356q\375\343\277\220\237\025%|\203\360?m!\367j\210j\336\277jl\t\003\333\324\346\277\013\200A%\007?\362?\203\033%l=\177\261?\020\307\335Q\370\354\316?\276\332o\202t\304\340\277J\305\227?C\262\371?\314p8\343\241{\353?\3249\254\331.\214\376?]\353\272\361\027O\317\2774h;\257U\203\343?s2\322\022\323\316\267\277E\036-_\241\237\346\277\351\347\210v\371\036\314\277\351\243\2270\235\207\341\277d\246\253`\231\334\335\277\273GjJ8\310\343\277\263,\314\r\200:\324\277\350r@s\336\210\342\277\256\307\346X=\300\366?\266_$x\2056\340\277\356q\026\007\216\333\005@1i:\276\204\221\177?8\354\362?\276~\341\277\261\235\247IW\324\353?\005Yk\225\306\310\315\277\217M\353\336P\006\344\277\017_\325y*D\001@r\030\254\312\210a\346\277\'\r\354\354\334#\000@;\241\340\247k\024\331\277\231*\345c\275\221\342\277e\346q\253\245@\341\277\342\271P\261\243\370\320\277;\303~P\240\020\301?[8\3166\261\266\324\277u\253\261\002\305]\343\277\3343\230s\364\377\345\277KD8\317\031\230\340\277\213\367tRW\311\253?I\342\211T\234\232\342\277?\366 B\342\251\337\277\232[<!|\220\341\277/\200\324\366(\215\332?\302\300\264\247\340X\327\277\244)\307\030\233\266\333\277}&\375\014\264\353\343\277\374\3258-\020,\003@\n\340\315\014\304\332\375?\345\256\343}\343\215\346\277\365\213D\340\337\234\001@\215\304\007\210\nc\017@&\205>#\025\000\336\277\036\t\336q!W\360?\3043\221\220\376\357\333?\346\337:;\242\214\345\277\3043\221\220\376\357\333?@6\347\214\356\r\343\277f*\370\203K\326\303?\215\353<d\323\010\346\277a\"\025\266\252E\345\277\004\031[\303}\307\327?\306w\243\274\324\353\333\277\242\210>YS7\372?\356Z\206E\221\032\346\277\303:cG\301\343\010@>\3248\022q\020\345\277\313\014\252\241W\345\345\277\303\221^\227hW\345\277}\026y\330ak\362?C\321\002-o\337\212?\004\031[\303}\307\327?\023\\p\212\253L\306\277\264\375u\375\0079\342\277WE\0331>\272\346\277\260Jh\\\'<\322?\017X\003\303gP\324?\r\325\201\277}\324\370?\t.\027\337\333\301\345\277\310Dl8IT\305\277\220\237\025%|\203\360?\313\235\256,M\344\325\277}0\037\356\251D\014@\344\356\210\342u\215\344?\244)\307\030\233\266\333\2779\035J\375|}\340\277\002\025zOj1\343\277\267\233.`\032\277\000@\325\363\305\007\272\311\014@\360\254\260\213\274\227\362?m\362\301@\212\315\321\277\177\333\352ta\201\333\2776\241\324\206=B\003@P\373&\344\r+\345\277\024\217\247\0167\344\334\277&\205>#\025\000\336\277\210\364\207\004\323\021\336\277;\303~P\240\020\301?>\353\310\323m\321\004@\020x\013,\014Q\347\277\305$d\317\244S\342\277\324\270Li\005r\345\277\324\270Li\005r\345\277\226\227\337+\201\225\345\277\325\351\243&\304p\344\277<1\257\245\342\223\366?\210\364\207\004\323\021\336\277\274x\301\007\367\306\342\277&cV\363\243f\343\277\275\232\2517h`\335\277\214\272\345\246\024\n\347\277v\270\335\026\330\374\357?\345\360\211\217\274\212\321?\023\013\021dHM\344\277E\376$\366\374\236\323?\006\373\276t\326\305\331\2774&\225\235|\206\330\277/\000\212-\004\216\336\277\250\357$\273\334\256\344\277\n_n\234\232\300\344\277\241\2450n\254\037\343\277\211e\245\014\236t\340\277\205z\023;\332\323\r@KF\244\351\026\227\265\277-|\363\202\025\367\345\277$\001\250x&i\345\277\037\333\275\356\'\325\320\277\272\247\027\030o\310\324\277@e=\235f\017\325\277\301`\007\332\251X\346\277\031$\256\363\271\335\346\277\337\206\327`$\230\337\277P\373&\344\r+\345\277@e=\235f\017\325\277\037\333\275\356\'\325\320\277\303\302\265T\'V\344\277\3707\200\312\375\245\344\277\211o\307\355\223\315\010@\213+n\034\226n\261\277\2104NO\337u\341\277\250\357$\273\334\256\344\277\017v\n\177\305S\332\277>\353\310\323m\321\004@\205p\361Y\344z\345\277\346\337:;\242\214\345\277Y\247\311\253\273\267\344\277\336d\3570\263\376\344\277\315\351\027\323\223\n\267?\271\006\217X\'I\363?\206\260\215\177]\342\250\277\261\235\247IW\324\353?\271\006\217X\'I\363?aQk\306\"G\327\277?\206\357?Y)\375?Q,~\241\314)\344\277\3343\230s\364\377\345\277\301\274\262MS^\315\2775(\226J\303\203\345\277}\026y\330ak\362?w\r`}B[\341\277\264\216z\210\3757\322\277\352\324\356\355[\206\340\277z\302M\345\357\360\330\277c\204\3030(C\343\277aQk\306\"G\327\277\263\314\036@I:\343\277e\346q\253\245@\341\277\306w\243\274\324\353\333\277u\253\261\002\305]\343\277-\r\370\r\013\366\325\277T\201\337!\275#\320\277\017X\003\303gP\324?\034\027a\371,\332\324\277T\220\014\343\026\300\351?w>\267:\001Z\340\277\254\306\0339uB\314\277WE\0331>\272\346\277\013\301\034\027\030\276\342\277\001\325\263\004^\315\337\277\326\013\214V5\n\337\277\352\337Cz\273$\240?}\206\252\332\352\353\324\277\032\225\252\025\013\334\343?sI\003\210G`\345\277V\024\304s\177\273\347\277\032U\005\261x\334\345\277\3707\200\312\375\245\344\277\303\221^\227hW\345\277\346C\311|\354\"\353?c\204\3030(C\343\277\3343\230s\364\377\345\277D\374#I\266\241\346?\014\362s\324\326\274\341\277\277\374W\262\345]\333\277N\231xi\220-\347\277\036A,\367>\004\336?qG\002\333\000c\330\277\312\333R\344\230\346\346\277\301`\007\332\251X\346\277KD8\317\031\230\340\277\177\333\352ta\201\333\277\272\026\023\215y\311\344\277K\005gdd\206\230?\300^\006-c[\331\277\357\2744\300\016\030\344\277w\r`}B[\341\277\0036M\330\326\257\360?A\207F\263Q\r\305\277\360\355\213}\315\026\343\277-\207\246\255\353\200\007@\306w\243\274\324\353\333\277\327z\250\261\271o\324\277\317r9\220\350x\330?\321\344k?\270\366\367?\330\255\000\034\277k\340\277\340\371`\203\354\371\266\277\342l=l\n\221\313\277q\347T\r\312b\347\277Xvr\356\374\270\345\277\002\226\331\277\223K\374?\326\013\214V5\n\337\277l\220\023\306\014\320\323\277\213\213n\260\"\244\357?\230\352\036\031\261-\337\277[+`V\252N\335\277I*q\323WZ\001@Y\347M*\324R\335?\230\371\215\246\376\222\343\277\030\361U\211\264\341\332\277\240t\331\260\355 \344\277\247\276\315\375\035\260\345\277+\026d\224\204c\303\277\230\215\3013\000\263\203\277e\346q\253\245@\341\277\336d\3570\263\376\344\277\222\236J\005\264\005\306\277\304\025\365AW\356\335\277\264\375u\375\0079\342\2778L\240\r\365~\322\277i%\216W_c\260?e\346q\253\245@\341\277\355)/\210\322\033\347\277\037l\241\223\243o\333\277\362-1\342_\026\341?\027\251\311\306Z\323\002@\247\215v@_\261\346\277%2\3775\345g\344\277na\275\265\224\316\341\277}&\375\014\264\353\343\277\231*\345c\275\221\342\277|\304N\2226\356\345\277R\017\214\214sA\373?\'\305\004n!d\341\277\274\334OIA]\350?\363\200\221\265\t\023\340\277Z\330 iz\266\343\277\\I\024L\262\034\246\277\032\227\253\302Q\331\320?\332\261\341\217\322\001\325?\346\337:;\242\214\345\277\243\007\337\350)\035\341\277\366b\324\200\350\254\314\277:\256N\210r|\320\277Ag>J\255\014\342\277\317r9\220\350x\330?!n\242@\352l\350\277[+`V\252N\335\277AX\317\274_\247\335\277)V\t\371\026c\321\277a\"\025\266\252E\345\277\362-1\342_\026\341?\n\220\305YY\277\343\277\210\364\207\004\323\021\336\277\303\221^\227hW\345\277J\023\341\021[\231\341\277IQd\343,7\355?\020\307\335Q\370\354\316?\017X\003\303gP\324?\306U\273\214cR\341\277&cV\363\243f\343\277jl\t\003\333\324\346\277\342l=l\n\221\313\277\326\013\214V5\n\337\277\317\277\267B8\342\305\277\371\331\262\303\223>\333?\232[<!|\220\341\277<1\257\245\342\223\366?\326\013\214V5\n\337\2772\304\346\"\377\210\332\277\032\227\253\302Q\331\320?w\r`}B[\341\277B\272}7\335\244\333\277-\255J@\324\365\344\277\261jp\305\313<\345\277\344\356\210\342u\215\344?\306w\243\274\324\353\333\277"
      }
    }
  }
}
node {
  name: "tensors/component_9"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 750
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 750
          }
        }
        tensor_content: "\326\007Zo\004\347\352?@\333\001{gv\271?\301\304\203S\':\346\277\375n\344\210\330\263\345\277\300/\026\216`\341\363\277\"\026\314\261{\'\340\277e&1\264\3179\331\277s\321\3377-B\371\277\224a`\305\013\365\306?\"\224^B[\346\353\277B\2431\"\340\214\307\277\263\n\256\021\335\212\344\277\370\260\324\013D$\365\277\3165\217\217\000\236\355?\231\262*\206\303\326\323?Zt\365W\377\"\312?\345\003\034\206\260%\234?\312\343\227#\307j\333\277\267\3257\313\002\242\372\277[\246\376\202e\022\363?aY\024Pi<\326?\r)\347Q5\'\361\277\372\325/[\331\333\351?.\027\262J\355c\365?\232d\354l\230\272\372?T\326\223\014\342\342\353\277\275\030\033\024\316\355\371?\223o`\330\2761\355?\320\3648\203\345\027\327\277\022`\251\010\222\206\312?l\315\t\240\027\305\001@\227\007B\346\237;\341\2776\353\233\315\306\200\333\277X\024\327\210\354\362\316?\032LN\370\345\336\335\277\206Pz\312o\340v\277\377\177\021\206x\244\264\277\347\363\204J\363\277\372?\030\212\313\023x\206\371?\200\254*\004e\231\350?\230\016\202Mh\326\373?\016Q\334e|\355\361\277\363\205\014>`\203\360\277=\211\327\276w\264\320\277\325\ng\335\241$\363?\355\tL\354]\252\356\277|\355s\210~\326\313\277\331r%\"\352^\346\277\307Ow\232J\245\332?C\007\361\230q\327\360?Z!8\255x\330\341?\335\274b,Z\203\365\277K\200Vt\304\302\366\277\233\3027\335!\272\332?3\202\027J1/\362\277g\364\324\274cE\331\277\246\255Y\350#\255\007@\205\306\330\362\350\r\363?B\337\247\371\016u\354\277\023A\010\004\t\326\342?m\262\344\002T\270\374?\370\315\257a\363G\342\277Nt\234?\224N\320\277s\242\303\013\307\237\355\277B\322\r,\265\253\372\277\327qe\032\211K\367\277,Kn\211\256 \312?\316m+\223!\203\357?{\233\242\344\371\350\274\277d\230\235:j\237\344\277\351\337\352\264\240\332\360?\374\342\251\316\016\200\354\277\221\375\207\263\263\003\365\277`!q\331\007\301\366\277\272|9j*\233\377?J\346\356kRv\346?!\017\230ln\254\372\277\224\264\212;a\330\362\277\3356\234\257<\267\362\277\255\306\235x\243\227\330?8\262\371h\307\000\353?\233\346\331Q\374\025\361\277\330*a\353\237\347\264\277_\005\235\351\346\255\321?\276\370_\354\014\034\312?\253D|\370>Y\245\277\237l\300(>\007\343?\331X=\205\350\220\263\277\223\311J\372\376\266\264\277\274A\n\230YB\365?\314\333\212\207\257\035\327\277\350\r\223\035\362\014\373?qdt\263\233N\342\277\343\352A\022d\010\002@\262j\037\230|\364\372?\306\233N\302;F\364?\360\257~\204\022\354\000@\250=7\264\312\320\311?QoB\314P\232\363\277\231/\266\266\227\216\263\277\024\034\346]A\002\335?\3356\234\257<\267\362\277\262\213\241OX;\343?2\000d\226\0142\312?\263G\004\377s\303\316? a\326\244\035\026\340\277\213\234\217\005%\207\333\277\027\237\354\320\271~\366?:\320\224\022\365\037\340\277?\341.|\0212\370?t\220\366\032P\342\341?kM\306^\226\346\263\277d\230\235:j\237\344\277\220\036\t\343\035\320\355\277qdt\263\233N\342\277\2708\303\240\020\000\373?3\217dK\315\332\346\2772)\271\357d\204\325\277\177\216\"\314\217\007\371\277\351-Bi\222\235\322?\000!\240\265\377\216\357?\3273\274\310\261=\364?\023\025Rk]\313\356\277s\211\025\020\221\245\355\277\032E\210a,!\344?\220\022c\027xt\322?\225\301J\274\366\033\314\277p\222\343;{\200\360\277\347se\264\007X\363\277\362T\226\001\221\034\307\277\352\t\363z#h\346?\353\321Vw\002\203\344?i\204\"w\312d\372\277 \013\322\312F\245\305?\024\301\364\333\365u\351?xf\216\355\220w\300?\021j\321Q\227\253\260?\027\246S\210\250\331\323?\203\213\317\234\257\022\363?IY[\320\301\212\360\2770\216k\3408\302\305?C\325\316O\203<\271?\356\344\020\367\354\027\351\277\242\0105\254\377\026\361\277\263\301p\256\235\370\346\277#\245\247\222F\255\233?\202\377\224\342\345\336\371?\350C\320\336m\237\321?\327\355\260\201\233\355\274\277\337P\272\257\315\226\002@\335\332`\317\336\220\213?\344\351\244\233o*\344?*\302:\361\034[\346?,\263\177a\024\007\275\277]\335Y\225\010\246\200\277\200\034]\324\272_\365?Z{<#\022\222\322\277\022S\257\257\214R\301\277\312\222G\266\337j\365?q\014\020\222o\025\363?\215?>\316;\371\370\277\"\333\364K5\233\264\277\030\'\315\365\024\255\361\277\237m\223H\\\325\352?1\366I\266I>\345?\247\343\277N\253\t\340\277\010\244\231\373\211l\376?}\006\217s\362\366\372?\2261\344D\236\004\361\277\001\270\207S\234\n\351\277\022\227R}\367\254\371?\233\236\257\371\307\270\366\277\002)\273\317\322\330\300?\350\006,f\003\262\355\277\320\361X\261\323i\344?r\357Z]D\245\267\277G\014\027\333\275\024\351\277Y\225\375\362\256\244\350?\351JC\207\366\006\363?6\216\021jN\n\344?\270\\+vc\304\370?\252\221\325js\037\301?3,FP\204\327\371?T\256\253\356\344\236\350?^\344Z\010\177\002\371\277\206\306\024\344\256\253\225?\321\336\252\r\n\026\330\277E1\2148\022\"\372\277\201\373\207\0315\367\370\277\240\346R\035[}\350\277\243\rN\301]\265\356\277\246\255\266\207\202\321\360?\223-\367\211\364Y\346?}\215\tS\364\261\321?J\224\244\305\312\004\363?\327qe\032\211K\367\277\304\333\367atx\372?\016c\311\347\273\354\311\277\331\250\001wy\236\347\277\273\256\357ZBL\367\277\034\336\017\035\222\000\362?\331\277\251\266\275S\360?=\203j@)\313\360\277\311\304\003\222\3067\353?ie\356a\177\332\341?xw\210\276\351f\324?1N\256\327uw\364\277\253\267\212#A\t\262?\353\027\315\332\232*\345?g\353-\252\373\r\374?\370_]\321\367h\322\277P\210\360\307\206\224\363\277o\030\343\255\203\030\353?y\321\334\246\363\245\003@MC3\302jM\367\277\244_l\017uo\271?h\327\023\212\354B\364\277_\023$1;\203\360\277:\320\224\022\365\037\340\277\230e\346\334\334H\365?\335m\2053\376\321\270?\257\224\010\214L\327\360?\006F\325\277\241\005\367\277\234EX^Y\214\360\277X\357\233\223{`\311?pN\306\254\367\n\367?-\303g\037`\261\321?\212\337\237\211\345\256\373?~\376\3564a\t\340\277\357\370\305\353\313\260\321?8\341\016\"\355\014\351\277g\264\321#\177V\353\277\013_\t}\200\351\353?pLle\352)\374?#\3720k(\370\311?\215\r\251\252@\034\344?\336R\260\007\211,\355?\357 \372\2312\200\333\277pLle\352)\374?\217\325\345V\371v\357?\347\034\272\333\336\263\354\277q\004\234\006b\211\371\277t\340&P>\016\372\277\230Z\354c\360\377\364\277\335\373\022\344\277\241\360?$\t\321\345}D\263\277\020I\302\234v\001\363?\222c,P\276\333\357\277my\010\2712\302\346\277WN:hE5\362\277\n^\\\020\236\225\333\277\3478\210]o\246\355\277\373\213\254z\2554\341\277\370\316\217w[\230\347?\001\335\312W\"\002v\277\037L\201\266\344\246\356\277\351\337\352\264\240\332\360?\260\311W)1\222\271?5\234\253\2474I\312?i\205\317\032Q\325\367\2773\336\216k\372S\371\277{\007BNek\357?\014@{\245-\277\370?PJ@\200\255\353\334?\"\025\005\353\274\225\332\2772\030\377\275\333\023\344?\002\003\370\255\302\275\356\277\340G\303\231_1\306?\261\377Y\237D\205\354\277\224\254\020B\303+\345?\343r%7c*\342?2\301\032\362\013\340\257?MUa4G)\344?\310\230T\004\226\223\366\277\373\\\327u\320r\301?\022\356|\375W\022\266\277\244\311\344$2\271\324\277{V\200\221\202\036\340\277\374\220\331\326j\232\270?\336\275\010\332\336X\357?\020\343\217\014m\022\351\277\341\021t\347\001\253\321?R\t\207\262\300\010\002@=D\300\277\257\260\354\277\374Z0\231\251\220\346?\016e}\272,Q\342?\273\256\357ZBL\367\277YZZ;\236\212\333\277eJ\306\304\027\332\367\277\367C)z\232x\301?\245X\205;\022h\370\277\256Y\370\255Yz\307\277)\"\014\250T\205\333?\222\366\332\356d\t\361\2778\216*\252\001\007\264\277\302\020\316\330\346!\363\277\001d\2035o\367\353\277G\364h\206\270\254\372\277\253\220\201o\313\r\351\277\034<\332\306\n\210\355\277\243\357\206\260\311\034\361\277\270\273#\301\027Q\343\277E\363\002x\003V\343\277\351\261\253D\r\t\002\300r\343\215kj \341\277\024\321\017\234\226\212\321?\013k\335\013\215\233\367?f\030\267\231i\003\365\277\302\021\016\350B\026\312?H\363h\337\207\032\351\277>\030e%`\330\351?,\000Ds\214)\370\277\315\254\310\035Q\033\366\277\237M\353\362\275\337\326\277\252\266#\373bq\365?A}\366\002}c\372\277\373\2279t\350\314\346\277\351C\351\305Q.\343?\260\001n\331\361\306\360?\014\302\241H\330\311\311?\220%\335\367\222\212\344\277ySfB\024*\366\277\2739*77\321\321?yA\262\327\352G\367\277\324\336\004\204\364\315\351?i\204\"w\312d\372\277\2310\227\321\257T\342\277Z\357n\217*\241\365\277\211(\352\315\365\367\372?\037,\332e\366&\344?\264sF5\241\021\346\277smmV\265\370\337\277\241\307q\013\272\024\344?D\226\336{\017\244\321?\266\271\351\323.\225\367?\216\234P\375\274D\270?\306\333Q[ 5\362\277\t\017l\352\013^\312?\243\237lp\357/\000\300a\230\203\340\215a\357?\204n\024\330\3100\362\277\254\362y\304\212\034\344?I\365\365\2262\237\241\277<\316\007\237\240=\312?\334\242\241%\031T\362\277\235\201\356\306P\266\341?[\230\027B\035\231\362?\351\236\300[\t\266\333\277P\315\240\240\264<\365?^|O\367x\252\350?\263\240\242\262u\016\361\277\\;\337\023C\353\302\277\270R\nZ\004W\263\277\010\005\177|\342b\363\277\343r%7c*\342?\013\001\322\254%\037\344?3g\002\332\377\264\374?\320\3648\203\345\027\327\277t\234jB \267\301?)\020\030\325\377@\327\277\003\202\021f\221\217\355\277\177\222\366h\261\006\325?\026%\371Z7\352\357\277Mj\216_a)\337?\330^Kj\006\366\323?\005\265\350%\nQ\262?@\254\317X\313v\001@;\310\023#U\330\336?QjO\260\310T\312?\223\355\314#\253\257\333\277\357\250\315Z\373\362\356?H\347\333\345L\202\343\277\251\200G\246\3231\364?K\200Vt\304\302\366\277\277\236\317F:X\260?l3\276i\264/\374?s\302R\022\274\326\341?J\257Z\033N2\235?\376\304Af\241-\336\277k\010I\237z\260\353?H\350(Y;2\362\277\202(\225\371U\226v\277\375\234\371\027\014)\374?a\363N\035\346\254\345\277\221*\252\310\244\205\364\277]WmsBZ\353\277g\311\222\260(\216\371\277q\266\036\212\273\200\344\277\014@{\245-\277\370?.\207\303\274\321V\204\277\267\002\207\033\351\377\352?\231\024\034S\311\203\365\277\r\244\346\023er\364\277a\366\016s\250\344\367\277\236\365s\306\206q\264\277\025\235\354\202XZ\363\2778\006}.,\325\275\277\245\030\334\233\3315\362\277F\025>A>\025\367?\224J\205\023\346_\366?\336\245\356\346h(\344?\350\3651\225\252\302\351??lC\002\"#\236?\270-\243\253\214Y\360\277e\242$x\263\362\362?u\017\266G\2730\303\277\365\r\3405\315\022\361\277\245\333\213bm\374\350\277@\333\001{gv\271?\310\023n\351\375\377\361?g\315\371r\2052\362\277\230\345r\2041(\355?\306\377?\335\242\027\351\277\215\266j/\236\327\346\277\276\271\366\000\0354\362\277\373\2279t\350\314\346\277_\262^\n\007\262\332?+\347\351=\236`\235?[\230\027B\035\231\362?\224J\205\023\346_\366?\324\327J\336\324\034\344?\314Wd([\265\370\277H^\301\261\335F\353\277Y\330\217N\314\310z\277w\221/\242\362t\357?\361\356w\357\212\021\344?P\333\016\337\3711\301?\0324g\303nv\343\277\307~Z\232!_\301?e\321\231\025T\327\346\277\370b\367^\005[\361\277\\Xm\032s\354\374\2778=\007\037@u\300?\346\305\302\276il\370\277\375(\307\253\363\031\351\277\232\235|&P%\312?X_T\\\036-\330?\345\3768\241\006\236\350?%\257\314\354\"\206\354\277b\036K\345\034\250\321?\035\003?f\"\360\200\277M\023\0215&\020\335?\030E\341\322fc\354\277j\246M\031\002B~\277\025Zv\335\255L\312?\tF\217\262Af\340?\202\354\023X\346\025\315?\35235\340-\215\344\277\247\005H\344\243\346\360?\370\020\371\305%p\356?E\2522;\246\006\362?\340\037\013\\\350\022\000@\021`\326\261\317\233\365\277?S\024\316\n\377\352?\354\212\254\207_\272\366\277\276\326\2673\2246\327\277H.\330\323\351\366\313\277\255n\371\242.\024\373?6G\001\023\'}\360\277Q\316\000x}\217\365?\360\276\256\037\236\376\372?{\004\202\370\2423\375?\037,\332e\366&\344?\370\344\352C\261\235\321?z@\322\212\336\332\364?\203e\223x\234s\354\277\327CC\271z\341\276?N\325M\0144\311\352?\272\231\224l\301\365\313\277:\320\224\022\365\037\340\277_\231\326\326\205\375\355?\250z-b\323\206\365\277\317\3210\363\243\337\263\277\336R\260\007\211,\355?\271\244N\330\225\206\337?5\323$\252\\\203\006@{:\330\327\246q\322\277tt\033\243um\343\277V\3775\215\013\375\334?\200\320\222\331\267]\346?b\242*\346C\023\327\277D\237Q]\200d\372\277\307x\314\363\242\367\305\277\275\374\026C\005\227\002@b#\313 \025\242\361\277\270\201\240\323\267\321\351?\367\310Nf\3661\314\277\204Ys\245C\036\363?\241dY\001\3036\301\277\212g\r\032\316y\366?\253cRBe\270\332?7\0078\253\201\354\300?\310\314\335\204X\210\332?\270\375\214\017\342(\352\277~\274\321\363>\270\351?\035\227\014\002O\324\270?ev\202\313S\005\340\277\230\227\257\372*\200\321?\236$\334\335iI\377\277\347\355a\230\276\000\003@W}<qs\266\345\277\303\335Q\251\201Y\365?\244\033<\301\003\255\365?\017\036Yw\271\246\355\277\354\025\367!|z\001@J;f\305\"\177\365?\311${\322\023\252\356\277*Q(\013_D\364\277\226\335\222Z\263\323\366\277C\321\247\346[8\326?\303\226\"\021Iqv\277\243\214\356\255\315\037\366\277A\375\303\321\022<\324?.\006\027Y_\327\335\277\260\311W)1\222\271? \266\215\235\275\235\361\277\331\223 \334\310)\303\277\301\353%\206\357/\344?\313\302\243_\352:\362\277X\036q\230X\"\351\277\311\025\364\0323_\333\277\251\350\177\362\316e\365?\344\351\244\233o*\344?\313A\251+m\357\357\277\213~\205K\321P\220?\020J\017\020e\261\341?\212\302$d\316K\375?\t\375\221\003K\036\301?\3724\325k?*\323?\037\325\233\352S\342\346\277\321\3551\305\352`\353\277\366\317\314c\306)\003@T,ly\317\320\361?\214\266*\"\206\037\312?\263?\2751\035\030\374?\247\374\371\013\322\324\316?EC\240\234/\250\332?@\360\342\361\250]\342\277\360 \324\346\366\005\344?=D\300\277\257\260\354\277\327c\261\227?\232\367?K\275\362\361|\237\355\277\237l\300(>\007\343?\263\'\\\251\325\315\352?v\365\341\245\373A\361\277\3548\365\203Q\351\371?\202\354\023X\346\025\315?\304\200&%\324E\352\277\260J\336\345\266U\363\277Y\320F\037\\;\350\277\227\301$\t\273\241\344\277\224\344_\260\312\017\327\277\337\316ccA\203\361\2773\202\027J1/\362\2776i\034\202=\027\365\277N\214\2662\n\177\333\277Ioo\007Fv\344?\2241\227x\340\346\363\277k\361\347\364\007\025\351\277\344*\"\3437\245\321?\227\301$\t\273\241\344\277\342\245\024VN\000\271?>\242\221(\206\266\356\277cL\301\251\230S\260?\327\322\020\260<\302\332?\360\232FJK:\375?\221\213\210\254\312N\264\2776\0308\352j\374\370\277\330:\357\205M>\352\277\370\213\322\324\031A\312?*\320T\360c\234\327?]\217\360\244\370{\327?\255\021\265\317\327A\320\277#V\216#\037\035\314\277\350Db\001=\013\317?aRZ\252I\213\320?Z\251D\205Wh\376?\235\037\003h\333)\344?tt\033\243um\343\277L\276R\311E\362\355\277\232E\321\362\023\327\332?\362_\267G\342 \344?CE\232\352H\345\363\277\214\266*\"\206\037\312?\253cRBe\270\332?1\334\025\033\226\253\321?\304\200&%\324E\352\277\006+\024\0220D\342\277\232E\321\362\023\327\332?\316{\371\001\3778\312?\306e2\316\334\207\360\277\336\n\363\014\333.\374\277^>\277w\014`\353\277\251\243\257Q4_\312?\312\342~\252+\025\364?L\352a\323+?\352\277\347\\j:ud\371?\245\227\310\314\225C\347\277\315W\253\206\210\262\321?(2\300\215x&\312?+\347\351=\236`\235?\361\t\315D&\351\270?\202N\377\266[\242\312?\356\211\377\343\330I\371\277\001\227?\004\244>\354\277H\254E$\206\352\323\2771O\030\377\325\344\000@\234ey\266\372\005\351\277\333\010\232M?\310\360?\367\325O\240\2045\375?\277S\267C%\246\355\277\177\213\265yw\361\372\277d\215\326\177|\036\345\2775\277cKn\004\232\277\356\362\353[\024P\301??\317\000\n5V\353\277\262\024h\370\253\332\367\277Wz\010\024Fl\377?1O\030\377\325\344\000@\244\325x\335\312\317\360\277S2\371QB\337\360? ]\302\345j\223\373\277\253cRBe\270\332?`+|KZ`|\277]\370\241\232\'\306\356\277d^\207^s\227\373?\036W\302\304\242\t\365\277=\353\262\271\266\221\001@\207\030\2117\231`\331\277\222\3048\236{\215\321?\227\365\200\365\270L\271?\261w@\232wV\365?C\370\374\203\n-\344?\363\330\323o\"\005\002@#\235\337\241\207\243\361\277\224\350\206\031\362\023\312?;\231Q\360\232\362\372?\020VvA\353\003\324?\311\321P\337\177\313\370\277\226\203AO\000\031\366\277\036\212+\220-/\341\277\253~GXr\r\361\277\306>\3350.\223\362?\031+\332\276\305\224\362?\n\036\014ea\252\263\277)4Z\342\235\277\341\277C~i\007|<\337?\351-Bi\222\235\322?\353\361\027\2735\326~\277\027\300\032\375y)\373\277\353\372\267\301\364\341\263\277%%\263\231\3642\362\2771\353\016\204d5\275\277\362\220\277C\246\003\314\277\3548\365\203Q\351\371?2\305\300\336\373\027\355? \177J{cp\354?\302\010G\351\376\362\347\277\227\256\035\206n\322\305?j\304x\023Yu\354\277\300\035\202}[$\344?dz\177\006\035P\202\277\314\t\001L+\311\305?m\267\2308\237\014\344?\366\357\212\303\361)\312?`F3\237\3344\233?\030\361)JSQ\337?\276:c\276\331c\337?\224\250\\\263\250i\357?\336m\353\010\313\317\330?\333J\226u\']\353\277J\227W%C\272\347\277\265\247\"\316\206\363\311?\216\302\022\032\035\352\260?]\021P\226]\300\356\277\276le?[\240\355\277*\305:\035S.\370\277\0037\333sNW\363\277l\034J$\303\324\332?\251Xk-S\022\374?\266\271\003\342\355\352\363\277\310\235;\301;\223\301?\330\360\370\331\n\027\344?r\212\025\267\3017\377\277\307\1779\253\3319\355?\311Iw\260&8\341\277(\2251w\362\177\357?4\016KE\235\344\324\277\352e7,O\351\257?\216\3007zG\312\353\277\370b\367^\005[\361\277J\303\2712\323(\370\277\232#v\317\264\362\347\277Q\244\261\034)\350\371?\271\227\010\226WY\301?\231\260\351\020!\271\356\277tl\216E\375\035\344?\235\242\274\302x\240\367?\332\021\232\232=%\351\2778\025\336\304\210l\337?c\014c\200\240k\353\277\256C\004c\261z\330?v\016c\370\363&\306?BEm,\222\004\335?%\035R;\035-\355?G\270\314\2570b\365?\3455\250\371\2451\305\277\003\202\021f\221\217\355\277\335m\2053\376\321\270?s\326\246\321R9\362\277M\311K\230\027\302x\277%kv}-\020\367?\\iU\330\276\226\321?\"\033r2gb\375\277\r\257\372\232\020\021\361\277\0135\372\261\005\377\262\277pS\223\264\255\"\324\277\257\276\243+\355!\372\277C\\\341q\203_\376?%\032%\277x\262\356\277\277mx\004\314\366\263\277\252S\345\361\0221\362\277EF\215d\213\330\352?\224\204{^\024&\363?\356\310\234\000\300\250\305?\017.\007&\361C\365?63\246\2242\234\371\277]\205\334\373!\214\371\277[\021\221\275\236\271\340?\253\300C\200Z\242\333\277\266\375Y\277+\232\263\277\353/\201Q\023\313\356\277\364\313<H{\243\321?Zt\365W\377\"\312?$O\2562\211!\355?\342L\020\027Yc\365?z\035\320\303@m\356?X*\376\221\223\272\356\277\355\306\242 \357\244\366?\263\n\256\021\335\212\344\277m\177\225Z\001\264\330?]\021P\226]\300\356\277FI\224\030{\r\306?\177\221\334\352e;\364\277\020\235r/\210x\354\277VB\240A\034\376\361?/\261\031S_\260\345\277 \014+\032V\226\374\277\266\325\376g\317\234\310?\"\365\303\026\314\245\321?"
      }
    }
  }
}
node {
  name: "tensors/component_10"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 750
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 750
          }
        }
        tensor_contenteXc\reXc\rw}r\217ow}r\217oeXc\rw}r\217oeXc\rw}r\217o
      }
    }
  }
}
node {
  name: "tensors/component_11"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 750
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 750
          }
        }
        tensor_content: "\376\266\361\0100\254\360\277\037+\257\007\277\357\351?\2016\016y\300\261\304?\331\035\342\236\277\205\203?uck\034\304\035\367\277`b\343\2163\250\324?\256\320.\037\370\233\000\300\037\365\257cgv\362\277\214\362\313\323:\007\360\277:\303\255\266Q^\353?\246\300\311&%\357\350?\213(\313w\222\200\347?\201\232\267\355NX\341?\301\001\177\030\343+\360\277\272\350Ji\361\202\323?J\021O\360w/\000@\275p\362\362\374L\326\277z\025\300V\013q\325\277\003Z<\"j\331\311?\330\306\\o\225J\322\277\016*\245u\0226\371?Z\351\002\213\256\374\364?`\244)\315\354\002\000\300\357\01414X$\372?uck\034\304\035\367\277\207@\365\224\327o\323\277\315\214\336\246&\351\362?\026\235\233}{\307\343?\337\237g\303\221\264\366?\'\302\243$\245\244\372?\270\232\237\2438\326\361?TCC\337\t\241\364?#\307\005\2230I\315?\313\233\'1\311K\324\277\332\267\023\345\362\347\360?\211%\027|\222\025\324?4\267\331\276\031*\341\277N\323\000\323\240z\355\277\t\264\372q\2519\353?\357\276\205n\237w\350\277\315\321&\325 \305\373\277\357\356\232\026\333\326\372\2778\237\257\241\324:\325?\307\n\035\020\377\260\370\277\266\273\351\274\265\216\364?l\305\305\343\342Y\271?\340\317|k\315\023\351?\260\003)\2026\335\322\277y2\217T\251\311\274?Q\020\3706\262\222\320\277\022\276\345\226\370\177\346?\366s\020\251\002z\370\277\310\310\210\335\004@\363\277\350i%\204\2633\375\277\237z\262\306\333\r\357\277#\310\320\273G\306\341?}\334K I\311\346?\225k*\323\243n\321\277\237Yh\255^U\354\277\276\304\207\264\321\023\375?\201\356\312\252\007\333\371?\230tJ\317\3337\350?\234\247\023s\027\002\376?\375\351\272\254kv\346\277$\346b\320\214\213\304\277:\3720\010\273\007\242\277\272|\t\206\273\210\362\277\307\034\234\232\275\302\353\2772&\317\235O\217\365?\231\355aS?R\244\277,\035p\017\311F\311?SyB\203a\032\334?A\250\313\224\324{\357\277\211v\3648/\351\372\277\246\270\366.g\244\273?-V\344E\213\356\347?\317nH\211\251\233\363\277\325\024\0105N\367\363\277:\3720\010\273\007\242\277\222\230\213\177\337b\360\277\360\000\032\241\231\350\355\277F\367\303\207\300\351\363?5\330#\330\226\342\343\277\357\276\205n\237w\350\277$\332OF\006\330\364?\213\213\251\303\t\252\357?\227\241)w\373\347\370\277>\201\031\204W\355\345?\'kZg\320r\340\277\210\202\211\307\321\340\330\277\315)?\304D\374\306?\304O\254\342\267\034\300?j\"@A\2225\247?\217\3466E\230\017\342?N\221l\240\246\t\350\277q\256V\313\324\306\257\277S7\256Pg\251\326?@\207\201{W\303\354\277\270\353\376d\361\355\346?\026\337/\260u8\351?\213(\313w\222\200\347?:\3720\010\273\007\242\277\222\332\037\262\331\323\365\277\037\205iN\306\307\276\277anx\035\326\237\362?\360\030H\307\026`\326?N\312\344\337\2409\323?\366=\r\374rx\264\277\223\211\300\360 \274\340\277~?*l\300\362\356?\272\276\235\270\265\371\367\277|<vp\300\207\333?\231\355aS?R\244\277\276\240<\344\\\267t?j\"@A\2225\247?\362\367\001\267\321/\260?\t\223\260X,\201\350?o\2726\336\264\223\317?\343?=s\032\366\361\277E]V\3177~\377\277\357\337\317\207\0340\353\277\365O\022\224\205V\362?\'\214\244\200M+\343\277*\321\354\256G\007\334\277l\360\362\017?H\316\277\342\223P0\323x\352\277J\006\021\033\233\324\301?2&\317\235O\217\365?\211\251?\341\206\367\336?\237PL\272^\024\322?\022\276\345\226\370\177\346?\307\037P\226\275-\337\277\014\364\245\321\272\274\341\277M\235\2033eE\364?\360\000\032\241\231\350\355\277?Q\004\334\033\216\363?f\3344\374\360\354\222?N\312\344\337\2409\323?\227\324t\037S\366\334?\323b\263\372\006\244\345?Y\370\315\031m\243\344?\365C}\005\343^\324?\237z\262\306\333\r\357\277\313\335\273c\303\274\331\277\237z\262\306\333\r\357\277\325\363\275\033\321>\361\277U\004c\250\017\233\362\277\026|Qd\376\016\341?\364\323:\371y8\375?\216:J\002Q\222\372?\266\273\351\274\265\216\364?\320\276S\342t\315\000\300\340\325\344b\315\351\357\277\246\002^Y\037`\356?\014\025\360\3527u\344\277\253\234\307\010pC\306\277\213\213\251\303\t\252\357?SyB\203a\032\334?\360\030H\307\026`\326?\277U\024\332\267\362\326?\214\362\313\323:\007\360\277\242\330\363Cj\336\324\277\235S\000\266^\177\345?N\262\266\271#\302\352\277\342\201\321\245\024g\367\277M\344.FJ]\000@\216\243\327\351\206!\310?\202\273\001\007\314\020\344?$\346b\320\214\213\304\277\347\326\263\224\034\357\320?\211\214x\365X\257\300?c\206\341\243\260\313\352?\022\276\345\226\370\177\346?\'\214\244\200M+\343\277D-\277\"\340\332\316\277u\201\001:Ak\366?\375\351\272\254kv\346\277\260W\276C\013\244\371?^X\374r\034\352\265?vu\352\246\202/\352\277a\346\013\364\'\212\337?\375+O\337e\347\353\277\326\344\362\214\022\230\341\277M\342\313a_!\375\277\214\362\313\323:\007\360\277&\020\315\345A\r\356\277\313\020\007\014\033\313\375?\231_\225D\001w\363\277\301\001\177\030\343+\360\277\357\276\205n\237w\350\277\350\003\223<<\237\361?\332/\247\273D\322\335?n\231\255[\242\236\360?\344Q\274\375\330\007\345\277Q\020\3706\262\222\320\277:\3720\010\273\007\242\277;\212\372\026\372y\360?_\277U\332rs\331\277\270\312\264Kt5\344?\217\3466E\230\017\342?\301X\310\325\267]\352?~?*l\300\362\356?\341\242\033\277\221\037\372\277\244\355\250\316D\237\371\2771\230xx\205_\355?\330\306\\o\225J\322\277\315\321&\325 \305\373\277\330\330]\376o\240\363?\004]\261\264\324\007\361\277\223\211\300\360 \274\340\277\032\243\003u{\235\352\277-A/\273\260-\363\277\035\007\261\362A\314\323?\304\323\324G\254\376\312?\223\211\300\360 \274\340\277R\205\327\021\004\022\372?\013\003q`yc\361\277]\274\241\336r\010\346\277\223\211\300\360 \274\340\277o\2726\336\264\223\317?d\352\212\030?r\327\277\211g\253\256\214\206\331?\2550\212.r\321\361\277#\304t\3260S\263\2774\267\331\276\031*\341\277m\307\3644\3141\253\277\316\376\001t\010\355\277\277\355\226\0105\013l\312?\230tJ\317\3337\350?+tzc\010<\327?\356\372\261\251\231\022\347?S\"\371\305\214\350\361?\202\273\001\007\314\020\344?\227\236u{\373|\365?$\332OF\006\330\364?\330\306\\o\225J\322\277\332\253~VP\360\322?`b\343\2163\250\324?\227\236u{\373|\365?\323b\263\372\006\244\345?\220I\025\221\0179\352?\240\325?Hjs\341\277\030\246\267p{\010\336\277\226\222\340\354X\205\327?\304I\375F\371\266\372?\252]\353\332\255\305\340?\244\355\250\316D\237\371\277\r\322\224\230^\017\267?\200\213\354^\220\261\361?\260x\010]\210\\\374?\315\214\336\246&\351\362?\365\205\0218\335\317\331?#\307\005\2230I\315?\270\312\264Kt5\344?\016*\245u\0226\371?\330\330]\376o\240\363?,\035p\017\311F\311?\027\323\030\035\267\374\374\277\203\2546x\rj\364?\0179\356\377\264\230\332\277\376\327;\"\255d\363\277\032aoB\201,\345\277\216:J\002Q\222\372?9\317BE\364U\371\277\246\253\024\234J.\364\277c\247+\275-\204\355?\000\220\370S\364\215\310\277\271\257\322)\367R\350\277\237Yh\255^U\354\277\225\263&\375\235\265\315\277\227\302s\220x\240\373\277U:bLg\024\352?[\001\352\014m\344\336\277\014\025\360\3527u\344\277\005~\373\315Q\300\363\277bq,\031\326\n\366\277\271\3343\3262G\367?:\215\256\022\372\344\363\277\367\340\222\236\303\234\246\277\202\331\223\033\021\326\306\277d\352\212\030?r\327\277\270\232\237\2438\326\361?\366=\r\374rx\264\277\330%\300\237-\024\277?\221.3o\222V\356\277\356\265erg\256\301\277\217\3466E\230\017\342?\016K\357\216\217\356\373?\'\t\242\327\232\312\253?\327&\207\277\014\t\347\277M|9\032\350\214\361? \034\344x\000I\372?m\307\3644\3141\253\277$L\371 <\250\354?\253\220\264~\351\217\366?\000\275\333\004L\306\365?\316M\376o,\343\360\277\252~5\364*~\343?8\253D0w2\363?u\201\001:Ak\366?\227J\334\260\356-\262\277f\230`.o\335\375?\362\367\001\267\321/\260?\342\223P0\323x\352\277b\236\007\270\2752\272\277\'z%\366\216\031\360\277\305\365\351\211@4\342?\254\207Q\347*\277\335\277\\\313lm1\257\365\277\367\210\3053\335:\355?\230}j\313\023\001\317?Pp\"\207)Q\345\277\3440r\344[O\342\277\372\003\322\245\321\333\315?N\312\344\337\2409\323?\307\373Q\201@\n\351\277d\352\212\030?r\327\277_}\301\247x\002\324\277.\272\215\272\031\225\324\277\230}j\313\023\001\317?\252\237\177\r\2506\346?\3671|v\010\t\363\277U:bLg\024\352?p\220\314\310\377\021\346?e(\002\245\'\351\375\277\014\364\245\321\272\274\341\277x\022\014[\013\006\342\277@E\355H]R\347\277\216[\224\033\316J\375?\276\240<\344\\\267t?\254\3061\036%\305\357\277n\317\254\377\371\027\330?\316Ai\341\211\353\342?:\215\256\022\372\344\363\2777\355\330bq\243\370?\334\272\307\340\362R\364\277X+\227\275\250m\372?\036\213\331W6\256\336?\310\025q\214\026\200\251?\275K-\276\2404\270?\2352\266\234\341\306\342?\027m\206\325?h\361?\251ojel\327\363?\275a\251hZ\352\364?:\3720\010\273\007\242\277\227J\334\260\356-\262\277[\001\352\014m\344\336\2775\330#\330\226\342\343\277+\244\r\007(W\373\277\251\322H\261\343\000\374?\304\271\275NF\231\343\277FN\rE\225\033\336?\323\203\375\023\204\\\350?o\275\253p\037\302\366\277\227\302s\220x\240\373\277\016\375\301\304\272\375\313\277\301\232\\\010\262\316\357?\337\237g\303\221\264\366?\003\253\326l9\350\267\277}\t+\310hy\367\277\354\312\234\001^\263\364?\032aoB\201,\345\277\002{G\322QU\360?\230\200\337]~/\366\277Pp\"\207)Q\345\277n\215\030\315\377\246\322?\307\373Q\201@\n\351\277k\010!6\274\277\346\277$\271\005-\211\037\362?\277\227\250\014\262c\334?\376\266\361\0100\254\360\277\205\374\322\"\037\025\256?\307\037P\226\275-\337\277\310\310\210\335\004@\363\277\220=\376\375P\375\375\27732\3460\016\313\321?\313\255(\300\243\241\365?\214\362\313\323:\007\360\277\366=\r\374rx\264\277\257\t\221y6\263\311\277\367%\347\347e\021\345?:ld\371|,\361\277\234\020\241ZM\221\313?bMmm\356#\314?\034v$\315[\355\371?\3440r\344[O\342\277d\352\212\030?r\327\277\331\035\342\236\277\205\203?\216:J\002Q\222\372?\003Z<\"j\331\311?\225\277\277\224x5\370?\272\350Ji\361\202\323?\3469\216\327[\220\314\277\311\332\007h\303Q\346\277\356\251R\350\340\372\361?\341\300\261\334\016m\371?\003\234\221\353\316\r\363?_\260\014P\320\020\370?R\224 \234\246t\333\277`b\343\2163\250\324?\272\361f\\\361\303\355\277\260E\275\2640N\330\277p\322`\373\371\202\353?)\241Y\013(\354\367?\227\241)w\373\347\370\277\256cS\322\255\233\347\277N\312\344\337\2409\323?F<\014\266\272\305\374\277D\'W+\340\004\330\277u?m\007G\372\360?\220\373i\313V\214\370\277\275p\362\362\374L\326\277\375\n\005\306\350.\351\277f\340\243\374\'\264\310?\217\3535\222\206V\375\277\346\207\273\2410\201\374?\376\266\361\0100\254\360\277\356\251R\350\340\372\361?[\001\352\014m\344\336\277`b\343\2163\250\324?L\177\355\025\350\367\364\277D\345\302\370\345\223\322\277\034d#>\201\227\330\277F\014y\022\233\252\330?\307\037P\226\275-\337\277D\'W+\340\004\330\277]\211\330:7>\360\277?<\315L%\211\300\277\337\341\373\365\213%\374?\363\221\246\306\177\307\367?\362\367\001\267\321/\260?Pp\"\207)Q\345\277\223\252\n\n\236t\343\277\226\222\340\354X\205\327?\037\365\257cgv\362\277P\3532\002Vz\262?j\366\241\253\375\255\363\277\373\"/\343-\036\305\277\327&\207\277\014\t\347\277\'\214\244\200M+\343\277\254\204\235\353*T\352\277\276\262\206%\367\275\333\277\207F]\214\327E\312\277Q\026`.\262h\307\277\270-\223\227\353^\354?\027\262\316\003:D\372\277\3232\236R\313D\363?\001 \272P\303\357\375?@i\353]\332u\335\277Z\r\001\240+ \373\277\211%\027|\222\025\324?\317nH\211\251\233\363\277\013$\273y\366\033\364\277`b\343\2163\250\324?5\016#|\356[\373?\'\214\244\200M+\343\277\260W\276C\013\244\371?\260W\276C\013\244\371?\273m>\367\374\341\342\277\305\365\351\211@4\342?\246\253\024\234J.\364\277\246\270\366.g\244\273?F\014y\022\233\252\330?p\220\314\310\377\021\346?\323V\234gHh\371\277P\3532\002Vz\262?\2626t*\216\353\366?\037+\257\007\277\357\351?\017l9\250\014\247\376?\223\211\300\360 \274\340\277q\256V\313\324\306\257\277\375L\231\370\342\237\356\277\354\353\346\032\333k\367?\332\253~VP\360\322?\030\221\204\352\274\213\367\277\311\332\007h\303Q\346\277A0\272\302\236\325\360?n\317\254\377\371\027\330?\337~\035\252\024\374\363?\217\3466E\230\017\342?\r\322\224\230^\017\267?\322\005=\246\217P\344\277o\013\321(\204\242\275\277\227J\334\260\356-\262\277\322\005=\246\217P\344\277l\374\213\247\031\310\370?ul\312\252Jf\303\277\356\372\261\251\231\022\347?\220\373i\313V\214\370\277\227J\334\260\356-\262\277\221.3o\222V\356\277\212\231\2416\227\335\000@\304\271\275NF\231\343\277\307\034\234\232\275\302\353\277|\006w\314h\016\364?\035\023F\201\344\303\361?\031O\360\267\302\032\362\277\330\306\\o\225J\322\277m\307\3644\3141\253\277\264\326I\332\026-\362\277\201Y\332\266S\273\221\277\013/\017\366\r\353\244?\n6:\004\265-\347\277\375\351\272\254kv\346\277\026\235\233}{\307\343?\375\351\272\254kv\346\277y2\217T\251\311\274?\372\177\251@\335\371\302?-A/\273\260-\363\277@i\353]\332u\335\277w!\327\351\311\254\361\277\305\0264\243\275\354\344?\345$\335U\271W\364?:ld\371|,\361\277\027\323\030\035\267\374\374\277a\346\013\364\'\212\337?\357\017\345/X\217\375\277\256B\t\2710\343\344\277\227J\334\260\356-\262\277zWT\211\005\342\332\277\304\323\324G\254\376\312?\377\310p\223\356\275\343\277\320\276S\342t\315\000\300\211g\253\256\214\206\331?\231\266\336\001\326\250\355?\254\3061\036%\305\357\277\3245RN\313\257\366\277T\212\356\361\356\270\000@\375+O\337e\347\353\277\334\360\306\204J\314\353?\227\\\341H\001\014\360?\301\"\3111`\344\362\277\373&\236\343d\345\232\277\360\254\006\344\340e\365\277x3Vt\210\276\344\277N\221l\240\246\t\350\277|<vp\300\207\333?@\207\201{W\303\354\277:\303\255\266Q^\353?\330%\300\237-\024\277?8\253D0w2\363?#\304t\3260S\263\277\355\226\0105\013l\312?@i\353]\332u\335\277\253\264\262\223f\263\374\277~?*l\300\362\356?\3232\236R\313D\363?\267\251j2\367|\341?\351\331g\220\034Z\344?3\371m\361\023\233\346\277\220\031\000\351\323\331\367?\332\253~VP\360\322?UF\367\332\t\014\370\277\345$\335U\271W\364?\230tJ\317\3337\350?x\022\014[\013\006\342\277\253\220\264~\351\217\366?6\300\365\261\031k\313\277\'\t\242\327\232\312\253?\311\230s5\311\340\340\277\220\031\000\351\323\331\367?tN8\226\005\241\340?$\346b\320\214\213\304\277\375+O\337e\347\353\277w!\327\351\311\254\361\277\251ojel\327\363?\254\204\235\353*T\352\277J\006\021\033\233\324\301?\365O\022\224\205V\362?\313\020\007\014\033\313\375?\225\277\277\224x5\370?\3232\236R\313D\363?\367\251\017MZ\363\357?\243,\211\005?\245\373?Pp\"\207)Q\345\277\270\312\264Kt5\344?\363\221\246\306\177\307\367?\305\3621\205\010A\302\277\023\022\371S\261\002\377?\311\230s5\311\340\340\277\2206\001\234U\037\000\300\374\365\321?*\262\362?\372\177\251@\335\371\302?\177 \0025 T\000@^X\374r\034\352\265?p\220\314\310\377\021\346?\267\251j2\367|\341?o\2726\336\264\223\317?\2206\001\234U\037\000\300\361|\361;\245\006\343\277\027\262\316\003:D\372\277\304\271\275NF\231\343\277\254\207Q\347*\277\335\277\356\265erg\256\301\277z\323+$\021\000\320\277k\010!6\274\277\346\277\014\364\245\321\272\274\341\277\345\361\221\255aI\320\277\0364\220\232a|\364?\275vZ\352\374\"\315\277\356\251R\350\340\372\361?\334\021\021\236\307\204\356?\300\2218\003B}\274\277~\307\226\225n\010\362\277\202\022\311\277\204\376\377\277\'\214\244\200M+\343\277$L\371 <\250\354?o\013\321(\204\242\275\277x3Vt\210\276\344\277\223\313T#\033-\346\277j\366\241\253\375\255\363\277h\373\341\372\371\026\376\277V\324\303\351G\347\250\277u\245\377N\276\216\374\277n\272\367t\037W\363?\211R\366#\262\305\364?vu\352\246\202/\352\277\374\365\321?*\262\362?$L\371 <\250\354?M\344.FJ]\000@\023\022\371S\261\002\377?\362\367\001\267\321/\260?\221.3o\222V\356\277O^\243\374j?\362\277\373\"/\343-\036\305\277\223\211\300\360 \274\340\277q\033\274.\253\033\000\300\347\326\263\224\034\357\320?\323V\234gHh\371\277A\022$\245!\210\361\277n\336\365\211\234z\371\277\330\371\247\027\355X\366?g\363\355\257\375B\360?\330\306\\o\225J\322\277\3727fr$#\370?a\244w\301-\031\332?d\352\212\030?r\327\277\277\205\247}\327\r\373\277>@<M\\P\226\277\361\342\304\205*\275\375\277\273L\364\335\177)\340\277\nE\005\223s\324\366\277\375\370\205;*\035\366\277\227J\334\260\356-\262\2777\355\330bq\243\370?\375\n\005\306\350.\351\277\351\'\221Q\271\302\367\277E]V\3177~\377\277\275vZ\352\374\"\315\277:\215\256\022\372\344\363\277.hc\320I\000\373?P\3532\002Vz\262?3\\L=\213\304\356\277\037\ne\356A7\347?~?*l\300\362\356?t\267~\331|\240\357\277:\213\361\377\372o\000\300\267\375}\357\257\377\371?\217\3466E\230\017\342?\306\346\036\373\201\215\362?\311\332\007h\303Q\346\277SyB\203a\032\334?\211\214x\365X\257\300?\357\342\203\203\034\233\336\277\323\211e\013\2042\357\277\203\2546x\rj\364?\270\312\264Kt5\344?\034d#>\201\227\330\277z\025\300V\013q\325\277o\275\253p\037\302\366\277D\'W+\340\004\330\277\214\362\313\323:\007\360\277)\343\355=\"]\375?\223\313T#\033-\346\277\207@\365\224\327o\323\277\027\216\320\356\274 \364?\203\315\200\221\212\"\367?\266\273\351\274\265\216\364?\027\325{\001\2428\000@:\215\256\022\372\344\363\277\034\"\217\013\207&\323\277\330\010\361\241\217\273\327\277\375\n\005\306\350.\351\277\253\264\262\223f\263\374\277L0w\'\030\316\356?\355\270\035w\237\241\341?\2071\254\n5\r\362?\377\310p\223\356\275\343\277\330\314\304f\225 \311\277a\346\013\364\'\212\337?\362\367\001\267\321/\260?\305\035b\304\273A\377\277\271\337\347\3212\262\372\277\220\370\265\317V!\365?\277@_O\3351\362?\211\214x\365X\257\300?\225\255\276\005\236\337\326\277\257\336cM\332\304\264?\036\213\331W6\256\336?N\323\000\323\240z\355\277\020\307\306)\233\014\361?l\374\213\247\031\310\370?%\3168\263G\234\350\277\260W\276C\013\244\371?x\022\014[\013\006\342\277\225\340\t\256\365\355\372?\306y\022\3574\026\355?\354\312\234\001^\263\364?d\352\212\030?r\327\277J\006\021\033\233\324\301?#\310\320\273G\306\341?\354\353\346\032\333k\367?\034j\2135\201m\317\277\374\031\320T\247\325\370\277>\325,A\020p\376?\001\314$\217\356(\327\277F<\014\266\272\305\374\277OH\255_\005V\240?\2378\036\224\341\234\351\277Z\354\266\206\256g\370\277\204\240\037\345N.\350\277\372\177\251@\335\371\302?\235S\000\266^\177\345?\375\n\005\306\350.\351\277\244\250`\240J\303\360?\332\253~VP\360\322?S\353\245\313\320\257\214?\351\'\221Q\271\302\367\277\223\211\300\360 \274\340\277\t\264\372q\2519\353?\314k\224\215\2510\360?f\3344\374\360\354\222?$L\371 <\250\354??u\002\361\230\261\371\277\227\302s\220x\240\373\277tN8\226\005\241\340?\026y\231_\306\033\301\277\373+\203\357@\025\000\300to\202\257\202Y\343?\324G\321\330\211\301\351\277\350\003\223<<\237\361?\207@\365\224\327o\323\277.\272\215\272\031\225\324\277-V\344E\213\356\347?\t!\007~\366\260\360?\013\231\030P,W\357\277\202\331\223\033\021\326\306\277\033?^\t%\177\272?6\300\365\261\031k\313\277\354\312\234\001^\263\364?"
      }
    }
  }
}
node {
  name: "tensors/component_12"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 750
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
            size: 750
          }
          dim {
            size: 1
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "buffer_size"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1000
      }
    }
  }
}
node {
  name: "seed"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "seed2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "count"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "batch_size"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 500
      }
    }
  }
}
node {
  name: "Iterator"
  op: "Iterator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "TensorSliceDataset"
  op: "TensorSliceDataset"
  input: "tensors/component_0"
  input: "tensors/component_1"
  input: "tensors/component_2"
  input: "tensors/component_3"
  input: "tensors/component_4"
  input: "tensors/component_5"
  input: "tensors/component_6"
  input: "tensors/component_7"
  input: "tensors/component_8"
  input: "tensors/component_9"
  input: "tensors/component_10"
  input: "tensors/component_11"
  input: "tensors/component_12"
  attr {
    key: "Toutput_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
      }
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Iterator"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "ShuffleDataset"
  op: "ShuffleDataset"
  input: "TensorSliceDataset"
  input: "buffer_size"
  input: "seed"
  input: "seed2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Iterator"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
      }
    }
  }
  attr {
    key: "reshuffle_each_iteration"
    value {
      b: true
    }
  }
}
node {
  name: "RepeatDataset"
  op: "RepeatDataset"
  input: "ShuffleDataset"
  input: "count"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Iterator"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
      }
    }
  }
}
node {
  name: "BatchDataset"
  op: "BatchDataset"
  input: "RepeatDataset"
  input: "batch_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Iterator"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
      }
    }
  }
}
node {
  name: "MakeIterator"
  op: "MakeIterator"
  input: "BatchDataset"
  input: "Iterator"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Iterator"
      }
    }
  }
}
node {
  name: "IteratorToStringHandle"
  op: "IteratorToStringHandle"
  input: "Iterator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "IteratorGetNext"
  op: "IteratorGetNext"
  input: "Iterator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/acousticness/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/acousticness/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext"
  input: "dnn/input_from_feature_columns/input_layer/acousticness/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/acousticness/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/acousticness/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/acousticness/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/acousticness/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/acousticness/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/acousticness/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/acousticness/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/acousticness/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/acousticness/Shape"
  input: "dnn/input_from_feature_columns/input_layer/acousticness/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/acousticness/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/acousticness/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/acousticness/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/acousticness/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/acousticness/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/acousticness/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/acousticness/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/acousticness/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/acousticness/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/danceability/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/danceability/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:1"
  input: "dnn/input_from_feature_columns/input_layer/danceability/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/danceability/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/danceability/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/danceability/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/danceability/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/danceability/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/danceability/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/danceability/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/danceability/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/danceability/Shape"
  input: "dnn/input_from_feature_columns/input_layer/danceability/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/danceability/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/danceability/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/danceability/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/danceability/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/danceability/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/danceability/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/danceability/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/danceability/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/danceability/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/duration_ms/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/duration_ms/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:2"
  input: "dnn/input_from_feature_columns/input_layer/duration_ms/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/duration_ms/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/duration_ms/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/duration_ms/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/duration_ms/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/duration_ms/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/duration_ms/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/duration_ms/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/duration_ms/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/duration_ms/Shape"
  input: "dnn/input_from_feature_columns/input_layer/duration_ms/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/duration_ms/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/duration_ms/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/duration_ms/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/duration_ms/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/duration_ms/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/duration_ms/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/duration_ms/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/duration_ms/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/duration_ms/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/energy/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/energy/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:3"
  input: "dnn/input_from_feature_columns/input_layer/energy/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/energy/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/energy/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/energy/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/energy/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/energy/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/energy/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/energy/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/energy/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/energy/Shape"
  input: "dnn/input_from_feature_columns/input_layer/energy/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/energy/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/energy/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/energy/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/energy/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/energy/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/energy/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/energy/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/energy/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/energy/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/instrumentalness/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/instrumentalness/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:4"
  input: "dnn/input_from_feature_columns/input_layer/instrumentalness/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/instrumentalness/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/instrumentalness/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/instrumentalness/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/instrumentalness/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/instrumentalness/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/instrumentalness/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/instrumentalness/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/instrumentalness/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/instrumentalness/Shape"
  input: "dnn/input_from_feature_columns/input_layer/instrumentalness/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/instrumentalness/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/instrumentalness/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/instrumentalness/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/instrumentalness/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/instrumentalness/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/instrumentalness/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/instrumentalness/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/instrumentalness/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/instrumentalness/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/key/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/key/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:5"
  input: "dnn/input_from_feature_columns/input_layer/key/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/key/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/key/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/key/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/key/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/key/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/key/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/key/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/key/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/key/Shape"
  input: "dnn/input_from_feature_columns/input_layer/key/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/key/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/key/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/key/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/key/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/key/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/key/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/key/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/key/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/key/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/liveness/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/liveness/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:6"
  input: "dnn/input_from_feature_columns/input_layer/liveness/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/liveness/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/liveness/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/liveness/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/liveness/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/liveness/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/liveness/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/liveness/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/liveness/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/liveness/Shape"
  input: "dnn/input_from_feature_columns/input_layer/liveness/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/liveness/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/liveness/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/liveness/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/liveness/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/liveness/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/liveness/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/liveness/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/liveness/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/liveness/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/loudness/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/loudness/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:7"
  input: "dnn/input_from_feature_columns/input_layer/loudness/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/loudness/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/loudness/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/loudness/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/loudness/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/loudness/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/loudness/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/loudness/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/loudness/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/loudness/Shape"
  input: "dnn/input_from_feature_columns/input_layer/loudness/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/loudness/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/loudness/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/loudness/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/loudness/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/loudness/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/loudness/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/loudness/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/loudness/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/loudness/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/speechiness/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/speechiness/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:8"
  input: "dnn/input_from_feature_columns/input_layer/speechiness/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/speechiness/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/speechiness/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/speechiness/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/speechiness/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/speechiness/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/speechiness/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/speechiness/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/speechiness/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/speechiness/Shape"
  input: "dnn/input_from_feature_columns/input_layer/speechiness/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/speechiness/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/speechiness/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/speechiness/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/speechiness/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/speechiness/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/speechiness/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/speechiness/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/speechiness/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/speechiness/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/tempo/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/tempo/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:9"
  input: "dnn/input_from_feature_columns/input_layer/tempo/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/tempo/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/tempo/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/tempo/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/tempo/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/tempo/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/tempo/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/tempo/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/tempo/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/tempo/Shape"
  input: "dnn/input_from_feature_columns/input_layer/tempo/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/tempo/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/tempo/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/tempo/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/tempo/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/tempo/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/tempo/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/tempo/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/tempo/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/tempo/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/time_signature/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/time_signature/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:10"
  input: "dnn/input_from_feature_columns/input_layer/time_signature/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/time_signature/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/time_signature/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/time_signature/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/time_signature/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/time_signature/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/time_signature/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/time_signature/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/time_signature/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/time_signature/Shape"
  input: "dnn/input_from_feature_columns/input_layer/time_signature/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/time_signature/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/time_signature/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/time_signature/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/time_signature/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/time_signature/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/time_signature/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/time_signature/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/time_signature/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/time_signature/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/valence/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/valence/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:11"
  input: "dnn/input_from_feature_columns/input_layer/valence/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/valence/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/valence/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/valence/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/valence/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/valence/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/valence/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/valence/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/valence/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/valence/Shape"
  input: "dnn/input_from_feature_columns/input_layer/valence/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/valence/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/valence/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/valence/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/valence/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/valence/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/valence/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/valence/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/valence/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/valence/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concat"
  op: "ConcatV2"
  input: "dnn/input_from_feature_columns/input_layer/acousticness/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/danceability/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/duration_ms/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/energy/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/instrumentalness/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/key/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/liveness/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/loudness/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/speechiness/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/tempo/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/time_signature/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/valence/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/concat/axis"
  attr {
    key: "N"
    value {
      i: 12
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 12
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\014\000\000\000\005\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.5940885543823242
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5940885543823242
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/max"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/RandomUniform"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform"
  op: "Add"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/mul"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 12
        }
        dim {
          size: 5
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Assign"
  op: "Assign"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/read"
  op: "Identity"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/part_0/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/part_0"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/part_0/Assign"
  op: "Assign"
  input: "dnn/hiddenlayer_0/bias/part_0"
  input: "dnn/hiddenlayer_0/bias/part_0/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/part_0/read"
  op: "Identity"
  input: "dnn/hiddenlayer_0/bias/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel"
  op: "Identity"
  input: "dnn/hiddenlayer_0/kernel/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/MatMul"
  op: "MatMul"
  input: "dnn/input_from_feature_columns/input_layer/concat"
  input: "dnn/hiddenlayer_0/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias"
  op: "Identity"
  input: "dnn/hiddenlayer_0/bias/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/BiasAdd"
  op: "BiasAdd"
  input: "dnn/hiddenlayer_0/MatMul"
  input: "dnn/hiddenlayer_0/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/Relu"
  op: "Relu"
  input: "dnn/hiddenlayer_0/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/zero"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/Equal"
  op: "Equal"
  input: "dnn/hiddenlayer_0/Relu"
  input: "dnn/zero_fraction/zero"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/Cast"
  op: "Cast"
  input: "dnn/zero_fraction/Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/Mean"
  op: "Mean"
  input: "dnn/zero_fraction/Cast"
  input: "dnn/zero_fraction/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/fraction_of_zero_values/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/hiddenlayer_0/fraction_of_zero_values"
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/fraction_of_zero_values"
  op: "ScalarSummary"
  input: "dnn/dnn/hiddenlayer_0/fraction_of_zero_values/tags"
  input: "dnn/zero_fraction/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/activation/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/hiddenlayer_0/activation"
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/activation"
  op: "HistogramSummary"
  input: "dnn/dnn/hiddenlayer_0/activation/tag"
  input: "dnn/hiddenlayer_0/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1.0
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform/max"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform/RandomUniform"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Initializer/random_uniform"
  op: "Add"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform/mul"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Assign"
  op: "Assign"
  input: "dnn/logits/kernel/part_0"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/read"
  op: "Identity"
  input: "dnn/logits/kernel/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/bias/part_0/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/logits/bias/part_0"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/logits/bias/part_0/Assign"
  op: "Assign"
  input: "dnn/logits/bias/part_0"
  input: "dnn/logits/bias/part_0/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/logits/bias/part_0/read"
  op: "Identity"
  input: "dnn/logits/bias/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel"
  op: "Identity"
  input: "dnn/logits/kernel/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/MatMul"
  op: "MatMul"
  input: "dnn/hiddenlayer_0/Relu"
  input: "dnn/logits/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/logits/bias"
  op: "Identity"
  input: "dnn/logits/bias/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/BiasAdd"
  op: "BiasAdd"
  input: "dnn/logits/MatMul"
  input: "dnn/logits/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/zero_fraction_1/zero"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/Equal"
  op: "Equal"
  input: "dnn/logits/BiasAdd"
  input: "dnn/zero_fraction_1/zero"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/Cast"
  op: "Cast"
  input: "dnn/zero_fraction_1/Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/Mean"
  op: "Mean"
  input: "dnn/zero_fraction_1/Cast"
  input: "dnn/zero_fraction_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/dnn/logits/fraction_of_zero_values/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/logits/fraction_of_zero_values"
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/fraction_of_zero_values"
  op: "ScalarSummary"
  input: "dnn/dnn/logits/fraction_of_zero_values/tags"
  input: "dnn/zero_fraction_1/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/activation/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/logits/activation"
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/activation"
  op: "HistogramSummary"
  input: "dnn/dnn/logits/activation/tag"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/predictions/logits/Shape"
  op: "Shape"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/predictions/logits/assert_rank_at_least/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "dnn/head/predictions/logits/assert_rank_at_least/assert_type/statically_determined_correct_type"
  op: "NoOp"
}
node {
  name: "dnn/head/predictions/logits/assert_rank_at_least/static_checks_determined_all_ok"
  op: "NoOp"
}
node {
  name: "dnn/head/predictions/logistic"
  op: "Sigmoid"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/predictions/zeros_like"
  op: "ZerosLike"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/predictions/two_class_logits/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/head/predictions/two_class_logits"
  op: "ConcatV2"
  input: "dnn/head/predictions/zeros_like"
  input: "dnn/logits/BiasAdd"
  input: "dnn/head/predictions/two_class_logits/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/predictions/probabilities"
  op: "Softmax"
  input: "dnn/head/predictions/two_class_logits"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/predictions/class_ids/dimension"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/head/predictions/class_ids"
  op: "ArgMax"
  input: "dnn/head/predictions/two_class_logits"
  input: "dnn/head/predictions/class_ids/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "dnn/head/predictions/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/head/predictions/ExpandDims"
  op: "ExpandDims"
  input: "dnn/head/predictions/class_ids"
  input: "dnn/head/predictions/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/predictions/str_classes"
  op: "AsString"
  input: "dnn/head/predictions/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "fill"
    value {
      s: ""
    }
  }
  attr {
    key: "precision"
    value {
      i: -1
    }
  }
  attr {
    key: "scientific"
    value {
      b: false
    }
  }
  attr {
    key: "shortest"
    value {
      b: false
    }
  }
  attr {
    key: "width"
    value {
      i: -1
    }
  }
}
node {
  name: "dnn/head/labels/Shape"
  op: "Shape"
  input: "IteratorGetNext:12"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/labels/Shape_1"
  op: "Shape"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/labels/assert_rank_at_least/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_rank_at_least/Shape"
  op: "Shape"
  input: "IteratorGetNext:12"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/labels/assert_rank_at_least/assert_type/statically_determined_correct_type"
  op: "NoOp"
}
node {
  name: "dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  op: "NoOp"
}
node {
  name: "dnn/head/labels/strided_slice/stack"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/head/labels/strided_slice/stack_1"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/head/labels/strided_slice/stack_2"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/head/labels/strided_slice"
  op: "StridedSlice"
  input: "dnn/head/labels/Shape_1"
  input: "dnn/head/labels/strided_slice/stack"
  input: "dnn/head/labels/strided_slice/stack_1"
  input: "dnn/head/labels/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/head/labels/concat/values_1"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/head/labels/concat/axis"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/head/labels/concat"
  op: "ConcatV2"
  input: "dnn/head/labels/strided_slice"
  input: "dnn/head/labels/concat/values_1"
  input: "dnn/head/labels/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/Equal"
  op: "Equal"
  input: "dnn/head/labels/concat"
  input: "dnn/head/labels/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/Const"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/All"
  op: "All"
  input: "dnn/head/labels/assert_equal/Equal"
  input: "dnn/head/labels/assert_equal/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/Assert/Const"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "expected_labels_shape: "
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/Assert/Const_1"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "labels_shape: "
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/Assert/Assert/data_0"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "expected_labels_shape: "
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/Assert/Assert/data_2"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "labels_shape: "
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/Assert/Assert"
  op: "Assert"
  input: "dnn/head/labels/assert_equal/All"
  input: "dnn/head/labels/assert_equal/Assert/Assert/data_0"
  input: "dnn/head/labels/concat"
  input: "dnn/head/labels/assert_equal/Assert/Assert/data_2"
  input: "dnn/head/labels/Shape"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "dnn/head/labels"
  op: "Identity"
  input: "IteratorGetNext:12"
  input: "^dnn/head/labels/assert_equal/Assert/Assert"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/ToFloat"
  op: "Cast"
  input: "dnn/head/labels"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Less"
  op: "Less"
  input: "dnn/head/ToFloat"
  input: "dnn/head/assert_range/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/All"
  op: "All"
  input: "dnn/head/assert_range/assert_less/Less"
  input: "dnn/head/assert_range/assert_less/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Label IDs must < n_classes"
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x < y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (dnn/head/ToFloat:0) = "
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (dnn/head/assert_range/Const:0) = "
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Switch"
  op: "Switch"
  input: "dnn/head/assert_range/assert_less/All"
  input: "dnn/head/assert_range/assert_less/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/switch_t"
  op: "Identity"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/switch_f"
  op: "Identity"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/pred_id"
  op: "Identity"
  input: "dnn/head/assert_range/assert_less/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/NoOp"
  op: "NoOp"
  input: "^dnn/head/assert_range/assert_less/Assert/AssertGuard/switch_t"
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/control_dependency"
  op: "Identity"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/switch_t"
  input: "^dnn/head/assert_range/assert_less/Assert/AssertGuard/NoOp"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/assert_range/assert_less/Assert/AssertGuard/switch_t"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert/data_0"
  op: "Const"
  input: "^dnn/head/assert_range/assert_less/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Label IDs must < n_classes"
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert/data_1"
  op: "Const"
  input: "^dnn/head/assert_range/assert_less/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x < y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert/data_2"
  op: "Const"
  input: "^dnn/head/assert_range/assert_less/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (dnn/head/ToFloat:0) = "
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert/data_4"
  op: "Const"
  input: "^dnn/head/assert_range/assert_less/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (dnn/head/assert_range/Const:0) = "
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert"
  op: "Assert"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert/Switch"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert/data_0"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert/data_1"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert/data_2"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert/Switch_1"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert/data_4"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert/Switch_2"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_FLOAT
        type: DT_STRING
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert/Switch"
  op: "Switch"
  input: "dnn/head/assert_range/assert_less/All"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/assert_range/assert_less/All"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert/Switch_1"
  op: "Switch"
  input: "dnn/head/ToFloat"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/ToFloat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert/Switch_2"
  op: "Switch"
  input: "dnn/head/assert_range/Const"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/assert_range/Const"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/control_dependency_1"
  op: "Identity"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/switch_f"
  input: "^dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/assert_range/assert_less/Assert/AssertGuard/switch_f"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Merge"
  op: "Merge"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/control_dependency_1"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/LessEqual"
  op: "LessEqual"
  input: "dnn/head/assert_range/assert_non_negative/Const"
  input: "dnn/head/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/All"
  op: "All"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/LessEqual"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Label IDs must >= 0"
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x >= 0 did not hold element-wise:"
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (dnn/head/ToFloat:0) = "
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Switch"
  op: "Switch"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/All"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_t"
  op: "Identity"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
  op: "Identity"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/pred_id"
  op: "Identity"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/NoOp"
  op: "NoOp"
  input: "^dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_t"
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/control_dependency"
  op: "Identity"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_t"
  input: "^dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/NoOp"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_t"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_0"
  op: "Const"
  input: "^dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Label IDs must >= 0"
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_1"
  op: "Const"
  input: "^dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x >= 0 did not hold element-wise:"
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_2"
  op: "Const"
  input: "^dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (dnn/head/ToFloat:0) = "
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert"
  op: "Assert"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/Switch"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_0"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_1"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_2"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/Switch_1"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/Switch"
  op: "Switch"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/All"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/assert_range/assert_non_negative/assert_less_equal/All"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/Switch_1"
  op: "Switch"
  input: "dnn/head/ToFloat"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/ToFloat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/control_dependency_1"
  op: "Identity"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
  input: "^dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Merge"
  op: "Merge"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/control_dependency_1"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/Identity"
  op: "Identity"
  input: "dnn/head/ToFloat"
  input: "^dnn/head/assert_range/assert_less/Assert/AssertGuard/Merge"
  input: "^dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/logistic_loss/zeros_like"
  op: "ZerosLike"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/logistic_loss/GreaterEqual"
  op: "GreaterEqual"
  input: "dnn/logits/BiasAdd"
  input: "dnn/head/logistic_loss/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/logistic_loss/Select"
  op: "Select"
  input: "dnn/head/logistic_loss/GreaterEqual"
  input: "dnn/logits/BiasAdd"
  input: "dnn/head/logistic_loss/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/logistic_loss/Neg"
  op: "Neg"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/logistic_loss/Select_1"
  op: "Select"
  input: "dnn/head/logistic_loss/GreaterEqual"
  input: "dnn/head/logistic_loss/Neg"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/logistic_loss/mul"
  op: "Mul"
  input: "dnn/logits/BiasAdd"
  input: "dnn/head/assert_range/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/logistic_loss/sub"
  op: "Sub"
  input: "dnn/head/logistic_loss/Select"
  input: "dnn/head/logistic_loss/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/logistic_loss/Exp"
  op: "Exp"
  input: "dnn/head/logistic_loss/Select_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/logistic_loss/Log1p"
  op: "Log1p"
  input: "dnn/head/logistic_loss/Exp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/logistic_loss"
  op: "Add"
  input: "dnn/head/logistic_loss/sub"
  input: "dnn/head/logistic_loss/Log1p"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/weighted_loss/assert_broadcastable/weights"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/head/weighted_loss/assert_broadcastable/weights/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/weighted_loss/assert_broadcastable/weights/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/head/weighted_loss/assert_broadcastable/values/shape"
  op: "Shape"
  input: "dnn/head/logistic_loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/weighted_loss/assert_broadcastable/values/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "dnn/head/weighted_loss/assert_broadcastable/static_scalar_check_success"
  op: "NoOp"
}
node {
  name: "dnn/head/weighted_loss/ToFloat_1/x"
  op: "Const"
  input: "^dnn/head/weighted_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/head/weighted_loss/Mul"
  op: "Mul"
  input: "dnn/head/logistic_loss"
  input: "dnn/head/weighted_loss/ToFloat_1/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/weighted_loss/Const"
  op: "Const"
  input: "^dnn/head/weighted_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/head/weighted_loss/Sum"
  op: "Sum"
  input: "dnn/head/weighted_loss/Mul"
  input: "dnn/head/weighted_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/grad_ys_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/head/gradients/Fill"
  op: "Fill"
  input: "dnn/head/gradients/Shape"
  input: "dnn/head/gradients/grad_ys_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Sum_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Sum_grad/Reshape"
  op: "Reshape"
  input: "dnn/head/gradients/Fill"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Sum_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Sum_grad/Shape"
  op: "Shape"
  input: "dnn/head/weighted_loss/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Sum_grad/Tile"
  op: "Tile"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Sum_grad/Reshape"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Sum_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Shape"
  op: "Shape"
  input: "dnn/head/logistic_loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Shape"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Mul"
  op: "Mul"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Sum_grad/Tile"
  input: "dnn/head/weighted_loss/ToFloat_1/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Sum"
  op: "Sum"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Mul"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Reshape"
  op: "Reshape"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Sum"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Mul_1"
  op: "Mul"
  input: "dnn/head/logistic_loss"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Sum_1"
  op: "Sum"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Mul_1"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Reshape_1"
  op: "Reshape"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Sum_1"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Reshape"
  input: "^dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Reshape_1"
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Reshape"
  input: "^dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Reshape_1"
  input: "^dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss_grad/Shape"
  op: "Shape"
  input: "dnn/head/logistic_loss/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss_grad/Shape_1"
  op: "Shape"
  input: "dnn/head/logistic_loss/Log1p"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "dnn/head/gradients/dnn/head/logistic_loss_grad/Shape"
  input: "dnn/head/gradients/dnn/head/logistic_loss_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss_grad/Sum"
  op: "Sum"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/tuple/control_dependency"
  input: "dnn/head/gradients/dnn/head/logistic_loss_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss_grad/Reshape"
  op: "Reshape"
  input: "dnn/head/gradients/dnn/head/logistic_loss_grad/Sum"
  input: "dnn/head/gradients/dnn/head/logistic_loss_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss_grad/Sum_1"
  op: "Sum"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/tuple/control_dependency"
  input: "dnn/head/gradients/dnn/head/logistic_loss_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss_grad/Reshape_1"
  op: "Reshape"
  input: "dnn/head/gradients/dnn/head/logistic_loss_grad/Sum_1"
  input: "dnn/head/gradients/dnn/head/logistic_loss_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/dnn/head/logistic_loss_grad/Reshape"
  input: "^dnn/head/gradients/dnn/head/logistic_loss_grad/Reshape_1"
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/dnn/head/logistic_loss_grad/Reshape"
  input: "^dnn/head/gradients/dnn/head/logistic_loss_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/logistic_loss_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/head/logistic_loss_grad/Reshape_1"
  input: "^dnn/head/gradients/dnn/head/logistic_loss_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/logistic_loss_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Shape"
  op: "Shape"
  input: "dnn/head/logistic_loss/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Shape_1"
  op: "Shape"
  input: "dnn/head/logistic_loss/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Shape"
  input: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Sum"
  op: "Sum"
  input: "dnn/head/gradients/dnn/head/logistic_loss_grad/tuple/control_dependency"
  input: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Reshape"
  op: "Reshape"
  input: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Sum"
  input: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Sum_1"
  op: "Sum"
  input: "dnn/head/gradients/dnn/head/logistic_loss_grad/tuple/control_dependency"
  input: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Neg"
  op: "Neg"
  input: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Reshape_1"
  op: "Reshape"
  input: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Neg"
  input: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Reshape"
  input: "^dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Reshape_1"
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Reshape"
  input: "^dnn/head/gradients/dnn/head/logistic_loss/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Reshape_1"
  input: "^dnn/head/gradients/dnn/head/logistic_loss/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Log1p_grad/add/x"
  op: "Const"
  input: "^dnn/head/gradients/dnn/head/logistic_loss_grad/tuple/control_dependency_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Log1p_grad/add"
  op: "Add"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Log1p_grad/add/x"
  input: "dnn/head/logistic_loss/Exp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Log1p_grad/Reciprocal"
  op: "Reciprocal"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Log1p_grad/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Log1p_grad/mul"
  op: "Mul"
  input: "dnn/head/gradients/dnn/head/logistic_loss_grad/tuple/control_dependency_1"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Log1p_grad/Reciprocal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Select_grad/zeros_like"
  op: "ZerosLike"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Select_grad/Select"
  op: "Select"
  input: "dnn/head/logistic_loss/GreaterEqual"
  input: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/tuple/control_dependency"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Select_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Select_grad/Select_1"
  op: "Select"
  input: "dnn/head/logistic_loss/GreaterEqual"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Select_grad/zeros_like"
  input: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Select_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/dnn/head/logistic_loss/Select_grad/Select"
  input: "^dnn/head/gradients/dnn/head/logistic_loss/Select_grad/Select_1"
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Select_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Select_grad/Select"
  input: "^dnn/head/gradients/dnn/head/logistic_loss/Select_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/logistic_loss/Select_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Select_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Select_grad/Select_1"
  input: "^dnn/head/gradients/dnn/head/logistic_loss/Select_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/logistic_loss/Select_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Shape"
  op: "Shape"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Shape_1"
  op: "Shape"
  input: "dnn/head/assert_range/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Shape"
  input: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Mul"
  op: "Mul"
  input: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/tuple/control_dependency_1"
  input: "dnn/head/assert_range/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Sum"
  op: "Sum"
  input: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Mul"
  input: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Reshape"
  op: "Reshape"
  input: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Sum"
  input: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Mul_1"
  op: "Mul"
  input: "dnn/logits/BiasAdd"
  input: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Sum_1"
  op: "Sum"
  input: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Mul_1"
  input: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Reshape_1"
  op: "Reshape"
  input: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Sum_1"
  input: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Reshape"
  input: "^dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Reshape_1"
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Reshape"
  input: "^dnn/head/gradients/dnn/head/logistic_loss/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Reshape_1"
  input: "^dnn/head/gradients/dnn/head/logistic_loss/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Exp_grad/mul"
  op: "Mul"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Log1p_grad/mul"
  input: "dnn/head/logistic_loss/Exp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/zeros_like"
  op: "ZerosLike"
  input: "dnn/head/logistic_loss/Neg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/Select"
  op: "Select"
  input: "dnn/head/logistic_loss/GreaterEqual"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Exp_grad/mul"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/Select_1"
  op: "Select"
  input: "dnn/head/logistic_loss/GreaterEqual"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/zeros_like"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Exp_grad/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/Select"
  input: "^dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/Select_1"
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/Select"
  input: "^dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/Select_1"
  input: "^dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Neg_grad/Neg"
  op: "Neg"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/AddN"
  op: "AddN"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Select_grad/tuple/control_dependency"
  input: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/tuple/control_dependency"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/tuple/control_dependency_1"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Neg_grad/Neg"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/logistic_loss/Select_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/logits/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "dnn/head/gradients/AddN"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/logits/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/AddN"
  input: "^dnn/head/gradients/dnn/logits/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "dnn/head/gradients/dnn/logits/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/AddN"
  input: "^dnn/head/gradients/dnn/logits/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/logistic_loss/Select_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/logits/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/logits/BiasAdd_grad/BiasAddGrad"
  input: "^dnn/head/gradients/dnn/logits/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/logits/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/logits/MatMul_grad/MatMul"
  op: "MatMul"
  input: "dnn/head/gradients/dnn/logits/BiasAdd_grad/tuple/control_dependency"
  input: "dnn/logits/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/logits/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dnn/hiddenlayer_0/Relu"
  input: "dnn/head/gradients/dnn/logits/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/logits/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/dnn/logits/MatMul_grad/MatMul"
  input: "^dnn/head/gradients/dnn/logits/MatMul_grad/MatMul_1"
}
node {
  name: "dnn/head/gradients/dnn/logits/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/dnn/logits/MatMul_grad/MatMul"
  input: "^dnn/head/gradients/dnn/logits/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/logits/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/logits/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/logits/MatMul_grad/MatMul_1"
  input: "^dnn/head/gradients/dnn/logits/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/logits/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "dnn/head/gradients/dnn/logits/MatMul_grad/tuple/control_dependency"
  input: "dnn/hiddenlayer_0/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "dnn/head/gradients/dnn/hiddenlayer_0/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/BiasAddGrad"
  input: "^dnn/head/gradients/dnn/hiddenlayer_0/Relu_grad/ReluGrad"
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/dnn/hiddenlayer_0/Relu_grad/ReluGrad"
  input: "^dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_0/Relu_grad/ReluGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/BiasAddGrad"
  input: "^dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul"
  op: "MatMul"
  input: "dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/control_dependency"
  input: "dnn/hiddenlayer_0/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 12
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dnn/input_from_feature_columns/input_layer/concat"
  input: "dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul"
  input: "^dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul_1"
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul"
  input: "^dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 12
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul_1"
  input: "^dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 12
          }
          dim {
            size: 5
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 12
        }
        dim {
          size: 5
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad/Assign"
  op: "Assign"
  input: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad"
  input: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad/read"
  op: "Identity"
  input: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad/Assign"
  op: "Assign"
  input: "dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad"
  input: "dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad/read"
  op: "Identity"
  input: "dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/kernel/part_0/Adagrad/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/kernel/part_0/Adagrad"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/dnn/logits/kernel/part_0/Adagrad/Assign"
  op: "Assign"
  input: "dnn/dnn/logits/kernel/part_0/Adagrad"
  input: "dnn/dnn/logits/kernel/part_0/Adagrad/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/dnn/logits/kernel/part_0/Adagrad/read"
  op: "Identity"
  input: "dnn/dnn/logits/kernel/part_0/Adagrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/bias/part_0/Adagrad/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/bias/part_0/Adagrad"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/dnn/logits/bias/part_0/Adagrad/Assign"
  op: "Assign"
  input: "dnn/dnn/logits/bias/part_0/Adagrad"
  input: "dnn/dnn/logits/bias/part_0/Adagrad/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/dnn/logits/bias/part_0/Adagrad/read"
  op: "Identity"
  input: "dnn/dnn/logits/bias/part_0/Adagrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/Adagrad/learning_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.05000000074505806
      }
    }
  }
}
node {
  name: "dnn/head/Adagrad/update_dnn/hiddenlayer_0/kernel/part_0/ApplyAdagrad"
  op: "ApplyAdagrad"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  input: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad"
  input: "dnn/head/Adagrad/learning_rate"
  input: "dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/Adagrad/update_dnn/hiddenlayer_0/bias/part_0/ApplyAdagrad"
  op: "ApplyAdagrad"
  input: "dnn/hiddenlayer_0/bias/part_0"
  input: "dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad"
  input: "dnn/head/Adagrad/learning_rate"
  input: "dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/Adagrad/update_dnn/logits/kernel/part_0/ApplyAdagrad"
  op: "ApplyAdagrad"
  input: "dnn/logits/kernel/part_0"
  input: "dnn/dnn/logits/kernel/part_0/Adagrad"
  input: "dnn/head/Adagrad/learning_rate"
  input: "dnn/head/gradients/dnn/logits/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/Adagrad/update_dnn/logits/bias/part_0/ApplyAdagrad"
  op: "ApplyAdagrad"
  input: "dnn/logits/bias/part_0"
  input: "dnn/dnn/logits/bias/part_0/Adagrad"
  input: "dnn/head/Adagrad/learning_rate"
  input: "dnn/head/gradients/dnn/logits/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/Adagrad/update"
  op: "NoOp"
  input: "^dnn/head/Adagrad/update_dnn/hiddenlayer_0/bias/part_0/ApplyAdagrad"
  input: "^dnn/head/Adagrad/update_dnn/hiddenlayer_0/kernel/part_0/ApplyAdagrad"
  input: "^dnn/head/Adagrad/update_dnn/logits/bias/part_0/ApplyAdagrad"
  input: "^dnn/head/Adagrad/update_dnn/logits/kernel/part_0/ApplyAdagrad"
}
node {
  name: "dnn/head/Adagrad/value"
  op: "Const"
  input: "^dnn/head/Adagrad/update"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "dnn/head/Adagrad"
  op: "AssignAdd"
  input: "global_step"
  input: "dnn/head/Adagrad/value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/ones_like/Shape"
  op: "Shape"
  input: "dnn/head/logistic_loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/ones_like/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/head/ones_like"
  op: "Fill"
  input: "dnn/head/ones_like/Shape"
  input: "dnn/head/ones_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/mul/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/head/mul"
  op: "Mul"
  input: "dnn/head/mul/x"
  input: "dnn/head/ones_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/head/Sum"
  op: "Sum"
  input: "dnn/head/mul"
  input: "dnn/head/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/truediv"
  op: "RealDiv"
  input: "dnn/head/weighted_loss/Sum"
  input: "dnn/head/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "loss/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "loss"
      }
    }
  }
}
node {
  name: "loss"
  op: "ScalarSummary"
  input: "loss/tags"
  input: "dnn/head/weighted_loss/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "average_loss/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "average_loss"
      }
    }
  }
}
node {
  name: "average_loss"
  op: "ScalarSummary"
  input: "average_loss/tags"
  input: "dnn/head/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "init"
  op: "NoOp"
  input: "^dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad/Assign"
  input: "^dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad/Assign"
  input: "^dnn/dnn/logits/bias/part_0/Adagrad/Assign"
  input: "^dnn/dnn/logits/kernel/part_0/Adagrad/Assign"
  input: "^dnn/hiddenlayer_0/bias/part_0/Assign"
  input: "^dnn/hiddenlayer_0/kernel/part_0/Assign"
  input: "^dnn/logits/bias/part_0/Assign"
  input: "^dnn/logits/kernel/part_0/Assign"
  input: "^global_step/Assign"
}
node {
  name: "init_1"
  op: "NoOp"
}
node {
  name: "group_deps"
  op: "NoOp"
  input: "^init"
  input: "^init_1"
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_0/bias/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "dnn/logits/kernel/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "dnn/logits/bias/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "dnn/dnn/logits/kernel/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "dnn/dnn/logits/bias/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/stack"
  op: "Pack"
  input: "report_uninitialized_variables/IsVariableInitialized"
  input: "report_uninitialized_variables/IsVariableInitialized_1"
  input: "report_uninitialized_variables/IsVariableInitialized_2"
  input: "report_uninitialized_variables/IsVariableInitialized_3"
  input: "report_uninitialized_variables/IsVariableInitialized_4"
  input: "report_uninitialized_variables/IsVariableInitialized_5"
  input: "report_uninitialized_variables/IsVariableInitialized_6"
  input: "report_uninitialized_variables/IsVariableInitialized_7"
  input: "report_uninitialized_variables/IsVariableInitialized_8"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 9
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 9
          }
        }
        string_val: "global_step"
        string_val: "dnn/hiddenlayer_0/kernel/part_0"
        string_val: "dnn/hiddenlayer_0/bias/part_0"
        string_val: "dnn/logits/kernel/part_0"
        string_val: "dnn/logits/bias/part_0"
        string_val: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad"
        string_val: "dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad"
        string_val: "dnn/dnn/logits/kernel/part_0/Adagrad"
        string_val: "dnn/dnn/logits/bias/part_0/Adagrad"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 9
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables/boolean_mask/strided_slice"
  input: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 9
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 9
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_variables/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables/boolean_mask/concat/values_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  input: "report_uninitialized_variables/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables/Const"
  input: "report_uninitialized_variables/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables/LogicalNot"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/GatherV2/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/GatherV2"
  op: "GatherV2"
  input: "report_uninitialized_variables/boolean_mask/Reshape"
  input: "report_uninitialized_variables/boolean_mask/Squeeze"
  input: "report_uninitialized_variables/boolean_mask/GatherV2/axis"
  device: "/device:CPU:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_resources/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/GatherV2"
  input: "report_uninitialized_resources/Const"
  input: "concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_0/bias/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "dnn/logits/kernel/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "dnn/logits/bias/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "dnn/dnn/logits/kernel/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "dnn/dnn/logits/bias/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/stack"
  op: "Pack"
  input: "report_uninitialized_variables_1/IsVariableInitialized"
  input: "report_uninitialized_variables_1/IsVariableInitialized_1"
  input: "report_uninitialized_variables_1/IsVariableInitialized_2"
  input: "report_uninitialized_variables_1/IsVariableInitialized_3"
  input: "report_uninitialized_variables_1/IsVariableInitialized_4"
  input: "report_uninitialized_variables_1/IsVariableInitialized_5"
  input: "report_uninitialized_variables_1/IsVariableInitialized_6"
  input: "report_uninitialized_variables_1/IsVariableInitialized_7"
  input: "report_uninitialized_variables_1/IsVariableInitialized_8"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 9
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables_1/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 9
          }
        }
        string_val: "global_step"
        string_val: "dnn/hiddenlayer_0/kernel/part_0"
        string_val: "dnn/hiddenlayer_0/bias/part_0"
        string_val: "dnn/logits/kernel/part_0"
        string_val: "dnn/logits/bias/part_0"
        string_val: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad"
        string_val: "dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad"
        string_val: "dnn/dnn/logits/kernel/part_0/Adagrad"
        string_val: "dnn/dnn/logits/bias/part_0/Adagrad"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 9
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  input: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 9
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 9
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape_2"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_variables_1/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables_1/boolean_mask/concat/values_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2"
  input: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables_1/Const"
  input: "report_uninitialized_variables_1/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables_1/LogicalNot"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables_1/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/GatherV2/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/GatherV2"
  op: "GatherV2"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape"
  input: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  input: "report_uninitialized_variables_1/boolean_mask/GatherV2/axis"
  device: "/device:CPU:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "init_2"
  op: "NoOp"
}
node {
  name: "init_all_tables"
  op: "NoOp"
}
node {
  name: "init_3"
  op: "NoOp"
}
node {
  name: "group_deps_1"
  op: "NoOp"
  input: "^init_2"
  input: "^init_3"
  input: "^init_all_tables"
}
node {
  name: "Merge/MergeSummary"
  op: "MergeSummary"
  input: "dnn/dnn/hiddenlayer_0/fraction_of_zero_values"
  input: "dnn/dnn/hiddenlayer_0/activation"
  input: "dnn/dnn/logits/fraction_of_zero_values"
  input: "dnn/dnn/logits/activation"
  input: "loss"
  input: "average_loss"
  attr {
    key: "N"
    value {
      i: 6
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save/StringJoin/inputs_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "_temp_d6c7b91a9f1644aa80ee826fd78f106c/part"
      }
    }
  }
}
node {
  name: "save/StringJoin"
  op: "StringJoin"
  input: "save/Const"
  input: "save/StringJoin/inputs_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "separator"
    value {
      s: ""
    }
  }
}
node {
  name: "save/num_shards"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "save/ShardedFilename/shard"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "save/ShardedFilename"
  op: "ShardedFilename"
  input: "save/StringJoin"
  input: "save/ShardedFilename/shard"
  input: "save/num_shards"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/SaveV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 9
          }
        }
        string_val: "dnn/hiddenlayer_0/bias"
        string_val: "dnn/hiddenlayer_0/bias/t_0/Adagrad"
        string_val: "dnn/hiddenlayer_0/kernel"
        string_val: "dnn/hiddenlayer_0/kernel/t_0/Adagrad"
        string_val: "dnn/logits/bias"
        string_val: "dnn/logits/bias/t_0/Adagrad"
        string_val: "dnn/logits/kernel"
        string_val: "dnn/logits/kernel/t_0/Adagrad"
        string_val: "global_step"
      }
    }
  }
}
node {
  name: "save/SaveV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 9
          }
        }
        string_val: "5 0,5"
        string_val: "5 0,5"
        string_val: "12 5 0,12:0,5"
        string_val: "12 5 0,12:0,5"
        string_val: "1 0,1"
        string_val: "1 0,1"
        string_val: "5 1 0,5:0,1"
        string_val: "5 1 0,5:0,1"
        string_val: ""
      }
    }
  }
}
node {
  name: "save/SaveV2"
  op: "SaveV2"
  input: "save/ShardedFilename"
  input: "save/SaveV2/tensor_names"
  input: "save/SaveV2/shape_and_slices"
  input: "dnn/hiddenlayer_0/bias/part_0/read"
  input: "dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad/read"
  input: "dnn/hiddenlayer_0/kernel/part_0/read"
  input: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad/read"
  input: "dnn/logits/bias/part_0/read"
  input: "dnn/dnn/logits/bias/part_0/Adagrad/read"
  input: "dnn/logits/kernel/part_0/read"
  input: "dnn/dnn/logits/kernel/part_0/Adagrad/read"
  input: "global_step"
  device: "/device:CPU:0"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
      }
    }
  }
}
node {
  name: "save/control_dependency"
  op: "Identity"
  input: "save/ShardedFilename"
  input: "^save/SaveV2"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/ShardedFilename"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/MergeV2Checkpoints/checkpoint_prefixes"
  op: "Pack"
  input: "save/ShardedFilename"
  input: "^save/control_dependency"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "save/MergeV2Checkpoints"
  op: "MergeV2Checkpoints"
  input: "save/MergeV2Checkpoints/checkpoint_prefixes"
  input: "save/Const"
  device: "/device:CPU:0"
  attr {
    key: "delete_old_dirs"
    value {
      b: true
    }
  }
}
node {
  name: "save/Identity"
  op: "Identity"
  input: "save/Const"
  input: "^save/MergeV2Checkpoints"
  input: "^save/control_dependency"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/RestoreV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 9
          }
        }
        string_val: "dnn/hiddenlayer_0/bias"
        string_val: "dnn/hiddenlayer_0/bias/t_0/Adagrad"
        string_val: "dnn/hiddenlayer_0/kernel"
        string_val: "dnn/hiddenlayer_0/kernel/t_0/Adagrad"
        string_val: "dnn/logits/bias"
        string_val: "dnn/logits/bias/t_0/Adagrad"
        string_val: "dnn/logits/kernel"
        string_val: "dnn/logits/kernel/t_0/Adagrad"
        string_val: "global_step"
      }
    }
  }
}
node {
  name: "save/RestoreV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 9
          }
        }
        string_val: "5 0,5"
        string_val: "5 0,5"
        string_val: "12 5 0,12:0,5"
        string_val: "12 5 0,12:0,5"
        string_val: "1 0,1"
        string_val: "1 0,1"
        string_val: "5 1 0,5:0,1"
        string_val: "5 1 0,5:0,1"
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2/tensor_names"
  input: "save/RestoreV2/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
        shape {
          dim {
            size: 5
          }
        }
        shape {
          dim {
            size: 12
          }
          dim {
            size: 5
          }
        }
        shape {
          dim {
            size: 12
          }
          dim {
            size: 5
          }
        }
        shape {
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
      }
    }
  }
}
node {
  name: "save/Assign"
  op: "Assign"
  input: "dnn/hiddenlayer_0/bias/part_0"
  input: "save/RestoreV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_1"
  op: "Assign"
  input: "dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad"
  input: "save/RestoreV2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_2"
  op: "Assign"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  input: "save/RestoreV2:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_3"
  op: "Assign"
  input: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad"
  input: "save/RestoreV2:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_4"
  op: "Assign"
  input: "dnn/logits/bias/part_0"
  input: "save/RestoreV2:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_5"
  op: "Assign"
  input: "dnn/dnn/logits/bias/part_0/Adagrad"
  input: "save/RestoreV2:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_6"
  op: "Assign"
  input: "dnn/logits/kernel/part_0"
  input: "save/RestoreV2:6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_7"
  op: "Assign"
  input: "dnn/dnn/logits/kernel/part_0/Adagrad"
  input: "save/RestoreV2:7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_8"
  op: "Assign"
  input: "global_step"
  input: "save/RestoreV2:8"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_shard"
  op: "NoOp"
  input: "^save/Assign"
  input: "^save/Assign_1"
  input: "^save/Assign_2"
  input: "^save/Assign_3"
  input: "^save/Assign_4"
  input: "^save/Assign_5"
  input: "^save/Assign_6"
  input: "^save/Assign_7"
  input: "^save/Assign_8"
}
node {
  name: "save/restore_all"
  op: "NoOp"
  input: "^save/restore_shard"
}
versions {
  producer: 26
}
