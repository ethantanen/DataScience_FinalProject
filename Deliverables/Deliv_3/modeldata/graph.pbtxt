node {
  name: "global_step/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global_step/Assign"
  op: "Assign"
  input: "global_step"
  input: "global_step/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global_step/read"
  op: "Identity"
  input: "global_step"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "global_step/cond/Switch"
  op: "Switch"
  input: "global_step/IsVariableInitialized"
  input: "global_step/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/switch_t"
  op: "Identity"
  input: "global_step/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/switch_f"
  op: "Identity"
  input: "global_step/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/pred_id"
  op: "Identity"
  input: "global_step/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/read"
  op: "Identity"
  input: "global_step/cond/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/read/Switch"
  op: "RefSwitch"
  input: "global_step"
  input: "global_step/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/Switch_1"
  op: "Switch"
  input: "global_step/Initializer/zeros"
  input: "global_step/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/Merge"
  op: "Merge"
  input: "global_step/cond/Switch_1"
  input: "global_step/cond/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/add/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step/add"
  op: "Add"
  input: "global_step/cond/Merge"
  input: "global_step/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "tensors/component_0"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 750
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 750
          }
        }
        tensor_content: "\363\024NEB\236\351\277\016[\260\266\3412\332?\270\356\317\344\253\371\326\2778(\301\216\335\255\334?\224\222\235\257k\031\327\277H\276\241R\361\313\347\277s\237\325R6!\366?\341\342\257R/7\344\277\207Jq\246>\r\301?\320\247\332\220\224\240\277\277%\003g\204l\232\326\277\233\256J1=3\326\277\026\233\335-\362\305\334\277B\023\275\344\003\300\333\277+k\370\377\254\306c?\317L\256\341z\027\342\2774\203\313\340\"\322\210\277\242\342\206\360s\233\242\277\364Szhk\024\002@\373b\242\303\303(\352\277q@B\362\205\t\345\277\345\246\260\364\036m\271\277\'\220\374\274,\016\352\277\3100\001`\251\375\342\277\210\213t\201\026?\361?\221\363}.\356\301\322?\315\241\337\002e\230\345\277\317\204\347\3447\246\350\277\325^\204\353\361`\323\277\266?\226T\321^\352\277\203\363&\374%D\352\277-\277\265_\217r\336\277N\'\227\362gz\326?\241\246w\275\317\323\321?\201\031\326\266%\357\317?\244\025h\353u\212\332\277\370\337\270\356D!\333\2778(\301\216\335\255\334?\220\014\217D\'w\264\277\244,\206(\024v\264?I\374\277\225\321h\352\277\345\021~z\323r\322\277>Xp\213W\240\360?\304\n\223\365T\240\345\277\"\306}<\2268\263?\355o;w\274\353\345\277\037\211($a!\343\277CU\254\262z\035\311\277\322\203\204\000\212\311\210?>Xp\213W\240\360?\010\"\352iB%\347\277\003\224\023\251Y\230\347\2771\345#\312\343\317\333\277\002\345\ne\353?\t@\310Er\212Wc\352\277{1\374\007O\024\007@\276\337\361\312\240g\352\277\254$\233R\303w\351\277\241\361\306H\226\017\340\277\315\241\337\002e\230\345\277%\003g\204l\232\326\277>t\235c\206h\327?\243\016\225\\@S\351\277\262Db1\311\337\347\277TL\031j\035\254\366?I\212\247@A\n\252?D\206\350\245\221\353\370?\207Jq\246>\r\301?\'\335\016\251\357\311\350\277\246Ss\216\232r\351\277\371\270\244\276\333h\352\277\255\250IG\301f\352\277/b\233;`\005\347?\275\036\025\307Z\'\342\277\343fE\201\362.\375?Vss\307\0205\321?>HR;\001=\352\277L|\247f\261\371\342\277\242\177\311\324\350\022\316?H*$\006\272I\351\277H\333\272\035\277\277\333?f?~l+\374\261\277R\355\205\tm\224\345\277/t[\266\377\301\350\277/\270\2551 =\360?]\231\201\365\377\n\352\277hA\215\216\341\341\342\277\353\331{\263\216r\322?\314\257\227\310o\026\245\277\242\342\206\360s\233\242\277\235\374\360L\357J\352\277\246\037?c\320Z\350\277\276\t<\336T\372\351\277+\222?\307\313\337\362?\023\347\303\026\316?\351\277\300\370G\263I\035\364?w\002W\263ac\352\277\346\341N\'\374\321\326\277\277\2425\275\211\345\352?\034c\272\271\014\304\345\277\003\362\244\207\223\367\333\277s#J\324X\027\350\277\016\020\365\306VE\352\277\312\253\240\353\347\333\343\277\373\374\306\233I\240\347\277\223v\205`\264P\226?\336c\326a\230\177\001@\342\262\200\377W\226\350\277\220\014\217D\'w\264\277E\370\221\216K\260\341\277\255\356\243\306\374\337\307\277\215\210\260\2509\274\311\277\332.k\'\362L\347\277q@B\362\205\t\345\277\211\247\241YE\007\330?\204\337\243 \212\007\330\277\366?\255z(\236\371?U\023\364s\301\361\342\277\3368\315f\270\343\364?\216\321\336i\252\002\352\277\337g\3339\213\366\006@\317\371\226\000\020\361\266?\227\027\024\263\004\310\345\277\331\263\313\233\263n\346\277W\310Y1\327\005\352\277\314*EO\0311\352\277\224\222\235\257k\031\327\277\231\373\222O\342\307\345?\272\254k\336\240b\371??\'UE\341\323\347\277\006\302\240H\325\272\351\277\232p\247\272 e\352\277\266:\241HF\234\351\277\305Q\311\310c\004\t@\0224\326\002\221\373\347\277TL\031j\035\254\366?\332\022_\374c\206\367?\372\224^E\265p\345\277/\014\363_k\222\346\277(u\307\377\373\233\335?7\346\321\300fP\317?\326\n\212\353\267\226\351\277\r+`\266i\220\347\277\242\177\311\324\350\022\316?\\/\241\365\222\013\342\277e*\034\364\336Y\002@\306\355\232\327\'\256\350\277/b\233;`\005\347?-V\326N\360P\317\277\305\244\242H\231@\351\277\305\253\212\\\020O\324\277\201\031\326\266%\357\317?\364\351y\327\307d\331\2775E\230\377i\236\342\277I|\262\204zn\352? \277\324\370\003\t\352\277\014\026\234R\245:\351\277\024w<\213\022K\342\277\311w73\270a\006@\254\037\340\271\023\256\367?\037\257\241\254~\363\347?\317\034\177\216\243v\346\277\326\376%EC\037\334\277P\n~\'\232\206\342\277\242\342\206\360s\233\242\277\001G\326\250}x\337\277\030\271\327\315\225p\366?\274\207\364\327\371H\341?\364Szhk\024\002@\262Db1\311\337\347\277\220c\317\207\307\335\350\277\312\253\240\353\347\333\343\277,\301M\232\236\362\004@\215\261\216`wd\305?\345\021~z\323r\322\277\001G\326\250}x\337\277|m\204\365\245S\351\277\376\272\314\257\t\316\342\277\220\n\'\373ii\352\277\241\275]\220f\225\002@D\265+\006\312`\347\277\014\313\026\225\374%\352\277\022\314m\254\374\313\345\277\241)\000LS\236\346\277!G\371\252\273\354\001@!\325\017\027\323P\345?\217\211H\020\345\257\355?CU\254\262z\035\311\277H\333\272\035\277\277\333?0E\202p\222\021\323\277\360\032\325\310l\010\006@\347S\216\365\352\321\346\277\220\373f13\256\346\277\225\030\000\246\243\363\362?\306\353\r\251\r\007\351\277\352\021\224\t\253\377\341\277\273sF\350D\250\345\277\212\025v\030x \240\277f\306\355\002\243\003\342\277$\224\270\260\007\347\273?\374\005\'Y\231~\330\277\246\267\326\014<+\346\277\t\235\211\365\200\003\350\277hy\306\221\236p\351\277\267s0Ym\033\326\277\237\377w\204\312\362\351\277>J\337i\033\344\351\277\023\247\214\213\212\355\324?\0333\213f5#\352\277\210\253P\3671\032\n@\372ZXz\203\377\333\277\312{q\230\020;\350\277\354$\313>U\256\340\277L\344\017\275E)\345\277\007\352\260f\205\226\340\277 \004\310\257\237\377\343\277N\307\027\237\0307\350\277P@\250\010\241/\270\277\003\224\023\251Y\230\347\277\000\316\003\345\263|\341\277\264\025\252\230\3740\351?\014\031\301\350j\325\314?\351\000\325}\331 \351\277\263t\2621A\202\332?\241<B\237\306\301\354?\242\342\206\360s\233\242\277\354zs\032J!\341?\376+\225\303\355\333\325\277\320\247\332\220\224\240\277\277Vss\307\0205\321?\300\254\353\207C\264\341\277-\277\265_\217r\336\277Wr\207\324q\t\364?\037\005\264\242>+\361?g-\213\0239\t\376?\367\007\377>\327\325\342?\243\207\206\014\304\210\303\277I\374\277\225\321h\352\277\013x\207\'n#\340\277\024\337\244\341\246z\344\277\317\371\226\000\020\361\266?\345\010\036\275\203\224\341\277x\235\2104d\220\333\277Wz\221\204W\367\376?\342\"\322X1\262\316\277CU\254\262z\035\311\277\023\2476Q\204\211\001@\313\222x\030H\376\017@\203\004\246\356\234\347\337\277/b\233;`\005\347?IV9\374\\\234\345\277b\241\366RY\230\341?\007\006\336>\264^\367?O\310\216Y#)\345?\272`\017\263\232\371\346\277I\212\247@A\n\252?m\032\324\2071\254\347\277;\036\337\370\271h\347\277\267\345o\'\\\033\346\277\214\233\362\373\254\337\337\277\222](\374x\350\351\277?\025\225\312A\027\346?*k\345i\330V\350\277\263\365\302\026\354|\351\277\317L\256\341z\027\342\277\252\337\274 iX\351\277\230\357\315br\023\316\277=tG)\200\004\004@\230\357\315br\023\316\277\335T\331\221F\252\344\277\314*EO\0311\352\277\303\367[\300\252\361\346\277\320\247\332\220\224\240\277\277\370!\250\274\273~\310\277\020#,\374\000\364\350\277A0\326\257\321\263\357?\342\262\200\377W\226\350\277K9A\336/\252\350\277f?~l+\374\261\277\037Y\371\320\211\200\347\277\331\314\224\327j;\352\277\247\3006\312\213\t\327\277{\272\226\341h\017\350\277tI\303\\v\351\354?gE]\331n\366\013@+\222?\307\313\337\362?\236\313X\336A\262\342\277\326\240\224f\t\300\347\277\036\r\276R$\031\374?\246\313\3714\205\005\362?X\216\264\254\240\321\332?%\222\236p\210\214\343\277@\370{\377s#\322\277\317\204\347\3447\246\350\277\257\357;.\250\323\353?\004,\253R\305h\345\277\223v\205`\264P\226?\323B\355\370\367\323\343\277\264\025\252\230\3740\351?\322}u\234\375\253\301?$\224\270\260\007\347\273?\023d\005Vh\234\343\277l\005\020$mV\351\277\203!\223\356\000e\305\277Y/\254\023\\\200\351?l\010\024\r\222\357\345?b\240\177\230N\246\344\277\2230\322k\331\340\000@\324\377*5uk\352\277\215\210\260\2509\274\311\277oJ\356U\307u\351\277x\272u4\310\r\301\277n\215\212\020+\236\324?s#J\324X\027\350\277\356\327\243\315P\033\350\277yo&\251\001\322\342\277\321\307Mm\271\365\342\277\374-m\251+3\340?\257a%\302\220o\010@\365\304w\t\265\204\321\277\223%\245\346\024 \r@f\27478\3514\353?\365f\261\235\025\303\000@\267\345o\'\\\033\346\277\017\374\247\035\235\341\350?\255\356\243\306\374\337\307\277@\370{\377s#\322\277\265\370\220\315.=\325\277\205\031\252\353\273x\341\277\022\314m\254\374\313\345\277\231Z\233\350&\031\327?\004\340o\324_\001\372?\271a\206m\245\353\343?\202?\230\254m\204\366?\317\204\347\3447\246\350\277\236$\311\3608\000\257?m\"\275\212v\230\313\277u\247I\035\347\323\331\277\220<\000\362?\033\336\277\211H\231\300\000\266\346?d\377\022\371\376\275\365?;\367\017c2\246\334\277\226\005\311p\371D\364?`\252+\374\217\022\351\277<\027m\260\177n\300?\017\374\247\035\235\341\350?Fbr\216\270\257\351\277\376H\256\216\273\317\351?c\273\237\320=A\307\277d\033\037$\215\204\345\277B:\214z\213\202\346\277\334X\251\334\323\276\r@\001I\243p\362Z\342\277y_uP\030\373\261?j\305\214\327o\236\324\277\243\207\206\014\304\210\303\277g\257\207\353\202/\352\277\256J\351\264\363I\004@hA\256;\202\343\331?\245\332\311\270\230%\275\277a)\345\344\002?\351\277v\344\332(_\002\257\277\376H\256\216\273\317\351?H\332\316* \224\376?\306K,\266a\r\335\277*k\345i\330V\350\277\367\006\210\204\314\343\345\2771\210\t\246\264b\344?\022*\377\2126+\332\2771\345#\312\343\317\333\277E0\313\221\010?\350\277tI\303\\v\351\354?>DMc\016\306\344\277\236$\311\3608\000\257?\3218\026\201\235\003\326\277{\r\271\340\234\252\272\277\325^\204\353\361`\323\277\325^\204\353\361`\323\277\232\325\031\307\304\365\340\277\344\370ld\232\275\260?\243\270\302\377\332V\363?5}\321\002\'-\351\277\235\210\362U\300b\350\277\272\327t\331\200\376\005@\243j\231\014`\013\336\2779\311\270\365\230\\\353?\037\005\264\242>+\361?m\032\324\2071\254\347\277\253\221s\023\366\345\320\277\302\013\177\350\363\313\362?\025G\r8;\252\346\277\245\n{\377\013\005\352\277\303\000\274}\372\317\327\277{\202]\336\253\200\341\277\262\027\202~:\210\303?\345\021~z\323r\322\277\253X\344\002\317f\344\277\317>W3\032T\352\277LLx\023\332X\347\277\022!~ FK\302\277\267;\030\003Q\216\346?\t5!\237\354\323\345\277\327\354\360\221\017)\372?c\244\204pA\035\352\277\253\236@\325@U\352\277\312\3549\254\364H\333\277\257\266\213p\340R\350\2775\035\247;$O\352\277\2472v\230z\t\347\277\374\213\211O\321X\364?Y\022\223H\216\214\325\277\267}\007\321\307\353\343\277O\240H\t\221t\335\277\026\\\207 \t_\221\277\014\026\234R\245:\351\277\345\006Q\365\016\262\336\277\307\000\322\014\322\\\347\277\3218\026\201\235\003\326\277\265\002hE\211\r\343\277\304\036\266\035\236z\361?\244\347\320\322\255i\005@3\232\311 T\037\346\277\241)\000LS\236\346\277\222\334\341\344\353\024\352\277\231\220\312\200\370J\233\277\020\242\345\344s \351\277\243\207\206\014\304\210\303\2778\013\250\303\017\272\350\277:A\322\244\026c\276\277iT\304\303\213\220\341\277\307\000\322\014\322\\\347\277\363\340\031\032x\206\350\277\371\031\277\271v\222\344\277\021\037\022\237\314\245\351\277\331\0334\362G\236\350\277\247\372<\225\275z\340\277^\332\220\201I\214\325?\277\321\355UV\224\351\277\344\250\212\211o\360\r@#[\257.7i\352\277\247\210\036to|\347?\002\211\305v\364\325\314\277L\344\017\275E)\345\277Y9b\336\025O\340\277\277\2425\275\211\345\352?\367\006\210\204\314\343\345\277G\373\305\214\020h\352\277|m\204\365\245S\351\277zx\206fQ\260\323\277\023\2002.\227d\372?}\223\307K\341L\335\2777\346\321\300fP\317?\222\347\316\320U\232\332\277\247\372<\225\275z\340\277R9\3424s\375\367?\026\246\240\230\353\301\367?\013@o\321Q\226\320?V_P\237\307Z\365?\355o;w\274\353\345\277\360\352\332\002\373\311\346\277\230*K\350\256v\344\277x\272u4\310\r\301\277x\211\332D\257\357\317\277\377\321\323/A\221\n@>HR;\001=\352\277!J\271xg\014\252\277\363\031?\020\324@\374?\262Db1\311\337\347\277\242\342\206\360s\233\242\277\356\364\274\230\036\017\334?\216\030_O`\240\343\277b\010\350\356\342\325\346\277y^g\0350\363\351\277\026\\\207 \t_\221\277=\242\336AH%\331\277\201\303\014.\220z\350\277w\"\351\250%\262\332\277\024w<\213\022K\342\277\031\030J\201\245\206\340\277D\3142\206\001$\017@71\000\237\214\212\326\277\017G\215\216\230X\376?`\365{,\323\304\013@\031P\203\204b\025\347\277\244,\206(\024v\264?/\033\263)\242M\352\277v\232\317\002c\247\351\277\255\356\243\306\374\337\307\277\322\3078\350w\036\351\277\036\275\226hE\217\247?\306\355\232\327\'\256\350\2778\013\250\303\017\272\350\277\253\360{\254:7\342\277|\352\3054@\260\343\277Y\022\223H\216\214\325\277\001\272\001j\013\244\374?{\272\226\341h\017\350\277\302\023\211\230\331\271\375?\335T\331\221F\252\344\277\236\371\272i\244p\333\277\376\236\300\204{\007\363?\273sF\350D\250\345\277c\365\321f\331(\337?\nHX\324\226\202\344\277\000\262\367\271%\266\361?Gaq\237\352\321\340?\013\260\300*+\262\346\277\363$l\225\230\001\360?\014\225U;\030g\351\277\017\021\247\020\254F\233?\273sF\350D\250\345\277\231>n\020\370P\360?\304\310\243\'\336B\350?\024w<\213\022K\342\277d`\237\354\215.\270?W^d\254(/\350\277\204\337\243 \212\007\330\277\026\251\316\002\201\344\351\277\265\002hE\211\r\343\277!\325\017\027\323P\345?\306!\317\002\362\305\351\277\227\325$\345\215j\350?7\346\321\300fP\317?mK\233B\264@\307?5V\002m\237j\336\277<E9V\255\361\361?H&\n\251\205\373\351\277\237Ud\340Q\036\240?\332.k\'\362L\347\277\216\367,\314\332\324\004@x\007\211\305\007@\004@m\2154\326$:\001@,\207\022B\007\037\377?\344f\257\233\275\363\325\277\007?\315\002.@\352\277\241\275]\220f\225\002@1\267\301>\201\021\343\277R\355\205\tm\224\345\277?`z;=\216\373?\020\326\031\020>8\352\277\313\345\274\362\2536\314?\306\353\r\251\r\007\351\277\n\031\025t^\r\366?\005xq\230\226\226\320\277f\27478\3514\353?\243\207\206\014\304\210\303\277\033\nO3\312i\000@\362\0215`\356R\361?\376H\256\216\273\317\351?\202n\333\014\246\371\344\277\314\257\227\310o\026\245\277I\247P\300\022\317\351\277^\252@\201\321\351\342\277\320\330u\200\255\276\260\277D\265+\006\312`\347\277c\365\321f\331(\337?\034c\272\271\014\304\345\277\340\246\313\004SQ\352\277\366\213\350\370\215\005\345\277\322\330\267\332\356\301\336\277\332\025\215f\371\250\351\277RU\356_\001\304\347\277IV9\374\\\234\345\277\244,\206(\024v\264?)\327g\035\241\324\351\277\204\271KE\r7\352\277\255\356\243\306\374\337\307\277C}\362\002\r\322\340\277\212\362\360\344\013C\346\277\323\332\245O\004\246\330?[\264\314\334\356\312\004@\353G@\336M\347\350\277a^o\0357G\320\277,~\034\237\202\005\347\277o6kz+9\327\277\212\025v\030x \240\277\017R\272\023]\031\362?K7\264\257\025\003\351\277\230*K\350\256v\344\277G\013\311\303\365^\340\277y\364\247\312c\365\330?`\336_\'Z*\352\277\177\340\004L\275l\345\277\326h[cL1\341\277\245\n{\377\013\005\352\277cg\"\202Mh\352\277\343\215~1E\266\340\277Gs1\032\212\216\342\277\334A\242\\\234\373\345\277\321/\266\303M%\345\277\260\311\302\245\212\001\347\277*3\254f\033\310\341\277\002\345\ne\353?\t@\354\330\217\300\357F\365?\206x=Ll\220\362?\305{[\t9\256\330\277CU\254\262z\035\311\277B\261\361\240q\207\005@J\377:\023\3768\337\277f\27478\3514\353?\230\261#\006Ih\351\277\016:\231\034\255l\352\277\024uo\303\235h\337\277LLx\023\332X\347\277O\310\216Y#)\345?\346p\206\023\030\304\343\277a^o\0357G\320\277\232u\273 \026\264\351\277#\320~\377\223\020\351\277\324\016\244H\354\344\350\277CM\303\25751\345\277\232=\202\035Y%\343\277\030\325\343\370#7\346\277J\345\373\257\344T\362?\241<B\237\306\301\354?O\236\202@5\273}?\241<B\237\306\301\354?\026\\\207 \t_\221\277\031\026}\2710\244\335\277\201[\244\327\373J\346\277\323B\355\370\367\323\343\277zx\206fQ\260\323\277x\272u4\310\r\301\277L\027\312Pc\207\254\277\037Y\371\320\211\200\347\277\236\313X\336A\262\342\277\017\021\247\020\254F\233?\021\230\004\364\314Q\010@\210\253P\3671\032\n@x\211\332D\257\357\317\277.\371\273*\301\343\347\277mK\233B\264@\307?XT\202\026\005\352\302\277\025\276r^!\257\005@\320\263K\362\020\035\376?\353}\00182\246\351\277~g\024\201\020\351c\277\340g\020\307\360X\343\277\242\342\206\360s\233\242\277h\021^;\nA\347\277\350\226\364}l!\341\2770E\202p\222\021\323\277\001o\034\371\017-\347?\000\316\003\345\263|\341\277S\226\207 \0161\337\277\374J\206t\371&\304?\222!\325\233\207\013\344\277w\262\270\374\354\227\313?\034\016T\013\275\340\005@\037Y\371\320\211\200\347\277B:\214z\213\202\346\277\022\374\234\377\323l\341\277\263\334\371\3324\260\345\277\314\251\3767\214]\352\277\267\345o\'\\\033\346\277F\254V\020\346H\366?\004\340o\324_\001\372?\215\235\213\344u^\352\277\014\031\301\350j\325\314?\203\326Cc:)\347\277t\316\343%\t4\010@\277\n}f}\023\326\277\327\023\365\264\374M\001@\317L\256\341z\027\342\277\341en\023\225\332\351\277}\225\224\023V/\340\277\232\rS\312\201\204\347\277H\276\241R\361\313\347\277\r?\203\336\262j\363?\261\322\"c\332\337\327\277\371\306\247\330\013l\271?cI\201\257\357B\336\277\367Y,w\234\275\351\277\371\306\247\330\013l\271?h\352\216\245\202~\334\277\212+\200\3652\302\322\277\272\370\246\\\006\312\344\277q@B\362\205\t\345\277\356\212\221\341\215_\351\277{\r\271\340\234\252\272\277\236$\311\3608\000\257?\"\030\227L\365\241\306?77\235\261\216\201\002@\221v\006\275q\214\347\277\365f\261\235\025\303\000@+\222?\307\313\337\362?\305{[\t9\256\330\2774\203\313\340\"\322\210\277\237\244\211H\272\357\327\277\"\306}<\2268\263?]\253,tp\025\360?S\230T\350\202\023\342\277\005\017~\2472\024\014@Y\022\223H\216\214\325\277\020\337\216R\317\355\324\277\373\245\206X\2519\263\277\216-\260\304\211\251\272?\243\207\206\014\304\210\303\277\273\331\237\034#\362\266\277?\213\2036\035*\010@r\014\371Az\032\352\277\256\346\272\303\267\363\343\277\270U\301\20057\314\277R\356\374\303w\206\342?g\257\207\353\202/\352\277\242\177\311\324\350\022\316?\367\006\210\204\314\343\345\277:A\322\244\026c\276\277\364\351y\327\307d\331\277\350\267\334\356J\263\351\277\312C8\225S\254\341\277\n\016R\te\021\333\277a]\031\020\315V\352\277O\260\306\014::\352\2773\232\311 T\037\346\277\005xq\230\226\226\320\277\253\360{\254:7\342\277\305\253\212\\\020O\324\277\0134VY\356\251\377?\320\247\332\220\224\240\277\277\217\303-.v\037\340\277\212P\202\303E\242\332\277\354\330\217\300\357F\365?\024H\204\362E\234\343?\254\037\340\271\023\256\367?V\216\223\377\377\317\343\277\231,\303\221\207F\352\277f\376&\006`\222\350\277|\243EO\212\022\352\277E\310b;t\017\346\277m\"\275\212v\230\313\277\002\201\334s\257\351\350\277\017\021\247\020\254F\233?\311s\210\225\313N\324?rSy\'0\270\343\277!\324\230\\\310^\350\277\025\257u\216\317\331\350\277\221\342\210p:\n\351\277\r+`\266i\220\347\277(N\327\274\323\327\333\277\034|\203\365\303\220\351\277)\233\024\275\257\367\343\277CM\303\25751\345\277\265\232\377\356\364\335\340\277\263k\274\216\274h\362?\343]O\336m\025\345\277\227\257\253\\p\230\343\277\230\357\315br\023\316\277\244,\206(\024v\264?\\U\032~\260\335\346?"
      }
    }
  }
}
node {
  name: "tensors/component_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 750
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 750
          }
        }
        tensor_content: "\371s\245\260\024K\331?\346j\312\300\277]\337\277\305\342Xx(\016\330\277\261\200\004qV\221\315?\002\0055\300\265\275\375?\350H\253\241}x\346?6^\317\345\007\303\356\277K>\347\214s}\360?!s\322\211\024\337\344?28\026\212\314\233\305\277\3419\246\266)\026\000\300\245\360\177\275\2413\366?=\332/\017V^\340\277\245)\2139c\252\361\277O]\374\276\007W\332\277+\302eUPl\276\277\251\036\350\236p\275\313?\246\321\316\271\353\341\010\300\231\261\022ZI{\316?\005\007\320k\355\010\334?\212\351\243^\016=\356?\330\023ga\033\370\330\27728\026\212\314\233\305\277\365\321\213+\213\210\356\277\277\355\021\353i|\323\277\364\333\325\\V6\351?.\374\262\023\"\357\354\277\344\rS\207\277\340\352\277\347\005\216\340\210 \000@R\300\207\322c\353\314\277\366\257\272\031\204\315\363?dRCL\306\350\336\277V\323\254\363\203\206\321?ja2\026w\355\346?\354y\271\212pb\347?\211N\312\035\242\034\377?\203%\271\307}\277\370\277{\033!\211w\347\357\277^S\262\215<\251\317\277H\0007x\314\257\367?E<L\341;2\342\277\035\242E\307\317}\367\277f&\332\373\270U\353\277\316Q\311h\207\233\363\277\237P\001\344O\274\351\277Z,\356\325\024m\331\277S\353\035\263\0346\003@\313\200<\246B:\326\277\032\376,\261\204\304\272\277)5p\202\250;\372\277\002\330\327:\323H\265\277V\361\225\273V\325\315\277\353\027\235\270\212\216\345?s\t\304\243:O\014\300V\373\337\354!\203\330\277\256RC\026\245\034\007\300\330\023ga\033\370\330\277\257\036\204\271\346\021\350?n!5c\323\376\335\277\225P\263\326\024\222\373?\3419\246\266)\026\000\300{\033!\211w\347\357\277\346o!Lj\212\376?\017\024\300\244\334\026\362?\334\265\200\346\244\272\343?f0$-\204\003\346?\271\342 C<e\317?\031\022\301\023\033 \300\277$\313\010\020\271\260\337?\035C\317\374\r\n\301\277Ih\2651I\305\325\277T\216\274\232\277\026\375\277\374M\354T\331#\340\277Z,\356\325\024m\331\277g\227\345\227O.\325?\351B_\2225\270\277?\377!\271\233\'\326\237?\017\321j\367O\362\373\277\240\353\332$\274\334\370\277\320\030\014\372\000O\346\277!t\335\345\000\364\301\2770\335\206\272v\342\252?BmZ\312.\034\343\277\246ZK\025\033j\344?6i$s\277\205\306\277\233\211\276R\326\010\367\277\376\031\324~8.\360\277;m\014\275\363\361\364?Vl\353\210\270[\342?/\244.\200B\363\363\2775sn\244\2123\321\277\224,G\031\326\213\362?\203\371\235\204\253V\343\277\344\246\221\034\364\265\333\277A\006\231_c\361\323\277\177\366\264\245\322\300\264?\332\032\247\2458\232\364?\307D\331/\230\215\355?\344\rS\207\277\340\352\277kW\350\344\253?\354\277\336\231GS\220\206\230?F-]\027\213-\312\277+-s\357\331\256\377?\276\021\326\n\3716\221?\"\306\351p\246P\000\300=\3125\351\270D\353?\257\274\265\364;h\364\277\263\333\223@\254J\250\277\321\034\n\034\204<\272?\273\274\003\002w\222\322\277\312\332\r\330\036W\377?Z\375z\230Y\316\366\277\250\262\035\2665\220\353\277Ro\234\374\203|\000\300\351B_\2225\270\277?+\302eUPl\276\277\245\360\177\275\2413\366?:\2322\\\262o\307\277\000o\000\030/\364\353?o\210\366\315\236)\355\277\225\037W\340\346}\334?kW\350\344\253?\354\277x\2273\245\212X\363?\321\034\n\034\204<\272?\035B\304\240!\365\343?\223\275\326(w\376\346\277\002\0055\300\265\275\375?\240\353\332$\274\334\370\277!s\322\211\024\337\344?5sn\244\2123\321\277\034\340\247\316;!\342?\350\250,\310+\001\372\277\261\362hv\024\251\362?#\021\004\305i5\361\277\213[\272V\221*\345\277\334\265\200\346\244\272\343?\207\032\262G\001\'\357?=\332/\017V^\340\277\345~^#V\271\324?Y;\204&\343\206\000@wfs\311\322\230\340\2779\231\'\000\306Z\352?\031\022\301\023\033 \300\277\312 \273\177\224\261\362\277K>\347\214s}\360?\2014Z\204\363\231\302?\002\022\327\353i\241\365?\364y\007\230\253\214\365\277\341MP:c\317\323?a\235\371q\253E\343?\217\272\355I\236h\270?\017U\025r\337\222\243?\\\322=\262\r\306\300?\330\023ga\033\370\330\277B]`\244\221\002\356?>\313@E\245Y\310\277\"\306\351p\246P\000\300E7\247HV\333\324\277o\210\366\315\236)\355\277F\236h\263!\006\344\277o\210\366\315\236)\355\2770\325\356[\372\262\346?\0273\207\3115\306\375\277\270\342\274]\262\271\353?\017\321j\367O\362\373\277\356\017\3562\367+\371?\207*\254m\236@\344\277\233\037\363\372\\\322\350\277r\021\311\204\303\316\203?\017\024\300\244\334\026\362?.\007\010\241\331\261\304\277^S\262\215<\251\317\277\345~^#V\271\324?\221\356\226\004/\276\371?\016\343\261\273\351,\361?E7\247HV\333\324\277\314\347\375\020\016e\345\277R\277|vw\326\357?x\212\221y\326t\373?\307T\323U5\247\342\277/\227\214T\216\017\374\277Z\"\244\244I\277\316\277$\313\010\020\271\260\337?*\326\371\267\346\307\303\277~Vy\2435\177\353?\2014Z\204\363\231\302?~Vy\2435\177\353?17\013.\340\206\350?\334DuJ\016\342\331\277\035B\304\240!\365\343?\013\255\3769\021\354\362\277\275T\205H\372|\364?Z,\356\325\024m\331\277\362\023\237\226\007\241\261\277\010\321\034\352\024\310\355?tY\203\220\343\212\372?\351>ap\262\312\353\277\010\321\034\352\024\310\355?!t\335\345\000\364\301\277\312\030\276\354\305$\370?\257\036\204\271\346\021\350?F-]\027\213-\312\277=\3125\351\270D\353?m5\311\305iZ\323?R\242\236\n\221\234\320?f\277\030\221\355*\334\277E,R\273\236\030\355?p\307\204?\314W\305?\324\263\345:mo\365\277~\310\350\024\233W\003\300\201*\020S(\354\327?|\310A\216}B\364?\204\274\313\314\212\351\311?\366\257\272\031\204\315\363?\227\356\344\021j\350\347\277\311pzl=\355\000@dRCL\306\350\336\277f0$-\204\003\346?ja2\026w\355\346?E<L\341;2\342\277\035\242E\307\317}\367\277\367\257l\014I\243\325?*\326\371\267\346\307\303\277\254\343+\237(z\354\277uT\336\367\3753\375\277\246\321\316\271\353\341\010\300\300X\321w\270\224\266?\367\257l\014I\243\325?^\316\007[\236/\344?\217\226\022qO\302\340?\ri\354=\323\334\335?O\272\017\312)L\002@2-\301\374\024\331\355\277\"`I\203j\230\274\277\347\3533h}\373\321?\177\275:\016\001\252\332?d\225J\354\027\343\366?\307D\331/\230\215\355?\233)=,(\200\343?\021\257\231\345H7\341?\352\255\321`\021X\367?\354y\271\212pb\347?\325\270\212\323R\306\362?\"`I\203j\230\274\277^\316\007[\236/\344?\356\034\220^\253\017\361?17\013.\340\206\350?\357\336\206\320!W\007\300\206\310\217\233\270l\342\277C\327%\"\250R\361\277\2502|\001\007\031\261?!i\210XI1\352\277\235\201\301\277\007|\374?\210\035\340-\310\016\210\277ja2\026w\355\346?Ih\2651I\305\325\277\235\213\275\343\227\377\310?\005\007\320k\355\010\334?O]\374\276\007W\332\277\346\265\316\363\337\344\361\277Q\317v\234\024\360\344\277\307T\323U5\247\342\277\213[\272V\221*\345\277\323c\005\211C\232\257\277\231Pe\311\331g\335?Z\"\244\244I\277\316\277+\251\323\030(J\361?`\235G\177\346o\361\277U\000\205\205\007\332\345\277\203\371\235\204\253V\343\277\324Sd\024\277\346\341?=\3125\351\270D\353?q\026f\317\3562\004\300a\235\371q\253E\343?\374=\362.<\n\353?\260\224\230\323\354\354\262?\263\333\223@\254J\250\277\227X\260i\343\036\366\277\307D\331/\230\215\355?\356\027\353\305\305\270\363\277qf\327\256\\D\324?\354y\271\212pb\347?\360H\371\256\270\242\364\277\013\245\001\247B_\370?\313\205\341>(\221\343\277-\006\375D\355\234\347?\235\213\275\343\227\377\310?\213\207\325\231c\223\372\277\243\201\017\315B\246\352\277r\303N\350\\\301\350?\351B_\2225\270\277?\344\246\221\034\364\265\333\277o\371\001j5\002\327?\344\rS\207\277\340\352\277\"`I\203j\230\274\27717\013.\340\206\350?\035C\317\374\r\n\301\277\356\034\220^\253\017\361?\035\242E\307\317}\367\277\350H\253\241}x\346?\206\270\225u\033S\355?3\332\341\001\0334\362?\375\333#j\221`\367\277#\313V\035\364\332\375?\255\220L\244.\325\360?\233\037\363\372\\\322\350\277\215\305\205\256\na\363\277\335\034BQp\345\322?\005\007\320k\355\010\334?u\222@\377i\327\347?\270\342\274]\262\271\353?<*\267\017g\315\376\277\203\371\235\204\253V\343\277\303\237\314\344w\362\253\277\014\022%\371\244\313\343\277\014\002+\323\007\262\356?\353\027\235\270\212\216\345?1B`\273\227I\320\277\304\244\222B\336\342\000\300\201*\020S(\354\327?F\312\203\366\363n\371\277\313u\347\030\213w\356?1B`\273\227I\320\277Z\223\257@\340\227\350\277\320\246\365\001~a\357?\201*\020S(\354\327?|\273\237b\311^\374?\306\251\377\356+m\376?b\377\025D\221\031\345?\332\032\247\2458\232\364?\305\342Xx(\016\330\277:\2322\\\262o\307\2776^\317\345\007\303\356\277\221O\366\207c\247\314?~Vy\2435\177\353?\215\305\205\256\na\363\277\250\262\035\2665\220\353\277K\211\001\3416b\001@\211\312*G\360\267\360?\330\204r\375\261\320\342?<*\267\017g\315\376\277\376\031\324~8.\360\277\314\361GB\331\022\340?f\277\030\221\355*\334\277\376\031\324~8.\360\277f&\332\373\270U\353\277\211\224w\305\027w\362\277v\222\216\014\245\001\366\277\031\021\266\267.\013\343?n!5c\323\376\335\277b\377\025D\221\031\345?\327\231\331\317\234t\005\300=\332/\017V^\340\277l\004\t\352\261\232\360?g\227\345\227O.\325?\':\025\033\216\222\367?\344\226a_\373V\223\277b\216\n\250\372@\333\277\344\rS\207\277\340\352\277\364\333\325\\V6\351?~Vy\2435\177\353?\233\037\363\372\\\322\350\277\223\307 ZB\254\341?\352\336\337I\004B\370?k\310\363\200B\030\326?\rtA\313\212\237\345\277\322z\332\276\253\370\371?f&\332\373\270U\353\277d\225J\354\027\343\366?\261\362hv\024\251\362?\247\274g\347\000>\346?\013\245\263\231\0075\332?\210\035\340-\310\016\210\277j\360&z\340\024\335\277R\300\207\322c\353\314\277\326\253\350\247\236\342\372?\347\005\216\340\210 \000@!i\210XI1\352\277\251\036\350\236p\275\313?~Vy\2435\177\353?\217\201s\262\314Q\336?o\371\001j5\002\327?\327\"V+\314\374\340?\207\032\262G\001\'\357?\':\025\033\216\222\367?\337\211\027\226\227\'\320?\346j\312\300\277]\337\277\235\213\275\343\227\377\310?i\004\273\334vp\322?R;\335\237\305q\341?r\021\311\204\303\316\203? \232\372&\306\306\336?l5\027\323\244\204\361?\276\276\236\255\256\335\360\277P\223a3\245m\372?\264EHq\016N\356\277\227\370.C5\226\342?C\327%\"\250R\361\277\263O\222\242\331\373\350?\033d\225\262(\260\376\277o\371\001j5\002\327?\307T\323U5\247\342\277\334DuJ\016\342\331\277\263\333\223@\254J\250\277\032\376,\261\204\304\272\2779\244|\215}\035\322\277\013gQ\222\233\221\377?\\\322=\262\r\306\300?\376\323&\327\302\323\374?5sn\244\2123\321\277^S\262\215<\251\317\277\375\0142S\204J\370\277\273\274\003\002w\222\322\277\267\213\365\030\204\250\321\277\304\261\374\201\372\371\370\277/k#\004\201|\370?%\244\340r\007\311\345?\364ME\316\273\016\001\300^\316\007[\236/\344?\371\002\232\024~r\357\277$\313\010\020\271\260\337?\214\214z2I\352\367?\020C3\342\227\265\344\277Z\223\257@\340\227\350\277\251R\234\217\207\007\370?+\251\323\030(J\361?\':\025\033\216\222\367?\006|\360P\036\002\362\277\005\007\320k\355\010\334?+\302eUPl\276\277\225\037W\340\346}\334?\313u\347\030\213w\356?\312Vn\001m\362\360?\344\246\221\034\364\265\333\277\010\321\034\352\024\310\355?Z.\211\201L\270\367\277\313\347V\212\360O\006\300!s\322\211\024\337\344?\333I\032\343\3638\347\277\367\257l\014I\243\325?6i$s\277\205\306\277\250\340B\300O\344\275?\2014Z\204\363\231\302?f\220\245S2\214\371\277\237P\001\344O\274\351\277\347\013\230\317S\276d?\351\037\323\247\222\246\232\277f\304\275)\323\201\351\277*\303\337\203\370D\001@\346j\312\300\277]\337\277\241\370|Pp\300\360\277\221\356\226\004/\276\371?\342|\303w\036n\366?|\273\237b\311^\374?E<L\341;2\342\277 \232\372&\306\306\336?V\361\225\273V\325\315\277 \232\372&\306\306\336?\351\037\323\247\222\246\232\277\353\027\235\270\212\216\345?M\231\303\032<\257\326\277R1\223n\372\303\346\277H\0104\013\233<\362\2775sn\244\2123\321\277\377!\271\233\'\326\237?BmZ\312.\034\343\27717\013.\340\206\350?\346\265\316\363\337\344\361\277E7\247HV\333\324\277\251\036\350\236p\275\313?=\3125\351\270D\353?\033i:K\016\007\374?\272\0210\233mX\376\277-\006\375D\355\234\347?\345~^#V\271\324?\020C3\342\227\265\344\277\225\037\245\355!\250\372?`\235G\177\346o\361\2770\335\206\272v\342\252?\303\237\314\344w\362\253\2776^\317\345\007\303\356\277|\310A\216}B\364?\031\021\266\267.\013\343?\206\270\225u\033S\355?\211\224w\305\027w\362\277\230\307\307\340_\301\000@\314\347\375\020\016e\345\277\010\321\034\352\024\310\355?\203\371\235\204\253V\343\277\010\321\034\352\024\310\355?\336\231GS\220\206\230?\365B\227\307!a\330?A\373C\322\253.\354?M\231\303\032<\257\326\277\207*\254m\236@\344\277\336S\262!\372\020\360\277\206\310\217\233\270l\342\277V\314l\257f\344\365\277|\310A\216}B\364?\034\340\247\316;!\342?\231\216c\353\273_\364?\247\274g\347\000>\346?f\220\245S2\214\371\277\334\265\200\346\244\272\343?O]\374\276\007W\332\277\002\022\327\353i\241\365?PjP\335\200\020\364\277\245)\2139c\252\361\277\362\023\237\226\007\241\261\277\311pzl=\355\000@\277\355\021\353i|\323\277\331~&\356i\020\274?\274#\305lB\275\341\277\314\361GB\331\022\340?\340\346\216\317\227\244\344?\r~\213\374UM\340?+\302eUPl\276\277\013\245\001\247B_\370?^\316\007[\236/\344?Z\"\244\244I\277\316\277 \007l\206c]\350\277\270vVZ\0018\357\277\221\356\226\004/\276\371??\246\0279\265h\360\277\014\022%\371\244\313\343\277\317\261J\2175$\327\277\310\266\357\'\033{\344\277[l\222\017\326p\001@\247\274g\347\000>\346?\0358zoVG\351\277\304\244\222B\336\342\000\300\250\340B\300O\344\275?\toN%j\036\372\277\277\355\021\353i|\323\277F-]\027\213-\312\277p#\320\016\013J\374\277\2502|\001\007\031\261?BmZ\312.\034\343\277\375\333#j\221`\367\277\313\200<\246B:\326\2778\371\250&t\343\375\277\010\321\034\352\024\310\355?\203\371\235\204\253V\343\277+s \227O\t\363\277\313u\347\030\213w\356?\':\025\033\216\222\367?}\003L\233\000\260\301?R\312\321\003/\231\327\277\263\333\223@\254J\250\277\346\265\316\363\337\344\361\277\020C3\342\227\265\344\2770\335\206\272v\342\252?qf\327\256\\D\324?j\360&z\340\024\335\277\223\262\201\233\277;\337?\317\261J\2175$\327\277>\327~\233\212=\002@\212\351\243^\016=\356?Oo\365ufg\361?=\332/\017V^\340\277\217\201s\262\314Q\336?\365B\227\307!a\330?\216\032\37293\337r\277\331~&\356i\020\274?\202\227\201\262\305\202\341\277%\232\226A<\033\353\277\340u\2033\001\314\332\277\233\037\363\372\\\322\350\277\217\201s\262\314Q\336?\276\021\326\n\3716\221?\016\206P\243\214\r\013\300\217\272\355I\236h\270?Z\223\257@\340\227\350\277\245\343\335\221\355O\376?\t8\336T\340\362\334?\013\255\3769\021\354\362\277}\003L\233\000\260\301?V\361\225\273V\325\315\277BmZ\312.\034\343\277\\\322=\262\r\306\300?Z\"\244\244I\277\316\2771\325<i5\335\364\277\334\265\200\346\244\272\343?Q\317v\234\024\360\344\277\270\342\274]\262\271\353?\211\226vV\331m\304?\223\275\326(w\376\346\277\344\246\221\034\364\265\333\277R\300\207\322c\353\314\277\372u\273h\355t\263\2775sn\244\2123\321\277\351>ap\262\312\353\277s\271\004\267\221\023\356\277U\n\317\266\322\207\340?o\371\001j5\002\327?\340\334D\236\314\366\351\277v\203Q5\271\322\337\277\304\244\222B\336\342\000\300\026\007\036y(3\372?\006|\360P\036\002\362\277\022\234\020\337\236\360\270\2775\006KR(\307\365\277\346o!Lj\212\376?X\002 1?%\364?\352\240/5]t\377?\334DuJ\016\342\331\277\235\213\275\343\227\377\310?\303\237\314\344w\362\253\277R\300\207\322c\353\314\277O]\374\276\007W\332\277@\241\277^B\212\256?\210\035\340-\310\016\210\277\205[lIV\000\367?!i\210XI1\352\277R\300\207\322c\353\314\277\334\265\200\346\244\272\343?\250\262\035\2665\220\353\277\267\213\365\030\204\250\321\2772-\301\374\024\331\355\277\3609\274\327\314s\336\277\251\036\350\236p\275\313?\344\246\221\034\364\265\333\277R1\223n\372\303\346\277A\006\231_c\361\323\277V\373\337\354!\203\330\277\235\213\275\343\227\377\310?\311pzl=\355\000@Q\317v\234\024\360\344\277\"\306\351p\246P\000\300\323c\005\211C\232\257\277\334\2536\265\331\014\351\277\303\036 \324\\f\324\277\372u\273h\355t\263\277\206\310\217\233\270l\342\277>\313@E\245Y\310\277\233)=,(\200\343?\356\027\353\305\305\270\363\277b\365\313\022\306k\352\277|Z\257\372\244\025\310?Vb\241W\355\255\347\277\251\036\350\236p\275\313?\217\201s\262\314Q\336?\354\010\256\356\331\211\335\277\014\002+\323\007\262\356?V\361\225\273V\325\315\277\2014Z\204\363\231\302?\026\007\036y(3\372?6i$s\277\205\306\277\312 \273\177\224\261\362\277U\n\317\266\322\207\340?\331~&\356i\020\274?-\006\375D\355\234\347?5sn\244\2123\321\277\n:\364\014\271\034\267\277Z\223\257@\340\227\350\277\211\226vV\331m\304?:\2322\\\262o\307\277\013\245\263\231\0075\332?\353\027\235\270\212\216\345?\"`I\203j\230\274\277\021\257\231\345H7\341?6^\317\345\007\303\356\277\177\275:\016\001\252\332?\313u\347\030\213w\356?\215\275\210\033<\324\370?F\236h\263!\006\344\277\2502|\001\007\031\261?r\021\311\204\303\316\203?\':\025\033\216\222\367?PjP\335\200\020\364\277\002K\342g+\030\361\277\314\023\031T\340\315\372\277\211\312*G\360\267\360?%\245\353\316\363\335\302\277\034\340\247\316;!\342?\331~&\356i\020\274?5\006KR(\307\365\277\212\351\243^\016=\356?\327\"V+\314\374\340?1B`\273\227I\320\277\307O.\275OP\325\277V\323\254\363\203\206\321?)5p\202\250;\372\277\032\376,\261\204\304\272\277\346j\312\300\277]\337\277\233\211\276R\326\010\367\277-f~k\233%\373\277\312Vn\001m\362\360?T\321\021HL;\363?\226\214\310?\204\024\346\277\337\211\027\226\227\'\320?\001\341\026\020\262\341\342\277\351B_\2225\270\277?\202\207\207\214(i\354?\017\024\300\244\334\026\362?\335\034BQp\345\322?\261\200\004qV\221\315?d\225J\354\027\343\366?J^k\000~\027\313\277i\004\273\334vp\322?\261\264\270am\333\371?\215\305\205\256\na\363\277\021\245O\264}\211\346\277n!5c\323\376\335\277\320\202\327Qz\205\364\277\032\340NUY6\001@\227\370.C5\226\342?\212\351\243^\016=\356?Oo\365ufg\361?\2002[\3631\243\360\277h\306X\325\n\315\367?\303\237\314\344w\362\253\2772\251z\237E_\000\300!s\322\211\024\337\344?\274#\305lB\275\341\277\017\024\300\244\334\026\362?E,R\273\236\030\355?\303\023\313F\245\243\354?l\377cQ\314C\363\277\210\035\340-\310\016\210\277H\0104\013\233<\362\277U\n\317\266\322\207\340?\250\340B\300O\344\275?\002\330\327:\323H\265\277F\236h\263!\006\344\277\374\257a\240\241\342\002\300\307T\323U5\247\342\277\211\312*G\360\267\360?\\\322=\262\r\306\300?v\203Q5\271\322\337\277f\304\275)\323\201\351\277\205[\036<\033\326\330?0\325\356[\372\262\346?\210\035\340-\310\016\210\277@\236\032\246\346\333\365?\227\370.C5\226\342?\336K\265\216+\204\365?\"`I\203j\230\274\277\017\326\301\202\372\036\333?\351>ap\262\312\353\277\303\237\314\344w\362\253\277\316\207|\352_\334\361?\332\r\005z\204\266\374?\317\261J\2175$\327\277\031\022\301\023\033 \300\277\261\301Z\215!\277\361?Z\"\244\244I\277\316\277\273\261\256t\277\317\352?\211\224w\305\027w\362\277\035C\317\374\r\n\301\277"
      }
    }
  }
}
node {
  name: "tensors/component_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 750
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 750
          }
        }
        tensor_content: "\233<\361\001\250Q\000@\337\350SG&Z\306\277\025o\352aj\t\361\277\214\214\263\365x\307\360\277\022\2366f\307\003\322\277\266\320{Z\\ \345?\'\014D\261`*\342\277\340W\352\033\246w\322\277\351v9\353R\007\364\277\206\250\325\342\010V\322\277\252\202\320\244\230\357\363\277\202\365\257|W(\250\277\032L\010\230Nc\203?\273\323C\002\342G\364\277q)\237\271\315\203\350?\031\274\236\'\024\241\252\277\261qi1~*\307?9;Y\260t\007\374?y\245\321$\370\010\317?c!\333\024\024%\360?\027\374\3562\365E\321\277\224\307-\263\304\031\342\277\207\244_qm\034\016@\342\3002%\340k\332\277\201\002\300\332\341\225\341\277\036+\365\311\306L\305?Q\257yO\256\304\302\277Z\204xs\223Y\334?\274\276\013\031\220\220\322\277.j\327\247X\367\274\277\n\370\024\303\265}\314\277m\233ei\317f\254?\3005\363\225\334M\265\277\205\260\002\262&\272\314?7\257\346\021]!\363\277\257I\345\364\004$\350\277\324n4o\307\321\344\277$\356\022\320VT\310\277\027\016\034%\ti\374?(_\300wj\361\344\277\222\352k\302\246\t\360\277\377\377{\331u\274\361\277\335\266?\233C8\346\277\031\343\202h\275\r\243\277|c\232\330\267\000s?\214\023\377\010x\350\317\277g\311\377\376q\021\002\300|\300\022%\350\327\010@\234\217y,\037\267\355?\240y\232\177\234l\n@I+^\233(^\352?\321\321C\2320\r\340\2776\240\306D\371\017\371?\2264M\352\344\030\373?\331\267k\234\267M\343?\243L\364\212\224m\373\277ij\371\023\337!\234?\333\325Z,x|\335\277\207o\3411fV\330\277\2277X\341\"\255\361\277\252\202\320\244\230\357\363\277\366\230\264z\'\234\357?\234O\'\000\362\304\251?197\265f4\341\277\026Y\322\316r;\366\277\305\257\375MJ\347\324\277\337\025;\032\007\216\n@\000\004\336\222\210r\260\2774h\223\233}\325\340\277\313\234\0265\272q\350\277\225\313\205t`4\351?\207J-\370\224\272\361\277\360\215\365\271\342\361\360\277w[\362\034\036\273\361?\234\350\360\214\374\223\356?\207\241F\357V\312\360\277\2671\241\026\006\023\310?%\033\343\361\025\212\344?[\360\313s\013\342\352?\\\334\301\253\221\001\344\2774`:\230\216\362\340\277D\305\177\347\216\210\377?\005\346d$\217\347\353\277y\242\001Y\315\305\000\300x\016\'\300\204*\325\277\274\325 \330G\005\340\277d\215\\w\317\251\336\277\274\231\205A\002\361\333\277E\333\317PI\371\342?0\211\357\032\272\264\356\277\201\270\240*Q\235\220?\016\177\216\255\371G\356\277\237\213\367O\017\201\340\277\030\305\273\013\031\365\022@\\\005M\023I\250\353\277k5#\032\204J\347\277#/9\353\224\310\024@\353t+\031\316\273\321\277\013\211&x\205\246\350\277Mq)\025\220t\005@\217((2\005\365\350\277bKAl1\217\334\277\360\010\232\203\335\031\360\277\266wh\013\032\303\340\277\237\303\353A\035\246\337\277\257\241pG\317K\005\300\3106p\324\323\325\246\277\314{\3534\254\211\240?\006>e\246\241\200\364\277\026M\360\024\320\r\347\277F\247\035\003_\306\260\277\244qIm\n\335\351?P\237\231\355\223`\341?>9\372\nf\357\t@#\230\253\'\376\274\360\277\205\344\2716A\327\343\2774\253\244\3610$\325\277\332\231H}\003]\332?\313K~%\301\332\361?\274\275\\d\002\252\321\277\004\244\317f\346/\364?DK\245-\321\267\336?\304U\253\004\016\245\315?\223\233\3171\231\337\312?\201Rx@5\026\357\277$\306\225\367\227)\271?\022\2366f\307\003\322\277_\020J\336\007\031\260?\250\344T~9G\310?\341G\241\347\251\342\361?\262\2465\243,\315\327\277\274\375\313\225Y\225\376?\326\261\313\022p\203\363\277\211:}\030\"\024\376?\225\350_\027\215\335\351\277\026Y\322\316r;\366\277\257\352\215U\003\242\366?\343\307\225\335\271\032\350\277\231b\335\231SC\320\277O\272\025\'\245<\340\277s\226\331K\235\363\316?\n\2350@\377\206\357?\343\307\225\335\271\032\350\277K\3113\333\253\352\312?;\0149\347\357\351\376\277\352\335e\2366P\001\300\2050\323Dq\357\330\277X\212\350\376*[\315\277\215O\000\330\303\233\314\277M>W\266\326;\343\277\242\347E\03070\311\277\207\331?\233\244B\364\277\205\177\2238D\034\330\277\013\367\272f\005\312\355\277\333.6\236\360\330\312\277\032\271\374~\300H\344\277Z\301(\367l\363\331?\005pw2 \341\346\277\010\331v~gh\341\277\321\261\233\024\300\272\264\277\017^\261\241\016\267\330?\204\022\202\312\200`\316?\3325k\373\215\351\326?\267f\210\343c&\366\277A\241J\242\037\220\003@\267O\362\220\366\241\322\277$P\035\375\013\341\225?\221\005\206\021\210\205\376?\231F\255ne\304\254\277197\265f4\341\277\352\362\277\002O\374\250\277\344\277<\332\3127\350\277-BZ\317\231\314\315?_R!q\361l\346?\003(|\350]!\364?D\341\312\352\034\017\341?\016oCR\222\223\361?\3403\023\371\245\276\334\277\363\266\210\022\367\353\007@O\013}A\206\243\356\277\223\205\334\361\307\035\305\277\037\257\234\212\367\214\362\277\024\364\277Jz~\327\277\356\270\244\215\207\243\325\277q\312bu{r\304?\300+\3077\016\262\320\277\335\236{\'\376\334\327\277\023h>\363\244K\324?l_\260g;\353\345?\232%\265\212\332+\371?\234\022\361\244\014\001\304\277\241e\374\300!\275\375?\201\342\332F\226*\231?D\361\252L7s\302\277\227\373;\267\'\211\327\277\274\277\327O8\007\375?\370\\48\212\232\332\277\030\343\341B(\243\312\277\001Q\315R\347\005\347\277;\303*\320\375e\360\277T-\226)\230\222\301\277F\t\235\033\271l\262\277\270\266\024\016\337\311\337?\036\220Z\003)\022\311\277<\333T|I`\367\277\215\000@\344\360n\315\277\230\366\262\275\347n\276?\354\224\214\3122;\003@\232\22624>\000\307\277\017h\231\0031\227\362?\3142>\031q\350\346\277-\0224\322>v\341\277t\3027\315\310-\346\277\276\221\246l&\266\262?r\261U\205\256\317\335?/P\371B\254\225\330\277\005\007\204\201\303\037\321?\0079\230-\246A\341\277^2K\220D|\351\277\334\036\253\224\263\247\313?s\244[D\234\212\356\277\216\254\241\227\371\226\364\277.xo\275\317\266\346\277dsZ\257]E\360\277M\301\0103\371\245\354\2779;Y\260t\007\374?\037\037\016O\335m\343\277\245\317+U\254:\357?\353\305\201S\206\266\331?\357\233.\366\326\247\222\277i\026\013\247\"\215\265\277w\375Dxj\314\354?q\240\272\314\024a\370?\317.\366@\226\322\334?<8\324\377$x\361\277\'\264{\005\0214\342\277}\240\006\314`\213\351?r\354\212\035R\014\360\277t\357|\340KO\325\277\277\304\253\242\327Z\362\277\205\203\351\322t\027\343\277\365\341\276CC\341\345\277\210\306\263\222\240\030\346\277\010\321\271i\335\005\345?\004\343\330\231\233C\377\277ym!/\226\237\372?\3077\245`m\346\317?\251gM\212\334\240\364\277\350\213[:<\377\312?,d\254\213\335#\301\277\354\023[\265\001\374\320\277T\377\222\250\311=\327?#F\0212\005,\343\277GM\204#\2336\350\277(\014\037\333*\265\275\277\220\207\357\204\223\032\332?\010H\325|$\343\364?4{C\023\205\246\206?\272\361\203\243\260\310\346?i\327@2\342\354\341\277/4h\034\0074\340?\272\354K8o\227\366?\307\322|A$\336\226?/h\275\266\361\360\346\277\223\375NJ\363\205\314?\327\351\014\204\271l\023@\324\307G\276\t/\351?\350\017\036V\034\260\345?Q\271\273\312\364\210\321?n`\007h\224\222\006@\371\217\221`\364\003\303\277\374\241|v\300,\361?97\230\034\367\273\305\277\346\277\344c\032~\300?\350\213[:<\377\312?_\347Fo\250\351\355\277\314{\3534\254\211\240?\215\356Vq\230p\314?\256\033\312/S\207\267\277QA\203v\376@\355\277\325\260\2050\304\315\321??\302 \013\3443\341?\310\370&\255\246\331\204\277\276\277s7\226)\342\277E\300\177R\020\372\367?\377\325\020\310\030\377\340?F\236\3306\350\021\324?\246\306\0279\302\322\003@\316G\0031cu\303?\200\207\026W\247\032\336\277\217k\304\2422\374\207?6\273\331\253(\273\310\277\231Z\274yM3\226?Z\204xs\223Y\334?/4h\034\0074\340?\317\364\264\305\225L\342\277\217\364\005\264\235\207\366?i}\266\013\334\251\343?s\244[D\234\212\356\277\307\\~+\351\023\004@\035<V\2052\371\305?\033\237/\372<S\346?^\255d\316\022\371\272?#CYl9\253\322?\264Q\005$\302\236\307?\005\177\340\274v_\336\277#.M\276\277\320\324\277\264Q\005$\302\236\307?\343iEb\357\332\260\277\261:\342\242\264D\351\277\366\342\3230\327f\337\277.\275xD\2303\344\277\177`\314\335\367\016\355\277\201\271\256\255\013u\253\277o)\rM\366e\272?\357\324\300\302h\031\353?8\010\221\216\275M\350\277\366\006\253S\327\037\325\277\222o\307\370\253\341\360\277mq\3562q\034\311\277T6\016\225\241\377\361?lS\235\270\200\215\336?\351P\300b\213\305\301?*\357\210\260\262\322\350?\325\321\350\211\244\301\361?4o\243\"\345p\330\277\340}\356\262\251\315\361\277\353\226\246\371\035\307\341\277\272\213H\270\037\210\341?CQ\335\333\236\270\270\277y]\347\263WW\324\277\320\355\246e\231\320\346?\236\325\315O\323<\361\277\270\265-|\207\342\327\277\344\367\252\372\353\004\276?\\\021/\315\353\325\372\2771\263|hqU\355?\224\243TiYA\320\277\321\023\033-\032a\266\2772\344{\'\300\361\343\277(kq<\365\356\353?\2118\002-\354\266\322\277\203g\262I\353\216\336\277\016O&\333]U\363\277,\320m\037~\216\321?\336\246\215\224er\346\277\035\332\326l\330R\304?\237\217\205\307\t}\302?/3\236\014\312\334\361\277\010\036\034\364\224e\342?\"\016w\335\022\340\307\277\260\254\231\017\342\023\365?c\032\322\362N\361\267\277\237\267P\232\n\321\262?\365:6\244 \276\346\277\306\375\037\253<\037\002\300\366\000s\245\t\037\273?s=\306\374Z\226\332?\224\246\312Y\344%\362?\217\264CQ\324\210\303\277\036h\335*j\347\271?b\207\253\r_s\370?\274\247\"\3234~\001@S\316\365\323\252\001\341?`qY}9\343\350\277y\033vYt\242\306?\352\361\240[\310`\000@X~C\334\221\201\371?+,94\214l\346?\212\232:\257\276\017\343\277\2671\241\026\006\023\310?[\227\3520\232\363\013\3003X(+\']\322\277\364\026]Z\265\345\324\277U\330e\252-d\321?M\307;\243\217^\363\277\274\276\013\031\220\220\322\277b\355\027\356\007\344\345\277\240b\n\376\'z\330?\377<\n!\365r\301\277\325\321\232\022r\001\360\277\320\t8\214>2\337\277\236Tk\212\025\261\275?\000\231\031\256\267\027\322?iGi@\334\276\323?\321\'\237#\247\351\303?\231,_\331;(\370?\010H\325|$\343\364?d\2668\351\215D\340\277pZ\345\016\244m\320\277`$C\3009\273\241\277%@\007\337s\311\312?+\017\014`\355\257\357?\304\374\310\252\343w\361?M\036U\232Qn\362\277\"\223s\274\274\213\340\277\013\242\030\r\243\330\361\277\263o\237[\245\232\337\277K\216\367\335eF\251?M&\223B\221\340\324\277e\370\376\233N,\300\277\025\301\177\235#G\352\277\034\305\030\271\240\241\247?x\250\211\352\303\211\357?\233;\262\302\"\211\346\277\203\255\004M;S\344\277p\nEq+*\370\277\037\346\265\214\237\356\354?y6\3277\326\r\370?\302y`\353\263z\365?\r\r>\354B\212\345\277\217\327\t\325\026\373\347\277\3041g\301U|\360\277^l\212\344\331\342\347?\271\002d\313fe\361?\022\222#\267\014\246\352\277\3746`\2376\r\312?E\266zn\323\211\364\277\256q\301\247.\344\356\277\346;\373J\2318\345\277\022m\233\262\364\024\231\277T\303Y\374\263\211\323\277\205q\" n\361\356\277Y\372\307O2\300\341\277\315D.\360\203\302\267?;~!I5\351\362\277\306\375\037\253<\037\002\300g\304urp\255\312\277:\314\216\340\205{}?N\307=\312\372}\377?\343,\"\024\275t\354\277/p\026\272\340\323\346\277\310\013\010\032\306\332\362\277\361h\270\230@a\311\277\024\305`\010\014\321\t@<\274\200\201\234i\361\277\377\374=\306\264\330\346?.\221\273\350\001d\265\277,Q]!\352\253\314?\314P\266\220\002\014\342?\034\3330\311\210\006\343?{\315_Y\350\252\365\277\2142\300\374\220S\343\277&\352\021\216\003\214\337\277pZ\345\016\244m\320\277_\020J\336\007\031\260?;H\243\210\035\316\332?\372\017\'\006\260m\357?\220B9/=\261\302?\227\261\200\022\023>\344\277Ku6\273P\333\350\277=\022\204\030Z\201\334\277c\n\341\260\013!\340?4{C\023\205\246\206?\223\206\262\243\366\230\306?\005\262N\305\t5\275\277/P\371B\254\225\330\277\016!\001\0365\035\333?\334p#NRU\353?\2779\271\352\240J\356?5+u\204{Y\261\277\313\177<\222\215\310\347?\250\201\020\224\331\221\273\277\264ET_7\241\320?\2671\241\026\006\023\310?.\275GO\200\003\374?+5\245\375\243\265\343\277\264WIt\201\303\364?\371\307\020a>=\357?\223]_\031\t\363\265?\336_{\002~-\230?\375\234\233\212\307M\317?\265\021\374*qR\363?\003\002*\332\'\013\323\277l\025\365\302&\240\322?\037\337\032\367\373>\310\277n\246\374\374o\304\367\277\205:+\335/\334\241?&\236\370\177\323s\352\277\227\035z>\362\305\004\300Pj\373\326!\\\322?\233\037\353\345\036F\343\277\361\030p\355\200\342\311?\224\220\262\306\354W\367?\021\367\"\270h\314\265\277\213\351{6GL\370\277\307\276m6<o\255\277\345s\3345\023\322\341?\220\t/a\"\211\276\277wB\262\020\316\310\346\277C\356\304+/T\300?O\237\023\240\236\375\366\2772\363\270v>\223\367?R\251\t\304\026\303\321?\336a\204\r\235\365\350\277/\365\207\212Nk\302\277\272\022\305\3006\331\310\277\'\212\337\376\233F\331?rcu;\201\271\367?\250\316a>h\205\302\277!0\216\254\307k\353\277\344r\332O\023\330\352\277\370\317id- \357?,!\235\\\225\364\330\277\002k\2415\006\005\246\277\177\020\320\347s\177x\277\325(\232\305=\337\016@\267\236\262\204\311\316\321\277\342\326\376g\020\231\337\277zM5\255y\221\324\277f\217\251\000\302\n\332?\273\214\204\242T\242\273?*\306\375H\373+\341?a\226E\215\315!\330\277\314\202\310\034\201l\364?\204KO~\202\313\307\277\205\344\2716A\327\343\277Mt\244\201\326&\323\277\256q\301\247.\344\356\277LZ\272\201?\377\351?\261\240\035\216E\205\356\277\265\314L\275\314\271\272?=\022\204\030Z\201\334\277\021\347\336D\263\350\347\277lsQ]\323\232\375?M\262Y\361\006\371q\277\2475\235\357\224\376\360?\200\336\223_\004\252\311\277\221\244\263\206P\246\361\277\377\031\030i\341\201\347\277\211\027n\336\363\222\352?\210X\037\244 \365\340\277T\303Y\374\263\211\323\277\251\313\251x\234\004\342\277Oz\255\335\377!\322?C\246\265)\344\020\010@\370,\254P\377\343\315\277\005\346d$\217\347\353\277I\345sS\001\214\006@\365\325\322\221)\030\277?\361{w\275\307\332\313\277\227\373;\267\'\211\327\2776\325\225P\203D\320\277\342\217\"\206hc\315?lS\235\270\200\215\336?\306\375\037\253<\037\002\300@\212? j\232\344\277s4\3579\366\374\361?N\261#\020\230\220\370\277\274\371\225\020\030^\325?\006;\262\036\rH\267\277=Kx\311\374\200\326\277BDsj\0179\371\277=\356\250\233E\345\200\277\226Y\323\301r\270\361?\252\\\240\322\274\274\360?\024\377\232]\326\000\275\277\374\226pnLz\263?>q\257|\203&\352\277\305k.\212Ke\305?\026\014\2419\323\013\321\277\253\264\034.E\022\373?\'F\266!y\340\364?\256\335Y\027\303\232\302\277\3126\333I)1\343\277?\305\330\320\257\264\321\277|\362~\205\3778\331\277\374:+++\364\347\277\252\202\320\244\230\357\363\2777\304\322\252\3477\357?\326:\253E\351R\357\277\375\355X+kv\003@\240M\355o\2053\324?t\347\214\257>\235\364?`\227\216\tUi\340\277\221\366\233v\213`\240?\252\024\013\301\000\234\346?\365\256\217v\025\026\317\277\355Ri\242\366b\320\277\206\350\021\370\334\361\352?\031\212\332\225\327i\371?K@q\247=B\271\277\031\321\273\265\266\347\256\2775\271\332\034x\203\276?\212\300\241G\253\004\000\300S\005\355\026\351\026\256\277\212$\226zBv\353\277)\3441H\330\210\300\277,\345\233\215IA\334\277.\250\367\244Zm\343?-\0224\322>v\341\277s\200\346\013\3141\311\277Yh\\>\262\343\346\277V\375Q\272\301\242\340?X\270\001\235q\330\321?\267P\331\"N\211\332?\350\306\2277\202\243\274\277\014=\306\323\315@\342?\334ty\350\202P\326?q{\242\201\250E\305?\363\344\207\3517\316\274\277\207\026H\323\262\033\002@cEa-\r\352\373\277ag(^$\226\361?b\247.\275\231P\377?4\234\356\006a$\t@\017c\307\320\365\004\353\277\325\217f\323\217\225\354\277\371V\304\254\362\230\311?\215\232\365?\242\341\355?\334\3309\350\3353\360\277\377\361\274Im\321\366\277\223+R\313\301\332\326\277\245)\002Ij\265\243\277\014\304,\277li\257\277%\204\326\242rK\332\277\204=\315\205\2034\350?^l\212\344\331\342\347?\016</]\004\320\250\277\217B[\357\216\211\317\277\346\221\313\305\323\000\334\277\213Br\003o\031\343\277\313\177<\222\215\310\347?\233v\240\313E\326\345?\223\266Kk\252\273\331?F\236\3306\350\021\324?zM5\255y\221\324\277\322\007\223\214\233\027\354\277\025\301\177\235#G\352\277\000\351\264\221\360\007\366\277V\354\235\315\343\342\351\277\374<Vx\303q\365\2773=\372\353W\252\244?b\021\215&\330<\333?\233\003:\252\212 \371\2777\263\013\267u\354\325?\352\250\205t\377)\373?i\327@2\342\354\341\277\003\3611\361\235\217\361?\210\013\275\031i\225\343\277\037p\371\217H\030\360\277\376\212d\035-&\315\277\351\307\375.\035\035\260\2773\372\310\375\245.\377\277\t\300\005}\377E\356\277\333;\203\020u1\340?_\341d\t\031%\361\277\207\271\213\366Q5\345?S\022gW\007\226\005@\226\300\351\234i\274\333\277\034^FWF\360\350\277<\020*Y\314&\000@1\327S\213q\016\343?E\317\355\226\246\313\363?*\357\210\260\262\322\350?\361\336a\216\003\254\363?\320\355\246e\231\320\346?\253\224h\211\362\004\334?%3\247e[\345\322? \333\031\265\250v\337\277m\031\302u\206\246\334\277\212w\020\032\341\035\322\277cC\350b#\332\235\277\3351\013\337\317\213\266\277\215\244\254\254\254\221\357?\035\254\275\316\221\325\337\277\263\005.\353\322\"\361\277\266t\260ENB\320?\207\273h\314\267\362\360?\033\226\'B\300\211\345?\037W\215O\'\247\317?\245\237\005XQ\344\302\277%\202gY.\022\322?~.T\031s\017\362?\236L\351b\032\032\341\277e?\035\326Fg\360\277kK\3555IX\320\277\027\374\3562\365E\321\277\307L\210\352\332\014\341\277\246:jh\220=\344?\233j\215\034\213x\336?\2013\244E\210\037\351\277~\337E\256m\"\361\277\256q\301\247.\344\356\277%\367<\304-\001\367\277\034\200@\244\340\353\362\277\024\215*\0039\212\343?\343Y*\023F\253\277?\270\004\356oZ\017\327\277\362\361\213\245\320\027\363?\335\265\366\036\274\360\335\277\250\235Q\237\360|\325?^\271\354n\221B\345?\345\335\266x\307z\337?\026\003FP\344.\312\277\027\004\027A\314\370\370\277A\365\033I\036=\331?}\240\006\314`\213\351?\356\000\361\350W\265\340?\033q\322_J\032\367\277\271\363\365\206\320\223\365?L6EIo\246\324\277\315\367qL\250~\365?N\244\222\241g|\350\277\206\226\0160\0020\336\277\371(\230\007\030\220\342?\332n_\2540\351\320?Q\374y\3575\304\357\277\206\t\246F\325\025\323\277\233F\030\344\272\037\351\277+\223\316{\315`\332\277u\277\0265\033|\366\277o5\371\376\017/\341\277S\217\025B\3628\303\277\325\001\265m\3333\331\277=WP\213(\023\276?\357i\270^\334\231\362?\310\"a\311\353f\215\277\366\021u\206\n6\304\277\362/\332\004\026\212\271?Q\341_\240TH\321\277\310D/\347\353)\341\277\205\271Q\371#s\360\2777w\322\n`8\322\277\321\261\233\024\300\272\264\277\000\353\221gV\305\341\277\375\026\330.\265~\360\277\331\032G8-\307\357\277,\257N\302IV\354\2771\354\324*\257\324\343\277B\243\030\201C{\354\277u\237b\220\310n\347?\264y\202\374\200\311\266\277\302\367=\01603\333\277\355\206\317\034\n\214\275\277\213c\244g7\335\352\277<r\245\307\230Z\334\277w\21070\241\334\360\277X\234\257\2611\201\301\277\337\261\344\374?\274\316?h\237\315\332\2205\307?\374\366\235<m\016\367\2771\260\242fK\361\376?\303\347\213\007Rm\333\277E\3742\252)\355\362\277\302f\004\310\025\240\000\300\204\327E\315:\274\254?W\031\343\340f\004\331\277\021\367\"\270h\314\265\277:\314\216\340\205{}?"
      }
    }
  }
}
node {
  name: "tensors/component_3"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 750
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 750
          }
        }
        tensor_content: "\025\220\255\232\366\333\243\277P\t\246.m\342\320?\233\343e\306TW\372?\2243\373k\375\325\347\277\360\324x\2475\023\343?\203\233\215\343G\361\360?\353\265\244\267\230\016\374\277\363W\312\325\262\363\307\277-.\322\211\307\241\347?\371\206\316z\264\216\345\277S\237\030\344Y\337\346?\007\221J\364 4\336\277\364C\226\306\341M\352\277\264\200\335\001Z\327\362?w\263l\247m`\306?\236M\325\002\354,\336?\215\002*\\Pn\340\277jz\276 \342\004\371\277\t4vk\036\245\364?\313\227\306\306=\250\356?\231l\231\230\347C\364?W\017I\213g\243\272\277y.\021r\370\306\201?Q\320\007\002\203t\364?\rx\206\020\267V\303?\371\216}\211ug\344?amQ\325j\331\325\277\375\223;\306+\272\370??\330\246\266\242_\362\277\203\265W \225Z\366?*t\315\247\207M\346?{\312c ,q\347?\260\'\266\323r\277\254?K\tx\306O\307\371\277Fs\327\250E\257\334\277\013\261\351\245\005\254\246?\200\r\234\324\376\261\342?\261\362\353\362\020\230\344?\341\010+/L\023\364?wS\227\362\276]\341?\255Wo\212\324\377\374?|\324\375\247\024D\366\277\003\206\241\224V\n\225??\242\333MGJ\352?\343\2507l!\343\330\277+\311\0200E1\307\277G\254u\325/\035\371\277Z\354\352\037\025\363\360\277 \344\000z\270\001\271?f\266\202\024\361\032j\277\306\332\034\211\214\026\360?\363|4\363\313\273\366?\343\2507l!\343\330\277S\3429\344\235\222\006\300\37469\325\013\020\370?\311\256\275?\374\270\337\277 \344\000z\270\001\271?\200\r\234\324\376\261\342?\376\242\261\230F\r\322\277\253\271M\306&*\370\277S\237\030\344Y\337\346?\363|4\363\313\273\366?7\261#\270D\202\314\277~\2723k\307\332\360\277\224\213? g-\364\277P\t\246.m\342\320?\003r\331.\254\005\000\300\204\204h\002l\305\350?\366,\237M#=\331?\022\356zM^\371\365?;\031\306\2110\213\366?~XU/u\260\365?\245\326\010\325~\031\330?\201\356\365L\177\310\322?y.\021r\370\306\201?;\2035\306\307`\332?\247\257\263>>W\351?\266\367\251/\307\352\370?_\315D\230\225\t\361?\303f\365\266\220@\347?@#`\021\031^\345\277J\345\023\002\032\213\345?\033\250\177/\236M\367?y\007z\310c\357\251\277\373\243k{\220P\337?\211\37340\331\330\356?\313\227\306\306=\250\356?\203\265W \225Z\366?\'\232\271\240\226\255\202\277\242\014\324=\332.\360?Z\320\351\363\006G\356?\247\203\240kGB\366?\027\255[z\320\315\361\27758l\021\260t\366\277\\Y\035\306\2313\350?\213\334\216\250Y\357\336?xX\'\307W\225\336\277\201\336\227/\375\026\325\277\236\311\233\211\007\356\364?\361\245t\0024x\325\277\227\311m!\352\322\335\277q\207+lY0\354?\237v3 \320\026\343\277\215\223\260li\375\312\277`\234Uzlt\343?w\263l\247m`\306?\234B`_\032\371\254\277\036\327e\306#\273\316?Z\212\014\344\302\310\365?\330\224\003]P=\353?\306V\305\001,\252\360\277O\371G\021\3530\323\277\272\254\360\324P\354\345?\312Q\351\266\371)\366?^I\355\0205\235\361\277\375\311\006/\207\317\340\277\024\275\213/5d\350?qAN\\\025\262\363?\215>m\344\253\031\352?\016\221x\\>O\365?\316\225\371[\222\333\304?T[\315\247%\025\277?6\350\326k\007\366\350?l\344Kk\365\007\363?\327\273X\363\220\377\331?S\237\030\344Y\337\346?\360\324x\2475\023\343?\376\035\252\315\322\355\215?J\345\023\002\032\213\345?\336X\300\324\364\221\341\277\033\216\265\362P\344\361?&1\225\363\264\014\353?\237v3 \320\026\343\277\254\330\n\0025\241\003\300\341\010+/L\023\364?\224\213? g-\364\27758l\021\260t\366\277 \005\202 \276\367\367?\352\302/\021\214g\365?l\020_>\354\034\346?H-\274\326B(\274\277\215\002*\\Pn\340\277\367\277l\247\236\374\361?\327\273X\363\220\377\331?HT1!\306\305\354\277\2610\032\364\223=\376\277Y\367>\212G\t\335?6\350\326k\007\366\350?\006:\035x\230\230\240?\000\214\272\037\210\374\340?\226\274.>\220\302\341\277J\215\317M\2603\371?HT1!\306\305\354\277\270\335\337\362y\201\363?\"\213\304 F^\327\277\323\014\306\211\377\356\312?\334\317\214\002b\245\347\277B\\\376=\003\314\361?X\006\265\\b\\\366\277\312[\203>\342\374\344\2772:W\212\327n\306\277\251i\326.\372\330\360?\235+z\305Y\030\360\277\271\354\tO\373\213\317\277*l\036\231\306t\347\277\362\265\322\037\266)\323?\221\215*\231\216\'\304\277\363W\312\325\262\363\307\277>\362p\363\357\310\367\277~\2723k\307\332\360\277\323\361#\\\354\024\362?\356\005h\305^\250\360?\337\236\235\3448\020\372\277\337\204\323\247\353\246\364\277Ef\230\305\353\236\340\277\005\003\207M\365\017\347?\036\024\370\362\330J\321\277\200\r\234\324\376\261\342?\264\374\205z\371j\363\277\273\266\212\\9\277\364\277\211\307\240\266>\006\344?&\277\206\002\376K\371?r\010\260/+D\347\277\311\256\275?\374\270\337\277*u\003\017O\242\243?\211\307\240\266>\006\344?B\374\n{\330\233\326\2771\301\237\343Ba\360\277\370\316\226\003 \007\316\277\016RD\002\330\035\301\277e7\206l\017\304\375\277\022\370\024\325F\314\344\277\007\341\375\247E\340\301\277\215\223\260li\375\312\277\'\232\271\240\226\255\202\277]pB\247u_\360?\032\025\262\325\"\216\336?_\023\"\250\331\207\351?1i[/\331\t\344\277\3371k>\264\317\322\277\217U\222\305\207E\362?1\230_\324\332\244\321?y\007z\310c\357\251\277T[\315\247%\025\277?/\267\005\\Z\216\341?\362\265\322\037\266)\323?\337\236\235\3448\020\372\277\332\273\365\253\245}\225\277\t4vk\036\245\364?\342\032]\021g1\006\300\262\303\347M\017\375\326\277*t\315\247\207M\346?\236\311\233\211\007\356\364?\005\003\207M\365\017\347?\374@\323\\\364\342\346\277\003\206\241\224V\n\225?1i[/\331\t\344\277\230\331\313>l\204\333?1`\231\230\266\247\310?\360\324x\2475\023\343?S\237\030\344Y\337\346?\236\365\256\\\376\002\350?B\\\376=\003\314\361?\236M\325\002\354,\336?\370\336\003(`\317\006\300jz\276 \342\004\371\2771`\231\230\266\247\310?\\Y\035\306\2313\350?\227$\263\001\000\236\305?\225;\252z\276\256\346?\343\327;\021#~\346?\365\034A0\241\213\333\277\261\362\353\362\020\230\344?\374\034o\230\276\246\362?\245\306\252\267\374g\332\277\371\216}\211ug\344?1i[/\331\t\344\277>\362p\363\357\310\367\277\221z\t\022\037\013\263\277cVZ\\\254\310\344?\237v3 \320\026\343\277V\"j\022\327\277\313\277C\335d\363X\262\346\277\022\370\024\325F\314\344\277\332\273\365\253\245}\225\277\215\223\260li\375\312\277\364C\226\306\341M\352\2775\214\335\234\227\222\017\300:\206\370/\265\313\335?\320\\\226\306C\206\261\277P\t\246.m\342\320?\336\"\365k\231|\371?\345\211\221\344\241\371\350\277h\231\222\020\177\t\340?{\312c ,q\347?\305GO/\021W\327?\223b\377\020\377p\325?6\274\303\230\020\341\365?\265u=!\216x\311\277\316\225\371[\222\333\304?\330h\360\211Y(\370?\036\327e\306#\273\316?W\026\345\021\307\362\354?\302\335\301\344\375S\355?\216\333\324\305\017\254\321\277\332\273\365\253\245}\225\277\301\371\302\020\014\000\360\277*\252\211\t%L\003\300;\2035\306\307`\332?cD\021\306\002\035\367?&1\225\363\264\014\353?o\275\366\324\264E\364\277\342\373\237\325X\272\372\277mh\205\344\331F\334?\2243\373k\375\325\347\277\360\324x\2475\023\343?\036\327e\306#\273\316?\3371k>\264\317\322\277kkHN\307\261\337?&1\225\363\264\014\353?\3127\037z\254\300\360?\264\374\205z\371j\363\2776\350\326k\007\366\350?*t\315\247\207M\346?\007\317\333\037\314\257\000\300\231\252\307\231j\351\355\277\267:\264{|\020\335\277[Qn\267\330Z\351\277\232_\016?\364\352\372\277\225;\252z\276\256\346?\352$\016M\336\221\360\277\261\362\353\362\020\230\344?/\267\005\\Z\216\341?\375\223;\306+\272\370?\003S\034\363\235\216\364\277\347\032t\305\365\276\341?y9\201?\330\253\356\277\306 \372\230\320\224\350?S\237\030\344Y\337\346?!\370\366\306\312\236\376\277\025\351\314jI\224\302?/\267\005\\Z\216\341?y.\021r\370\306\201?\021j#\306\375\214\366\277\236\365\256\\\376\002\350?\036\327e\306#\273\316?\233\233\177/m\261\313?G\254u\325/\035\371\277Z\320\351\363\006G\356?]pB\247u_\360?\257#\333\020:-\362?\25008\002\020k\344\277 \353\267\343p\216\362?\313\227\306\306=\250\356?y\007z\310c\357\251\277\207\370\217\324g\233\361?2q\n>\232\342\342?6\350\326k\007\366\350?j\214\026\276I\307\001\300\\Y\035\306\2313\350?d<yk\320\321\003\300\016\265\334 t\213\351\27758l\021\260t\366\277W\342P\230, \342?\361\370\334kkO\367\2776\350\326k\007\366\350?\215\223\260li\375\312\277\rx\206\020\267V\303?0\333i \220\312\365\277\033\n^k\360w\362\277vK\350\343\375\204\342\277!2\302\331\022\221\233\277\007\221J\364 4\336\277\032\025\262\325\"\216\336?\000\214\272\037\210\374\340?_\300\271>\242\260\367\277:\206\370/\265\313\335?\016\363V\230\220y\360\277\310\251-kc\201\342?X\347\340l\305W\337\277\306\030K\212\017\274\351\277\225;\252z\276\256\346?vK\350\343\375\204\342\277cVZ\\\254\310\344?2\245\236\2674\265\355?\264\374\205z\371j\363\277\211\37340\331\330\356?%\365QkYa\341\277\326\253\372\325\016N\334\277W\332\241\211kG\343\277Y\367>\212G\t\335?}\033\n\225U\255\014\300c\212\356\325F\233\357?\276\347yzbT\342\277\263\323Ek\221\256\324?\004\324b\364\260\231\267\277h\315&\212\031\334\352?\"\360\204\'\345\367\001\300\331J/\"\036\255\275\277X\347\340l\305W\337\277kkHN\307\261\337?n[\030\231b\033\371?\0316\200E\245\243\000\300\242d\314{\252=\357\277\371\216}\211ug\344?\310\251-kc\201\342?\376e\037l\221}\317?C5\251\247\302\t\363\277=H\254 \266\370\315?\334\317\214\002b\245\347\277\025\351\314jI\224\302?\306 \372\230\320\224\350?\340A\311[6\201\320?\022\324\260\020\021\220\360?T[\315\247%\025\277?\322\207\226\021\331\021\370\277?\330\246\266\242_\362\277\205\216\002\212T\230\367\277\013\'\353\021+L\373\277Q\0166\003\006\032\356\277\331J/\"\036\255\275\277 \353\267\343p\216\362?\303f\365\266\220@\347?\024\275\213/5d\350?\316\225\371[\222\333\304?\344\270\225\211\243\224\326?\237\274\0200\024\225\373\277\223b\377\020\377p\325?\2428\347\020\321C\343?\215>m\344\253\031\352?7\261#\270D\202\314\277\317\256\353\247\031\324\366?k\313Y\037n\017\301?c\246\357\001UG\362\2772\235\357\250s\334\356\277~|\271\363\252\354\351\277\326\253\372\325\016N\334\277\006N@\250k\016\372?D\323\312kp\337\367?\236\250\032\343\001\370\265?0\210R\374p\324\216\277\270\335\337\362y\201\363?\376\035\252\315\322\355\215?\207\022Z\021\265\004\367?\345e- l\275\364?\324\0357/\343)\345?\341FY0\317\270\355\277\372\356R>$j\311?\370\316\226\003 \007\316\277`\234Uzlt\343??\242\333MGJ\352?\223b\377\020\377p\325?wS\227\362\276]\341?\276\347yzbT\342\277Tp\024?XD\331\277\216\306\215.\335|\267?\026\236\345\247\265z\330?\242\037\347\020o\013\274?\336X\300\324\364\221\341\277{\312c ,q\347?\360\n5\t\323\021\000\300W\017I\213g\243\272\277!\356\\?\342\313\357?N(L\266\354\313\340?W\017I\213g\243\272\277\205Ud]j*\333\277\004\324b\364\260\231\267\277A\271\000/#v\362?*l\036\231\306t\347\277&\375\000z\032:\340?\025\216\207\2123\311\332\277\276\347yzbT\342\277\235+z\305Y\030\360\277\3047\361\021\217\245\331\277\022\370\024\325F\314\344\277\211\37340\331\330\356?s\341Z\231\352\201\330\277i\376\025\250Bq\370?\374Hk\267&.\n\300\231\262v\250+\302\354?*t\315\247\207M\346?s<\240y\000M\300?\340A\311[6\201\320?\257#\333\020:-\362?\271\354\tO\373\213\317\277V-\n\363\242\036\365?\024\266\357\250\325\024\266\277??#{h\001\260\277;+\017 \3326\344?!\356\\?\342\313\357?W\244\326 \0202\373??\330\246\266\242_\362\2771\230_\324\332\244\321?\245\326\010\325~\031\330?8\2578?\035\210\374\277\213\334\216\250Y\357\336?cVZ\\\254\310\344?U\217\350.\365H\360\277\317\256\353\247\031\324\366?\340A\311[6\201\320?h\315&\212\031\334\352?\324\346\203{ \266\310\277m\221\343\001\2760\341\277\204\250\314\306\241\001\375\277\247\257\263>>W\351?L\227i\325\230\006\350\277\242\210|\266y\302\360\277\267J\022\231\376\301\332?\240\242F\363\306+\366\277~|\271\363\252\354\351\277Km4LK\356\262?oj\216k}n\322\277f\344\035\003\330\354\333\277\300\320\202\001\244C\321?\264\232\247>\247@\370?\336`o\343\265j\340?^\013s\231\030\257\352\277\'!e>Pv\364\277\251i\326.\372\330\360?`\371@\267\375\220\010\300\324\346\203{ \266\310\2776\340\']F\035\352\277\237\316h\315{W\004\300.\354\317<\274\265\251?\265u=!\216x\311\277\243\355\377M=*\351\277\302\335\301\344\375S\355?\224*9\325\332s\314?\330h\360\211Y(\370?0\210R\374p\324\216\277\306\364\346\305\331\177\365?w\025\035{\242o\372?\354\221@\363b\322\347?\022\356zM^\371\365?\257#\333\020:-\362?\000\366\031\002~\344\363\277\306 \372\230\320\224\350?^I\355\0205\235\361\277\336D\214\305#\354\323?\323\361#\\\354\024\362?\216H\007l\224\354\370\277`\234Uzlt\343?oj\216k}n\322\277\227$\263\001\000\236\305?r\010\260/+D\347\277\310\251-kc\201\342??\232,?\206q\353\277\222\201\245\230~Z\345?\345e- l\275\364?\212\375\\\030\334\004\001\300\266\367\251/\307\352\370?\177K\312\325\201W\374\277\240\242F\363\306+\366\277\221\215*\231\216\'\304\277K\tx\306O\307\371\277\310k\263\363F\223\373?\375\311\006/\207\317\340\277\226\361\325?\214\036\271\277\336X\300\324\364\221\341\277\211\307\240\266>\006\344?y9\201?\330\253\356\277!2\302\331\022\221\233\277?\330\246\266\242_\362\277\302\335\301\344\375S\355?\222\201\245\230~Z\345?6\036\242\324b\013\361\277\256\007\341Yx\200f?\223\245\t]\264\226\371\277\032\025\262\325\"\216\336?\247\257\263>>W\351?\367;\025 >\220\362\277\030>\362\344\212J\375\277wS\227\362\276]\341?{\312c ,q\347?;\377\373L\343!\361?\035\240\347\324k\002\004\300\020*\334\3435\322\325?\033\250\177/\236M\367?<\021./\376?\003\300q\207+lY0\354?s<\240y\000M\300?\'\232\271\240\226\255\202\277\257-u\230\"\000\341\277@#`\021\031^\345\277\016\265\334 t\213\351\277\004\324b\364\260\231\267\277\253B\201\230\271\026\362\277\347X\242\306xd\373\277HT1!\306\305\354\277\231\262v\250+\302\354?\262\303\347M\017\375\326\277??#{h\001\260\277\236M\325\002\354,\336?&\375\000z\032:\340?-\002\277\266\320\214\364?\255_<\247\021\006\322?L\227i\325\230\006\350\277\320o\267M\263\242\302\277r\236PM5\\\364?\371\216}\211ug\344?\242\037\347\020o\013\274?cVZ\\\254\310\344?\020*\334\3435\322\325?]\271\362zH6\315?\354\221@\363b\322\347?l\344Kk\365\007\363?\3371k>\264\317\322\277=H\254 \266\370\315?\013\373\327>47\350\277\207\022Z\021\265\004\367?\007\317\333\037\314\257\000\300\257-u\230\"\000\341\277\352\000^\022\017\r\357\277\021j#\306\375\214\366\277\265u=!\216x\311\277\205\216\002\212T\230\367\277\320\241`N&{\375\277c\212\356\325F\233\357?\377\017\344>\313M\371\2771`\231\230\266\247\310?*u\003\017O\242\243?\024eG{\313\014\374?\222\201\245\230~Z\345?Q\320\007\002\203t\364?Fs\327\250E\257\334\277p\177|]\230W\355\277\203\233\215\343G\361\360?@#`\021\031^\345\277f\266\202\024\361\032j\277\332}\014\344\221,\312?\317\256\353\247\031\324\366?\340A\311[6\201\320?`\354\333\030W\334\005\3006\340\']F\035\352\277B\\\376=\003\314\361?\313\227\306\306=\250\356?\257a\t\022\275\322\353\277\226\034\326\212!\252\377\277\371\206\316z\264\216\345\277\202\230|]\372\217\264\277\277#\275\002\276\377\353?\220\370q\306\353m\353?\\\217\331\'72\005\300\371\216}\211ug\344?\227\313\2231\255\345\246\277W\017I\213g\243\272\277\024\275\213/5d\350?\312\217\027\270|\317\357\277B\374\n{\330\233\326\277C\335d\363X\262\346\277Z\212\014\344\302\310\365?\2428\347\020\321C\343?\2156\276\325\352@\353\277\372\262\341M\253\243\370\277\024\266\357\250\325\024\266\277\303f\365\266\220@\347?\006\204\013\021\307#\342\277\276\347yzbT\342\277y.\021r\370\306\201?\345e- l\275\364?\366,\237M#=\331?\000\214\272\037\210\374\340?\324\346\203{ \266\310\277\256\007\341Yx\200f?qAN\\\025\262\363?\267:\264{|\020\335\277\212\375\\\030\334\004\001\300\030C\345\343KX\003\300cVC\250\035;\t\300\301\227\344\324\271\325\364?\332\273\365\253\245}\225\277\236\365\256\\\376\002\350?\202\230|]\372\217\264\277n\361\212NO\030\377\277%\365QkYa\341\277$\304bM0\314\363\277\210\005\317\267\301\253\375\277&\245\274\305\260\342\363?!\356\\?\342\313\357?Z\212\014\344\302\310\365?\263\323Ek\221\256\324?\2428\347\020\321C\343?&)\346\344\3633\354\277\000\366\031\002~\344\363\277\201\356\365L\177\310\322?l\344Kk\365\007\363?\222c\234j)\311\257?\371\216}\211ug\344?An0 \036\352\003\300\374H\202k\265\273\345?]\271\362zH6\315?\006\204\013\021\307#\342\277\324\346\203{ \266\310\277\371\216}\211ug\344?W\342P\230, \342?8\2578?\035\210\374\277!2\302\331\022\221\233\277H\026\003 C \363?\303^F\250\317g\350\277\016\221x\\>O\365?b}\257\362\354\212\323?V-\n\363\242\036\365?\351/b\267\020\250\334?\344\270\225\211\243\224\326?f\344\035\003\330\354\333\277\362T\307\003@\322\240\277\374H\202k\265\273\345?{z\354\210\377\037\320?\341FY0\317\270\355\2779\321\337\362H\345\307?\271\354\tO\373\213\317\277\255L\033 \242\351\320\277\230\331\313>l\204\333?\013\373\327>47\350\277V-\n\363\242\036\365?\207\370\217\324g\233\361?.\303\212\\j[\300\277\231l\231\230\347C\364?\343\2507l!\343\330\277\017F\277\001\310P\342?W\342P\230, \342?HT1!\306\305\354\277\343\2507l!\343\330\277 \005\202 \276\367\367?Aa\313\201w5\001\300)\353\231\325\364`\354?\245\306\252\267\374g\332\277\233\233\177/m\261\313?T\251\262kB\262\365\277\330\214TN\217d\354\277\312[\203>\342\374\344\277\374\034o\230\276\246\362?8\264+>\336\225\002\300\343\2507l!\343\330\277\276\347yzbT\342\277_\023\"\250\331\207\351?Km4LK\356\262?1i[/\331\t\344\277b}\257\362\354\212\323?\'!e>Pv\364\277\305GO/\021W\327?\330h\360\211Y(\370?{\312c ,q\347?\374\034o\230\276\246\362?\242&\236z\'\230\365?\215\223\260li\375\312\277\226\304\335LQ\233\340?H-\274\326B(\274\277amQ\325j\331\325\277\272\254\360\324P\354\345?\016\265\334 t\213\351\277Ms\005\021c\312\363?\326\006@\266$\031\304?\306 \372\230\320\224\350?2\245\236\2674\265\355?cVZ\\\254\310\344?\024\266\357\250\325\024\266\277\253\352<\344O\277\345\277\256\007\341Yx\200f?\316\225\371[\222\333\304?W\026\345\021\307\362\354?\234ED\002\247\201\365\277\030\000\304\343\007\245\343?y\007z\310c\357\251\277\312[\203>\342\374\344\277\025\216\207\2123\311\332\277\277\357(\211#-\341?\006\204\013\021\307#\342\277\005\327sz\376\372\363?;_\243\231t\t\357?\242l{\212k\026\356?\236\250\032\343\001\370\265?\"\213\304 F^\327\277\335\212\247\227&s\264?u\302\264\021k\230\350\277\366U\337\\\213\371\367\277\251\\K\325\006\200\367\277\236\365\256\\\376\002\350?\251i\326.\372\330\360?\206e\302z\354\333\330?&\245\274\305\260\342\363?J\345\023\002\032\213\345?\022,\251N\341\236\357\277&1\225\363\264\014\353?\227\350A\021\207\327\364\277\262\303\347M\017\375\326\277\347\334\371M\331\320\372?\025\216\207\2123\311\332\277\265u=!\216x\311\277\320\\\226\306C\206\261\277"
      }
    }
  }
}
node {
  name: "tensors/component_4"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 750
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 750
          }
        }
        tensor_content: "1\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\277^F\004\360f\236\271\277U2\350\001\267\336\276\277L\274\177M\033x\275\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\277MR\262\211\231\334\276\277 \330\244\374\373\334\276\277S\225\263\231\363*\267\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\277\272\223f\231\330\263\207?1\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\277\315\246rmT3\276\2771\343\301{b\340\276\2771\343\301{b\340\276\277\264\216\231\010\224\326\276\277\347b\237\245\034\262\375?*\242R\020\244\327\276\2771\343\301{b\340\276\277\024\021\304=\310\\\275\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\277\303\023\027\256^\351\363?\357\261d7\301\263\276\277rL\235\247\204\301\276\277\016\000\365?\201\332\276\2771\343\301{b\340\276\2771\343\301{b\340\276\277\221\253\314\314\262\320\276\2771\343\301{b\340\276\277^Fip%\335\276\277x\241\016\335F\261\025@1\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\277\351$\236\356\225O\274\277\357\252\017B\013\307\275\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\277\"]\213\345|\366\272\277L\274\177M\033x\275\2771\343\301{b\340\276\2771\343\301{b\340\276\277\346\201$U\022\333\276\277\240\026E\013U\337\276\277\2504\240\r\035!\276\277\271\263\333\021=P\257\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\277\361b\360J\304\264\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\277g\350\311\030\264\310\276\2771\343\301{b\340\276\277\361g\271\271\210D\276\2771\343\301{b\340\276\2771\343\301{b\340\276\277H\211\232\363\205\271\276\277\232\347\232\246:\336\276\277\236e\271\367Q\336\276\2771\343\301{b\340\276\277K\r\200\300\t\324\276\2771\343\301{b\340\276\2771\343\301{b\340\276\277\215\377\266\323\024\306\360?\305\342C\037H/\276\277\255zPF}\017+@#\352!M\317\300\276\277\036\306\227?\207\261\276\2771\343\301{b\340\276\2771\343\301{b\340\276\277\371\334\223\364\332\330\276\277Q+\373\233\024\245\276\2771\343\301{b\340\276\277,\256P\233\333\304\276\2771\343\301{b\340\276\277g\"o\006h\233\272\277\376\350\016\324f\013q?\270\260\337E\273\254\275\277\271\310\033\016\260\245\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\277U2\350\001\267\336\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\277\373v\271o\003\327\276\2771\343\301{b\340\276\2771\343\301{b\340\276\277\274F\362\250\366\201\276\277Q #\373\022\327\276\2771\343\301{b\340\276\277\376U\201G\032\226\276\2771\343\301{b\340\276\2771\343\301{b\340\276\277~aD\000)\337\276\2771\343\301{b\340\276\2771\343\301{b\340\276\277\212\257gSQ\022\347?\377[\220yW\324\276\277\315\275hr\320}\276\2771\343\301{b\340\276\277\240\026E\013U\337\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2779\262\310jp\262\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\277b\250\200\227+\337\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\277\305\314#J\346\332\276\2771\343\301{b\340\276\2771\343\301{b\340\276\277Cq\236\335\026\337\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\277\300\027\032?vp\253\277s\225#3\334\237\203\2771\343\301{b\340\276\277\353\245\261q\257^\272\2771\343\301{b\340\276\277b\242qe\356\240\276\277\377[\220yW\324\276\2771\343\301{b\340\276\277\205\3049[\224\334\276\2771\343\301{b\340\276\2771\343\301{b\340\276\277\361\303q\3645\337\276\277\006S,\212O\331\276\277\346\201$U\022\333\276\2771\343\301{b\340\276\277-\201\252T\\\336\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\277\372\321\017\030_\353\377?\255D\014~\375\331\266\2771\343\301{b\340\276\277\312\305n\311g@\274\277\271\007\027\310t\333\276\277f\004\211\214\364\242\276\277(\003\346\345t\247\366?1\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\277\323Y\"x5\336\276\2771\343\301{b\340\276\277>B\364x\374\335\276\2771\343\301{b\340\276\277\334\211bZ\344\266\276\2777\030\353\245\030\330\276\2771\343\301{b\340\276\277\267\230\243}\306\263\274\2771\343\301{b\340\276\277\276\333\276H\271\250\276\2771\343\301{b\340\276\2771\343\301{b\340\276\277\217\330r\0232\267\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\277BT)\023\377\235\276\277VO\205\251\\\264\276\2771\343\301{b\340\276\277\222\331\230\375g\326\276\277\000K\251\246\030\310\276\277U\265\247\344\004\332\276\2771\343\301{b\340\276\277s\037\367`\005\333\276\2771\343\301{b\340\276\277\022s\253\203\365\304\276\277\307\223\3172K0\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\277t\354A\350H\266\276\2771\343\301{b\340\276\277\216ylC\241$\037@1\343\301{b\340\276\277\266\211\370v]\333\276\277\273\312B\024\343\303\272\277S\225\263\231\363*\267\277\003\241\242i\244M\276\277\031oX\271\202}\276\277\312\027\304\034\331{\372?1\343\301{b\340\276\2771\343\301{b\340\276\277VO\315_-\330\276\2771\343\301{b\340\276\2771\343\301{b\340\276\277\226\270\360A \335\276\2771\343\301{b\340\276\2771\343\301{b\340\276\277\356\3232\335>\314\276\2772\260\014\003\246\273\276\2771\343\301{b\340\276\277\337\353\3017\273\334\276\277\305\326%\273\315\262\275\277\312\335\252\221\\9\275\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\277j\264\020{\000\007\357?\212c\316\303\344\230*@1\343\301{b\340\276\2771\343\301{b\340\276\277-{\233\"\037\240\276\27764\362\317)\326\276\277\361\204\276\360A\315\276\277\342\276\323:k\322\276\277\330\210\314\334O\337\276\2771\343\301{b\340\276\277%\267l\324\022\234\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\277\010\201\370\272\004\337\276\2771\343\301{b\340\276\2771\343\301{b\340\276\277\352T\026\177\177A\276\277\017\307\350\336\266S\276\277\332rDx\332\327\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\277\036\242\030\240s\252\003@1\343\301{b\340\276\277\244\323\316\251\217\315\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\277\376\350\016\324f\013q?1\343\301{b\340\276\2771\343\301{b\340\276\277y2\232\233\016\336\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\277\267\014\270Y\253\326\276\2771\343\301{b\340\276\2771\343\301{b\340\276\277\014O!v\255\265\276\2771\343\301{b\340\276\2771\343\301{b\340\276\277\355aZ\315/\335\276\2771\343\301{b\340\276\2771\343\301{b\340\276\277\364A\220EM\337\276\2771\343\301{b\340\276\277\342\315\334\356\327\343\232\2771\343\301{b\340\276\277]\254C\365\374\336\276\2771\343\301{b\340\276\277\021\217j\3675\237\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\277\336Q\234\274\222\336\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\277J\013\3649\030w\275\2771\343\301{b\340\276\277\334\376Wy\203I\274\277\350\350\334\rO\330\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\277\364\245v\264\037\321\274\2771\343\301{b\340\276\277\274\022\367l\301\256\275\277\234jZ\211\210\331\276\277\345+\303\002s\242\276\277\026\346\251}:\323\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\277\340\rH\'h\321\276\2771\343\301{b\340\276\2771\343\301{b\340\276\277\322g|\256\340d\351?1\343\301{b\340\276\2771\343\301{b\340\276\277\350-\205\210\347\201\265\2771\343\301{b\340\276\277\033H\301\244@\325\276\277\250]3<\257\336\276\2771\343\301{b\340\276\2771\343\301{b\340\276\277\250(\202\251\242\244\275\2771\343\301{b\340\276\277\261\327\216/\365\336\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\277\200.G\321\233\226\276\2771\343\301{b\340\276\2771\343\301{b\340\276\277\326\327@\311L\336\276\277\273\'\374j\215]\267\277@\230\305^\372\316\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\277/\033\320\317\204\334\276\2771\343\301{b\340\276\277O\014\223\262\201\377\020@\233\016Z\230\n\033\276\277F\357\274..\337\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\277\263\205\\\354\272\246\210?t\353\373$\320\007\276\277\362\t\265\240A\330\240\277\273]\350\255r\314\276\277b\250\200\227+\337\276\2771\343\301{b\340\276\2771\343\301{b\340\276\277{\356\375O\023\255\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\277\200\022\210][\274\276\2771\343\301{b\340\276\277ul\017\250\351\026\274\277cB\246\022T\335\276\2771\343\301{b\340\276\277\014\2360\342\353u\271\277\277\032\272\002~\336\276\277\221\002w\361\037,\273\277%\267l\324\022\234\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\277\024F\005=v\336\276\2771\343\301{b\340\276\277|\252a\004\030|\276\2771\343\301{b\340\276\277\312\n\354W\035\341\267\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\277\310D[FN1\276\277\244\236\345/|\022*@1\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\277\227\234\351\027\017\337\276\2771\343\301{b\340\276\277\302\230\330S\225\336\276\2771\343\301{b\340\276\277\030^I\t\266\334\276\2771\343\301{b\340\276\277\343\354\237k \330\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\277\177\344\003\343v\332\276\277\361\303q\3645\337\276\277m#\272\276\326\332\276\2771\343\301{b\340\276\277L\310\235\261\225\364\275\2777\352FR\361f\276\277\222\211\376&5\270\276\277\353_$\037\004\222\263\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\277\247y:f\300\334\276\2771\343\301{b\340\276\2771\343\301{b\340\276\277g\321\323\0238~\276\277h\275\316\323S\n\325?\315\220R\230\362\336\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\277\324\230\215\305X\314\276\2771\343\301{b\340\276\277\t\203\275O\3162\261\277\375\364\327\300\032\327\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\277\226\270\360A \335\276\277T\230\352c\034u\276\277\222\032\263\271\024%\274\277\307\260\324i\004\271\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\277\227\375\335c46\272\2771\343\301{b\340\276\277\230\255\2104}\307\276\2771\343\301{b\340\276\2771\343\301{b\340\276\277\010\201\370\272\004\337\276\277\304!\027\374~\320\276\277\221\260\313:\372\342\263\2771\343\301{b\340\276\277\361b\360J\304\264\276\2771\343\301{b\340\276\2779F\267\326\315\335\276\277Vj^\333\276\372\242\2771\343\301{b\340\276\2771\343\301{b\340\276\277\210BX\254\253\334\276\277f\271\227KC\205\275\2772X\267\232\001s\274\2771\343\301{b\340\276\277Y\372\001\213\"w\276\277\220r\340D+\331\276\277\"r\312w$\333\276\2771\343\301{b\340\276\2771\343\301{b\340\276\277\213\327\332\n\221Q\001@n\206\2553\241\273\266\277\000K\251\246\030\310\276\2774\203f\274&\325\276\277\217\3641\207r\221\276\2771\343\301{b\340\276\2777\336(\356v\352\275\277\005^L\341!\313\276\277\336Q\234\274\222\336\276\2771\343\301{b\340\276\2774}W\212\351\226\276\2771\343\301{b\340\276\277\261\327\216/\365\336\276\277\017\027[\330[\335\276\2771\343\301{b\340\276\277 OF{\317[\276\2771\343\301{b\340\276\277\nkpV\217\327\276\277z\020\314\365\220\305\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\277\226\345\006\034\376{\276\277\272\241<C\235\331\276\2771\343\301{b\340\276\277\325\030\366\004;\356\266\2771\343\301{b\340\276\277\317\366s\230\334q\272?1\343\301{b\340\276\277[\316\327\006\237\301\264\2771\343\301{b\340\276\277\016\021\224\\\357\302\276\2771\343\301{b\340\276\2771\343\301{b\340\276\277\"9\2269\314\277\276\277U2\350\001\267\336\276\2771\343\301{b\340\276\277\177\344\003\343v\332\276\277~\203\312\357\325\323\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\277\205\205\206W\240\312\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2775\373\005H\242\336\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\277\243\013\350\020RC\271\2771\343\301{b\340\276\277g\350\311\030\264\310\276\277+\177HP\202\031\255\277xNY\017O\270\276\277Rj\366U\331\332\276\2771\343\301{b\340\276\2771\343\301{b\340\276\277\'j1\253\3612\355?\274\022\367l\301\256\275\2771\343\301{b\340\276\2771\343\301{b\340\276\277\317*x\023\033\335\276\2771\343\301{b\340\276\277dl\341^\'\217\302?\226\374\374 z\306\276\277\333\232I-#\303\276\2771\343\301{b\340\276\2771\343\301{b\340\276\277._\334\256\336\305\276\2771\343\301{b\340\276\277\224\327\\1\222\242\274\277\350e\035+\001\335\276\2771\343\301{b\340\276\2771\343\301{b\340\276\277-u\214\360\341a\276\277\377[\220yW\324\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\277W\006*\256\000\221I\2771\343\301{b\340\276\277`\004\203-3\241\257\277xN\241\305\037\334\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\277\006\320l\247\001\336\276\2771\343\301{b\340\276\277\342\255\354g,\306\276\2771\343\301{b\340\276\2771\343\301{b\340\276\277\n\340\'\241m\300\256?1\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\277m\373lS\275\313\276\277\262\'\341OW\331\276\2771\343\301{b\340\276\277\351\377B\246)\333\276\2771\343\301{b\340\276\2771\343\301{b\340\276\277#\000\322\216\322\\\276\2771\343\301{b\340\276\277\342\276\323:k\322\276\277l(\023\232<\262\276\277\276\354\245\033\370\264\276\277\260\370\316[)%\276\2775-\235\332s\351\275\277\353\245\261q\257^\272\2771\343\301{b\340\276\277\330\'K3\336\264\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\277\325:)+wE\274\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\277\375\252\004fT\323\276\277\352H\370\032\005\305\275\2771\343\301{b\340\276\2771\343\301{b\340\276\2776\310\230\205\266\335\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\277\304!\027\374~\320\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\277\220r\340D+\331\276\277\325\n\256\2138\337\276\2771\343\301{b\340\276\277/!O\225 \323\276\2771\343\301{b\340\276\2771\343\301{b\340\276\277\345\347\376\331\351\334\276\277\035\327~\022\306\275\276\2771\343\301{b\340\276\277\2343\023\216z\310\231\2771\343\301{b\340\276\2771\343\301{b\340\276\277\224(\370#\302\277\270\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\277\001\007\r[\035\227\276\2771\343\301{b\340\276\277)\003\301\3217a\254?\336E\306\016\351\205\276\277\nkpV\217\327\276\2771\343\301{b\340\276\277\230\255\2104}\307\276\277y7\376\211\024/\271\277\345+\303\002s\242\276\2771\343\301{b\340\276\277\322g|\256\340d\351?\'\270\332t\031\337\276\2771\343\301{b\340\276\277\016}5]3\337\276\277T+\211 2\356 @1\343\301{b\340\276\2771\343\301{b\340\276\277\236e\271\367Q\336\276\277\257\334/\301+\332\276\2771\343\301{b\340\276\2771\343\301{b\340\276\277xe\007^\372\336\276\2771\343\301{b\340\276\277\024\036(e\273\207\276\2771\343\301{b\340\276\277\226\353\025N;\272\276\2771\343\301{b\340\276\277\211\032\356v\244\262\271\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\277\n\257|5\351\300\276\277~aD\000)\337\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\277\r\n?g9\326\275\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\277\200\310\374\270e\334\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\277\326\327@\311L\336\276\2771\343\301{b\340\276\2771\343\301{b\340\276\277\0270}\330\000\327\276\2771\343\301{b\340\276\2774r\177\351\347\310\276\2771\343\301{b\340\276\277\376E\003O\371\031\242?E\372\334\205\000\321\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\277\024F\005=v\336\276\277U\r\245\204\024a\246\277\n\264E\244\255P\276\277\'\270\332t\031\337\276\277OX\241\342\223\213\276\277\275i.\357z\335\276\2771\343\301{b\340\276\2771\343\301{b\340\276\277\212n\3003\375\031\275\2771\343\301{b\340\276\2771\343\301{b\340\276\277\007\367\233,0\323\275\2771\343\301{b\340\276\277\353\245\261q\257^\272\277{\335\026}\324\240\276\277\210\347\235~\246\314\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\277cW\200$=\203\275\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\277\203M4\313d\331\313?\307\000o@7\327\276\2771\343\301{b\340\276\2771\343\301{b\340\276\277\005R.}\247N\276\277F\301\030\333\006n\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\2771\343\301{b\340\276\277K\007q\216\314\225\276\277\241\025\337n\231\241\275\2771\343\301{b\340\276\2771\343\301{b\340\276\277"
      }
    }
  }
}
node {
  name: "tensors/component_5"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 750
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 750
          }
        }
        tensor_content: "W)\2266\262\336\354\277\303\345\376 N\'\370?\252x\300\n\031(\357?\252x\300\n\031(\357?\014\221/S\255\335\363?W)\2266\262\336\354\277ci\032\351\371\270\362\277\014\221/S\255\335\363?\014\221/S\255\335\363?W)\2266\262\336\354\277\252x\300\n\031(\357?nh\321\035k\'\271\277<\317!o\327\224\346?\234K\006\247+\003\334?ci\032\351\371\270\362\277\252x\300\n\031(\357?\234K\006\247+\003\334?\352\177\367\232pK\344\277\014\221/S\255\335\363?\303\345\376 N\'\370?\367\254\261\376]p\327\277W)\2266\262\336\354\277\303\345\376 N\'\370?W)\2266\262\336\354\277\303\345\376 N\'\370?nh\321\035k\'\271\277\032\276\351\266\232\002\367\277ci\032\351\371\270\362\277\252x\300\n\031(\357?<\317!o\327\224\346?ci\032\351\371\270\362\277\234K\006\247+\003\334?<\317!o\327\224\346?\252x\300\n\031(\357?\367\254\261\376]p\327\277\201\361\221\337P\271\305?\032\276\351\266\232\002\367\277\352\177\367\232pK\344\277\252x\300\n\031(\357?<\317!o\327\224\346?\367\254\261\376]p\327\277\014\221/S\255\335\363?\234K\006\247+\003\334?<\317!o\327\224\346?\014\221/S\255\335\363?\201\361\221\337P\271\305?\303\345\376 N\'\370?\367\254\261\376]p\327\277\014\221/S\255\335\363?W)\2266\262\336\354\277W)\2266\262\336\354\277\234K\006\247+\003\334?<\317!o\327\224\346?\352\177\367\232pK\344\277\201\361\221\337P\271\305?\234K\006\247+\003\334?\303\345\376 N\'\370?\367\254\261\376]p\327\277\032\276\351\266\232\002\367\277\201\361\221\337P\271\305?\252x\300\n\031(\357?nh\321\035k\'\271\277\303\345\376 N\'\370?nh\321\035k\'\271\277nh\321\035k\'\271\277\352\177\367\232pK\344\277\234K\006\247+\003\334?\201\361\221\337P\271\305?\303\345\376 N\'\370?\032\276\351\266\232\002\367\277\234K\006\247+\003\334?nh\321\035k\'\271\277W)\2266\262\336\354\277W)\2266\262\336\354\277\032\276\351\266\232\002\367\277\234K\006\247+\003\334?\352\177\367\232pK\344\277\234K\006\247+\003\334?ci\032\351\371\270\362\277\201\361\221\337P\271\305?\032\276\351\266\232\002\367\277\303\345\376 N\'\370?\252x\300\n\031(\357?\367\254\261\376]p\327\277<\317!o\327\224\346?\303\345\376 N\'\370?\014\221/S\255\335\363?<\317!o\327\224\346?<\317!o\327\224\346?\367\254\261\376]p\327\277\252x\300\n\031(\357?\032\276\351\266\232\002\367\277ci\032\351\371\270\362\277\032\276\351\266\232\002\367\277\032\276\351\266\232\002\367\277nh\321\035k\'\271\277\014\221/S\255\335\363?\352\177\367\232pK\344\277\201\361\221\337P\271\305?ci\032\351\371\270\362\277<\317!o\327\224\346?\032\276\351\266\232\002\367\277\014\221/S\255\335\363?\252x\300\n\031(\357?\234K\006\247+\003\334?\367\254\261\376]p\327\277<\317!o\327\224\346?\252x\300\n\031(\357?\367\254\261\376]p\327\277\032\276\351\266\232\002\367\277ci\032\351\371\270\362\277\303\345\376 N\'\370?W)\2266\262\336\354\277\252x\300\n\031(\357?nh\321\035k\'\271\277<\317!o\327\224\346?nh\321\035k\'\271\277\014\221/S\255\335\363?\032\276\351\266\232\002\367\277ci\032\351\371\270\362\277\303\345\376 N\'\370?\032\276\351\266\232\002\367\277W)\2266\262\336\354\277nh\321\035k\'\271\277\303\345\376 N\'\370?\367\254\261\376]p\327\277\014\221/S\255\335\363?nh\321\035k\'\271\277ci\032\351\371\270\362\277ci\032\351\371\270\362\277ci\032\351\371\270\362\277\303\345\376 N\'\370?\303\345\376 N\'\370?W)\2266\262\336\354\277\032\276\351\266\232\002\367\277nh\321\035k\'\271\277W)\2266\262\336\354\277W)\2266\262\336\354\277ci\032\351\371\270\362\277\032\276\351\266\232\002\367\277\367\254\261\376]p\327\277ci\032\351\371\270\362\277W)\2266\262\336\354\277\201\361\221\337P\271\305?W)\2266\262\336\354\277\032\276\351\266\232\002\367\277\303\345\376 N\'\370?W)\2266\262\336\354\277<\317!o\327\224\346?\367\254\261\376]p\327\277\201\361\221\337P\271\305?\303\345\376 N\'\370?ci\032\351\371\270\362\277ci\032\351\371\270\362\277\234K\006\247+\003\334?\234K\006\247+\003\334?ci\032\351\371\270\362\277\032\276\351\266\232\002\367\277nh\321\035k\'\271\277\014\221/S\255\335\363?\234K\006\247+\003\334?\303\345\376 N\'\370?\367\254\261\376]p\327\277\032\276\351\266\232\002\367\277\352\177\367\232pK\344\277\201\361\221\337P\271\305?\352\177\367\232pK\344\277W)\2266\262\336\354\277\201\361\221\337P\271\305?nh\321\035k\'\271\277\201\361\221\337P\271\305?<\317!o\327\224\346?\252x\300\n\031(\357?\367\254\261\376]p\327\277\032\276\351\266\232\002\367\277\032\276\351\266\232\002\367\277\201\361\221\337P\271\305?\014\221/S\255\335\363?\201\361\221\337P\271\305?\252x\300\n\031(\357?ci\032\351\371\270\362\277ci\032\351\371\270\362\277<\317!o\327\224\346?\201\361\221\337P\271\305?\367\254\261\376]p\327\277nh\321\035k\'\271\277nh\321\035k\'\271\277\014\221/S\255\335\363?\234K\006\247+\003\334?<\317!o\327\224\346?\201\361\221\337P\271\305?\303\345\376 N\'\370?\303\345\376 N\'\370?\014\221/S\255\335\363?\032\276\351\266\232\002\367\277ci\032\351\371\270\362\277\367\254\261\376]p\327\277\032\276\351\266\232\002\367\277\303\345\376 N\'\370?\201\361\221\337P\271\305?W)\2266\262\336\354\277\252x\300\n\031(\357?ci\032\351\371\270\362\277\234K\006\247+\003\334?ci\032\351\371\270\362\277\303\345\376 N\'\370?\201\361\221\337P\271\305?\032\276\351\266\232\002\367\277\014\221/S\255\335\363?\367\254\261\376]p\327\277\252x\300\n\031(\357?ci\032\351\371\270\362\277W)\2266\262\336\354\277ci\032\351\371\270\362\277\032\276\351\266\232\002\367\277\014\221/S\255\335\363?W)\2266\262\336\354\277\014\221/S\255\335\363?ci\032\351\371\270\362\277<\317!o\327\224\346?\234K\006\247+\003\334?nh\321\035k\'\271\277nh\321\035k\'\271\277\367\254\261\376]p\327\277<\317!o\327\224\346?\352\177\367\232pK\344\277ci\032\351\371\270\362\277W)\2266\262\336\354\277nh\321\035k\'\271\277\032\276\351\266\232\002\367\277nh\321\035k\'\271\277\252x\300\n\031(\357?\032\276\351\266\232\002\367\277\252x\300\n\031(\357?\201\361\221\337P\271\305?\032\276\351\266\232\002\367\277\303\345\376 N\'\370?ci\032\351\371\270\362\277nh\321\035k\'\271\277ci\032\351\371\270\362\277ci\032\351\371\270\362\277\252x\300\n\031(\357?\303\345\376 N\'\370?nh\321\035k\'\271\277\201\361\221\337P\271\305?\032\276\351\266\232\002\367\277ci\032\351\371\270\362\277nh\321\035k\'\271\277\201\361\221\337P\271\305?\201\361\221\337P\271\305?\014\221/S\255\335\363?\032\276\351\266\232\002\367\277\352\177\367\232pK\344\277\201\361\221\337P\271\305?W)\2266\262\336\354\277\201\361\221\337P\271\305?\032\276\351\266\232\002\367\277<\317!o\327\224\346?\032\276\351\266\232\002\367\277\032\276\351\266\232\002\367\277\252x\300\n\031(\357?\201\361\221\337P\271\305?nh\321\035k\'\271\277<\317!o\327\224\346?nh\321\035k\'\271\277\352\177\367\232pK\344\277\201\361\221\337P\271\305?\201\361\221\337P\271\305?\252x\300\n\031(\357?\032\276\351\266\232\002\367\277\303\345\376 N\'\370?W)\2266\262\336\354\277W)\2266\262\336\354\277<\317!o\327\224\346?\234K\006\247+\003\334?ci\032\351\371\270\362\277\252x\300\n\031(\357?<\317!o\327\224\346?\367\254\261\376]p\327\277\234K\006\247+\003\334?nh\321\035k\'\271\277\014\221/S\255\335\363?\014\221/S\255\335\363?W)\2266\262\336\354\277\252x\300\n\031(\357?<\317!o\327\224\346?\234K\006\247+\003\334?\014\221/S\255\335\363?\352\177\367\232pK\344\277\367\254\261\376]p\327\277nh\321\035k\'\271\277W)\2266\262\336\354\277\252x\300\n\031(\357?ci\032\351\371\270\362\277\201\361\221\337P\271\305?\252x\300\n\031(\357?\252x\300\n\031(\357?\201\361\221\337P\271\305?\234K\006\247+\003\334?ci\032\351\371\270\362\277\014\221/S\255\335\363?\367\254\261\376]p\327\277\303\345\376 N\'\370?\367\254\261\376]p\327\277nh\321\035k\'\271\277\367\254\261\376]p\327\277\032\276\351\266\232\002\367\277\234K\006\247+\003\334?\234K\006\247+\003\334?<\317!o\327\224\346?\303\345\376 N\'\370?\234K\006\247+\003\334?W)\2266\262\336\354\277nh\321\035k\'\271\277\201\361\221\337P\271\305?\352\177\367\232pK\344\277W)\2266\262\336\354\277\032\276\351\266\232\002\367\277\014\221/S\255\335\363?\252x\300\n\031(\357?<\317!o\327\224\346?W)\2266\262\336\354\277\234K\006\247+\003\334?\234K\006\247+\003\334?W)\2266\262\336\354\277\303\345\376 N\'\370?\303\345\376 N\'\370?<\317!o\327\224\346?\032\276\351\266\232\002\367\277ci\032\351\371\270\362\277\234K\006\247+\003\334?ci\032\351\371\270\362\277\352\177\367\232pK\344\277ci\032\351\371\270\362\277\234K\006\247+\003\334?\234K\006\247+\003\334?nh\321\035k\'\271\277\032\276\351\266\232\002\367\277\234K\006\247+\003\334?ci\032\351\371\270\362\277W)\2266\262\336\354\277<\317!o\327\224\346?<\317!o\327\224\346?\303\345\376 N\'\370?\234K\006\247+\003\334?\014\221/S\255\335\363?W)\2266\262\336\354\277\303\345\376 N\'\370?ci\032\351\371\270\362\277\252x\300\n\031(\357?ci\032\351\371\270\362\277\014\221/S\255\335\363?\234K\006\247+\003\334?<\317!o\327\224\346?\032\276\351\266\232\002\367\277\303\345\376 N\'\370?\032\276\351\266\232\002\367\277\367\254\261\376]p\327\277\303\345\376 N\'\370?<\317!o\327\224\346?ci\032\351\371\270\362\277nh\321\035k\'\271\277<\317!o\327\224\346?\032\276\351\266\232\002\367\277nh\321\035k\'\271\277\032\276\351\266\232\002\367\277ci\032\351\371\270\362\277<\317!o\327\224\346?\234K\006\247+\003\334?\303\345\376 N\'\370?\032\276\351\266\232\002\367\277\352\177\367\232pK\344\277\234K\006\247+\003\334?\352\177\367\232pK\344\277\234K\006\247+\003\334?\252x\300\n\031(\357?\252x\300\n\031(\357?\201\361\221\337P\271\305?<\317!o\327\224\346?W)\2266\262\336\354\277\014\221/S\255\335\363?\303\345\376 N\'\370?\014\221/S\255\335\363?\014\221/S\255\335\363?ci\032\351\371\270\362\277W)\2266\262\336\354\277<\317!o\327\224\346?\032\276\351\266\232\002\367\277\303\345\376 N\'\370?\252x\300\n\031(\357?W)\2266\262\336\354\277\201\361\221\337P\271\305?\014\221/S\255\335\363?\303\345\376 N\'\370?\303\345\376 N\'\370?W)\2266\262\336\354\277W)\2266\262\336\354\277ci\032\351\371\270\362\277\032\276\351\266\232\002\367\277\032\276\351\266\232\002\367\277\303\345\376 N\'\370?ci\032\351\371\270\362\277ci\032\351\371\270\362\277\234K\006\247+\003\334?\367\254\261\376]p\327\277\234K\006\247+\003\334?\303\345\376 N\'\370?<\317!o\327\224\346?W)\2266\262\336\354\277\234K\006\247+\003\334?\252x\300\n\031(\357?W)\2266\262\336\354\277\201\361\221\337P\271\305?\032\276\351\266\232\002\367\277W)\2266\262\336\354\277ci\032\351\371\270\362\277\367\254\261\376]p\327\277\014\221/S\255\335\363?\234K\006\247+\003\334?\252x\300\n\031(\357?\014\221/S\255\335\363?\303\345\376 N\'\370?ci\032\351\371\270\362\277\234K\006\247+\003\334?\252x\300\n\031(\357?ci\032\351\371\270\362\277\303\345\376 N\'\370?\032\276\351\266\232\002\367\277W)\2266\262\336\354\277\234K\006\247+\003\334?W)\2266\262\336\354\277\234K\006\247+\003\334?<\317!o\327\224\346?nh\321\035k\'\271\277\032\276\351\266\232\002\367\277<\317!o\327\224\346?nh\321\035k\'\271\277\303\345\376 N\'\370?\032\276\351\266\232\002\367\277\234K\006\247+\003\334?ci\032\351\371\270\362\277\252x\300\n\031(\357?\234K\006\247+\003\334?\014\221/S\255\335\363?\252x\300\n\031(\357?W)\2266\262\336\354\277\303\345\376 N\'\370?ci\032\351\371\270\362\277\014\221/S\255\335\363?\252x\300\n\031(\357?<\317!o\327\224\346?\201\361\221\337P\271\305?\234K\006\247+\003\334?\303\345\376 N\'\370?\014\221/S\255\335\363?\234K\006\247+\003\334?\201\361\221\337P\271\305?<\317!o\327\224\346?W)\2266\262\336\354\277ci\032\351\371\270\362\277W)\2266\262\336\354\277\201\361\221\337P\271\305?\014\221/S\255\335\363?\367\254\261\376]p\327\277\352\177\367\232pK\344\277\303\345\376 N\'\370?\252x\300\n\031(\357?ci\032\351\371\270\362\277<\317!o\327\224\346?\234K\006\247+\003\334?\303\345\376 N\'\370?\303\345\376 N\'\370?\032\276\351\266\232\002\367\277\303\345\376 N\'\370?\014\221/S\255\335\363?\201\361\221\337P\271\305?\252x\300\n\031(\357?\303\345\376 N\'\370?W)\2266\262\336\354\277nh\321\035k\'\271\277\303\345\376 N\'\370?\032\276\351\266\232\002\367\277\032\276\351\266\232\002\367\277\032\276\351\266\232\002\367\277\032\276\351\266\232\002\367\277ci\032\351\371\270\362\277\014\221/S\255\335\363?\234K\006\247+\003\334?\352\177\367\232pK\344\277\367\254\261\376]p\327\277\367\254\261\376]p\327\277<\317!o\327\224\346?W)\2266\262\336\354\277\014\221/S\255\335\363?ci\032\351\371\270\362\277\252x\300\n\031(\357?ci\032\351\371\270\362\277nh\321\035k\'\271\277ci\032\351\371\270\362\277<\317!o\327\224\346?\014\221/S\255\335\363?ci\032\351\371\270\362\277\367\254\261\376]p\327\277ci\032\351\371\270\362\277ci\032\351\371\270\362\277\367\254\261\376]p\327\277\252x\300\n\031(\357?\303\345\376 N\'\370?\032\276\351\266\232\002\367\277\014\221/S\255\335\363?\014\221/S\255\335\363?W)\2266\262\336\354\277\303\345\376 N\'\370?\032\276\351\266\232\002\367\277\303\345\376 N\'\370?\234K\006\247+\003\334?<\317!o\327\224\346?W)\2266\262\336\354\277\234K\006\247+\003\334?\252x\300\n\031(\357?\252x\300\n\031(\357?ci\032\351\371\270\362\277\201\361\221\337P\271\305?\303\345\376 N\'\370?ci\032\351\371\270\362\277\367\254\261\376]p\327\277\032\276\351\266\232\002\367\277ci\032\351\371\270\362\277<\317!o\327\224\346?nh\321\035k\'\271\277\303\345\376 N\'\370?nh\321\035k\'\271\277<\317!o\327\224\346?\234K\006\247+\003\334?\234K\006\247+\003\334?\252x\300\n\031(\357?\014\221/S\255\335\363?\252x\300\n\031(\357?\032\276\351\266\232\002\367\277\032\276\351\266\232\002\367\277\367\254\261\376]p\327\277\032\276\351\266\232\002\367\277\252x\300\n\031(\357?\014\221/S\255\335\363?W)\2266\262\336\354\277\303\345\376 N\'\370?\252x\300\n\031(\357?ci\032\351\371\270\362\277nh\321\035k\'\271\277\303\345\376 N\'\370?\303\345\376 N\'\370?\367\254\261\376]p\327\277ci\032\351\371\270\362\277\014\221/S\255\335\363?W)\2266\262\336\354\277W)\2266\262\336\354\277nh\321\035k\'\271\277ci\032\351\371\270\362\277nh\321\035k\'\271\277<\317!o\327\224\346?ci\032\351\371\270\362\277\201\361\221\337P\271\305?ci\032\351\371\270\362\277ci\032\351\371\270\362\277ci\032\351\371\270\362\277\252x\300\n\031(\357?\234K\006\247+\003\334?\014\221/S\255\335\363?ci\032\351\371\270\362\277\014\221/S\255\335\363?nh\321\035k\'\271\277\303\345\376 N\'\370?ci\032\351\371\270\362\277ci\032\351\371\270\362\277\201\361\221\337P\271\305?\032\276\351\266\232\002\367\277W)\2266\262\336\354\277\201\361\221\337P\271\305?\234K\006\247+\003\334?ci\032\351\371\270\362\277W)\2266\262\336\354\277\032\276\351\266\232\002\367\277\032\276\351\266\232\002\367\277<\317!o\327\224\346?\252x\300\n\031(\357?\032\276\351\266\232\002\367\277\201\361\221\337P\271\305?\032\276\351\266\232\002\367\277<\317!o\327\224\346?W)\2266\262\336\354\277nh\321\035k\'\271\277W)\2266\262\336\354\277\032\276\351\266\232\002\367\277\234K\006\247+\003\334?<\317!o\327\224\346?\252x\300\n\031(\357?nh\321\035k\'\271\277\352\177\367\232pK\344\277\303\345\376 N\'\370?\014\221/S\255\335\363?\303\345\376 N\'\370?W)\2266\262\336\354\277ci\032\351\371\270\362\277ci\032\351\371\270\362\277ci\032\351\371\270\362\277\234K\006\247+\003\334?\014\221/S\255\335\363?ci\032\351\371\270\362\277ci\032\351\371\270\362\277\014\221/S\255\335\363?\032\276\351\266\232\002\367\277\014\221/S\255\335\363?ci\032\351\371\270\362\277nh\321\035k\'\271\277ci\032\351\371\270\362\277\303\345\376 N\'\370?\252x\300\n\031(\357?\032\276\351\266\232\002\367\277nh\321\035k\'\271\277\032\276\351\266\232\002\367\277ci\032\351\371\270\362\277\234K\006\247+\003\334?\201\361\221\337P\271\305?ci\032\351\371\270\362\277\234K\006\247+\003\334?\234K\006\247+\003\334?\014\221/S\255\335\363?ci\032\351\371\270\362\277ci\032\351\371\270\362\277ci\032\351\371\270\362\277\303\345\376 N\'\370?\367\254\261\376]p\327\277nh\321\035k\'\271\277\234K\006\247+\003\334?\303\345\376 N\'\370?ci\032\351\371\270\362\277\252x\300\n\031(\357?<\317!o\327\224\346?\252x\300\n\031(\357?ci\032\351\371\270\362\277\032\276\351\266\232\002\367\277\252x\300\n\031(\357?<\317!o\327\224\346?\303\345\376 N\'\370?\201\361\221\337P\271\305?\303\345\376 N\'\370?nh\321\035k\'\271\277<\317!o\327\224\346?\234K\006\247+\003\334?\201\361\221\337P\271\305?nh\321\035k\'\271\277ci\032\351\371\270\362\277\303\345\376 N\'\370?\303\345\376 N\'\370?\234K\006\247+\003\334?\352\177\367\232pK\344\277ci\032\351\371\270\362\277\303\345\376 N\'\370?ci\032\351\371\270\362\277\014\221/S\255\335\363?\303\345\376 N\'\370?\201\361\221\337P\271\305?ci\032\351\371\270\362\277\014\221/S\255\335\363?\234K\006\247+\003\334?\234K\006\247+\003\334?W)\2266\262\336\354\277\252x\300\n\031(\357?W)\2266\262\336\354\277W)\2266\262\336\354\277\352\177\367\232pK\344\277\252x\300\n\031(\357?\032\276\351\266\232\002\367\277W)\2266\262\336\354\277<\317!o\327\224\346?\201\361\221\337P\271\305?\032\276\351\266\232\002\367\277\367\254\261\376]p\327\277ci\032\351\371\270\362\277\032\276\351\266\232\002\367\277\303\345\376 N\'\370?nh\321\035k\'\271\277ci\032\351\371\270\362\277\367\254\261\376]p\327\277\367\254\261\376]p\327\277\303\345\376 N\'\370?\367\254\261\376]p\327\277\252x\300\n\031(\357?ci\032\351\371\270\362\277nh\321\035k\'\271\277<\317!o\327\224\346?<\317!o\327\224\346?\367\254\261\376]p\327\277<\317!o\327\224\346?<\317!o\327\224\346?\352\177\367\232pK\344\277W)\2266\262\336\354\277\303\345\376 N\'\370?<\317!o\327\224\346?\032\276\351\266\232\002\367\277W)\2266\262\336\354\277nh\321\035k\'\271\277\032\276\351\266\232\002\367\277W)\2266\262\336\354\277\252x\300\n\031(\357?nh\321\035k\'\271\277\201\361\221\337P\271\305?\367\254\261\376]p\327\277\032\276\351\266\232\002\367\277W)\2266\262\336\354\277ci\032\351\371\270\362\277\032\276\351\266\232\002\367\277\367\254\261\376]p\327\277\252x\300\n\031(\357?\032\276\351\266\232\002\367\277\201\361\221\337P\271\305?\234K\006\247+\003\334?W)\2266\262\336\354\277\032\276\351\266\232\002\367\277\032\276\351\266\232\002\367\277\252x\300\n\031(\357?nh\321\035k\'\271\277\367\254\261\376]p\327\277\201\361\221\337P\271\305?\014\221/S\255\335\363?\252x\300\n\031(\357?nh\321\035k\'\271\277\303\345\376 N\'\370?<\317!o\327\224\346?\014\221/S\255\335\363?\303\345\376 N\'\370?\303\345\376 N\'\370?\032\276\351\266\232\002\367\277\201\361\221\337P\271\305?\234K\006\247+\003\334?\032\276\351\266\232\002\367\277W)\2266\262\336\354\277\252x\300\n\031(\357?nh\321\035k\'\271\277\303\345\376 N\'\370?nh\321\035k\'\271\277ci\032\351\371\270\362\277W)\2266\262\336\354\277\252x\300\n\031(\357?\032\276\351\266\232\002\367\277ci\032\351\371\270\362\277\234K\006\247+\003\334?\252x\300\n\031(\357?\032\276\351\266\232\002\367\277\234K\006\247+\003\334?"
      }
    }
  }
}
node {
  name: "tensors/component_6"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 750
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 750
          }
        }
        tensor_content: "ZZ\331(\245\265\n@)\317\260%7\013\340\277\223\334|\021\320\313\020@\256\305{\256\035\267\340\277^i\221Z\325E\352\277\355\362\320\357\316\014\322?\244i]\200\0020\340?@\346$\3577\010\337?\037t\200\340u}\346\277)\317\260%7\013\340\277\261\242\311p\n\264\266\277\335\370\032\234\202\'\346\277e\357n\351fL\301?\261\024\003_\267)\341\277\"_e\2229z\330\277\372\25380\005\236\355?\001\372\224\374\236\215\323\277D\023\275\330m\331\335\277WI\274`\303\271\362?\201\361\212i\205\274\356?\201\361\212i\205\274\356?\370\002\007\266\263u\350\277\253\302 H\275R\003@\247*\206\214\2319\275?\273\032\004\365\327H\272\277Z\230C\021],\363?\020\2059o\237\312\325\277\220\2248\367\306\314\255?\247*\206\214\2319\275?\201\301\331@\240\203\302\277\362-+;\206u\353\277,\0368\326\320}\340\277\365\275w:8\303\321\277(\230\343\013=\360\343\277Oc\007\000\267\255\346?\006\005H\301\027\260\007@>u\256w:\364\334\277(\375s\363l_\331\277\023^WR*\302\361\277\201\301\331@\240\203\302\2777\202\256b\004\303\367?m\310\327\225Q\232\353?\201\213\203\324\375\332\347\277\242\374\2605h\363\356\277r\364\201\226-r\343\277J\261\3139\241\276\336\277\261\024\003_\267)\341\277r\275\264|3W\347\277,\363\307\207\246\216\346\277\263c\212\017Q\234\341\277\353\354nL\021\200\253\277\330/\234\354$S\353\277\261\351\222\020\215:\347\277>u\256w:\364\334\277\363\037i\331\004\336\320\2778\327\237\026\007\017\334\277\253v\364\375\203D\340\277\311{\n\342Q*\361\277\363\037i\331\004\336\320\277(\230\343\013=\360\343\277\261\242\311p\n\264\266\277\324W\217c\355e\023@\253v\364\375\203D\340\277N\\&O\366a\361?\261\024\003_\267)\341\277J\261\3139\241\276\336\277m\301\366\344\220N\366?\253\365,\327\002\360\314?\307\026\324\025vC\360?^=3#Q]\351?\315\nK\330\003\347\346?\223\233\005d:3\305\277M\000S\352:1\337\277\364\r*\317\321\270\354?\360AX\240h\177\322?.\233\202T\240D\332\277\236$\306\0352~\013@\324\241x\210v\200\362?J\305\370\236\203\310\345?\345Br\373d\251\360\277\034\301V1\006\225\327\277(\375s\363l_\331\277-jd \n\214\003@?oDt\321\032\371?GbD\211\007L\336\277\312\333\304\223\0361\345\277\023\316V\034\320c\362?\215\210\004\343OE\361?\207_\350\241\323h\303\277Oc\007\000\267\255\346?\022\177\317k6\361\361?\337G\242L\034\232\346\277\352\243I?5\232\321?\207_\350\241\323h\303\277\324e\246\217o\014\317\277v\2063,\221+\342\277\231:\213r\305\212\347\277}0\237X\224<\345\277=\315\363\252@>\351\277.\233\202T\240D\332\277GbD\211\007L\336\2772\274F7\004c\341\277\256\305{\256\035\267\340\277w\222\220\367`W\344\277\020\335~\242\245\024\342\277\256\305{\256\035\267\340\277\310)\211\315\010B\315\277T\206\271=\312\260\260?l\376\363\301\227E\264?x:\021\204\376\017\266?|\355ts\312\365\346\277h\304\301\237\226\323\343\277\273\032\004\365\327H\272\277>\365\256w\266@\001@/BO8@\001\347\277:\251\334H\321\272\342\2778\327\237\026\007\017\334\277\006C\262\251\317&\360?;\2659\024\241\346\344\277D\023\275\330m\331\335\277\305\316-\026\235\034\345?\207T\002\204[\257\342\277)`(\t\351\333\340?\323\003\265\360\242\361\317\277OO\332\232\324\243\337\277+L\373\243\006\322\331\277^i\221Z\325E\352\277GbD\211\007L\336\277\247\270\3440\234\242\340?\t\010\243\'x\024\345\277L\022=*mG\022@\234\211\022#_\375\347\277\200\177&\t.\257\345\277W\277%.\3224\347\277\256\305{\256\035\267\340\277\261\024\003_\267)\341\277ch\235\314!\363\236?7\210\030fm\234\333\277\264o\347\332 \310\343\277\207T\002\204[\257\342\277^\356\253r\267\352\350?(n\352jjs\333?8\327\237\026\007\017\334\277\356\375\266\rG\306\342\277\324V!\267>\023\274\277\266O]\252n\222\312\277*\r_\360\361q\361\277\"\372\324\252\t\013\343\277\037t\200\340u}\346\277\307\214=\343\204\276\344\277\"_e\2229z\330\277F\303\017\225\']\026@\237\327\"&\241\375\306\277\r6\262\276\005X\325\277\353\256/]\255S\342\277O\036\274f>\353\010@\331\024\323\270|\206\000@\261\024\003_\267)\341\277[Ez\370e\302\343\277\263c\212\017Q\234\341\277OO\332\232\324\243\337\277\354\272\214(}\177\344\277\026#H\320\322\257\326\277\0342\315\250\003\251\331?\237\017g\355\362\212\344\277\230\314\360>\321T\357\2771\352\t\005:\267\332\277\255\216\256\224#\234\344\277D\023\275\330m\331\335\277N\\&O\366a\361?\023\316V\034\320c\362?\031r\317\200l\"\327\277\037\020\336\341\237\007\330\277\217A\230\225(\007\344\277\336\316[;\014\250\277\277\026#H\320\322\257\326\277\345\005;\336\001\265\320?7\210\030fm\234\333\277\0170H\273\234~\361?\306\200\340\027\265\222\342\277\241\'!\204\222\342\350\277\023,\006S?\207\342\277E\345\371\n8\205\344\277\027\360\010\350\215{\360\277t\014<-\315\311\347\277\352\243I?5\232\321?\316\307\227.<\'\316\277\366n\360\211\236P\321\277Q!\027\315\236O\346\277\366n\360\211\236P\321\2777\210\030fm\234\333\277\224}\362R5[\311?7\210\030fm\234\333\277J\253a68\345\372?OO\332\232\324\243\337\277\323\003\265\360\242\361\317\277#\317d\\\337\033\351\277\037\020\336\341\237\007\330\277y\034\376r\3717\252?\224\250\331\334a\321\350\277a\214\272\323\352\317\351?\005k\013t\234\241\325?\233\356h\3122o\273?|\005\270\316g\306\305?\227\304!\245\266\017\363?>\211\333\334\034\376\343?\237\330\231\323\370o\350\277l\226B\264co\003@l(,\364\0319\022@\245\255uN&p\345\277\336\316[;\014\250\277\277\261\242\311p\n\264\266\277A(\330&\252\334\353\277\244u1\207\324\342\307\277\002\253\rL\005\033\323\277Q!\027\315\236O\346\277&\0337\213\304\241\007@8\353\314{\351\030\343?\317B\006\333W\373\351\277d>m\325\002F\347\277\353\031\263\014D\025\366?\036\2506v\022$\376?|\355ts\312\365\346\277\177\356q*\326T\261\277\276h\332\267\275K\347\277D\023\275\330m\331\335\277\377\327\3420\341u\345\277I,\211j^\016\243?\241R\221\322\274\321\342\277\265\332j\212\267\211\367?f\201\227\272\314\214\345\277\274\341\227\004\320\304\343?(\375s\363l_\331\277\235\300\337<Y\030\344\277\336\316[;\014\250\277\277\353\031\263\014D\025\366?\360\025q\244\346\035\347\277GbD\211\007L\336\277\233}\265W\217\321\345\277\215\375\366\002\007N\304\277\220M\365`\3702\346\277\232\033\001\264h@\312?\256\305{\256\035\267\340\277x:\021\204\376\017\266?\023\316V\034\320c\362?\365\275w:8\303\321\277\253v\364\375\203D\340\2772\274F7\004c\341\277\323\003\265\360\242\361\317\2772\274F7\004c\341\277\037=\263\306{b\352\277\246W\036v\317\n\314?x\004\365W\270d\355?\253v\364\375\203D\340\277\023\324\300\0379=\326\277\270\312\313V\212f\346\277\313\036\357x\350w\343\277\021\247(6\003l\327?S\377\177Id\343\025@UP\235\021\204\005\350?2\274F7\004c\341\277\367U\320\316\252\337\367?\2770\037\265i7\344?\200\177&\t.\257\345\2777ZU\2307H\342\277\221\304\325\333^ \374?\266O]\252n\222\312\277\263c\212\017Q\234\341\277\224}\362R5[\311?/m\277\206j\360\340\277\315\264\342v\251(\361?\260\245zBi\372\341?/\3766j\034\301\341?\005K\201C\352k\354\277\343k\271\256\213\035\355\277\201\361\212i\205\274\356?T\206\271=\312\260\260?_Q`\2103g\300?\001\305,yV\336\357\277\253v\364\375\203D\340\277j\007\354\204`\032\342\277A\3045(\324f\335\277\247\270\3440\234\242\340?\302\356.\202Q\331\343\277\370-w\004\336d\342\277J\261\3139\241\276\336\277\336\216\016\232C\330\363?\252/}f\241\354\202?,\0368\326\320}\340\277\031r\317\200l\"\327\277\300\214\361\031-\317\355\277t\014<-\315\311\347\277\273\213zl\325\\\314\277\220\2248\367\306\314\255?\215\210\004\343OE\361?Z\230C\021],\363?\023\324\300\0379=\326\277\263c\212\017Q\234\341\277\353\031\263\014D\025\366?\002\253\rL\005\033\323\277\335\262;5\004\364\005@\345\005;\336\001\265\320?\342_\\\343\273\361\352\277\323t4\310C\353\247\277>\211\333\334\034\376\343?8\327\237\026\007\017\334\277\207\352\365\201\034`\360?\344\331S\342\177S\345\277\224\250\331\334a\321\350\277\365\020AS/-\361\277\360\025q\244\346\035\347\277M\000S\352:1\337\277R\260K\213\240,\023@\255\216\256\224#\234\344\277\n\024\000\363G@\347\277\263f\243N\000\004\277?\223\233\005d:3\305\277\202\243\306/\233\253\306?mVs5\372\214\342\2774x(\304\206\311\227?\r6\262\276\005X\325\277\r6\262\276\005X\325\277/m\277\206j\360\340\277\377\327\3420\341u\345\277\223&\023D\203*\362?\026#H\320\322\257\326\277/m\277\206j\360\340\277\374iH\375\354?\355\277y\034\376r\3717\252?z\341\027\250\372\311\344\277\225\337\246\366[\354\344\277\215\376m\260^\300\345\277\037\020\336\341\237\007\330\277\213\204v\261\232^\353\277\250\302zc\021\333\007@u\205\274~9\271\300\277\"\320\333\t7\216\332?q\261W\261c+\345\277\032\326q\177B\230\345\277\352\243I?5\232\321?\313l<w\320\001\346?=\227\235>\236\225\336?\274P !\036\364\342\277\251\335\351{e\037\356\277\257{\370\334\230\004\357\277J\261\3139\241\276\336\277\000Cf\340w7\371?GbD\211\007L\336\277\341\212\3141\346\340\344\277*=MV\255eb?\231*\217\354<\037\263\277\237\017g\355\362\212\344\277C5\254\237\321z\337?\334\225\357J\004$\351?J\261\3139\241\276\336\277\256\305{\256\035\267\340\277\273\031S\007$\331\346\277>u\256w:\364\334\277D\023\275\330m\331\335\277OO\332\232\324\243\337\277\005K\201C\352k\354\277%\250\202?j\023\365?\316\307\227.<\'\316\2772\274F7\004c\341\277\003q@\314\000\r\210\277\315\264\342v\251(\361?H\276\027\356\302|\360?.\233\202T\240D\332\277O\322\217\034\005\335\345\277\347d\251\320\336\024\257\277\n\347*\016l\345\324\277%\250\202?j\023\365?\207\352\365\201\034`\360?nb\320\000\312\270\344\277;&\'\307\240\201\334\277A\3045(\324f\335\277\247*\206\214\2319\275?\004I\034\2558\000\324\277\2671J\231i\272\316?\r6\262\276\005X\325\277O\336\354\347\324\010\350\277jro4\367\333\365?\370\014\377\352\3215\322\277\323\003\265\360\242\361\317\2771\352\t\005:\267\332\2778\327\237\026\007\017\334\27749\221\265\323)\333\277\313\036\357x\350w\343\277\217\262K\010\314\244\271?\247*\206\214\2319\275?w\222\220\367`W\344\277\274\341\227\004\320\304\343?\364\r*\317\321\270\354?+L\373\243\006\322\331\277)\317\260%7\013\340\277\004I\034\2558\000\324\277`\302\326\3770{\262?G\\\332\205\236r\372?d\333A\204\204B\352?M\000S\352:1\337\277b\373B\3608\377\350\277\033le}\003I\363?\366n\360\211\236P\321\277\274\355k\013\242w\313\277}g\251m4\341\304?%\256\354B\323\354\330\277{S|\010R\327\355?\231*\217\354<\037\263\277\201\301\331@\240\203\302\277f\226\366\352\013\200\014@\253\365,\327\002\360\314?49\221\265\323)\333\277M\000S\352:1\337\277\031\237\244eH}\351\277\350\t\310\017\277\002\356\277\375\224\270K\027/\347\277a\205\331\"*\204\364?&\021\241XOi\340?\273v\024U9\003\360\277,\0368\326\320}\340\2772\274F7\004c\341\2777\210\030fm\234\333\277\367\\\261\177k+\355?\013\t\032\325\317\206\326?Jw\253\240\233>\343\277Z\230C\021],\363?\256\305{\256\035\267\340\277\375\363\336/\336\304\370?7\210\030fm\234\333\277\256\305{\256\035\267\340\277\214\307\240\226d\245\351\277)\317\260%7\013\340\277{#\313\337l\236\301\277\236\314<\010)D\346\277\327Z\014;OB\345\277%\256\354B\323\354\330\277\"_e\2229z\330\277\202\302P\356\367\365\343\277\320y\323\364Q\026\346\277\350\237w+}\303\002@\263\001M\247,\222\353\277eu:\357\374`\343\277\341\212\3141\346\340\344\277(\375s\363l_\331\277\340\335\225J\335J\364?f\201\227\272\314\214\345\277D\023\275\330m\331\335\2771\352\t\005:\267\332\277)\317\260%7\013\340\277OO\332\232\324\243\337\277\311\317g\310N\005\343\277\342\226)\375\265\014\347\277\274\355k\013\242w\313\2770y\034R:\034\343\277OO\332\232\324\243\337\277A\3045(\324f\335\277GbD\211\007L\336\277GbD\211\007L\336\277\225\337\246\366[\354\344\277,\257\257\271\202N\341?\320\260\240\016L1\342\277^\224\001\251\3774\344\277\337G\242L\034\232\346\277R\001\026a\352\222\347?\236$\306\0352~\013@A\3045(\324f\335\277/m\277\206j\360\340\277jyP\345\267\'\353?,\0368\326\320}\340\277\336\316[;\014\250\277\277*=MV\255eb?\2513\312\030\272\375\341\277=\227\235>\236\225\336?\257\336\3462q~\270\277Dw_\327CO\354\277+L\373\243\006\322\331\277\263c\212\017Q\234\341\277\310)\211\315\010B\315\277a\357\345$i\323\346\277^6Rr\220\021\364?49\221\265\323)\333\277\323\003\265\360\242\361\317\277\n\347*\016l\345\324\277\031r\317\200l\"\327\277\035%\371/\334\n\346\277O\322\217\034\005\335\345\277\306*\000{`\264\356\277\262\365\357\333\\f\351\277u\205\274~9\271\300\277b\373B\3608\377\350\277\251\236M\310P\277\365?\224\023]\214\370\222\374?\2671J\231i\272\316?/\3766j\034\301\341?\341\030\nw\266Y\232\277\361\276\242\0368F\354?\"_e\2229z\330\277\"\303\007\221\017\360\346\277\307\026\324\025vC\360?\000JG\2218\203\356?\256\305{\256\035\267\340\277\232\023\251UP\202\363?D\023\275\330m\331\335\2777\210\030fm\234\333\277\003^7\373t\003\342\277.\233\202T\240D\332\277>\211\333\334\034\376\343?\346\034~\307I\232\343\277\246O\306\027\267L\365?\202\243\306/\233\253\306?U\347~\370\236\257\374?49\221\265\323)\333\277\n\347*\016l\345\324\277>u\256w:\364\334\277\322R\361\327\334\r\362?\201\361\212i\205\274\356?:\251\334H\321\272\342\277=\370c\371j-\343\277\273v\024U9\003\360\277\014W*\330\021\207\345\277g\324`\323\303\366\364?\243?\333\0322:\355\277\342\226)\375\265\014\347\277\252\023@\350\007\310\310\277`\302\326\3770{\262?UP\235\021\204\005\350?\262\365\357\333\\f\351\277\325\027\342U\205\373\346\277\346\034~\307I\232\343\277J\261\3139\241\276\336\277+L\373\243\006\322\331\277\351(\225n\0330\223\277\256\305{\256\035\267\340\277\353\354nL\021\200\253\277)\"\255v\225ss\277\230..\247\365^\345\2777\210\030fm\234\333\277-jd \n\214\003@GbD\211\007L\336\277\346\361\ry\037\253\351\277\020\2059o\237\312\325\277OO\332\232\324\243\337\277d\333A\204\204B\352?=\227\235>\236\225\336?\r6\262\276\005X\325\277\256\305{\256\035\267\340\277M\000S\352:1\337\277M\000S\352:1\337\277)\"\255v\225ss\277\022\177\317k6\361\361?\2319\024\305m\030\306\277\245s\363\262wh\007@\001\372\224\374\236\215\323\277\313l<w\320\001\346?\224\023]\214\370\222\374?p\020~\225*\301\366?\031r\317\200l\"\327\277\013K\315\014B[\343\277\022Ae\203~z\t@\010\272\222$6\024\326?\275\317X\372\234\237\317?\220M\365`\3702\346\277\"\303\007\221\017\360\346\277\245$\022\347\211m\002@(\375s\363l_\331\277\323\003\265\360\242\361\317\2777\210\030fm\234\333\277\333\365\360\266\366\006\022@\263c\212\017Q\234\341\277iG\273\003\312\374\002@\353 \224\275\004a\353?\353\031\263\014D\025\366?\316\307\227.<\'\316\277\002\253\rL\005\033\323\277\007\230\243]\322r\324\277(a\026\362B\325\347\277_\327+\216\311{\342\277\243\000?g\035\332\364?}g\251m4\341\304?;&\'\307\240\201\334\277=\227\235>\236\225\336?\033le}\003I\363?GbD\211\007L\336\277\267\223\376<\220K\352\277\257\336\3462q~\270\277\023,\006S?\207\342\277C5\254\237\321z\337?\331\2356 \031\211\343\277\037\020\336\341\237\007\330\277SdA\262h\226\344\277y\325\272\334*\236\342\277Jw\253\240\233>\343\277D\023\275\330m\331\335\277\254\202Q\311Sp\342\277\0342\315\250\003\251\331?G\324\306\t\005\361\360\277\354\320\341(kk\320\2771\352\t\005:\267\332\277\274\355k\013\242w\313\277\253v\364\375\203D\340\277\355\306\351\363L\253\346\277\374}ub\317I\324?8;B\025\335\204\352\2770y\034R:\034\343\277/m\277\206j\360\340\277\224\350\250[\313\263\t@,\0368\326\320}\340\277=\370c\371j-\343\277\246O\306\027\267L\365?\004I\034\2558\000\324\277\320y\323\364Q\026\346\277\315*LD\270\243\345\277(\375s\363l_\331\277\253v\364\375\203D\340\277J\261\3139\241\276\336\277\241\'!\204\222\342\350\277.\233\202T\240D\332\277\031\237\244eH}\351\2777\202\256b\004\303\367?UP\235\021\204\005\350?\223\234|\021\222\245\346\277\344\331S\342\177S\345\277^\224\001\251\3774\344\2779r\017/\327\237\346\277\2319\024\305m\030\306\277\336\216\016\232C\330\363?\202\243\306/\233\253\306?\261\024\003_\267)\341\277)\317\260%7\013\340\277v\256\214\366]\246\367?\031r\317\200l\"\327\277\247*\206\214\2319\275?\351\266\263-hB\320?\224}\362R5[\311?\224}\362R5[\311?\013K\315\014B[\343\277\203\316\255\271\307!\346\277\211\243\2114\365!\343\277Jw\253\240\233>\343\277Gvq\356\351U\345?\237\017g\355\362\212\344\277\311\317g\310N\005\343\277M\000S\352:1\337\277A\3045(\324f\335\277\220\2248\367\306\314\255?\312\333\304\223\0361\345\277\006C\262\251\317&\360?4\013\316\347\235\325\341\277]\2354\217C@\022@`\302\326\3770{\262?\2129}2\266\322\360?\223\233\005d:3\305\277\274\374\371CvV\244\277\036\273\354-\235\273\363?\377\327\3420\341u\345\277;&\'\307\240\201\334\277\215\376m\260^\300\345\277\205\021\330\236\221h\344\277`#\234\272\005z\376?\232RE\te\342\353\277j\007\354\204`\032\342\277\323t4\310C\353\247\277,\0368\326\320}\340\277\331Fh\232j\261\350?\260\3355E\275\016\345\277nb\320\000\312\270\344\277o\245\372\345\223\377\342\277\244u1\207\324\342\307\277J\261\3139\241\276\336\277\263c\212\017Q\234\341\277=\227\235>\236\225\336?\024\337\315\377\005\350\016@\322\222>y\245\335\275\277g*\3114\036\265\352?\377\314\374\022i\274\324?\302\230N\345\374\372\357\277\252/}f\241\354\202?\201\361\212i\205\274\356?\246\271\322\031\366\233\347\277\221\231!\2531A\t@J\261\3139\241\276\336\277\270)\362:Q\374\367?RX\344\346\230j\342\277\006C\262\251\317&\360?\323t4\310C\353\247\277|\005\270\316g\306\305?[Ez\370e\302\343\277(n\352jjs\333?\365\275w:8\303\321\277\345\005;\336\001\265\320?\261\024\003_\267)\341\277GbD\211\007L\336\277\224\323I+\214\300\342\277\274\374\371CvV\244\277\001\360\234\307\200\315\351\277\244i]\200\0020\340?\003q@\314\000\r\210\277\360\025q\244\346\035\347\277OO\332\232\324\243\337\277\001\033\r\026\253\274\343\277\366n\360\211\236P\321\277\272\r\366;T\255\344\277\273\213zl\325\\\314\277\005\371\310\204F\014\021@\275\317X\372\234\237\317?[\032\n\252;\323\351\277/m\277\206j\360\340\277\274\374\371CvV\244\277\326\354q\007[\014\355\277d\333A\204\204B\352?\322R\361\327\334\r\362?\021\351\333mu@\344\277Oc\007\000\267\255\346?\253v\364\375\203D\340\277\016\232T\275\333\315\343\277+\275q\033\004\346\333?\356\247\326p\362\347\356\277\"_e\2229z\330\277\026#H\320\322\257\326\277>u\256w:\364\334\277\316\273\303\'jt\346?M\000S\352:1\337\277c2\020\n3\032\345\277\210A\325\220\316\220\307?\263c\212\017Q\234\341\277ch\235\314!\363\236?\2671J\231i\272\316?f\301\252\0339_\377?>u\256w:\364\334\277i\320\036kf\377\345\277!\267\252\305?\304\344\277\024\326%\266\352\250\356\277\263c\212\017Q\234\341\277\324e\246\217o\014\317\277\311\230\232\256T\352\346\277\213\204v\261\232^\353\277\273\032\004\365\327H\272\277~<\374#dh\347\2773tF\034\327\263\361\277M\000S\352:1\337\277\314\363~*\276\210\351\277j\334{66+\350\277\201\361\212i\205\274\356?\357\t\024\331\026\362\344\277\2319\024\305m\030\306\277\313\036\357x\350w\343\277OO\332\232\324\243\337\277\366n\360\211\236P\321\277\035%\371/\334\n\346\277`\201K\361t\235\356\277"
      }
    }
  }
}
node {
  name: "tensors/component_7"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 750
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 750
          }
        }
        tensor_content: "u\324M\0330k\305\277:\004\033\256sf\341?\331\230\005\000yj\366?R\325\330\272\240\364\316\277\200\377\204\032\201\306\356?\334D\327\252nf\344?\357]`\001N\357\357\277\303\326.o\352\252\265\277\311\234V\356\301\317\313\277<\311\235\271\025\235\362\277u: \333\330\027\334?\360\224\310\237Vc\306?\343^7\306c>\317?\334U\326\241\327 \324?\365`\010{\354\275\303\277\256bn\316g4\306\277(\021\377\021)J\334\277l\335.2\334@\362\277\255s\327\277\257\301\363?\266^\177\030\305\t\367?\177_\262\275b\202\343?7\301\035\252\362\002\343?F\275\376\025\312\203\301?<.\243\362{$\343?\246\2009\243*Q\350?7\301\035\252\362\002\343?\032\373\275\212\\\361\262\277|)\321\264\025j\300?\023\337\nC\344\312\366\277\253\013*\r\253k\337?\364\337w\r\033G\350?\255\327\271\016[4\277\277o\014\265\232\233\352\305?\2105\276\013!\345\373\277\221\273\350\350h{\321?\352\373H*\315z\274\277NO\346k\227@\360?\031\344~$(\312\312?\0058\033lF\304\355?\345\312\333\371\203\334\363?\\\237\247\2139n\351?\016\302\370o}\372\356\277\257\027G0\2740\352?G3\225\\\305T\272?\"\217\253d(]\335\277\245\3245\236\024o\326?\"HKi\022M\377\277\233ovD\265\246\345\277\377i\031p\036\350\342?V\264u\360\2609\350?\227\210c=U\361\305\277\330/\'\022\361\"\364?\306\032\263\021g\357\340\277\001\276\221\016\214\374\t\300\330\203\301\335t\213\365?\322\036<\240nA\360\277\307\371\237v\321\'\346?SO\\)$T\362?\310\240\375H\303\251\311\277\206J\214p\230\260\372\277u: \333\330\027\334?\211\211\272\006\013\003\372?\206\351\313Y\215\310\321\277\201\351\243F\200\221\340\277\271@\250\200T\254\340\277\267\355\252f\315\231\354?\2604U\242\0065\006\300/zyKp\305\346?/\223\356\n\351j\343?T\342\270\024\241\252\343?\001\3272B.\245\363?X\247\235O\251\226\361?b\215m\033z\230\322\277\337\227$\364Ol\304\277\023e#\027\340\031\342\277\232\314\017\374\036\362\353?B\322\034\252\233B\354?w\362\300\376_\374\363?\033\323\247@\314F\334?\022D\374\355#\364\321?r\256\247\260\277#4\2776\275N<\344\361\323?\2674cJ6\260\344?\003\240\346\352D\242\340\277\033\217\323n\365\016\325\277/\251\273P\303A\314?\357\333\250\237\0146\331?\377\254\252\375%\347\361?\032\371L\211\237\225\311?\2413U\303\\\234\240?\352\327)X\030\223\354?\006\333\331\234/\177\361?H\270\224\204\331\270\331\277\256Ic\t\316a\367\277_\357\350\246;\331\335?\345\327\331(\276\237\300?kSyJ\362\306\373\277_\274\303\245\263\355\343?\3558BWv\201\317?\343\244,j\235\336\343\277\333\276\264\217_h\326?@\312\246\341\213W\337?s5z\237t2\344\277%\350%\177)\244\310?\244\355\322p\232K\344?g\342\220\n\324\370\353?\367\245O]\230x\262?\204\241xI\002s\267\277\027\261)NZ\017\370?=\245\024\366\301g\316?<.\363!\326\027\337\277?L\372\216\214D\336?\'\374\340}W\213\341?\212,\274\205\r~\203?\020\026\035~tO\356\277\272\006\370\0229\010\330?<\301\365\226\345\313\321?\207\017\311\223\363\242\362?#\'\315NI\252k?\241c\035\211\260\321\355?!\207\371\372\344\334\351?\241\376\321g\003\006\324?\340\036\000\010{1\363?\007\032\234\274(m\341?\354\202V\217\330\240\305\277\006\251[\224\267\230\347?\200\377\204\032\201\306\356?pd\274\244\307\256\331?[>5\037\256b\361?\342#\354\"\346\325\332?{\222\377\321\367\244\356?\243\365pL\267m\342\277o\357\230\200!k\313?P\311u\257H\353\372\277\032a,\226\304\321\341?\271@\250\200T\254\340\27718\002\377\257\225\246\277\2376a\003\274A\277?}[\025\252tW\370?v\3165\277q5\276?\323\372\262\334\032\014\314?\354\202V\217\330\240\305\277\345/\tF\367\232\345?\033+7\010\221\340\302?\202w\334\177\023\334\271\277[\373\306\005\312\005\007\3007\301m\331L\366\336\2775X?\274j\273\340?\205\320\266M\340F\320?\361L\033\"\236\360\366?\220p\211\252\376\212\333?aS\275\244\036o\320?\366e\244o=\364\370\277a\247\211\312\302\275\365?\031\311\323\013k\246\271\277u\357\3703\355\216\266?\274Q\'|])\365\277\226\211\022\370\235\216\355?\347\225S?\307\354\317?\304\272\205n\2053\354\277*t\020\331\034\357\264\277[SyA\262A\362?\305\2148\003\202\023\376\277&\000\2722yK\363\277h\335\302\273b\334\342\277\365z\030g\207\242\322?\227\264J\314\251\214\222?\006w!\346kZ\302?\322]\222I\356\312\360\277\201\351\243F\200\221\340\277\277\277?/\320\361\337?\333Y}\374\330\372\321?\235\231\376\210\275d\347\2774\021\303y5:\357\277\202w\334\177\023\334\271\277\035\3540\216kJ\356?-\347bH:\263\336\277\t\354X\2308\374\345?&\223\252\247|=\365\277\021\364\330\247[\226\365\277e\352\206\316C!\364?\334<up\205\331\354?\244\251\326\2356\347\316\277D\344\363C\025t\220?\220\304q\027\302J\304?5\251\033\004\217e\267?j\342h\367\306\301\332?\323\265{\207 \007\326\277_\020Lh\353\016\333\277\213L\365\257\034t\254\2778\004WO\247\373\347\277\352U\256\227\no\334?\003\220\346\313\376m\321?\301#\024-\263\207\322?\362\245\357\251\314T\307?E\\\322\221\205\274\342?d\232\273p\316\311\361\277\0208\267\267\005\370\305?cD\274f;F\273?\030@U\234b\237\355?\257|V\2605g\335?$H\243QeS\351?\036\261Y,\340c\332?\002\177\277\301\210|\320?\351\r\331\375\004@\362?\271W$x7\233\267?\240s\035\237\266\200\343\277\252Z\224ZW\002\353\277\307Qu&\335\005\366?\366\347\267\032\356\177\005\300\336\213\337\2751p\330\277H\250\200\340\254\253\356?\340\032\317j\006k\367?\271\037\225\345\276\344\345?#&\315v\240\025\333\277\226\246\032\204\361\257\322?\026\031\305\367\022\036\302\277=U\370\334\322\275\226?$\327\376t\263\262\307?p\204\274\342S\027\310\277hKo\370[@\356?5e\037(\353{\310?\235Z\000\310\220\341\360?L!-\212\032\274\362?H\315\213\352\376\025\022\300l\335.2\334@\362\277mF\2657\021\202\332\277\312\027\035\352\310\231~?p<.\030\320\331\245?J\010\270\312\241\026\366?1C\217#\355w\360?\327XZ\022\036\346\274\277\355\032\'\\\231\366\352?\302o\352\216\347\255\357?E\206\226w\301\017\353\277i\232\223]\301\222\360?\000Q|\235\230\013\325?/\206\264:{\022\360\277`W \234\263\033\360?zJ\370\335\321\217\340?9e\227X\322\233\322?gl\202\223\361\007\351\277\003/\246\302\323\315\346\2772X{]\236P\347\277}\366\017q\016\320\347\277-dtn\027\207\275\277\244oXx\273\036\367\277$P\356\273\002\315%\300\330\037-K\311\377\275?K\357\020\261\010\213\325?\360\005Y\367!+\354?\343Q/P\026\314\357?\343\'\220l\3559\224?J&\005 \237\207\336?\344\251\226\004\316.\305?d\226\354\002\300\270\362?\315\026\014\300\245\232\334\277\'e\277k\337\322\343?\222V)\230I8\332\277\004\225\023\347\000\001\247\277\246\320\216C\023\225\330?\344\240\r\326t_\322?US5\347\205\231\335\277sF\345\014WQ\363?U\2271\303)\203\334?\263\251\256\201\351*\324\277<.\363!\326\027\337\277\354\213\317\231gc\010\300\274 \250K\010\311\313?\356j,\326g\314\310?\211\372\'\374\007\266\221?\037Th\203\343\214\360\277Z\212\013\201\342\210\376\277\366\364\035_\205\333\325?\344\364Y\367x\353\342?\200\020\204\021\352\200\336?\204\241xI\002s\267\277\025]\301\334\366\214\352\277\356f\205{f\362\312?H\010\352$\302\374\351\277\312+\224<\326!\362?\202g\362\3125\273\000\300*[\233\031\244I\270\277\201\257\033\354q$\351?\231g\024\n\314\031\356\277o%*Z\024\220\302?Y\r@:\014t\317?M\243\306\037b\355\332\277\211\027\323\345\211)\340\277A\010\314O\210\357\361?\336Y\315+3\356\355\277R\325\330\272\240\364\316\2777\202\307\000sy\342?|)\321\264\025j\300?\326\364\345\265\206i\322\277\220o\212\311\233\177\341\277\232\3765\034D\322\353\277h-\254\345\321\273\363\277hKo\370[@\356?\315{\021\371\013\"\375\277\254\313@\371A;\364\277#8\027k\321\033\261?Z\353AL:\377\337?\304\327!\204_\360\361\277e}YwM\213\347?\031\261\225\304\323s\347?\260\200\325\356\351\204\300?\360\244\030\345\266\005\350\277\342\001\306!\007*\352?\2219\225;h\216\322?\013\021wB\020j\306\277M\035T\325\370\373\320?i\274\257 \315\024\350?\335\324\275m-O\314?\353j|\374\201:\333?D\275NE$w\355?:CqW\363\357\341?o%*Z\024\220\302?\216\204X.\023K\340\277\345\032w\202\263d\355\277\030\265\240\323\025\032\335\277 \301\201U\363I\341\277\354e\270\364#\315\364\277P\250X\315\237t\335?(\021\377\021)J\334\277=\035\232\264\377\272\360?\365\337O\372\r\020\327?vWd\010`\316\347?^\315\022\314v\233\357\277`\007\3039\222?\310\277\231\231\022\016\244=\343\277\272\272\231\363k\014\350\277\013*\354\001\211\017\303\277\374\316P\003\245U\347?\215gP\242\277)\333\277W\222w\002\337\304\350\277\024\005\272\322\312\310\346?\371H\007i\272\344w?\036\233\354?\375p\177\277\035;\233\333\027\341\331\277\177\007#\366\235\350\354\277\357\251\276 \033\353\337?\217\215\ty\271\326\355\277\256\355\276\353\263r\350?\332\032Off\250\342?}\004g\345\2306\312?\033np\255E\331\327?5e\037(\353{\310?\262<\367\336?#\360\277\206\267}&[\261\340?3\021\233]\350}\344?8\206\266o)\273\022\300\247Z\354B\252\010\365?\333,\350\242\266\364\245\277U\260\246\202\242(\331?\367\244\2640v9\320?\t\027T\366U\302\270?\016nT]\346\342\372\277\342\330\304{\372L\265?\353\203\361\273\372\337\327?*\021/\347n\031\365?Z\321%\224\261T\363?\272\272\231\363k\014\350\277\023\337<\235\004\261\332\277&a\360\375\320\301\324?\246g\304\343\261\253\353?M\314\326\276\356\273x\277C\373\245\rA\365\323\277\214 H\217\374\037\347?\254^1nE-\366\277\312\224h\343J\272\341?(\212\311\220\320g\310\277B\206\342\234f\325\300?.\"\256\342w\226\351?:\377t\204\217\213\314\277\304#d\\\r{\356\277\023\337\nC\344\312\366\277\260\355f\003al\376\277\274UX\031\322\357\360\277\264s\271\363\2659\345?\365Y\267\315:\365d?\\y\306\2412\212\345?\354\3432\355\002\372\341?\224\320\312\333\006\245\345?a\270\3647\245\334\324?vhc\377\310\210\327?\270\317gX\343\327\346\277\315\026\014\300\245\232\334\277\006\251[\224\267\230\347?\215\305\\j\376\367\270?\343\021\332\30537\325\277\233Nc\251\037\337\352?$\"\302g^o\345?\025v6\234o2\347\277\202\236\274A=F\316\277]yn\271\337\203\373\277`\226\036]\340\236\346\277\3048\366\037Q\261\346?\366\224(S\"\207\261?\265g\210K\276\233\336?p$\217-\362P\320\277@\374\220`}\242\330?\314\371wc\304\360\324?%r+\226m\021\353?\311\214\006\251a-\352?[\222\317\3521\313\362?\364\"\261\262\317?\355\277[>5\037\256b\361?\037\275Fqk\324\362\277Q\023\270I\226\315\301\277\213\034y!\356\016\330?c\367^oK\304\352?\336\275\311<#\273\321\277>:8X\364\023\313\277oB\346\311\002q\353\277\253\023\240\325\272V\354?$~4+Xx\340?\337~\2574\327\306\307\277\251b\366\224@\217\342\277\326\234\242\023g\225\341?0mI\302\025\034\346\277EP\241\351\215\036\334?\021\255\332\333\253;\324?Nl\322\260\313\360\321\277\035\240\322n\236N\336\277\360\310\350w\214,\244?\367\244\2640v9\320?\255\037=\364+Y\362?\2468nP8\321\340\277C`\335\240\307b\330\277z\362,u\331`\343?\330\255}\3707\301\314\277\2728FFk\037\351\277\2540D\266\r1\303?4\3639\203\0044\360\277~x\273\006b\303\360?d5\2667hB\321\277\023]\031\305I\223\364?op\020\301\342\356\004\300\243=<\237\251\355\351?\300<\261\3778d\340?aO\276a\312\216\370?\016*\234\333n\241\320\277\257\0064\253,\030\345?TW\004LT%\323\277%z\215\320V\236\342?\t/\276H/O\277\277\177_\262\275b\202\343?\354W\317r\255\\\263\277\211\345\266\014x\370\362?_\035\324\342\330C\377?Z\\F\323w>\303?R\373\301]\240\353\360?\342\337\251^\373\247\362?\336P\034\341\214b\340\277>\335\306\274\327\204\277\2772\036\363\002\220\343\357?P\035\244\004S\357\354\277\322+vp\334\231\343?\036\036\033\r]\225\347?\364\003\254K\361\264\242?;~\014!\213\306\350?>\347\352\016\023\016\353?#78\344\2024\372\277B\322\034\252\233B\354?\341\207|\306\234\303\370\277&\223>1\003\331\345\277K\357\020\261\010\213\325?\001P\341pv\314\302\277P\227\t\247\334\306\301?\367\214\332\235\037\323\265?\005E7gz\017\311?s1\347\322\231\266\333\277\356\265\203R\231$\367?\372<\351\261w[\315?\231ro\335(\233\255?|\242k^w\270\363\277m\003\0016\346\340\006\300_\363\267\024J\352\354?\313Y\001\251\201r\021\300\300\223\035\346\202n\273\277K\367\376\262?\033\326\2774\3639\203\0044\360\277\3233(\332\037\032\327\277D\270v\257\237\253\361\277/\343\223\332+\242\357\277[\010\206y\301\265\353?I\216\0208\006\036\273\277\235\306\247p\006\311\250?\305^\257\366J^\331?\261\361eF\265L\346?\237\341\311\333\257\344\356?\362\245\357\251\314T\307?(?r\013_\212\360?\246R\342\360\023\202\327?=\336\211\363\306u\331\277bL\n\034>\372\266?7\354,\215\366\241\261?\356j,\326g\314\310?\344\036v\305\007E\365?h\321%\235\361\331\374\277s*\\T\206\363\311?{_*\367\211\'\327\277\004\177\323O\257\332\345?V:\300\036\315n\347\277\275\231\220\237\351\363\377?\322\350\226A\225C\375\277\270\256T\275M\020\354?\274\231\206X\326D\355?e\3737$m\204\374\277l\377\254$Nx\346?\321\255\373w\375l\366\277\340\370|\354\2756\000\300\324\217\326>M\270\310\277)\202\r\340y8\362\277*\271c~v\352\367?\272\006\370\0229\010\330?6\227\237\254\375\363\363?\251b\366\224@\217\342\277\206cko\033(Y\277\3367\247!\024\275\343\277\204>\257\270\276\365\272?Z\\F\323w>\303?\3278\316\025\204\377\356?\256\340\346J\254\317\361?\304\036\202\177u\000\320\277`\"nROc\271?O\201\240\025C\274\320\277a\315\326*C\006\351?\270\2148\372A\216\364?$\202+\254s\300\340\277\317Q\223\373\026\023\356\277\026U#\001\332j\354?\004|\236\'\210[\252\277\341\302[\352`B\324?\221k \376n\225\022\300;]!\231\0026\337?\2674cJ6\260\344?\202$\260%{a\003\300\262b\246n&!\340?\363;N\205U\034\333\277\362\245\357\251\314T\307?.\025\246l*$\332\277\247\'[\324\350=\325\277 \301\201U\363I\341\277\367\244\2640v9\320?R\325\330\272\240\364\316\277\216\324\355\320K\360\002\300\250\037\r\037\346\211\331\277q\267\t\345h/\320\277\303\272\255\201\222j\335\277M\"\016\237\203?\316?\313I\341\221\323\222\332?\201\334\233\3202\037\301\277\031\223}\332\360^\227\277\242\253\\\013\025\311\262?W\314\237\262a\223\276\277U\030\352C\0101\311\277\273\330\334\001V\316\355?\303\273H\256\264\251\317?\240\263r)\231\025\336?\2376a\003\274A\277?\326Q/G\326F\326?\351\227\324\3155\376\321\277p\315\232\222O\366\333?\303\340*\267X\202\351?W\024K\253?\357\362\277\000\036\367\361\204\201\311\277\335\034L8\261\214\256\277P\301\315\214\030\032\332?\026\t\223\207\354\210\370\277h\315\302\234\034\250\323?\177/\377\321\371K\214\277\317\224\220\377\227v\354\277\372\213\357J\343%\301?g\335\326I\211:\330\277dx\3138\034Ic\277d`=]\323\013\355?\363\275\2412V\t\332\277\305\334[IJq\332?\264\005]\346\026\311\305\277\"\360\327\350l$\354?P\\\226\371\221\254\325?\302f9DA\"\342?\210C\034[\2516\247\277\312\224h\343J\272\341?\374\374k\024\210\217\321?y\232a\014\3411\346?\0327\256\230\317\302\362?\330\255}\3707\301\314\277\033\364&R\333r\366?n\336qv\253y\312?\003\350\343\227W\010\374\277\037\004\247l\201\344\320\277\233x\327_\001?\327?\264I;\366\300*\366?\205VQ\242\026\352\321\277\331\264\340Z\376\307\263\277\351k,\225\305\377\227?\261\361eF\265L\346?b!\3738:[\350?\354\233\313NQF\302\277Eb\267~Yf\021\300\233\224\276\341v\302\222\277\007\324Bm\356\205\276?\341\302[\352`B\324?V\264u\360\2609\350?\343\021\332\30537\325\277P\333\005\203\200\260\260?jF\227b\327t\362\2775\227\225e\352D\341?\332.\036\374\372r\312\277Y:\254\231\346\225\353\277\214\313t\306\274-\300\2773\206\322\017\265\037\330\277&\223>1\003\331\345\277\316\303\226c\267]\313?>:8X\364\023\313\277\013\2513\201\252a\326?b\274\315\354\306\234\366?\001\344\n\3435H\352?\234\252\301\336\362\211\320?;~\014!\213\306\350?\265\313\204\\\256h\342?u}E\362f\262\353?Y\r@:\014t\317?e\3737$m\204\374\277V%\036.\177\246\005\300\264\321\256\352\273\010\020\3000C\301\206M\343\335\277N\031\205p*p\333?\206\267}&[\261\340?\016\016\033\356\026a\310?\260\245\225\312w\t\000\300s\034\005\340\373\214\347\277\376\275e\232b\371\354\277\224\231>\202\315@\000\300W\315\352\257)\337\344?\220\211\376iw0\330?\034+\2077\353\323\356?\200\377\204\032\201\306\356?n\332\312\033\252\237\314?@d\324!\343\252\310\277\363\"\331\305\334v\336\277\0008\007\336\037f\330?u\321A\355P\320\331?f>\357?\247\243\321?\022Y\336\340\301\035\346?C\315\025-r\002\020\300\241c\035\211\260\321\355?F\0008\273~|\326?x[\237\354\347C\366?/G\220\353\033o\323\277\312\t\264\032\3764\321\277P\250X\315\237t\335?\213\2529\030\032/\344\277\272\272\231\363k\014\350\277m\205\305\370I\307\361?d\006\303z4\014\231\277\372<\351\261w[\315?\r\207]\246\345#\350\277\231=P$\220\306\345?H\250\200\340\254\253\356?\333\245?\320\346\302\331?;]!\231\0026\337?\322+vp\334\231\343?\004s\242\247\267<\337?h\331/\357\207`\332\277\341D\257\227a/\323?\225\001V\330I\313\274\277\034\005\222\277\275\221\325?sgx\254\214\333\322\277\266,\001\020M#\355?\024\207I!\377J\354\277\212R\306\227t\006\361?\004\177\323O\257\332\345?\014n\254E9\351\344?\177_\262\275b\202\343?e\270\010\306\313:\352?\227_\022zn+\310?\344\250\373\327\253\357\322\277\260\023x\302\255\037\333??\031\021/8\356\352\2777\000~\232\205;\366?\242\n\341\342\344O\000\3000\364\032\217-2\302?\256\0073\214\217#\317?\020\375C\n\273\335\331?\035;\233\333\027\341\331\277\225\002\361\373+\205\345\277\000\333\225B\003\327\334\277\317\235\361\032\344\016\336?G\311\223{Bs\351\277}_FG\351\035\364?\342\016\306\247\352U\243?H\266\276N\351\301\032?E7,*\025y\337?\000Q|\235\230\013\325?5r\357\375y\001\336?\034zIm\352p\364\277\031\344~$(\312\312?\210\314AM\377R\366?\261\361eF\265L\346?$\272\342Z93\315?\023\323\317S\331}\355?\364\206\255\303\277\014\321\277\033np\255E\331\327?r0t\260D)\261\277\372&X\r\321\031\353\277pKG\345N\t\335?\213\351\217\301\231\270\344\277+\337\260\336\3662\353?d`=]\323\013\355?\311\344\321\021Z\\\347?\007Y\362e\250\366\341?\340\307\235q\204[\264?0>\337\262\365\355\310\2775\220\246D\026\300\272?\014A\360\277DY\266?\257\0064\253,\030\345?\335\324\275m-O\314?\203\2360\203/\310\356\277\352\016\366\241!N\301?i\320\246\300.\221\307\277\304\272\205n\2053\354\277\363\357\213\261GT\323\277\371\332\275L\320\210\324\277yxw\243\365\225\342\277\237\236\244\304!J\337?[\010\206y\301\265\353?\256bn\316g4\306\277Wd/6\3059\007\300\223\324\325\352HK\333\277\226\200k\364\n\262\362?\213\202K\341\226\273\276?2%B\327/\214\321\277<\311\235\271\025\235\362\277dO*\330C\363\347?\260\221$\025\2552\334?\030\352\226\200\346\377\261\277\357}\2119\"<\256?+L\"\231Y\366\325?\305\345\344w\243@\315?\314f%\277ZI\346?\313\327\241\210\377\262\346\277\214\262\377\006D\210\303\277\367\275\321\007\234\330\362?\325{S\340\335\275\311?D\270v\257\237\253\361\277CH\003\016q\374\315?"
      }
    }
  }
}
node {
  name: "tensors/component_8"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 750
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 750
          }
        }
        tensor_content: "\344\007\313\235_\273\341?\007\335\230`\354g\344\277S\022M\362t\217\332\277O\320\005\232\300\340\345\277\017\213\033\220\004\300\346?j\304\006\321A\177\333\277;\234Z$0\330\345\277\020&\024\325\275\272\320?F\033\371\016\242\027\274\277\357\313\255M\356\265\345\277\301\351+\'\030\357\342\277\231\326\247]h\235\377?t\031\177P\326\314\342\277\231r1\003\265\243\316\277q\022\tP\'\031\013@x\266j\356\035\331\346\2779\322O\021\226r\377?\355M\237\344\261\316\344\277Yk\250\237\220\016\340\277F\305D\217\005\330\317\277\"\262\274bb\341\326\277(I\322y\224\252\342\277\225\032\337\212\025l\370?\351U\017\001\327d\321\277w\020\300\267\257:\001@\247\355\272\323q\272\340?\t\374u\225\367\214\347\277\327\233\345\005\345\336\343\277q\022\tP\'\031\013@L\367R\353\360\233\325\277\033E\233\312\337\022\344?_\n\207\226f,\336\277\354.\302\257\246\251\341\277Ld\312\302\\7\310\277\005\321\233U)m\351?\310zo\032(\032\374?Q/7\316\361\242\343\277\007\335\230`\354g\344\277\351g\273\273^\333\244\277/\325\320F\"\236\310\2776&\274\327\030\207\321\277\240^\025\331d\207\341\277\365\250\355\352[_\344\277\265\020\317\2671w\342\277\254VO}V$\345\277O\320\005\232\300\340\345\277q\t\365Vum\331?\327\272\302:\360\003\347\277\355l|\031\275\363\347\277\260eLy\027\035\357?#l\222\334&\001\344\277v\177l\314;\367\275\277\257y\271\240\377\255\326\277\013[\247\311(O\345\277\177\323\376\212\261\037\340\277\212\3138/\243\274\343\277\314\341e\313\t\214\346\277\247!\353\360\203\225\260\277\022\227\030\233\307\272\341\277\350\344\n;\315d\340?\301\351+\'\030\357\342\277\237\266\320\014\347\225\007@W\337W\366\014\363\377?n\272\302\241\227`\224?\322\276\245hw5\345\277\333\246U\023\010s\337?}t\315V\200]\342\277o<?\263h#\344\277\333\374\t\223\244\262\333\277j_\377\025\373y\345\277T\216h\002#e\341\277\363\367\224%,\302\330?\253\3323m\250N\336\277\212\363kA\362\234\270\277\302\004\000U`\213y\277h&\270[\241\271\262\2770\244 \200>;\342\277\3669\334}\340p\355??\262x\300\024k\007@6\240=R\267\t\344\277\352\356m\260\200\014\347\277\203\342\373\206r\030\352?\374IfwA\320\326\277.\275T\177\"\326\007@\266/\254\354<\234\345\277q\233p\347\231\345\341\277\023/(\316of\002@\373\254Kqa\276\262?O\320\005\232\300\340\345\277M\263\250\366\014\336\234\277w\227\215\271\022\264\343\277\240\324^\305\360\276\365?W\356\246\316\303\023\304?\025\233\245\211e\037\320\277@Z\275\214\222\\\341\277\357\254\320\030\343\220\342\277\307i-\351\342\347\335\277\354.\302\257\246\251\341\277\252\234y\003\222\004\330\277b\212/\225\262f\323\277\253\3323m\250N\336\277\306\345H\371\220\275\344\277\004\225\177\344\025\033\375?\365\0367\327\347\226\370?z\366\276\355Cv\341\277\335\361W\241\357\016\000@\344x\317ci\273\322\277^\206\242\246\024\002\345\2773\262\020\344\217G\307\277%\313\303\020X\303\341\277\327\024\030\004\202e\001@u8\\\205\341\361\345\277&\352\240Ec\350\344\277\374\344^\274\372\312\340\277`\250&\t\237f\301?\013[\247\311(O\345\277\224\t\235Y\3209\332\277\005\266\366\2560\223\364?\002\217T\375t\276\324?h1~\250\255\032\316\277\214cHbKh\004@s\272M\034\245\n\345\277\240\342\371\310\266\261\332\277wx\260\204\007\217\340\277}\352\026C\014\225\366?\030\262\022\242K\256\346\277\017\213\033\220\004\300\346?g\341\360\254\276\222\344\277\002e`~\305\303\333\277u\235c@(\367\333\277M4\'\224\350\300\306?\3508L\374\252\030\270?\351U\017\001\327d\321\277\243\373\000w\254\223\345\277\222&\2075MM\343\277\322\276\245hw5\345\277!\ra\250\365>\346\277T1*\'\200\264\335\277M4\'\224\350\300\306?\334\336\022\037\270\262\275\277\260RlO\317\362\346\277\372\205-\210\311\010\343\277\213\"\333\000\246_\225\2774\246\023\331\314L\334\277\312\3743`\375y\000@j_\377\025\373y\345\277\336~\314\301\317\305\272?o\035b~]\376\340\277\225\244\225\236\2114\344\277dT>\013@q\317\277\303g:\220T\326\343\277bkR`\247A\320\277\256\324]\346\222\013\346\277\317@\227\377:N\344\277b\212/\225\262f\323\277r3\200\032B\221\002@>T\367\243\350\210P\277QA\n`\312\340\306\277\370&\374S\230F\345\277,\346\275\027\334\266\346\277\013[\247\311(O\345\277\206_\375W?\023\306\277\010\214W\220\014\262\313\277g\341\360\254\276\222\344\277\314\302\210\226\376f\343\277\240^\025\331d\207\341\277\003\000Y\303~\276\345\277\000\202JZB\327\344\277\226\303r\323\224Y\347\277n\272\302\241\227`\224?x\256\333\213\357\271\232\277.NE)Q4\266\277\372\244\n\275\324-\346\277\200\005\274\351\004o\353?\323md\230\227\177\314\277\007K\220\227\376\336\233?,\346\275\027\334\266\346\277\005g\313\253<\021\260?G\3735\031x\315\323\277\270\346\230T\360l\t@\335\033\347\307\257\327\336\277\010\214W\220\014\262\313\277{\231\200\022\241\305\335\277K\245+Z\362\300\347?\247\343\337\211\325\326\277\277a\031+\317\250f\342?\373\254Kqa\276\262?\333\203\225\260u\034\336?J\363\305\374R7\347\277A\320\006y\036\224\365?\263\261\235\203\000\265\344\277\022\335B!\003\233\324\277\020pv\351\013\346\361?\260\024\262\345\270\250\340\277\1778\006F\370$\326\277f\366jl\026\020\341?T\255E7.\212\344\277,\346\275\027\334\266\346\277A\353\253\037\027n\352?\346\037\036wdo\315\277\225\032\337\212\025l\370?f\202\277x\215\320\346\277\214*jc\324~\341\2775\201`\035\254\344\340\277\346\341c\rN%\307\277\017\031\n2\213\323\340\277\227\370\210\261\305Y\254\277OT\352\211\022\013\337\277v\3464\364\342\026\330?\225\244\225\236\2114\344\277\220=\237\355\247\302\371?f\202\277x\215\320\346\277Ay\232\301\235\201\344\277\360\276\243\252\273\316\305\277\020\276e\354\367u\321\277U\\\004gN\324\313\277S\022M\362t\217\332\277r0\227\0101B\371?\233\240\262p\002\003\346\277\322B\212X\311_\336\277\300m\020\027j\031\334\277\243\373\000w\254\223\345\277F7\375)\000\006\340\277{\\\254i\251\240\274\277\013\000\003\204\225\361\325\277\355M\237\344\261\316\344\277\304\206\027\305_\373\346\277\0340!\013\210\225\347\277Y\251b\t\247X\346\277Y\212\205\324\2333\343\277\332\031\364n!\306\344\277tQ\016\323K\272\360?\366l&\332\323&\330\277\032\362f\241qK\341\277>\373\213Xa\232\343\277\235\237\324@+\034\241\277\337*\213\000\362\021\343?\252pPG\302\350\004@j_\377\025\373y\345\277\211Z4i\231\274\322?\334\'\344\322r\322\311\277\014I\3247P\021\322?\245\336\026\233/\200\334\277FV\332^\013+\343\277\3139!\377\213\232\014@\272R\026\020\346%\327\277t\031\177P\326\314\342\277\340\273R\274%\\\274\277x\266j\356\035\331\346\277\350p_GD%\346\277;}}\357$\263\342\277D{\215\032,\223\336\277\023/(\316of\002@\275\303\330\361]\026\010@;\234Z$0\330\345\277\321\237\3103l\020\342\277\322B\212X\311_\336\277\007B\240\0333m\332\277h&\270[\241\271\262\277\326|\010\321\331\271\340\277\\\313\346k1\275\302?\311Dz-\302\177\342\277\232\005\272+I\010\334\277K3\032\374x\324\341\277\303H][I\261\340\277\365\0367\327\347\226\370?gX\211\025L\306\r@\030\014hk\335\017\001@\325<\264\321\263\034\346\277#l\222\334&\001\344\277s\272M\034\245\n\345\277\202\246\337\025_\306\375?O\320\005\232\300\340\345\2774A\014\036\206G\346\277FV\332^\013+\343\277\265B\214\026\205\306\355?^\206\242\246\024\002\345\277\211\005\344\370\241\317\000@j\343\343\005M\244\336\277\253\273V8\235)\333\277S\363o\275ij\327\277A\257\217\256\003\034\376?\035pu\n\2562\342\277t~\206\013\035\322\330\277\337\025\021A\232\224\346\277\355M\237\344\261\316\344\277\362*\337\201\037x\343\277\365\0367\327\347\226\370?\263\261\235\203\000\265\344\277\r\331\2652e6\346\277/\343\347\201\304q\315?i@\"\341\357T\342\277\n\031A+k\027\221\277\327\233\345\005\345\336\343\277\223EdjXr\346\277\333\374\t\223\244\262\333\277=\345\004\001\2320\262\277\314\302\210\226\376f\343\277\300m\020\027j\031\334\277\323/\252.\2015\306\277\246Z2\253\335U\343\277(\217\374\377\317\212\325\277Z-G\371\370\202\337\277\275\303\330\361]\026\010@\356\241\324Zb\375i?\362I\274\266*\235\346\277\306\345H\371\220\275\344\277\0208\347f\226\370\343\277\367\007\037\037\215!\342\277D{\215\032,\223\336\277\333\246U\023\010s\337?\243\373\000w\254\223\345\277\372m8\256a\327y?\354.\302\257\246\251\341\277m\335\r\1777a\346\277\017\031\n2\213\323\340\277\250\271c\337\016\030\341\277\2613\217\032\304\315\343\277(I\322y\224\252\342\277\233\240\262p\002\003\346\277\035\217R?\271W\345\277Z-G\371\370\202\337\277\336~\314\301\317\305\272?\336\327V\327\203J\340\277\\<\3531;\275\343?\013\341%O\212\314\322\277F\266\225A\346m\245?\204\366h\256Z\251\321\277\245\336\026\233/\200\334\277<\363\306\333\260\352\366?b\004\261\017Q\351\345\277!\ra\250\365>\346\277n\202i9\244\003\327\277\365\250\355\352[_\344\277\331r|m+\376\004@\233\240\262p\002\003\346\2776\240=R\267\t\344\277\323Uf\037\036\345\360?\372\373vtU@\367? G\014r\364Q\003@4A\014\036\206G\346\277\327J\2445\005)\313\277\r\331\2652e6\346\277j_\377\025\373y\345\277\375\207 \341W\032\335\277\376\"\031&\021\025\347\277\266/\254\354<\234\345\277t\031\177P\326\314\342\277v\3464\364\342\026\330?F\266\225A\346m\245?H9\360\202\216\027\332\277\341Ue@\3001\341\277H9\360\202\216\027\332\277.E\357K\ry\344\2772\303\375\264I`\345\277\317\306\025\205\234\313\321\277\223EdjXr\346\277t\031\177P\326\314\342\277r3\200\032B\221\002@\342\313\256,Li\365?\014\037\340\270\240\026\331\277D\217\270]\202\024\006@dT>\013@q\317\277\200\362\333\277\274D\343\277\243\373\000w\254\223\345\277\t\2236L\236<\363?r0\227\0101B\371?h\000\316\341\311\267\347\277\212\254[\372\227\227\340\277\353\223\311j\355\256\327\277\331\372\026:\026\241\341\277=`\223\023\250\237\331\277\345\021.\023\023c\350\277\034#\027hU\256\307\277\374\344^\274\372\312\340\277-}~\316\202f\362?q\022\tP\'\031\013@\265B\214\026\205\306\355?\363\367\224%,\302\330?\301\010\t\\#\024\346\277A\353\253\037\027n\352?;}}\357$\263\342\277\251\330@\024\032=\344\277\207\206\010\305\335\276\005@\317\306\025\205\234\313\321\277\202p\352(\371+\344\277\316_t4Fs\347\277\322B\212X\311_\336\277\213\352\025d\256\341\346\277\020W\304\233\241\035\347\277\003\000Y\303~\276\345\277}t\315V\200]\342\277\222^\026\270\302:\361?\372\376_\206f\217\000@\333\246U\023\010s\337?4A\014\036\206G\346\277\003\204=\263\320\350\336\277gOu\034\232\032\334?\273\355\016U\237 \341\277:\032\201@Cz\207\2776E\231\014$\254\324\277\033\332E\264\232\216\273\277\247y\017\340\350z\346\277\\\010\224=\330\032\344\277FV\332^\013+\343\277\211\005\344\370\241\317\000@#\003\325DG\203\n@+\006\250\344V\310\316?\245\336\026\233/\200\334\277F\214\317Kq\305\374?^\206\242\246\024\002\345\277\0264\0049\017\307\345\277\2613\217\032\304\315\343\2772\303\375\264I`\345\277\017\213\033\220\004\300\346?o\241Fn\257(\332\277\205\317\033]*\356\341\277\036\0237/\013\202\336\277F\266\225A\346m\245?$\224\305\356u\341\270\277\376\272(Y\271\300\007@A>\271q4n\275\277\202p\352(\371+\344\277\225\032\337\212\025l\370?\306+s\177\314\235\327\277T1*\'\200\264\335\277\317\306\025\205\234\313\321\277h(\350\200\233\346\215\277\334\335,^\231\215\330\277F\255F\026\214=\364?\001\'\246\024\257y\325\277\263\222\300N\365\217\341\277\362\\\234\340r\307\356?\0208\347f\226\370\343\277\013\000\003\204\225\361\325\277\270\216\335 n^\343\2774\246\023\331\314L\334\2779\322O\021\226r\377?\034\266\237\220\351\022\325\277\347\364C7\226O\337\277p\261\310\326\310I\243?\001\010\311\337\243T\322\277\223\024\264\243t\017\320?\007B\240\0333m\332\277\266/\254\354<\234\345\277\260\024\262\345\270\250\340\277\r>\275\355\253;\334\2779\036L\273\363\360\344\277\211Z4i\231\274\322?Y\212\205\324\2333\343\277M4\'\224\350\300\306?4\246\023\331\314L\334\277\0316\367\221\235\330\337\277#\321\231\227m\006\332\277\233\240\262p\002\003\346\277$\224\305\356u\341\270\277m\335\r\1777a\346\277\347\227\254\230t\340\325\2773\262\020\344\217G\307\277\320\223\313(\251\025\347?>\236M}\276\351\337\277\370&\374S\230F\345\277[\351\266\010\315\365\340\277\227Z\265;\265\333\r@0\244 \200>;\342\277\271\255\272Uy\203\346\277\257J\247\322\036C\372?\013[\247\311(O\345\277\322\335\202\235\202Z\350\277\032\362f\241qK\341\277\260eLy\027\035\357?\014\256\333\362\226\026\350?q\t\365Vum\331?\304\021_9g\317\267\277\220\356\242RLF\325\277\002\217T\375t\276\324?\034\227\302[\336\355\321\277\344\362P\336\007>\345\277o<?\263h#\344\277W+T\240jq\345\277.E\357K\ry\344\277^\206\242\246\024\002\345\277u8\\\205\341\361\345\277\013\341%O\212\314\322\277 G\014r\364Q\003@\331<)W\246r\225?#\360v\314x+\335\277\263\222\300N\365\217\341\277f\302\023x\263m\341\277\356\032U\210\276\030\332?e\205f\246\014\020\300?X\225\365\341\276\307\336?\336~\314\301\317\305\272?\376\351\321k\267T\264\277.E\357K\ry\344\277\002\341{\216s\231\342\277\307i-\351\342\347\335\277[\351\266\010\315\365\340\277\200\300w$\350\263\315\277br5\177,q\335?\320\223\313(\251\025\347?\367\213\003\017\337K\333\277\331\372\026:\026\241\341\277^\206\242\246\024\002\345\2772\303\375\264I`\345\277\342\313\256,Li\365? \"\333gM\274\342?\200\300w$\350\263\315\277\005_\212\367\257\200\343\277;\347h\021=%\021@K3\032\374x\324\341\277u8\\\205\341\361\345\277\r\331\2652e6\346\277\344=\025\353Po\333?\361bn\004\225e\361?tQ\016\323K\272\360?\013[\247\311(O\345\2772B\226\314/\310\252?F\266\225A\346m\245?\346B\336\331\366\305\316\277\325<\264\321\263\034\346\277w<\351s\177V\324\2774\246\023\331\314L\334\277\016]\232\"\267`\337\277\314Fm\206P\221\334\277,\346\275\027\334\266\346\277\020W\304\233\241\035\347\277\231r1\003\265\243\316\277\2110@\352\351\301\331\277f\202\277x\215\320\346\277\223EdjXr\346\277\367\252\340C\352p\336\277:\032\201@Cz\207\277\336\327V\327\203J\340\277.X\267\302~\350\213?\211Z4i\231\274\322?i\245)\2346Z\330\277\374IfwA\320\326\277}t\315V\200]\342\277\231\307\377\3012\276\325\277_\335\016^\225\024\366?\1778\006F\370$\326\277)\315\266i\346\324\333\277\'\377\032\005\273e\341?Z-G\371\370\202\337\277\317\306\025\205\234\313\321\277\321\237\3103l\020\342\277\377Uc\202\004\313\301\277X\320\257Z\327\023\326\277\214*jc\324~\341\277\020W\304\233\241\035\347\277\343,\374\247\006Q\002@{\303t\221P\300\326?\334x%\243R\210\342\277W\356\246\316\303\023\304?\360p\t\010[X\326\277\335\033\347\307\257\327\336\277\270\004\'\r\372\225\367?\354\321\203\324\003\371\335\277\335\356n\217\336\277\366?\326|\010\321\331\271\340\277<\363\306\333\260\352\366?\344=\025\353Po\333?.\275T\177\"\326\007@\221K:\361m\265\336\277_\n\207\226f,\336\277on\374\021\274r\357?\034\3100>0A\010@j\343\343\005M\244\336\277\257M\220\344/\222\003@\230\"\244\007\306\033\345\277j_\377\025\373y\345\277\362\\\234\340r\307\356?Il\370\372\357\275\004@\250\271c\337\016\030\341\2775\201`\035\254\344\340\277O\320\005\232\300\340\345\277\2613\217\032\304\315\343\277\331r|m+\376\004@\314\302\210\226\376f\343\277d\347\3063\324\325\334\277\225\205\270i~\017\341\277o\300#\243\272M\335\277d\372$\254\242-\n@&a9\256\360\033\016@x\266j\356\035\331\346\277\246\375\363\317:\245\337\277\217\234{\301Mk\347?\2314w\231\236Y\310\277\177\240\264.\276i\325?\022\033\375\212\031\345\332\277\332\031\364n!\306\344\277\233\240\262p\002\003\346\277w\227\215\271\022\264\343\277>\236M}\276\351\337\277%\313\303\020X\303\341\277/\325\320F\"\236\310\277\220\307U\001\034\213\345\277\342\313\256,Li\365?2\303\375\264I`\345\277QN\024\003\375\307\346\277\341tBu\313V\344\277\243r\231\3379\307\016@K\212\206\263\371\346\362?\310zo\032(\032\374?W_\253\224\315\023\345?\240\324^\305\360\276\365?3\232\224\034\220\177\006@9\036L\273\363\360\344\2777V]\357\342\260\r@f\302\023x\263m\341\277\265z\237a\036\323\273\277d\310\351\376\310\260\331\277\240}\362\rp\254\344\277\200\021\271\364\307i\346\277\336\327V\327\203J\340\277\226\303r\323\224Y\347\2772\303\375\264I`\345\277\303g:\220T\326\343\277\032\362f\241qK\341\2773\"/\351z\"\343\277\240\001\327\375\301\326\335\277\370&\374S\230F\345\277\030\262\022\242K\256\346\277Cz\247Y\rn\311?\362*\337\201\037x\343\277;\347h\021=%\021@\336\3663\014\217o\343\277\217\250x\314\020f\342\277/\343\347\201\304q\315?\3333/\214\327[\244?\025\025\'\004\004\242\342\277m\335\r\1777a\346\2779\036L\273\363\360\344\277\024\215\2147\031\377\005@\326\341\017\214 \277\326\277|\223\252\213\213\202\345\277\022\227\030\233\307\272\341\277\362I\274\266*\235\346\2771hYo\266\002\326\277\233\240\262p\002\003\346\277\230\003\307\322\272\366\341\277f\202\277x\215\320\346\277\245\261\236b^h\364?|\223\252\213\213\202\345\277\360A\3679z\355\371?\377bm%7\262\341\277+\250\003\256\305l\340\277C\330\313\365\316C\342\277\211l\007\373q\372\345\277s\331*Q\260/\350\277\354\321\203\324\003\371\335\277#l\222\334&\001\344\2779\203Sv:\366\332\277\336\327V\327\203J\340\2774A\014\036\206G\346\277!\ra\250\365>\346\277\214*jc\324~\341\277\203\342\373\206r\030\352?Y\357\214\217\3428\331\277\361bn\004\225e\361?\202p\352(\371+\344\277\266\263\220\334\216\306\336\277\0316\367\221\235\330\337\277(I\322y\224\252\342\277\376\"\031&\021\025\347\277\2167t\006\007f\321?]\'qr\343?\347\277\364/R1\334\001\267\277\005_\212\367\257\200\343\277m\335\r\1777a\346\277\276\212\372\362\346,\345\277o\241Fn\257(\332\277XJ1\325u\226\350\277\372m8\256a\327y?>\235g\274\237\304\312?\014\256\333\362\226\026\350?\"\262\274bb\341\326\277\256\265\200\261\207\346\342\277b\234\300B\371\224\006@\232\201\325;\367\335\342\277X\225\365\341\276\307\336?\315x&\202\260;\362?t~\206\013\035\322\330\277\010a}P>\222\335\277n\202i9\244\003\327\277OT\352\211\022\013\337\277\266\224\263\247\203\241\333\277,_\360\025y=\004@\013[\247\311(O\345\277#\303\376\223\247\023\365?FV\332^\013+\343\277\033\021D\326|p\344\277\025\025\'\004\004\242\342\277\354.\302\257\246\251\341\277j_\377\025\373y\345\277\177\240\264.\276i\325?\337*\213\000\362\021\343?&\352\240Ec\350\344\277u8\\\205\341\361\345\277\240\263\347\372\325F\376?V\014wk_L\342\277.E\357K\ry\344\277\350\344\n;\315d\340?\224\366\274/\210\017\302\277\252\216\336\377\313\021\363?\014I\3247P\021\322?b\004\261\017Q\351\345\277\245\240\\1\0316\326\277(I\322y\224\252\342\277\265H^:\247d\360?\334\227\002\330]\255\345\277\243\373\000w\254\223\345\277\r+\335\303c\021\304\277\314\341e\313\t\214\346\277\347\227\254\230t\340\325\277;}}\357$\263\342\277A\353\253\037\027n\352?\337*\213\000\362\021\343?\376\321\327U1_\316\277\257;\3776\351c\320\277\213\352\025d\256\341\346\277\235\377\343\2443\305\343\277\214`_P:\031\373?,\346\275\027\334\266\346\277\375\261\024`\007\025\326?\334\335,^\231\215\330\277;\366\257\355\3019\000@\271\255\272Uy\203\346\277\007\335\230`\354g\344\277\300/V\255S\317\325\277\374\344^\274\372\312\340\277\022\033\375\212\031\345\332\277\235\340\006p(\240\340\277\261\235_\304\260)\275\277\341\370&e\035\201\335\277}*\355\363\253\004\014@\020W\304\233\241\035\347\277p\261\310\326\310I\243?Y\251b\t\247X\346\277\201\202\275\272\321i\307\277\036\0237/\013\202\336\27781,\345;\033\355?\374\344^\274\372\312\340\277\257J\247\322\036C\372?\310}X,9i\005@\212\254[\372\227\227\340\277\311\356\236\326\324x\266\277 G\014r\364Q\003@\245\336\026\233/\200\334\277"
      }
    }
  }
}
node {
  name: "tensors/component_9"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 750
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 750
          }
        }
        tensor_content: "\335)o\3233\n\300?\263\210A\267\333\232\341?\245Y\365\326AC\370?nNL\240\216\225\367\277\325\331\3330!\336\354\277Go\2114\3636\345?\364\301\323Pf\366\363\277\032\366#\334v\t\363\277\201\023My\360\026\346\277\232\347o\261\025n\356?\216Xk\360\320\337\346\277\262\322 S\372\"\316?\nc\254\252\362\267\351?\361\310\301\337A\311\360\277\034R\203y\350\243\352\277\270\307\353\324\316\020\346\2775\301\274\375\255m\002@$(\021s\003F\343?;\204A\215\234R\300?\023\364\367\234\260\202\347?\001\211^\026\334d\325\277|n\341d\332\270\364\277]\242yEF\235\272?\215\001\241h\203\324\370?\3170z\235\251c\372\277\206\016\212\376\003>\357\277(\237A\211|F\363\277\226\223V8u3\357?;\"I\333\351\311\334?\321\240\321\207\340@\345?\214\346\337G6Z\350\277fu\n0\263\032\366?bq\206OL\261\000@)\2168\242\274\013\356\277)}\"\330\0346\363?\337Zp\234z\235\345\277\300\235\252AF\\\356?t\301\0266o\266\363?\245\217,+\\\305\343\277rH\246\250m\014\346\277\325\316\256%\350\227\336\277\007\342\352\244w\241p?6\004\036\271g\272\370\2775+\032\254\217\314\364\277\360\215\014\"\2048\346\277\006\364\311\221g\341\361\277\315\263\335/\341\275\230?\350\035\352\3440\344\334?\363\020M\300j/\357\277F\230+\3279\320\374?\004\255\253\366\205\027\346\277\207!\214[\177<\345?\210jZo s\321?~\210.\337R\271\367\277b8\224\320#M\345?\033K-\025\263\003\007@\370\325\243\307|\365\354\277c\034\366&\3123\251\277\224<\231\355\206k\336\277\216\326\036\3700i\336\277\216Xk\360\320\337\346\277\r\230w\327\325\341\337\277,W\205(0\356\354\277y\367\353\226\t\235\327\277g\000\220!\023\215\351\277\376\n\252\343\244N\370?\263\270\017L\001\224\363\277\010W\375+\240\034\257?\025a\376!\267f\316?D\274\306r\241\373\322\277\344JO\243\370\324\320\277\346\201\232\232\353P\367?\202\"M\222:\242\362?G\264\321\312i\024\363\277\223\355\200F+A\345?G\311\261\004Q\326\314\277\334\344\337;\360F\305?\253\037D\262v\023\272?\254\200I\364H\013\367?!\277\236m3\215\347?\310\304\360\\AR\360?\345WE\303\365#\337?T-\354)\273y\361?\234\027\001\016\017g\350\277\363j\022s\215\231\363\277} \221T\253\336\371\277\\\366\266f\271\221\320?z\003\303\205\340}\266\277\244\305\362^\256\n\252\277\027u\330m\031\241\372?\366\243\263\310\334\260\342\277\271\005\336M%$\316?+\305\3566\244\321\351?\002N\374\217tq\252\277f\204\224\021\020\222\372?\252\210\205\374\347 \220?\375t\024\275\227\021\270?A\316b+TR\350\277N\345&\3149G\001@?\227\257\261\3074\347\277a\007ow`\253\305?z\302\217L1\377\314\277\236\3542,\002G\345?\006\274\351r\323/\360\277\266\351\001\334\271r\370\277\236\265\210\\\352\327\361\277\204\317\277\226\306\356\360\277\265\221\206uk\355\344\277\005\361!-/\277\360\277\020\016f\214J\351\351?.\036W\357rB\353\277qf\275\206\202\243\351?\222~\257V\262:\323\277\027\035B\025\030f\374?\2560d]\rz\366\277\263\332\333\335`\262\300?\2227\235t\365q\321?N-\253\253\\D\371\277\244\342\324\030\203.\360\277\232\027P\216yn\375?\236\352\300\026Fg\362\277\276\236\025>\246\'\316?\360\032h\030O\227\367\277\223\355\235(b\022\305?\221\",\035\031<\363?\255\242\031\031\223\276\323?\325\331\3330!\336\354\277\324!\347\021\330=\350?X\0215\031$\273\343\277h\341<eh\255\324?\036\343\373\245\227+\360\277\267w\017\334\\\330\364?\231\243g3\274\270\323?\250G\332<-*\375\277\314\030\361\337]H\370?g\000\220!\023\215\351\277S\\r\'&)\370\277\272*\276e\354\360\344\277\262\322 S\372\"\316?\355\013\265\263\354\370\245\277..a<t\212\345?\253\023(q\344\033\327? w\322\016\254\361\360?+\007\251/\276\265\373?\035\373\366T\236%\372\277\201\022\323C\002\227\345?Vl\234\312\034\240\352\277E\241a\217Pm\002@\"\034\364Y\211\264\230?\233\335\305,\334\240\300?\323\002\351p\\\301\331\277\340\330\215\026\370\343\354\277\034\316\013mY3\334\277a\212If\300\320\247\277D\232W\026\000W\350\277\203vg\211r\225\003@\213<\327D\337\242\355?\370\245$\277lY\336\277\325\351\027\034V\\\374\277,\231\200\237\250\007\367\277\216$\247\334I\312\363?H=\252^e\302\360\277?+\024)!\034\340\277\377\347T\357sQ\350\2777 6\236R\335\366\277\\\325\276$\253\304\353\277@\323\361\344s\332\001@\260\323Q\213\354K\356?i\001\352\000\014\336\361\277y\367\353\226\t\235\327\277\227\326X\274\236\013\316?\246\243\371-\264f\304?\267\033\233\333Q\216\325\277w\265\244\272\201$\323\277\337\277[\355\235\032\337?\010F\324\255xf\305?\202\340\257{W\217\300?IO\350]\037]\300?\3166\313\205F\337\323?wh\202n\206\025\360?\315\210\016\006\'\203\303\277\267\264\tu\345\213\332?\365\242\346\314Q\364\354\277L\016\016\323\211\326\354\277M\247\032\323\034\341\361\277\324lb\203\3358\372?\255[!\026\010\312\343\277\034\255F\233\362s\364\277\262N\000\240\362\203\324?\013\035\360m\247`\356?H\010r\244\t3\360\277\026\344\013]\275\230\362?TE%<\305\000\371\277\366\224\225\256/\035\277\277\277\201D\007\310\276\320\277\322\363,>\204s\317\277@\'\037ol\216\316?\212\017\007OMf\352\277?\265\006\026ys\000@\354W=P\003X\325\277\353\016rW\275\311\343\277\250P\364\n\317\203\325\277\214\2457\366\305\376\315?x\017\266\306\010\230\323?\226s5\273\222\010\345\277F\313>\000\025\026\354?\215LZ=\214\\\350\277w\335\325\305\243\226\331?+Z\001r\243\212\355?A\3542\010\234\003\377\277\223p\032:\310z\366\277\362\342C\007\236R\305?\010M\201\312\240Y\350\277\352j\246\004Ak\340\277\375:\006\207\017i\322\277\330m\360\37481\353\277*\275\034\000\275\301\334?\3621\330t\000\227\351\277I;\266p\355x\250\277\016\207\337\303\300A\345?tO;\342\222\234\372?\223\307\224\026\324\361\331\277\035=\306\260Q\271\323?SA\316\350\017\200\347?\264\036\342k6L\366\277$(\021s\003F\343?\323\313\237i\355`\350\277\253\365\246 \262\307\343\277\267kXC{&\316?\350X\226\370y\306\311?\036\343\373\245\227+\360\277\225\245\003h\016\255\323?l\256\rR\030$\010@\276h\022\336m\365\342?\2517\361\027\225\350\342?v\351?\316\236\\\360?\272\337\177 h\240\314?3!\303\023A\362\006@l\377\327\224\314\325\331\277\2460P\031\240\001\346\277\214/\253@|\350\331\277\000\245@\027a\034\356\277\010>\024\313z\263\323?\312\2310\211\353Y\350\277\350\0013\324\231%\377?c\201y\220E\004\354?\263\035q\324\021%\305?\273\327\277=j\355\332?L\354\241\221C\332\334?\021\341c\370\204v\361?\272\300M\3614\322\343\277\207\257\260\007\243\"\354?Q\377\203\361,_\350\277\202\362\301\304Z\257\353\277\016\336\275\203\320o\305?o\304\357\234J!\252?\333f\230\373?\241\336\277\3372\307\252YH\316?\245j\267-\356\370\252\2778\002e\2263\237\372?\201\232\206\261\223\322\352?Q\220\276\272\330Y\360?q\006\340\352\203\321\353\277\004#\001\003\2753\345?)\377\226\245O\375\353\277\315\356y\302\356\320\342?\336\373 n,n\372\2770Y\\Xrg\360\277\331\245\245+\337\351\361\277U\362\361Z\264\036\337?\204\205\235\032U\004\256?\271\247\033\310\332\010\326?k\246\342\370\217\320\365\277\303\210L]\177\272\342\277\260+\255\233E\242\311?#\215\220a\205\352\367\277\265\221\206uk\355\344\277[Y\351\240SI\332?+*\363\241L\224\265\277_l\237\345wH\345?\236\3542,\002G\345?\026\333\204\001\243\331\357\277D\006x\003w\342\371\277R9\201\346\261\316\226?\262\350\345S\031Y\337?.\'p\222=\017\356\277L\354\241\221C\332\334?\362\323\255l\034\332\366\277(\243\347\\\234\316\371\277\361\227\363\205\206P\316?h\366\005\363\316\356\363\277fR\205\201\'\255\267?\261\266\2356E\264\320\277\226\223V8u3\357?\007\334\377U\275\220\367\277J\342}\036\226\245\227?>\267J\371\201\010\371\277.%(\234\027D\310\277tO;\342\222\234\372?\1776\242m!\024\366?\n\t\234\275\227{\360\277\360\325\222\236j%\367?\322\201-\256\007j\002@d7F\266\372R\345?\231\262\340\367\261\265\360\277\326\234\213]=\220\351?S\311D\036u\273\364?U\325C\211{7\366\277\314\337\332qMT\330?\006?E\003m\334\343\277\265\304\344\213\306\245\311?C\255D\0047P\330?\354\346}x\034\002\367\277\224h\270\004\030.\334\277\316\324\334\2344<\345?\322\361!\'\'\363\343?\204\250\017\t\256;\357\277\263\177\341\022D\350\361\277\223\245R\364#\n\367\277R)\031\020\377\336\304?\226\361\215\241\2714\252\2774\215\352\207\223\021\356\277\244q\245\244s \273\2773Q\204\222qQ\300?\306VI\353\311\341\365\277\367\202+/\242\361\342?\242Qy\316\nx\332?\302\361\357\325\253\034\356\277\3420\267\355+\017\277\277\331\rf\'\327\233\342\277Yw\246d\005\017\366?\005\331\312\r\027\332\343\277&\346\372\t\330v\356?1^\376\266\240\217\265\277,l\357~\006\273\004@\215\223\304=}\205\356\277m\337\007\210\330\315\351?3\310\307,\306\333\225?\357\313\363\014\215\327\331\277B_\036\023\236\212\372?e\353\025 \302\250\355\277W\000\000\027\237\372\375?K\245\237\023\354R\361\277\316\246\363E\010\344\361\277\r\233\247\2739\037\366?gG\032\037\226/\312?\217\024H\200\304t\361?(\321Lz\317@\350\277WD\017\366\205\215\323?\266<@W\303\036\345\277\366\313\376\232\332K\316?\314\362x\353\304\233\361\277/_\206\2257,\325\277\036`\277@\034!\357\277\232\205j\034\203J\345?\363\2637\2066\371\334?\332l\032\346\177e\255?G\332v\371\363}\341?\265\211\272\301\362\215\374?\224\017\003\274b\321\332?\344[\251w\013\351\250\277d.\356\267jk\002@\236\306c\336\341\310\351?+\231\270s\222\216\321?&o5\221S\300\323?\227\017\004\3479^\360?\013\020\342vR\004\360\277\247\254\317b\234\342\371\277GH\357u\275\014\255?R\253\235A\227\347\303\277\025a\376!\267f\316?\357\347\252\035$\226\367\277\006u+\201n=\357\277\'\242|T\221\255\373?\236\'\366\353\313\251\334?\313\377\252~A\\\350\277;\"I\333\351\311\334?\351A&\250s\034\366?3\361\211\024<\256\342\277q\244\332U\361\255\342\2770\241\244qU\307\323?>\223=l_\376\352?!\364\222Mc\362\250\277\332\314\033\217_\374\375?\232v\300=\224Y\306\277\357\360\177\316\321\317\311?\361\267\225\2071\267\370\277\333f\230\373?\241\336\277+\347\320\257\327\341\361\277&X\323BY\350\354\277\322e%t\227^\350\277\214\272\340-7\021\305?TR\021\371Kh\310\2776\231y\361b\312\374?\375\330K,\265\027\356\277M\207d\231\257W\365\277gK\244;Vs\366\277\221+E\300\343\010\366?\365@\3417\277\320\343\277\262\036\3742\022u\373?n=\223d\020\357\354\277\224\364\221FW\353\364?X\254\034\202d+\364\277\364\274i+0`\325\277\315Z/\022q\022\337?\327\345,\344,\336\001@a\\\002&\357e\325?\222\202C\326\350e\356?\3056\377\023\3760\316?\217\246\240\016M\004\367\277f+P\365h\205\361?\211\252P\253\rr\362?E\255\247\310\016\320\315?X_\032\214^K\371\277\305\022Qk\253o\373?P\254\353[\300\341\303\277\205\374\355EQ\347\331\277\343\327\217\247\020~\347\277h]@\364\010\312\373?\twt\242k\225\372?(;J\322\364\363\373\277\266\tt#\ni\304?^\334\276\007p\364\303\277a\207<vH\264\373?\3308\270B\335\241\352\277x\332?\265T\321\343\277\363\2637\2066\371\334?\003\331\031\216\201\341\370?\267Y\3548x\352\330\277C\207X\324\337\000\355\277}\211\325\203\371\354\255?E*\243\016a\253\247\277\266A@\n\334\367\363\277\232\206\312\212\225\241\320\277\210\'\256\031\247\337\361\277K\243\346\360\2677\363?\026\336\350\246\323g\003@\336\250\345\r~j\330?\347>\024\321\035=\365\277pK\037\327\205\000\354\277q\034~\347g\233\372?\246\315\001\302{\007\354?\023xR\307\010\"\346\277\005\251\3520\263\331\364\277\334\257\353s\261J\365\277q:j\3419\217\341\277 \026{=\277\237\362?a\372\325\345\204\213\327\277\000\247x\017L\244\323?zOG\247b\363\342?\265\3566Ha*\367?\343\325d\223!\204\341\277:\323\023RW\316\323?\001\344^p\0225\347\277\252\226\257\034CN\373\277l>\344\231\224\221\347?9#\227\365\022\304\334?n\020\254\367\304(\255?\332\223\"\0171/\354?\243\325\326\023\276\277\323?\251\231\331\312\360:\334\277/:o\324]e\351\277\223\243A\247\0209\366?oGy\003fx\345\277\334\344\337;\360F\305?i0r\356\372\250\335?\353\311\017\372j\303\360\277\315\224*G\271z\326?!)\014\307\217\003\356\277\207\010\314\334\312{\001\300\224\255\024\323P.\354?\364\274\206\rg1\345?+\007\217h\342\214\366\277\237v\375\034]\244\300?\001\264=\t\n\354\254?MVE\317\005\274\350\277C\014*\300g\302\363?\334G\246\023\351%\372\277$_W_\027\376\331\277?\366\362\032F\r\332\277M\333S\363\271}\347?\364{\232\261\350\331\230?\271\r,K\023N\346?\261\240}\344@\312\323?\025@\322Q\361G\357\277\355\021\236\365\356\321\351?\212l,an)\002@-\016\262\274\367\223\301\277\210\032\321\225\256,\323\277\337\346?\025\031u\371?\2355\322\t\203O\326?\207\203\221\360\021`\356?\357#2;\257\\\325\277\031\226WQ4\\\316?\360=9\323\206\256\342\277c\344\254\365\266H\373\277\275O\340\264\023,\305?M&\r\310\302\005\367\277\235Q\\\354\323\246\352\277\017+\250\373\341\367\355\277\022\241\307\356\353\261\251\277\t\260S[\2769\347\277*m\033\246v\226\363?n\3709\2612\227\327\277\035\345ve\310\271\360\277\227\244\265M\345\262\323?;\305q\370\r\313\271?\366j\324\017\212\014\366?\273\004\2203\374)\316?\032w1X\212E\250\277\356\003\336\364\301n\340\277q\014]\356\345\322\365\277\327\270\275\t\004\334\334?\024\304\337\353b\373\355\277\2715\345:o\346\315\277~d\004p\371\335\331\277\263\332\333\335`\262\300?\210|\363\014x!\354?h]@\364\010\312\373?\204A\363\205;\037\247\277\227\360\244qj}\341\277%\316\004B\024\202\224?\343\325d\223!\204\341\277\325;O~\003\364\365?]\270|\265\023\266\347?\243\226\010fN;\325?\253!\3067C\212\341\277\363+\330\230\234U\211\277\006Y\027\342\265O\361\277+|,\350\322\361\365?\265eg^\332*\347\277\206>\373\004\010\010\361\277\344\320i\307\346m\247?\367\255~u\177\204\360\277\336\316\350\351U:\316?\225;:\252K\241\370\277iBV\337\374\307\343\277T-\354)\273y\361?\330\332\215:\371\344\367\277\263m\364w\315\032\316?\r\251q\221\262\275\362\277\277\201D\007\310\276\320\277^\231\316\277\331\315\323\2771\360\274\030\261\361\354\2774\215\352\207\223\021\356\277\363\2637\2066\371\334?\265l\246]\244 \316?\312\270\024c\213\255\341?\247\303]\314[@\361?>\330\237\311\261\004\376?~\267\007\243Z\245\363?g9\214\274\234\002\366?3\352(i\316o\370\277T-\354)\273y\361?h\344\347\344\373w\300?0\355 yH&\364\277\032\243@\246\247\273\323?\234\235y\2746\221\003@\373\252<m\336@\250\277\026\022\333\354\r\310\340?\355\231\217\272\330D\316?\302k\256}\326\300\373?\210\200\3625N\354\372\277\023\r\311\361\266\347\364\277In;\032\312<\345?,\374\241\2600\357\352?\3269\txaD\345?\203\222\032\r\302H\303\277\262\354\355&d\322\353\277\302?\217fE\376\375?\357\r#\022\275B\376?%\270\022\336\202\253\320\277\322\257\305\333Zu\331?\003\254L\263JM\360?^\024a\267U\303\351?\350\332\232}`\364\001\300-\001nFK\327\251\277\007\177\321\010e\003\213\277\315\233y\252\350\261\363?\024\241\227\020Z\305\226?\200\025\027\271\213\254\373?\372\210\356\024\245\241\362?\215\207\006Q\325>\345?;\242:jN\341\374?\0243\221\221\221(\366?\350B}l\021\305\343\2775\266m\377\273\010\363\2777\2738\371E\003\362\277\364X\204\274\346\024\353\277\300\331\321\265TK\361\277\215F\'VR\351\325?\303i\n\312\346\252\363?I5YF\034\360\375?@\t\017?\2354\345?\203{\203\240*\207\300?\2732\255~\n\322\341?\243\344i\237\217\345\365?\034\375q\024\317\263\372\277O\324\265\017 ?\345?\374(#\301\344\326\361\277\315i\274\016)2\316?\"\252\3473\266\250\363?)z0K\0210\354?\330\303\242B\030X\360?U\016\021\356\344~\347?\242\272\036\235\345\363\340\277\236:\224eC\361\365\2778\244\342cp,\345?\2574Z\334n\226\367\277\251\030:x\346Q\361\277\\\371\340\024g~\361?Kn\2566\\\250\362?\323\324\270\014\270-\353\277\353\330\nm\344\225\251\277\037<x\226(\277\323?\0221\257\307V\345\337\277\265 (r\330\373\346\277X_\032\214^K\371\277jc\210>\334\354\365?\203$\006\265n\275\360\277\275,\007\207\351H\360?>\2136))\344\001@/:o\324]e\351\277}\303\340\201\265\241\327\277\001\331NG\020\300\350?L\354\241\221C\332\334?\032w1X\212E\250\277\263\374\000\036\332\310\363\277\331\340\314\332WY\344?Y\026O\223\030\275\367?8N\233\273\205O\345\277|\210H\246.\342\374?2f\303\244}\006\367\277\300;\242\221X\220\352\277~\363\000\246\365\364\312?\355Yt\355\317>\227?\2264g\r#\204\346\277\245\217,+\\\305\343\277M\317\257\315\355_\303?\230x\375\215\026\005\353?\362\001\037\250\202X\273\277\306\003\010Ue\215\336\277x\270\352\037\217U\356?\211!w\354:7\337?\345\321n\024\300g\340\277\3637\027\025_\013\366?^\037T\376 g\310\277%\225\215\210Z\363\337\277c\2027\240_\256\253?\246\362\376\273y\245\342\277\205\254\204iq\032\346\277lj\003\261%T\345?}\335\347\031\215\363\344\277\033\033\320\377[\206\351\2773Q\204\222qQ\300?&\312\261\261\220\252\340?\005\331\312\r\027\332\343\277\013\330\231\325$\261\323?\021\337\312+F\212\353\277\230q\2072W\267\331?\rt\335fEC\357\277+\321\302\261\274T\360?H%\340\"\273q\366\277\r\250g]\373\000\345\277\016\220\264\214_\344\250\277\235\241\305\310\263s\336\277\021&\033e[\212\334\277\223\262\267P\253\215\310\277#Q5_\277\251\352\277\272\032D\027\264\345\367\277 \330\276B\244\371\351?\2155B\013\272\022\371\277\237v\375\034]\244\300?W<\2074*\301\353\277\311\330\203\233+Q\361\277z\360\033\025<(\360\277&\265\240*\233\365\001@\001\211^\026\334d\325\277MML)\315h\300?\000\224h\260\304\323\360\277\205\223[\352\213\377\365?\235H\320,wn\372\277g\357\333\360s\252\316?-MK\245-\344\361\277\010\263\330N\246\204\365\277\025dEk\206N\001@\232\335D[\366\302\365?R\206\275)\320\032\355?\270!\364B\214+\367?\270!2\246\217\270\364\277\211\255V\275\223\372\352?\260\370N\205\352\351\344\277\243\243]j\033\323\356?\255\221\n\257d\323\351?\246\362\376\273y\245\342\277\013\023\014%\000\361\320\277\010\326\325\030\370\313\342?\272\337\177 h\240\314?\010\007z\210\344&\246?\333\277J\3206\240\367\277\016F\000\311=\354\325?\260:\014\231_v\361?5\006\231x\230H\371\277a\201\354\254\327o\371?\245\212Q\206W\263\000@\273\004\2203\374)\316?d7C\233\237\252\352\2774\254\345%\n\221\276\277\314!\032\333\342\000\323\277\263\210\372\265\016\265\364\277\366o,\355\201\233\347?JY\002\330I\332\255?\252\006\"\371,\341\360?7)j3\320_\344\277\216\334\0359]\337\351?\324\n\276\302\236y\341\277s#\023!\215+\337?\316>\256\345?\277\366\277\365l\000OP\223\341\277\371\016\2179\364\232\323?\224\275\0340\316Z\361\277\277\213f\247\307e\315?\n\212Y\035\260\302\360\277\236eeb\253\271\363\277,\231\200\237\250\007\367\277\373\353\016.k\373\003@\035\256\242\347\323\226\252\277\177\325J\2344\302\367?9k\207O\\\014\230?\340\315\232\317,@\316?v\265\265\327\350\236\372?v\275\230+7)\337?\014B\262`of\256?\345y\365\336gJ\256?\227\274\032{\264\277\353\277.]\252\001\2639\364\277\372\202\236K4]\360?\014bA\256\222\354\331\277\000\221\343\274\334\210\342\277\233\204\305[\265\334\265\277\r\177qLA*\225?\r\335,\373\304$\370\277\004\201\217\372O\375\342?q\2032\277$u\310\277\227\344x\314rD\370\2772>hn\032*\345?\265\304\307\251\217\324\351?\252\342\247\336\221q\350\277\025@\322Q\361G\357\277\227;\222\324*W\373\277"
      }
    }
  }
}
node {
  name: "tensors/component_10"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 750
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 750
          }
        }
        tensor_content: "@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?}:-R\346\237\016@@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?\031\301\242\027\\\315\014\300@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?}:-R\346\237\016@@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?}}:-R\346\237\016@@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?}:-R\346\237\016@@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?\031\301\242\027\\\315\014\300@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?,\257\\\240\247\016&\300@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?\031\301\242\027\\\315\014\300@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?,\257\\\240\247\016&\300@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?\031\301\242\027\\\315\014\300@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?\031\301\242\027\\\315\014\300@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?\031\301\242\027\\\315\014\300@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?\031\301\242\027\\\315\014\300@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?\031\301\242\027\\\315\014\300@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?\031\301\242\027\\\315\014\300@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?\031\301\242\027\\\315\014\300@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?\031\301\242\027\\\315\014\300@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?\031\301\242\027\\\315\014\300@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?\031\301\242\027\\\315\014\300@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?,\257\\\240\247\016&\300@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?}:-R\346\237\016@@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?\031\301\242\027\\\315\014\300@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?}:-R\346\237\016@@\226\247\250\243(\275?@\226\247\250\243(\275?\031\301\242\027\\\315\014\300@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?\031\301\242\027\\\315\014\300@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?\031\301\242\027\\\315\014\300@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?\031\301\242\027\\\315\014\300@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?\031\301\242\027\\\315\014\300@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?\031\301\242\027\\\315\014\300@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?\031\301\242\027\\\315\014\300@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?@\226\247\250\243(\275?"
      }
    }
  }
}
node {
  name: "tensors/component_11"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 750
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 750
          }
        }
        tensor_content: "\212?\300x\367\n\364\277\224\265}9\001u\324?\352\304UF\0136\370?\366\256+DL\032\252?\020,P\206\332U\364?e\300\217\271T\335\350\2772g>uU\'\361\277\240:\243\226\224R\336?\304\326\344\355\220]\367?\245\211/\037\320=\356?\"\273\2761\353\317\343?n\376b\352\356y\364?ZKf\177Rc\354\277\3068bn\261\204\262\2775O\010\366\201\031\342\277\215\203\002I\037g\342?\201^\217\257\367\305\264\277\315\'\200h\007;\373\277\272S\316\2028r\361?\303g\244T\271\262\341?\024\255W\377\367N\366?(\350\313\354\325\020\357\277\202\035\r\355\254o\375\277\213\256\000\022\317\265\351\277\366b\277\252\026!\311?%\034\022\232l\t\360?\254\254)XT\352\362\277\n\0235-kC\260\277\006\202\3374\253\360\332?\016\253H\r\275\\\362?\273\264\006\205\256\'\376\277H\331\233\210\014\304\322?\177\034\306?s^\357?\365\000\010\000\301\262\377\277\003\205\253[\366\315\365\277\001\272\362r#\271\322\277\232r\266\324\014\033\326\277\222p\247\342\321(\322\277\\\241o/\300\r\347?\226\364Q\3241\004\374?\200\007\\\347\352-\333\277\"\177\372\362\213%\374\277\370^\241\306\240<\301?&\275\315#&\302\347?\025q\223\300\230\244\356\277\031}\353\000Q3\370\277\351\013d=~o\361\277\351\013d=~o\361\277in\312&?\022\266?LGH\233\334~\344\277`\002\303\227AG\363?\255\225\364B\027\317\317\277\207-\371\230\261\274\347\277\2169Q\331iK\361\277\356e\021\320\304\356\357?\037\"\2019\372\310\362?\226#*L\321/\346\277\272\332D\233\343*\366?\374\202\234i\273\333\361\277\2451\221~\304\260\363\277\"\273\2761\353\317\343?jF\005hi\243\321?\200\313\370\216T\245\263\277\342\264\342\226\003\303\251\277T\036Y\304g\"\341?\255H\235\345\370\320\263?\204E/\030\205\312\366\277\373\244\247\037\274v\230\277iH\024Z\244\225\325?\221\372\300s\277\303\376?\307w\240wJ\026\357?\374\314M\331p\367\342?\206\020\350\000X\337\351?\2407\000\036Rp\366\277`\271\022\222\"\036\316\277v\266\300ltP\347\277)\235\031\023\212\002\362?\320\217P\370\2723\322?\324\020Xq\330,\324?\331\340\353r1\021\346?_\276\200\307\031\353\344\277E\020\362\221t\241\363?\210\031t\032\305\220\310?\021\276\020W\231\235\332\2776J\232\300\212L\313\277\216\357\237i\264/\320\277}\364\223\235\016\355\362?\363\270w\007\360\266\362?C\217\352\030W\250\361?\230\346d\243\333\222\362?\204YM\235/\364\223\277z\215\321\225\377\363\343?j\264\261z9^\343\277W\274q\325\336\370\340\277=c\336\307\002Z\362\277d\243~!\373\377\352?3]\365&\330\212\353\277O\213\212k\004\333\362?F6\025B\236 \354?y\320\005\336\202P\372\277\032\027S\021\341\'\270\277\177\034\306?s^\357?\334\022gc\023\037\330?\216\022\367\362\222\321\355?I\025\315\252\372p\322\277\305On\325\345\244\362?}Q\rW\240I\374\277\310\376?>\376\311\306\277H\331\233\210\014\304\322?\216\221\357yu\330\353?\361\206\374\026\016\251\360\277\233=o\275\337/\371\277X\334%\346z\270\366\277w\254\n;h\261\311?\003\014\"t\241\206\372\2775\3662\037\311\221\374\277\360\276\346\246}v\365?5r_\177`\273\337?CZ\243\001*\275\324?#J\263\333^:\357?\260C[\3230\377\242\277\020\372\324\225\370G\362\277j\004\322\211|9\367?3]\365&\330\212\353\277\025\300\037I\324\217\336\277G\333\252zG\266\326?\020,P\206\332U\364?9\342\326N\345`\360\277\027\255A\303ml|?yW|\366-\t\377\2778\032\301\336T.\365?\314dE\021\375\327\336\277\350\274\327\264B\204\361?\321!\021\311y{\370\277O\213\212k\004\333\362?T\036Y\304g\"\341?\376\177\320Bp\376\326?\027\255A\303ml|?\316k\3028/\227\351?p\006\341{\267+\373?\317\002^\"t\256\316\277_\276\200\307\031\353\344\277\375[B\203\344a\356?m\372\205\306\330\234\256?4\320\017o\237\022\344\277\272\332D\233\343*\366?\026&\341\346L\226\361?\303g\244T\271\262\341?\250+\"\3376\361\360\277\177\374\021/\327\236\371?t\204E|\222B\325\277\346\342\372dl\003\352?\250+\"\3376\361\360\277\206\217\340\207:\346\347?o\005M\365\257;\327\277\2278\224\244Y`\332?\203/L\221\2542\000\300m\311\033\323\301\216\327?\002\'\216\210(t\271?DE9\251\241\214\340\277e\300\217\271T\335\350\277\032\247\350_j\217\363?\355\214k\266\233h\363\277M*7\003\203\241\346?\377jf\352\347\315\342\277\n*A\224\237c\360?\t\356|U@\271\350\277\202\272\336P\3524\357\277\025q\223\300\230\244\356\277\342\264\342\226\003\303\251\277\013\303~\214\220j\341?\022\342\236\026%:\343\277kS^\022\270$\367\277\361o\307\001\321\215\315\277]\232\362\007\216N\334\277\033\366t\350\245z\363\277n\324e\213\325\035\371\277\352\344\tW\247\365\355?\316k\3028/\227\351?gK\340\200\357r\360\277jF\005hi\243\321?\243\342\004\366\210\305\363?\357P\247w<\276\333\277_\01027\317\006\366?t\204E|\222B\325\277\261\376XY\322\267\352?\300\3740L\303\327\302\277k\026\231i\302\207\343?\236%9>\014\"\352\277\2074v\300\343{\322?fY\315\261E\344\371\277:\263\376\326E5\346?\342\220\313c\3565\362\277v\266\300ltP\347\277D\251/\212e\250\344?\370^\241\306\240<\301?\354E]\277(/\372?\002\257\250\272\017*\361?\277#b\204\221V\363\277\371Y3\221\251o\352?*\320(\212s\000\310?[=yN\374\361\342\277n\376b\352\356y\364?\363\003*\341;\305\357\277\004\3764CK\025\361\277gK\340\200\357r\360\277\025q\223\300\230\244\356\277}\364\223\235\016\355\362?\357\202\"h\036\314\355\277}Q\rW\240I\374\277\216\022\367\362\222\321\355?\261\346\"\332\376\251\373?\366\256+DL\032\252?\260\360k(|F\341?\253\272\026\211\252[\374\277\010\321k\275\346\333\352?Wc\234\376%q\373\277\325\314\025\241\260\320\365?\352\304UF\0136\370?\314dE\021\375\327\336\277\375[B\203\344a\356?\257qs\241\231?\343?\306i\263F\364\244\345?9_\004\031\023}\357\277\224\242\"\323\2636\344\277\315\'\200h\007;\373\277\032\027S\021\341\'\270\277,,\016\275\375l\375?|\3449\225@\r\000@\t\314\n\246\375\033\300?\303g\244T\271\262\341?A\247 \230*\266\340?\242t\305\306G\r\332\277\020Rs6\004\325\354?\273\364\211\014\362*\351?o\370\363Ja\272\361?6J\232\300\212L\313\277=Q\027\350\274\013\346\277}\252\342-Y\321\341\277\212\352\304P.`\361?\253]\235\317\030\377\362?4\002\205u4 \220?\020,P\206\332U\364?j3\252\001\034e\341\277\304\326\344\355\220]\367?V\312^\0065j\352\277U\324\247T\262\006\360\277\2407\000\036Rp\366\277\213\3333\006\234\361\264?E\224\3051\335w\320\277\020\323z\257!\316\356?\333\356\330\243\207\202\357?\260\177`\322\357\260\354?X\267\003\240\347+\312\277)\235\031\023\212\002\362?\223\260\017\004\n\250\355\277DE9\251\241\214\340\277\320Y\373X\351H\375?&Y\327Bb\246\343\277\310\376?>\376\311\306\2777\254\201\257\023v\333\277\231gl\034\371\213\364?G\324-S\025\367\353\277h$\206\232\030\371\354?yr\350\n\265\366\275?\3068bn\261\204\262\277\277#b\204\221V\363\277\231\274gD\3026\367\277\3068bn\261\204\262\277\363\216z\250\326Z\367\277C\217\352\030W\250\361?\273\220\223+.\017\345\277\225\306\225,4O\375\277\261\324X\205\222[\254?\377\264\027Z\235\351\363?)$\220+5\273\366?\310\376?>\376\311\306\277\355\214k\266\233h\363\277a\020\260\310\227\270\374?\334\013\352;\341_\355\277w\376\260sw\304d?\261\234qjI\216\352\277\231\344\223\374\331\247\235?\023\231>\256E\026\000@\2271\027}\'\241\357\277\017\305\215~\313\\\345?KU5\3142\360\355\277Oa\215\014\353~\367\277\356\321\256\360Y\267\335\277[\207*\276\261\r\364?o\030\250[\375y\347?\316k\3028/\227\351?h\374S\370\263\207\360?\n\0235-kC\260\277Y\031\353\216pU\332\277\334\022gc\023\037\330?\317\031\2237\261\311\361\277\207w\252\010g\330\370?\375[B\203\344a\356?)\3559\"\315\335\325?\023\231>\256E\026\000@\3068bn\261\204\262\277\222p\247\342\321(\322\277&\275\315#&\302\347?F6\025B\236 \354?\'\217\265U\275\201\247\277\255\225\364B\027\317\317\277E\224\3051\335w\320\277Y\016\241\326\\\306\370?\364?\356\037\233o\367?8\223J\306\251u\360?\177\210c`\010\'\335\277\306i\263F\364\244\345?t\204E|\222B\325\277\222p\247\342\321(\322\277\005>\235d\203\224\374?vO\376deW\370\277\370^\241\306\240<\301?#\'\\R\200\230\321\277Ty\200\014\215\224\000@\034e\265\201}%\351\277p\003>\003uI\323\277\031}\353\000Q3\370\277o\005M\365\257;\327\277Q\332\026\364?\306\362\277d\203\312\020_@\365?.H\213\316OZ\307\277[=yN\374\361\342\277\244?~\257\032\"\375\277j\264\261z9^\343\277\312\206\304\336M\202\343\277ki\210\024w@\245\277ZKf\177Rc\354\2778\032\301\336T.\365?\214\240\023\341xD\340\277k\026\231i\302\207\343?E\226\324#\030j\324\277CS&\332\367\375\351\277\241\033\203\014\000\203\314?j3\252\001\034e\341\277&Y\327Bb\246\343\277m\372\205\306\330\234\256?\234\271\233\035wY\334?e\nA)\n\371\371?g\250\354V\362\314\301??\322\036a\332\004\350\2773;\203w\225\355\302?\253\272\026\211\252[\374\277\222p\247\342\321(\322\277\331# \273\264m\374\277-pP\215%\311\333?\325\242\030B\227t\372\277\020e\316\234Q\023\315?\262\243\356\221{M\325?!\373H]\255\216\000\300\332\'\337\003\231\306\377\277\232r\266\324\014\033\326\277fY\315\261E\344\371\277)\372\222\314\033_\373\277^\201\273\036$N\361?\321S\214\271[\211\372?\253]\235\317\030\377\362?\220\310E\203\335\265\374\2770\030\262\354\031<\361?\210\3603\360\273\037\364?\330\212\342\302\303f\353\277\037\251\367Q\245\201\367?dQO }2\363\277*s\034\264p\246\366\277]\033\372\200\253G\336\277\342i\232+ \267\301\277\347\200\023v\343\331\351\277\361\330+\030\214v\350?\217y\271\372\241\312\374?j\264\261z9^\343\277e\300\217\271T\335\350\277\006\202\3374\253\360\332?\303\035\363\344\003\227\360\2777-\211(1o\335\277\214\240\023\341xD\340\277^\201\273\036$N\361?F\227h\252\037Z\370?\006\202\3374\253\360\332?\304][\006<\026\374?|\206Tn\3154\331\277\303g\244T\271\262\341?\2271\027}\'\241\357\277DE9\251\241\214\340\277\362\"p\244\262\217\261?l\205\331\002\2322\371?\342\220\313c\3565\362\277\370\246m\250xp\000@l\205\331\002\2322\371?w\310\207L\272\236\363\277\210\3066\221\242\303\370\277\275\021\233\244K\010\347\277\267a\273\263\216\343\372?Y\265\364\255\2549\306\277ys\214$\361\363\360?$g\304s\270\027\355\277\243\342\004\366\210\305\363?[\207*\276\261\r\364?)\372\222\314\033_\373\277in\312&?\022\266?\022\002S\'\301\371\370\277\017D\206\005\256c\343?[\207*\276\261\r\364?\017D\206\005\256c\343?oC\246$\255\310\356\277M\210\332\324\263\353\276\277\230\346d\243\333\222\362?r\360\001\242H\371\234\277\334\367d\275\3643\316?\"\370\203\332\340l\367\277\204E/\030\205\312\366\277\0078.\305\365\324\371?\204YM\235/\364\223\277\362\365<\260\345S\346\277l\205\331\002\2322\371?4\002\205u4 \220?j\264\261z9^\343\2774\231\271e75\363?\361\330+\030\214v\350?.m\255\024\343\346\363\277\211\002\373\317\001n\340?\237\027L\r\266\260\340\277\332\'\337\003\231\306\377\277\375[B\203\344a\356?.m\255\024\343\346\363\277[=yN\374\361\342\277\2271\027}\'\241\357\277\211\002\373\317\001n\340?\326\3617\347C]\302?\260\246\272\270\306*\360\277\215\203\002I\037g\342?\3068bn\261\204\262\277*\354\245\233\305\355\361\277o\370\363Ja\272\361?\002\372Z\224[8\356\277/>\325\234C\273\351?%\243\210\262\027\302\364?\\ h\266\242\024\345?\033H\244\351#H\353?\370KF`S\376\340?ZKf\177Rc\354\277\244\374Ig\227\305\346?\315\025\271\210\301\354\356\277\276\370\225<\370]\000\300>L\251\262\305>\317\277\331\340\353r1\021\346?\201^\217\257\367\305\264\277\177c\321\301\277\227\245?Q\027\334\2345c\326\277Q\223\010\375\314\214\371?CS&\332\367\375\351\277r\360\001\242H\371\234\277\352=\337-`}\363?\326\224+\021A\003\361\277\327M\035\032\316\311\367?\003\354mc\005\307\344\277\224e]*\276\231\360?KU5\3142\360\355\277\036:\267\270\315\326\341?\"\316\031\2308\016\304?)\235\031\023\212\002\362?W\332\017\330I\004\254\2773+z6\366|\331\277\222p\247\342\321(\322\277\276\252\330\234<\017\370\277\222p\247\342\321(\322\277\324\020Xq\330,\324?\347N\230\205\001\314\327\277\254\254)XT\352\362\277s\231\257\324\032s\351?[\207*\276\261\r\364?\236%9>\014\"\352\277M*7\003\203\241\346?\306\005\275e0\211\341\277\201^\217\257\367\305\264\277&Y\327Bb\246\343\277\2635\257b:\225\373\277Y\016\241\326\\\306\370?\361o\307\001\321\215\315\277=\204\274\360=\007\267\277~C &J\330\362\2777\254\201\257\023v\333\277\350\274\327\264B\204\361?Y\255Mn\333\214\354?\312\206\304\336M\202\343\277\016\204\356&\346\342\336?+\036!\214\247\373\363?S\205\033\314v\033\360?\2074v\300\343{\322?\237a\375|k\314\361?\004\327\003\013}\226\300\277\217/\010\213\354\256\353\277j\332\324*c\335\373\277\260C[\3230\377\242\277\347N\230\205\001\314\327\277`\002\303\227AG\363?9\342\326N\345`\360\277\"\273\2761\353\317\343?\377\212\032\373\203\215\370\277\013\303~\214\220j\341?\316\240\tP\\\202\366\277\237\027L\r\266\260\340\277`\002\303\227AG\363?.0\350k\355I\340?\367\017\202!\364S\371\277o\227\240\342\337\200\345?\344\302FT\320C\364?5O\010\366\201\031\342\277\2761O\265\347\307\374\277$\224\367g\205S\270?vO\376deW\370\277H\331\233\210\014\304\322?5\3662\037\311\221\374\277dQO }2\363\277l\205\331\002\2322\371?\300`\'-\207\363\326\277&\275\315#&\302\347?\2074v\300\343{\322?\177c\321\301\277\227\245?W\337\310^\275\232\336?KU5\3142\360\355\2773]\365&\330\212\353\277}\252\342-Y\321\341\277\307w\240wJ\026\357?4\320\017o\237\022\344\277KA\260MF\304\316?\210\3066\221\242\303\370\277m\372\205\306\330\234\256?\303\366\230\376,\035\355?V\312^\0065j\352\277;X\224\017\357\312\320?\002\372Z\224[8\356\277\340\223n\3340\030\332?\210\031t\032\305\220\310?\307\342\366\352\245\315\376\277qJ#L\337\207\331?\362\374\271\327\027\023\321?D\251/\212e\250\344?KA\260MF\304\316?sG\200\323\234\245\361\277p\003>\003uI\323\277\332\'\337\003\231\306\377\277\332\0253\212^\374\362\277De\355\271=L\366\277\034\257f\3612A\372?\245\334\225V\373\005\361?\311\246x\357\351A\371\277\303=\244\200yV\243?P,F\365\275\223\352?)$\220+5\273\366?\317\322\204@>\220\370?\024\3350\341-m\314\277\232\2441\305\356(\350\277\365\007\004\220+\242\362\277\255}Q\340\264\276\350?U\230\343\025S\\\330\277\231gl\034\371\213\364?|\002\201\316d^\374?w\310\207L\272\236\363\277\216\022\367\362\222\321\355?%\362\024;S\255\364\277\236\363\275M*\024\330\277=Q\027\350\274\013\346\277\350r&E\215h\340\277\007mu\334\"\300\346\277yL2>\032z\335?\330\212\342\302\303f\353\277\374\367K\242 F\352\277o\005M\365\257;\327\277F\001aG\3422\267?\232\2441\305\356(\350\277\236%9>\014\"\352\277\t\274\001e^\253\326\277\333m\321*j\211\355?l\2026\212WP\321\277.H\213\316OZ\307\277\307\350\253\315\326\253\343?\301\316f\\\310\253\360?\'\332\336\273\177\237\345\277U?\241[\013\322\312?\226#*L\321/\346\277&<\306\252\010\311\345?\264Y=\"\3061\364?\260C[\3230\377\242\277\016\204\356&\346\342\336?\016\204\356&\346\342\336?\377}\301P5\014\323?\213\3333\006\234\361\264?\341~\004\204\250\347\345\277\345U\025\2553\213\342?\034l2\251\257\344\323?DE9\251\241\214\340\277\026\203Z\240\336\362\372\277\303\026\367T\231\247\375\277\245\223\345P\334\334\313\277\341\027B|\231\356\366\277\274\271$\251\313\224\272?E\224\3051\335w\320\2777\336\374\237\365\203\355\277\270\362z\032\2678\345?\334\3007b\225Q\360?e\300\217\271T\335\350\277:\024R?\307n\362?]\033\372\200\253G\336\277\221b\255\223m\252\274\277\216\357\237i\264/\320\277\331U\233\253\226{\376?e\307\014\341\206\234\323?p\003>\003uI\323\277\254\232bx\016\234\346\277\225\215\270z+\006\300\277\211\177(\232/\212\377?\2271\027}\'\241\357\277\"\370\203\332\340l\367\277\2074v\300\343{\322?m\014P\033E\353\375?\310\376?>\376\311\306\277\004PdD\311\342\350?KU5\3142\360\355\277\366vD)\003M\350\277\"\273\2761\353\317\343?KU5\3142\360\355\277o\227\240\342\337\200\345?\226;`\313\244=\365\277M\340\205\223\315\205\365\277\336\310\265\363]\003\367?\340\214\361\264\376X\357\277\013\261\267\254J\034\365?\303g\244T\271\262\341?U\230\343\025S\\\330\277\2271\027}\'\241\357\277XU\257\315\317\377\361\277\216\357\237i\264/\320\277\324\t\333I\246m\351\277\240\350s\225\026\205\366?\334\367d\275\3643\316?u\313*\305\374\200\333?)\3559\"\315\335\325?\315\'\200h\007;\373\2777\254\201\257\023v\333\277\241\033\203\014\000\203\314?\246\352\202\207Qw\372?\366Gl\261c!\376?I\025\315\252\372p\322\277[=yN\374\361\342\277\331U\233\253\226{\376?\342a\363\353N\n\350?\377\212\032\373\203\215\370\277\204YM\235/\364\223\277P\310O\024\372w\346\277o\005M\365\257;\327\2771\356\264\215\000\340\365\277ki\210\024w@\245\277F6\025B\236 \354?\2727\276Tu\207\377\277\327M\035\032\316\311\367?\002\001\330\273\215\367\330?\"\316\031\2308\016\304?\231\207 -\225K\352?LGH\233\334~\344\277\336\310\265\363]\003\367?&\275\315#&\302\347?\201^\217\257\367\305\264\277\370^\241\306\240<\301?7-\211(1o\335\277\273\220\223+.\017\345\277\232\2441\305\356(\350\2776\350E\356r \363\277\347N\230\205\001\314\327\277G\324-S\025\367\353\277\251\344\023\350\303\267\367?\243\230S\206\323\251\342\277\203\263nG\306\202\320?\024\255W\377\367N\366?.0\350k\355I\340?\312\320uN\003\236\364?/\237(\005\305\364\365?X\237`=\205\033\343?\221b\255\223m\252\274\277;\"?p\035\340\373?\242&\326\245uh\375\277\330\221_\352\365%\326?\003\014\"t\241\206\372\277\307\350\253\315\326\253\343?\2407\000\036Rp\366\2777-\211(1o\335\277\320\217\337\327\177z\375\277\262\210\354\353\\b\313?L\326<EP\351\357\277\234\335\215\337/\242\375\277m\311\033\323\301\216\327?$*\377\312\302z\371?\340\214\361\264\376X\357\2776J\232\300\212L\313\277\264Y=\"\3061\364?=Q\027\350\274\013\346\277H\331\233\210\014\304\322?\002\001\330\273\215\367\330?\016a\227\235\007A\341\277\300\334S\215\036\035\372?m\311\033\323\301\216\327?A$NbX\322\377?\333\356\330\243\207\202\357?yL2>\032z\335?\205\366\242\217I\337\366?\376\177\320Bp\376\326?o\030\250[\375y\347?Y\225\027\357\007\177\375?.m\255\024\343\346\363\277\344\024vUN\021\334?\3659\177\200\r\260\364?KA\260MF\304\316?l\205\331\002\2322\371?E\336v\241\222\223\361\277ZKf\177Rc\354\277\2169Q\331iK\361\277\\ h\266\242\024\345?W\274q\325\336\370\340\277\312\206\304\336M\202\343\277\\ h\266\242\024\345?DE9\251\241\214\340\2776\023\232qR\244\377\277\214\240\023\341xD\340\277\200\007\\\347\352-\333\277.0\350k\355I\340?\377jf\352\347\315\342\277in\312&?\022\266?\\\241o/\300\r\347?d\243~!\373\377\352?\"\273\2761\353\317\343?\362\"p\244\262\217\261?$*\377\312\302z\371?\202=\261\206\274\030\360\277\230\346d\243\333\222\362?\376\302\004\213\363Z\375?^\314m\370o\\\356\277u\313*\305\374\200\333?0\030\262\354\031<\361?\2543\240p\377\242\367\277\244\374Ig\227\305\346?\336\310\265\363]\003\367?\347\200\023v\343\331\351\277U\024\020v\352\205\373?j3\252\001\034e\341\277~C &J\330\362\277m\372\205\306\330\234\256?"
      }
    }
  }
}
node {
  name: "tensors/component_12"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 750
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
            size: 750
          }
          dim {
            size: 1
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "buffer_size"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1000
      }
    }
  }
}
node {
  name: "seed"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "seed2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "count"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "batch_size"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 500
      }
    }
  }
}
node {
  name: "Iterator"
  op: "Iterator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "TensorSliceDataset"
  op: "TensorSliceDataset"
  input: "tensors/component_0"
  input: "tensors/component_1"
  input: "tensors/component_2"
  input: "tensors/component_3"
  input: "tensors/component_4"
  input: "tensors/component_5"
  input: "tensors/component_6"
  input: "tensors/component_7"
  input: "tensors/component_8"
  input: "tensors/component_9"
  input: "tensors/component_10"
  input: "tensors/component_11"
  input: "tensors/component_12"
  attr {
    key: "Toutput_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
      }
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Iterator"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "ShuffleDataset"
  op: "ShuffleDataset"
  input: "TensorSliceDataset"
  input: "buffer_size"
  input: "seed"
  input: "seed2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Iterator"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
      }
    }
  }
  attr {
    key: "reshuffle_each_iteration"
    value {
      b: true
    }
  }
}
node {
  name: "RepeatDataset"
  op: "RepeatDataset"
  input: "ShuffleDataset"
  input: "count"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Iterator"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
      }
    }
  }
}
node {
  name: "BatchDataset"
  op: "BatchDataset"
  input: "RepeatDataset"
  input: "batch_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Iterator"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
      }
    }
  }
}
node {
  name: "MakeIterator"
  op: "MakeIterator"
  input: "BatchDataset"
  input: "Iterator"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Iterator"
      }
    }
  }
}
node {
  name: "IteratorToStringHandle"
  op: "IteratorToStringHandle"
  input: "Iterator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "IteratorGetNext"
  op: "IteratorGetNext"
  input: "Iterator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/acousticness/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/acousticness/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext"
  input: "dnn/input_from_feature_columns/input_layer/acousticness/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/acousticness/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/acousticness/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/acousticness/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/acousticness/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/acousticness/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/acousticness/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/acousticness/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/acousticness/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/acousticness/Shape"
  input: "dnn/input_from_feature_columns/input_layer/acousticness/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/acousticness/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/acousticness/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/acousticness/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/acousticness/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/acousticness/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/acousticness/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/acousticness/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/acousticness/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/acousticness/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/danceability/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/danceability/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:1"
  input: "dnn/input_from_feature_columns/input_layer/danceability/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/danceability/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/danceability/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/danceability/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/danceability/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/danceability/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/danceability/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/danceability/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/danceability/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/danceability/Shape"
  input: "dnn/input_from_feature_columns/input_layer/danceability/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/danceability/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/danceability/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/danceability/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/danceability/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/danceability/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/danceability/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/danceability/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/danceability/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/danceability/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/duration_ms/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/duration_ms/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:2"
  input: "dnn/input_from_feature_columns/input_layer/duration_ms/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/duration_ms/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/duration_ms/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/duration_ms/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/duration_ms/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/duration_ms/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/duration_ms/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/duration_ms/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/duration_ms/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/duration_ms/Shape"
  input: "dnn/input_from_feature_columns/input_layer/duration_ms/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/duration_ms/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/duration_ms/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/duration_ms/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/duration_ms/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/duration_ms/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/duration_ms/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/duration_ms/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/duration_ms/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/duration_ms/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/energy/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/energy/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:3"
  input: "dnn/input_from_feature_columns/input_layer/energy/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/energy/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/energy/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/energy/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/energy/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/energy/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/energy/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/energy/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/energy/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/energy/Shape"
  input: "dnn/input_from_feature_columns/input_layer/energy/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/energy/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/energy/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/energy/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/energy/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/energy/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/energy/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/energy/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/energy/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/energy/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/instrumentalness/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/instrumentalness/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:4"
  input: "dnn/input_from_feature_columns/input_layer/instrumentalness/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/instrumentalness/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/instrumentalness/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/instrumentalness/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/instrumentalness/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/instrumentalness/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/instrumentalness/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/instrumentalness/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/instrumentalness/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/instrumentalness/Shape"
  input: "dnn/input_from_feature_columns/input_layer/instrumentalness/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/instrumentalness/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/instrumentalness/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/instrumentalness/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/instrumentalness/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/instrumentalness/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/instrumentalness/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/instrumentalness/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/instrumentalness/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/instrumentalness/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/key/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/key/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:5"
  input: "dnn/input_from_feature_columns/input_layer/key/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/key/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/key/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/key/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/key/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/key/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/key/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/key/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/key/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/key/Shape"
  input: "dnn/input_from_feature_columns/input_layer/key/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/key/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/key/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/key/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/key/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/key/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/key/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/key/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/key/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/key/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/liveness/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/liveness/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:6"
  input: "dnn/input_from_feature_columns/input_layer/liveness/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/liveness/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/liveness/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/liveness/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/liveness/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/liveness/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/liveness/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/liveness/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/liveness/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/liveness/Shape"
  input: "dnn/input_from_feature_columns/input_layer/liveness/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/liveness/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/liveness/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/liveness/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/liveness/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/liveness/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/liveness/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/liveness/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/liveness/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/liveness/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/loudness/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/loudness/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:7"
  input: "dnn/input_from_feature_columns/input_layer/loudness/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/loudness/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/loudness/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/loudness/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/loudness/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/loudness/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/loudness/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/loudness/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/loudness/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/loudness/Shape"
  input: "dnn/input_from_feature_columns/input_layer/loudness/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/loudness/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/loudness/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/loudness/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/loudness/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/loudness/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/loudness/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/loudness/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/loudness/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/loudness/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/speechiness/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/speechiness/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:8"
  input: "dnn/input_from_feature_columns/input_layer/speechiness/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/speechiness/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/speechiness/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/speechiness/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/speechiness/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/speechiness/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/speechiness/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/speechiness/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/speechiness/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/speechiness/Shape"
  input: "dnn/input_from_feature_columns/input_layer/speechiness/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/speechiness/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/speechiness/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/speechiness/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/speechiness/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/speechiness/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/speechiness/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/speechiness/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/speechiness/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/speechiness/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/tempo/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/tempo/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:9"
  input: "dnn/input_from_feature_columns/input_layer/tempo/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/tempo/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/tempo/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/tempo/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/tempo/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/tempo/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/tempo/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/tempo/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/tempo/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/tempo/Shape"
  input: "dnn/input_from_feature_columns/input_layer/tempo/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/tempo/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/tempo/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/tempo/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/tempo/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/tempo/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/tempo/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/tempo/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/tempo/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/tempo/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/time_signature/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/time_signature/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:10"
  input: "dnn/input_from_feature_columns/input_layer/time_signature/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/time_signature/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/time_signature/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/time_signature/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/time_signature/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/time_signature/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/time_signature/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/time_signature/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/time_signature/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/time_signature/Shape"
  input: "dnn/input_from_feature_columns/input_layer/time_signature/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/time_signature/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/time_signature/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/time_signature/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/time_signature/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/time_signature/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/time_signature/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/time_signature/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/time_signature/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/time_signature/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/valence/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/valence/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:11"
  input: "dnn/input_from_feature_columns/input_layer/valence/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/valence/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/valence/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/valence/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/valence/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/valence/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/valence/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/valence/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/valence/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/valence/Shape"
  input: "dnn/input_from_feature_columns/input_layer/valence/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/valence/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/valence/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/valence/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/valence/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/valence/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/valence/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/valence/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/valence/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/valence/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concat"
  op: "ConcatV2"
  input: "dnn/input_from_feature_columns/input_layer/acousticness/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/danceability/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/duration_ms/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/energy/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/instrumentalness/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/key/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/liveness/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/loudness/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/speechiness/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/tempo/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/time_signature/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/valence/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/concat/axis"
  attr {
    key: "N"
    value {
      i: 12
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 12
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\014\000\000\000\005\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.5940885543823242
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5940885543823242
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/max"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/RandomUniform"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform"
  op: "Add"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/mul"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 12
        }
        dim {
          size: 5
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Assign"
  op: "Assign"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/read"
  op: "Identity"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/part_0/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/part_0"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/part_0/Assign"
  op: "Assign"
  input: "dnn/hiddenlayer_0/bias/part_0"
  input: "dnn/hiddenlayer_0/bias/part_0/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/part_0/read"
  op: "Identity"
  input: "dnn/hiddenlayer_0/bias/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel"
  op: "Identity"
  input: "dnn/hiddenlayer_0/kernel/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/MatMul"
  op: "MatMul"
  input: "dnn/input_from_feature_columns/input_layer/concat"
  input: "dnn/hiddenlayer_0/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias"
  op: "Identity"
  input: "dnn/hiddenlayer_0/bias/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/BiasAdd"
  op: "BiasAdd"
  input: "dnn/hiddenlayer_0/MatMul"
  input: "dnn/hiddenlayer_0/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/Relu"
  op: "Relu"
  input: "dnn/hiddenlayer_0/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/zero"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/Equal"
  op: "Equal"
  input: "dnn/hiddenlayer_0/Relu"
  input: "dnn/zero_fraction/zero"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/Cast"
  op: "Cast"
  input: "dnn/zero_fraction/Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/Mean"
  op: "Mean"
  input: "dnn/zero_fraction/Cast"
  input: "dnn/zero_fraction/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/fraction_of_zero_values/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/hiddenlayer_0/fraction_of_zero_values"
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/fraction_of_zero_values"
  op: "ScalarSummary"
  input: "dnn/dnn/hiddenlayer_0/fraction_of_zero_values/tags"
  input: "dnn/zero_fraction/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/activation/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/hiddenlayer_0/activation"
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/activation"
  op: "HistogramSummary"
  input: "dnn/dnn/hiddenlayer_0/activation/tag"
  input: "dnn/hiddenlayer_0/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1.0
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform/max"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform/RandomUniform"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Initializer/random_uniform"
  op: "Add"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform/mul"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Assign"
  op: "Assign"
  input: "dnn/logits/kernel/part_0"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/read"
  op: "Identity"
  input: "dnn/logits/kernel/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/bias/part_0/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/logits/bias/part_0"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/logits/bias/part_0/Assign"
  op: "Assign"
  input: "dnn/logits/bias/part_0"
  input: "dnn/logits/bias/part_0/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/logits/bias/part_0/read"
  op: "Identity"
  input: "dnn/logits/bias/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel"
  op: "Identity"
  input: "dnn/logits/kernel/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/MatMul"
  op: "MatMul"
  input: "dnn/hiddenlayer_0/Relu"
  input: "dnn/logits/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/logits/bias"
  op: "Identity"
  input: "dnn/logits/bias/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/BiasAdd"
  op: "BiasAdd"
  input: "dnn/logits/MatMul"
  input: "dnn/logits/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/zero_fraction_1/zero"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/Equal"
  op: "Equal"
  input: "dnn/logits/BiasAdd"
  input: "dnn/zero_fraction_1/zero"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/Cast"
  op: "Cast"
  input: "dnn/zero_fraction_1/Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/Mean"
  op: "Mean"
  input: "dnn/zero_fraction_1/Cast"
  input: "dnn/zero_fraction_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/dnn/logits/fraction_of_zero_values/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/logits/fraction_of_zero_values"
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/fraction_of_zero_values"
  op: "ScalarSummary"
  input: "dnn/dnn/logits/fraction_of_zero_values/tags"
  input: "dnn/zero_fraction_1/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/activation/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/logits/activation"
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/activation"
  op: "HistogramSummary"
  input: "dnn/dnn/logits/activation/tag"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/predictions/logits/Shape"
  op: "Shape"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/predictions/logits/assert_rank_at_least/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "dnn/head/predictions/logits/assert_rank_at_least/assert_type/statically_determined_correct_type"
  op: "NoOp"
}
node {
  name: "dnn/head/predictions/logits/assert_rank_at_least/static_checks_determined_all_ok"
  op: "NoOp"
}
node {
  name: "dnn/head/predictions/logistic"
  op: "Sigmoid"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/predictions/zeros_like"
  op: "ZerosLike"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/predictions/two_class_logits/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/head/predictions/two_class_logits"
  op: "ConcatV2"
  input: "dnn/head/predictions/zeros_like"
  input: "dnn/logits/BiasAdd"
  input: "dnn/head/predictions/two_class_logits/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/predictions/probabilities"
  op: "Softmax"
  input: "dnn/head/predictions/two_class_logits"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/predictions/class_ids/dimension"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/head/predictions/class_ids"
  op: "ArgMax"
  input: "dnn/head/predictions/two_class_logits"
  input: "dnn/head/predictions/class_ids/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "dnn/head/predictions/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/head/predictions/ExpandDims"
  op: "ExpandDims"
  input: "dnn/head/predictions/class_ids"
  input: "dnn/head/predictions/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/predictions/str_classes"
  op: "AsString"
  input: "dnn/head/predictions/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "fill"
    value {
      s: ""
    }
  }
  attr {
    key: "precision"
    value {
      i: -1
    }
  }
  attr {
    key: "scientific"
    value {
      b: false
    }
  }
  attr {
    key: "shortest"
    value {
      b: false
    }
  }
  attr {
    key: "width"
    value {
      i: -1
    }
  }
}
node {
  name: "dnn/head/labels/Shape"
  op: "Shape"
  input: "IteratorGetNext:12"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/labels/Shape_1"
  op: "Shape"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/labels/assert_rank_at_least/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_rank_at_least/Shape"
  op: "Shape"
  input: "IteratorGetNext:12"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/labels/assert_rank_at_least/assert_type/statically_determined_correct_type"
  op: "NoOp"
}
node {
  name: "dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  op: "NoOp"
}
node {
  name: "dnn/head/labels/strided_slice/stack"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/head/labels/strided_slice/stack_1"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/head/labels/strided_slice/stack_2"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/head/labels/strided_slice"
  op: "StridedSlice"
  input: "dnn/head/labels/Shape_1"
  input: "dnn/head/labels/strided_slice/stack"
  input: "dnn/head/labels/strided_slice/stack_1"
  input: "dnn/head/labels/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/head/labels/concat/values_1"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/head/labels/concat/axis"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/head/labels/concat"
  op: "ConcatV2"
  input: "dnn/head/labels/strided_slice"
  input: "dnn/head/labels/concat/values_1"
  input: "dnn/head/labels/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/Equal"
  op: "Equal"
  input: "dnn/head/labels/concat"
  input: "dnn/head/labels/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/Const"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/All"
  op: "All"
  input: "dnn/head/labels/assert_equal/Equal"
  input: "dnn/head/labels/assert_equal/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/Assert/Const"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "expected_labels_shape: "
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/Assert/Const_1"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "labels_shape: "
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/Assert/Assert/data_0"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "expected_labels_shape: "
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/Assert/Assert/data_2"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "labels_shape: "
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/Assert/Assert"
  op: "Assert"
  input: "dnn/head/labels/assert_equal/All"
  input: "dnn/head/labels/assert_equal/Assert/Assert/data_0"
  input: "dnn/head/labels/concat"
  input: "dnn/head/labels/assert_equal/Assert/Assert/data_2"
  input: "dnn/head/labels/Shape"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "dnn/head/labels"
  op: "Identity"
  input: "IteratorGetNext:12"
  input: "^dnn/head/labels/assert_equal/Assert/Assert"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/ToFloat"
  op: "Cast"
  input: "dnn/head/labels"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Less"
  op: "Less"
  input: "dnn/head/ToFloat"
  input: "dnn/head/assert_range/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/All"
  op: "All"
  input: "dnn/head/assert_range/assert_less/Less"
  input: "dnn/head/assert_range/assert_less/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Label IDs must < n_classes"
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x < y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (dnn/head/ToFloat:0) = "
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (dnn/head/assert_range/Const:0) = "
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Switch"
  op: "Switch"
  input: "dnn/head/assert_range/assert_less/All"
  input: "dnn/head/assert_range/assert_less/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/switch_t"
  op: "Identity"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/switch_f"
  op: "Identity"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/pred_id"
  op: "Identity"
  input: "dnn/head/assert_range/assert_less/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/NoOp"
  op: "NoOp"
  input: "^dnn/head/assert_range/assert_less/Assert/AssertGuard/switch_t"
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/control_dependency"
  op: "Identity"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/switch_t"
  input: "^dnn/head/assert_range/assert_less/Assert/AssertGuard/NoOp"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/assert_range/assert_less/Assert/AssertGuard/switch_t"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert/data_0"
  op: "Const"
  input: "^dnn/head/assert_range/assert_less/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Label IDs must < n_classes"
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert/data_1"
  op: "Const"
  input: "^dnn/head/assert_range/assert_less/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x < y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert/data_2"
  op: "Const"
  input: "^dnn/head/assert_range/assert_less/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (dnn/head/ToFloat:0) = "
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert/data_4"
  op: "Const"
  input: "^dnn/head/assert_range/assert_less/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (dnn/head/assert_range/Const:0) = "
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert"
  op: "Assert"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert/Switch"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert/data_0"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert/data_1"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert/data_2"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert/Switch_1"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert/data_4"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert/Switch_2"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_FLOAT
        type: DT_STRING
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert/Switch"
  op: "Switch"
  input: "dnn/head/assert_range/assert_less/All"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/assert_range/assert_less/All"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert/Switch_1"
  op: "Switch"
  input: "dnn/head/ToFloat"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/ToFloat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert/Switch_2"
  op: "Switch"
  input: "dnn/head/assert_range/Const"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/assert_range/Const"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/control_dependency_1"
  op: "Identity"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/switch_f"
  input: "^dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/assert_range/assert_less/Assert/AssertGuard/switch_f"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Merge"
  op: "Merge"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/control_dependency_1"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/LessEqual"
  op: "LessEqual"
  input: "dnn/head/assert_range/assert_non_negative/Const"
  input: "dnn/head/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/All"
  op: "All"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/LessEqual"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Label IDs must >= 0"
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x >= 0 did not hold element-wise:"
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (dnn/head/ToFloat:0) = "
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Switch"
  op: "Switch"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/All"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_t"
  op: "Identity"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
  op: "Identity"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/pred_id"
  op: "Identity"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/NoOp"
  op: "NoOp"
  input: "^dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_t"
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/control_dependency"
  op: "Identity"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_t"
  input: "^dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/NoOp"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_t"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_0"
  op: "Const"
  input: "^dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Label IDs must >= 0"
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_1"
  op: "Const"
  input: "^dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x >= 0 did not hold element-wise:"
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_2"
  op: "Const"
  input: "^dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (dnn/head/ToFloat:0) = "
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert"
  op: "Assert"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/Switch"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_0"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_1"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_2"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/Switch_1"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/Switch"
  op: "Switch"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/All"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/assert_range/assert_non_negative/assert_less_equal/All"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/Switch_1"
  op: "Switch"
  input: "dnn/head/ToFloat"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/ToFloat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/control_dependency_1"
  op: "Identity"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
  input: "^dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Merge"
  op: "Merge"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/control_dependency_1"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/Identity"
  op: "Identity"
  input: "dnn/head/ToFloat"
  input: "^dnn/head/assert_range/assert_less/Assert/AssertGuard/Merge"
  input: "^dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/logistic_loss/zeros_like"
  op: "ZerosLike"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/logistic_loss/GreaterEqual"
  op: "GreaterEqual"
  input: "dnn/logits/BiasAdd"
  input: "dnn/head/logistic_loss/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/logistic_loss/Select"
  op: "Select"
  input: "dnn/head/logistic_loss/GreaterEqual"
  input: "dnn/logits/BiasAdd"
  input: "dnn/head/logistic_loss/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/logistic_loss/Neg"
  op: "Neg"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/logistic_loss/Select_1"
  op: "Select"
  input: "dnn/head/logistic_loss/GreaterEqual"
  input: "dnn/head/logistic_loss/Neg"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/logistic_loss/mul"
  op: "Mul"
  input: "dnn/logits/BiasAdd"
  input: "dnn/head/assert_range/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/logistic_loss/sub"
  op: "Sub"
  input: "dnn/head/logistic_loss/Select"
  input: "dnn/head/logistic_loss/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/logistic_loss/Exp"
  op: "Exp"
  input: "dnn/head/logistic_loss/Select_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/logistic_loss/Log1p"
  op: "Log1p"
  input: "dnn/head/logistic_loss/Exp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/logistic_loss"
  op: "Add"
  input: "dnn/head/logistic_loss/sub"
  input: "dnn/head/logistic_loss/Log1p"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/weighted_loss/assert_broadcastable/weights"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/head/weighted_loss/assert_broadcastable/weights/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/weighted_loss/assert_broadcastable/weights/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/head/weighted_loss/assert_broadcastable/values/shape"
  op: "Shape"
  input: "dnn/head/logistic_loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/weighted_loss/assert_broadcastable/values/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "dnn/head/weighted_loss/assert_broadcastable/static_scalar_check_success"
  op: "NoOp"
}
node {
  name: "dnn/head/weighted_loss/ToFloat_1/x"
  op: "Const"
  input: "^dnn/head/weighted_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/head/weighted_loss/Mul"
  op: "Mul"
  input: "dnn/head/logistic_loss"
  input: "dnn/head/weighted_loss/ToFloat_1/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/weighted_loss/Const"
  op: "Const"
  input: "^dnn/head/weighted_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/head/weighted_loss/Sum"
  op: "Sum"
  input: "dnn/head/weighted_loss/Mul"
  input: "dnn/head/weighted_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/grad_ys_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/head/gradients/Fill"
  op: "Fill"
  input: "dnn/head/gradients/Shape"
  input: "dnn/head/gradients/grad_ys_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Sum_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Sum_grad/Reshape"
  op: "Reshape"
  input: "dnn/head/gradients/Fill"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Sum_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Sum_grad/Shape"
  op: "Shape"
  input: "dnn/head/weighted_loss/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Sum_grad/Tile"
  op: "Tile"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Sum_grad/Reshape"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Sum_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Shape"
  op: "Shape"
  input: "dnn/head/logistic_loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Shape"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Mul"
  op: "Mul"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Sum_grad/Tile"
  input: "dnn/head/weighted_loss/ToFloat_1/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Sum"
  op: "Sum"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Mul"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Reshape"
  op: "Reshape"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Sum"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Mul_1"
  op: "Mul"
  input: "dnn/head/logistic_loss"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Sum_1"
  op: "Sum"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Mul_1"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Reshape_1"
  op: "Reshape"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Sum_1"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Reshape"
  input: "^dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Reshape_1"
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Reshape"
  input: "^dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Reshape_1"
  input: "^dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss_grad/Shape"
  op: "Shape"
  input: "dnn/head/logistic_loss/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss_grad/Shape_1"
  op: "Shape"
  input: "dnn/head/logistic_loss/Log1p"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "dnn/head/gradients/dnn/head/logistic_loss_grad/Shape"
  input: "dnn/head/gradients/dnn/head/logistic_loss_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss_grad/Sum"
  op: "Sum"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/tuple/control_dependency"
  input: "dnn/head/gradients/dnn/head/logistic_loss_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss_grad/Reshape"
  op: "Reshape"
  input: "dnn/head/gradients/dnn/head/logistic_loss_grad/Sum"
  input: "dnn/head/gradients/dnn/head/logistic_loss_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss_grad/Sum_1"
  op: "Sum"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/tuple/control_dependency"
  input: "dnn/head/gradients/dnn/head/logistic_loss_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss_grad/Reshape_1"
  op: "Reshape"
  input: "dnn/head/gradients/dnn/head/logistic_loss_grad/Sum_1"
  input: "dnn/head/gradients/dnn/head/logistic_loss_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/dnn/head/logistic_loss_grad/Reshape"
  input: "^dnn/head/gradients/dnn/head/logistic_loss_grad/Reshape_1"
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/dnn/head/logistic_loss_grad/Reshape"
  input: "^dnn/head/gradients/dnn/head/logistic_loss_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/logistic_loss_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/head/logistic_loss_grad/Reshape_1"
  input: "^dnn/head/gradients/dnn/head/logistic_loss_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/logistic_loss_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Shape"
  op: "Shape"
  input: "dnn/head/logistic_loss/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Shape_1"
  op: "Shape"
  input: "dnn/head/logistic_loss/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Shape"
  input: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Sum"
  op: "Sum"
  input: "dnn/head/gradients/dnn/head/logistic_loss_grad/tuple/control_dependency"
  input: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Reshape"
  op: "Reshape"
  input: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Sum"
  input: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Sum_1"
  op: "Sum"
  input: "dnn/head/gradients/dnn/head/logistic_loss_grad/tuple/control_dependency"
  input: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Neg"
  op: "Neg"
  input: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Reshape_1"
  op: "Reshape"
  input: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Neg"
  input: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Reshape"
  input: "^dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Reshape_1"
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Reshape"
  input: "^dnn/head/gradients/dnn/head/logistic_loss/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Reshape_1"
  input: "^dnn/head/gradients/dnn/head/logistic_loss/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Log1p_grad/add/x"
  op: "Const"
  input: "^dnn/head/gradients/dnn/head/logistic_loss_grad/tuple/control_dependency_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Log1p_grad/add"
  op: "Add"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Log1p_grad/add/x"
  input: "dnn/head/logistic_loss/Exp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Log1p_grad/Reciprocal"
  op: "Reciprocal"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Log1p_grad/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Log1p_grad/mul"
  op: "Mul"
  input: "dnn/head/gradients/dnn/head/logistic_loss_grad/tuple/control_dependency_1"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Log1p_grad/Reciprocal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Select_grad/zeros_like"
  op: "ZerosLike"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Select_grad/Select"
  op: "Select"
  input: "dnn/head/logistic_loss/GreaterEqual"
  input: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/tuple/control_dependency"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Select_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Select_grad/Select_1"
  op: "Select"
  input: "dnn/head/logistic_loss/GreaterEqual"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Select_grad/zeros_like"
  input: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Select_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/dnn/head/logistic_loss/Select_grad/Select"
  input: "^dnn/head/gradients/dnn/head/logistic_loss/Select_grad/Select_1"
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Select_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Select_grad/Select"
  input: "^dnn/head/gradients/dnn/head/logistic_loss/Select_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/logistic_loss/Select_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Select_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Select_grad/Select_1"
  input: "^dnn/head/gradients/dnn/head/logistic_loss/Select_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/logistic_loss/Select_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Shape"
  op: "Shape"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Shape_1"
  op: "Shape"
  input: "dnn/head/assert_range/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Shape"
  input: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Mul"
  op: "Mul"
  input: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/tuple/control_dependency_1"
  input: "dnn/head/assert_range/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Sum"
  op: "Sum"
  input: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Mul"
  input: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Reshape"
  op: "Reshape"
  input: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Sum"
  input: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Mul_1"
  op: "Mul"
  input: "dnn/logits/BiasAdd"
  input: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Sum_1"
  op: "Sum"
  input: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Mul_1"
  input: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Reshape_1"
  op: "Reshape"
  input: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Sum_1"
  input: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Reshape"
  input: "^dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Reshape_1"
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Reshape"
  input: "^dnn/head/gradients/dnn/head/logistic_loss/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Reshape_1"
  input: "^dnn/head/gradients/dnn/head/logistic_loss/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Exp_grad/mul"
  op: "Mul"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Log1p_grad/mul"
  input: "dnn/head/logistic_loss/Exp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/zeros_like"
  op: "ZerosLike"
  input: "dnn/head/logistic_loss/Neg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/Select"
  op: "Select"
  input: "dnn/head/logistic_loss/GreaterEqual"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Exp_grad/mul"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/Select_1"
  op: "Select"
  input: "dnn/head/logistic_loss/GreaterEqual"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/zeros_like"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Exp_grad/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/Select"
  input: "^dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/Select_1"
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/Select"
  input: "^dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/Select_1"
  input: "^dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Neg_grad/Neg"
  op: "Neg"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/AddN"
  op: "AddN"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Select_grad/tuple/control_dependency"
  input: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/tuple/control_dependency"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/tuple/control_dependency_1"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Neg_grad/Neg"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/logistic_loss/Select_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/logits/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "dnn/head/gradients/AddN"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/logits/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/AddN"
  input: "^dnn/head/gradients/dnn/logits/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "dnn/head/gradients/dnn/logits/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/AddN"
  input: "^dnn/head/gradients/dnn/logits/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/logistic_loss/Select_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/logits/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/logits/BiasAdd_grad/BiasAddGrad"
  input: "^dnn/head/gradients/dnn/logits/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/logits/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/logits/MatMul_grad/MatMul"
  op: "MatMul"
  input: "dnn/head/gradients/dnn/logits/BiasAdd_grad/tuple/control_dependency"
  input: "dnn/logits/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/logits/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dnn/hiddenlayer_0/Relu"
  input: "dnn/head/gradients/dnn/logits/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/logits/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/dnn/logits/MatMul_grad/MatMul"
  input: "^dnn/head/gradients/dnn/logits/MatMul_grad/MatMul_1"
}
node {
  name: "dnn/head/gradients/dnn/logits/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/dnn/logits/MatMul_grad/MatMul"
  input: "^dnn/head/gradients/dnn/logits/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/logits/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/logits/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/logits/MatMul_grad/MatMul_1"
  input: "^dnn/head/gradients/dnn/logits/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/logits/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "dnn/head/gradients/dnn/logits/MatMul_grad/tuple/control_dependency"
  input: "dnn/hiddenlayer_0/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "dnn/head/gradients/dnn/hiddenlayer_0/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/BiasAddGrad"
  input: "^dnn/head/gradients/dnn/hiddenlayer_0/Relu_grad/ReluGrad"
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/dnn/hiddenlayer_0/Relu_grad/ReluGrad"
  input: "^dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_0/Relu_grad/ReluGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/BiasAddGrad"
  input: "^dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul"
  op: "MatMul"
  input: "dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/control_dependency"
  input: "dnn/hiddenlayer_0/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 12
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dnn/input_from_feature_columns/input_layer/concat"
  input: "dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul"
  input: "^dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul_1"
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul"
  input: "^dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 12
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul_1"
  input: "^dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 12
          }
          dim {
            size: 5
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 12
        }
        dim {
          size: 5
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad/Assign"
  op: "Assign"
  input: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad"
  input: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad/read"
  op: "Identity"
  input: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad/Assign"
  op: "Assign"
  input: "dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad"
  input: "dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad/read"
  op: "Identity"
  input: "dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/kernel/part_0/Adagrad/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/kernel/part_0/Adagrad"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/dnn/logits/kernel/part_0/Adagrad/Assign"
  op: "Assign"
  input: "dnn/dnn/logits/kernel/part_0/Adagrad"
  input: "dnn/dnn/logits/kernel/part_0/Adagrad/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/dnn/logits/kernel/part_0/Adagrad/read"
  op: "Identity"
  input: "dnn/dnn/logits/kernel/part_0/Adagrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/bias/part_0/Adagrad/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/bias/part_0/Adagrad"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/dnn/logits/bias/part_0/Adagrad/Assign"
  op: "Assign"
  input: "dnn/dnn/logits/bias/part_0/Adagrad"
  input: "dnn/dnn/logits/bias/part_0/Adagrad/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/dnn/logits/bias/part_0/Adagrad/read"
  op: "Identity"
  input: "dnn/dnn/logits/bias/part_0/Adagrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/Adagrad/learning_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.05000000074505806
      }
    }
  }
}
node {
  name: "dnn/head/Adagrad/update_dnn/hiddenlayer_0/kernel/part_0/ApplyAdagrad"
  op: "ApplyAdagrad"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  input: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad"
  input: "dnn/head/Adagrad/learning_rate"
  input: "dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/Adagrad/update_dnn/hiddenlayer_0/bias/part_0/ApplyAdagrad"
  op: "ApplyAdagrad"
  input: "dnn/hiddenlayer_0/bias/part_0"
  input: "dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad"
  input: "dnn/head/Adagrad/learning_rate"
  input: "dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/Adagrad/update_dnn/logits/kernel/part_0/ApplyAdagrad"
  op: "ApplyAdagrad"
  input: "dnn/logits/kernel/part_0"
  input: "dnn/dnn/logits/kernel/part_0/Adagrad"
  input: "dnn/head/Adagrad/learning_rate"
  input: "dnn/head/gradients/dnn/logits/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/Adagrad/update_dnn/logits/bias/part_0/ApplyAdagrad"
  op: "ApplyAdagrad"
  input: "dnn/logits/bias/part_0"
  input: "dnn/dnn/logits/bias/part_0/Adagrad"
  input: "dnn/head/Adagrad/learning_rate"
  input: "dnn/head/gradients/dnn/logits/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/Adagrad/update"
  op: "NoOp"
  input: "^dnn/head/Adagrad/update_dnn/hiddenlayer_0/bias/part_0/ApplyAdagrad"
  input: "^dnn/head/Adagrad/update_dnn/hiddenlayer_0/kernel/part_0/ApplyAdagrad"
  input: "^dnn/head/Adagrad/update_dnn/logits/bias/part_0/ApplyAdagrad"
  input: "^dnn/head/Adagrad/update_dnn/logits/kernel/part_0/ApplyAdagrad"
}
node {
  name: "dnn/head/Adagrad/value"
  op: "Const"
  input: "^dnn/head/Adagrad/update"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "dnn/head/Adagrad"
  op: "AssignAdd"
  input: "global_step"
  input: "dnn/head/Adagrad/value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/ones_like/Shape"
  op: "Shape"
  input: "dnn/head/logistic_loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/ones_like/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/head/ones_like"
  op: "Fill"
  input: "dnn/head/ones_like/Shape"
  input: "dnn/head/ones_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/mul/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/head/mul"
  op: "Mul"
  input: "dnn/head/mul/x"
  input: "dnn/head/ones_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/head/Sum"
  op: "Sum"
  input: "dnn/head/mul"
  input: "dnn/head/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/truediv"
  op: "RealDiv"
  input: "dnn/head/weighted_loss/Sum"
  input: "dnn/head/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "loss/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "loss"
      }
    }
  }
}
node {
  name: "loss"
  op: "ScalarSummary"
  input: "loss/tags"
  input: "dnn/head/weighted_loss/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "average_loss/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "average_loss"
      }
    }
  }
}
node {
  name: "average_loss"
  op: "ScalarSummary"
  input: "average_loss/tags"
  input: "dnn/head/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "init"
  op: "NoOp"
  input: "^dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad/Assign"
  input: "^dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad/Assign"
  input: "^dnn/dnn/logits/bias/part_0/Adagrad/Assign"
  input: "^dnn/dnn/logits/kernel/part_0/Adagrad/Assign"
  input: "^dnn/hiddenlayer_0/bias/part_0/Assign"
  input: "^dnn/hiddenlayer_0/kernel/part_0/Assign"
  input: "^dnn/logits/bias/part_0/Assign"
  input: "^dnn/logits/kernel/part_0/Assign"
  input: "^global_step/Assign"
}
node {
  name: "init_1"
  op: "NoOp"
}
node {
  name: "group_deps"
  op: "NoOp"
  input: "^init"
  input: "^init_1"
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_0/bias/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "dnn/logits/kernel/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "dnn/logits/bias/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "dnn/dnn/logits/kernel/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "dnn/dnn/logits/bias/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/stack"
  op: "Pack"
  input: "report_uninitialized_variables/IsVariableInitialized"
  input: "report_uninitialized_variables/IsVariableInitialized_1"
  input: "report_uninitialized_variables/IsVariableInitialized_2"
  input: "report_uninitialized_variables/IsVariableInitialized_3"
  input: "report_uninitialized_variables/IsVariableInitialized_4"
  input: "report_uninitialized_variables/IsVariableInitialized_5"
  input: "report_uninitialized_variables/IsVariableInitialized_6"
  input: "report_uninitialized_variables/IsVariableInitialized_7"
  input: "report_uninitialized_variables/IsVariableInitialized_8"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 9
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 9
          }
        }
        string_val: "global_step"
        string_val: "dnn/hiddenlayer_0/kernel/part_0"
        string_val: "dnn/hiddenlayer_0/bias/part_0"
        string_val: "dnn/logits/kernel/part_0"
        string_val: "dnn/logits/bias/part_0"
        string_val: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad"
        string_val: "dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad"
        string_val: "dnn/dnn/logits/kernel/part_0/Adagrad"
        string_val: "dnn/dnn/logits/bias/part_0/Adagrad"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 9
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables/boolean_mask/strided_slice"
  input: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 9
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 9
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_variables/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables/boolean_mask/concat/values_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  input: "report_uninitialized_variables/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables/Const"
  input: "report_uninitialized_variables/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables/LogicalNot"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/GatherV2/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/GatherV2"
  op: "GatherV2"
  input: "report_uninitialized_variables/boolean_mask/Reshape"
  input: "report_uninitialized_variables/boolean_mask/Squeeze"
  input: "report_uninitialized_variables/boolean_mask/GatherV2/axis"
  device: "/device:CPU:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_resources/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/GatherV2"
  input: "report_uninitialized_resources/Const"
  input: "concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_0/bias/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "dnn/logits/kernel/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "dnn/logits/bias/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "dnn/dnn/logits/kernel/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "dnn/dnn/logits/bias/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/stack"
  op: "Pack"
  input: "report_uninitialized_variables_1/IsVariableInitialized"
  input: "report_uninitialized_variables_1/IsVariableInitialized_1"
  input: "report_uninitialized_variables_1/IsVariableInitialized_2"
  input: "report_uninitialized_variables_1/IsVariableInitialized_3"
  input: "report_uninitialized_variables_1/IsVariableInitialized_4"
  input: "report_uninitialized_variables_1/IsVariableInitialized_5"
  input: "report_uninitialized_variables_1/IsVariableInitialized_6"
  input: "report_uninitialized_variables_1/IsVariableInitialized_7"
  input: "report_uninitialized_variables_1/IsVariableInitialized_8"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 9
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables_1/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 9
          }
        }
        string_val: "global_step"
        string_val: "dnn/hiddenlayer_0/kernel/part_0"
        string_val: "dnn/hiddenlayer_0/bias/part_0"
        string_val: "dnn/logits/kernel/part_0"
        string_val: "dnn/logits/bias/part_0"
        string_val: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad"
        string_val: "dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad"
        string_val: "dnn/dnn/logits/kernel/part_0/Adagrad"
        string_val: "dnn/dnn/logits/bias/part_0/Adagrad"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 9
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  input: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 9
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 9
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape_2"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_variables_1/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables_1/boolean_mask/concat/values_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2"
  input: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables_1/Const"
  input: "report_uninitialized_variables_1/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables_1/LogicalNot"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables_1/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/GatherV2/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/GatherV2"
  op: "GatherV2"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape"
  input: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  input: "report_uninitialized_variables_1/boolean_mask/GatherV2/axis"
  device: "/device:CPU:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "init_2"
  op: "NoOp"
}
node {
  name: "init_all_tables"
  op: "NoOp"
}
node {
  name: "init_3"
  op: "NoOp"
}
node {
  name: "group_deps_1"
  op: "NoOp"
  input: "^init_2"
  input: "^init_3"
  input: "^init_all_tables"
}
node {
  name: "Merge/MergeSummary"
  op: "MergeSummary"
  input: "dnn/dnn/hiddenlayer_0/fraction_of_zero_values"
  input: "dnn/dnn/hiddenlayer_0/activation"
  input: "dnn/dnn/logits/fraction_of_zero_values"
  input: "dnn/dnn/logits/activation"
  input: "loss"
  input: "average_loss"
  attr {
    key: "N"
    value {
      i: 6
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save/StringJoin/inputs_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "_temp_bad9a76bae974298bd7ddbe7a26439c3/part"
      }
    }
  }
}
node {
  name: "save/StringJoin"
  op: "StringJoin"
  input: "save/Const"
  input: "save/StringJoin/inputs_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "separator"
    value {
      s: ""
    }
  }
}
node {
  name: "save/num_shards"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "save/ShardedFilename/shard"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "save/ShardedFilename"
  op: "ShardedFilename"
  input: "save/StringJoin"
  input: "save/ShardedFilename/shard"
  input: "save/num_shards"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/SaveV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 9
          }
        }
        string_val: "dnn/hiddenlayer_0/bias"
        string_val: "dnn/hiddenlayer_0/bias/t_0/Adagrad"
        string_val: "dnn/hiddenlayer_0/kernel"
        string_val: "dnn/hiddenlayer_0/kernel/t_0/Adagrad"
        string_val: "dnn/logits/bias"
        string_val: "dnn/logits/bias/t_0/Adagrad"
        string_val: "dnn/logits/kernel"
        string_val: "dnn/logits/kernel/t_0/Adagrad"
        string_val: "global_step"
      }
    }
  }
}
node {
  name: "save/SaveV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 9
          }
        }
        string_val: "5 0,5"
        string_val: "5 0,5"
        string_val: "12 5 0,12:0,5"
        string_val: "12 5 0,12:0,5"
        string_val: "1 0,1"
        string_val: "1 0,1"
        string_val: "5 1 0,5:0,1"
        string_val: "5 1 0,5:0,1"
        string_val: ""
      }
    }
  }
}
node {
  name: "save/SaveV2"
  op: "SaveV2"
  input: "save/ShardedFilename"
  input: "save/SaveV2/tensor_names"
  input: "save/SaveV2/shape_and_slices"
  input: "dnn/hiddenlayer_0/bias/part_0/read"
  input: "dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad/read"
  input: "dnn/hiddenlayer_0/kernel/part_0/read"
  input: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad/read"
  input: "dnn/logits/bias/part_0/read"
  input: "dnn/dnn/logits/bias/part_0/Adagrad/read"
  input: "dnn/logits/kernel/part_0/read"
  input: "dnn/dnn/logits/kernel/part_0/Adagrad/read"
  input: "global_step"
  device: "/device:CPU:0"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
      }
    }
  }
}
node {
  name: "save/control_dependency"
  op: "Identity"
  input: "save/ShardedFilename"
  input: "^save/SaveV2"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/ShardedFilename"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/MergeV2Checkpoints/checkpoint_prefixes"
  op: "Pack"
  input: "save/ShardedFilename"
  input: "^save/control_dependency"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "save/MergeV2Checkpoints"
  op: "MergeV2Checkpoints"
  input: "save/MergeV2Checkpoints/checkpoint_prefixes"
  input: "save/Const"
  device: "/device:CPU:0"
  attr {
    key: "delete_old_dirs"
    value {
      b: true
    }
  }
}
node {
  name: "save/Identity"
  op: "Identity"
  input: "save/Const"
  input: "^save/MergeV2Checkpoints"
  input: "^save/control_dependency"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/RestoreV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 9
          }
        }
        string_val: "dnn/hiddenlayer_0/bias"
        string_val: "dnn/hiddenlayer_0/bias/t_0/Adagrad"
        string_val: "dnn/hiddenlayer_0/kernel"
        string_val: "dnn/hiddenlayer_0/kernel/t_0/Adagrad"
        string_val: "dnn/logits/bias"
        string_val: "dnn/logits/bias/t_0/Adagrad"
        string_val: "dnn/logits/kernel"
        string_val: "dnn/logits/kernel/t_0/Adagrad"
        string_val: "global_step"
      }
    }
  }
}
node {
  name: "save/RestoreV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 9
          }
        }
        string_val: "5 0,5"
        string_val: "5 0,5"
        string_val: "12 5 0,12:0,5"
        string_val: "12 5 0,12:0,5"
        string_val: "1 0,1"
        string_val: "1 0,1"
        string_val: "5 1 0,5:0,1"
        string_val: "5 1 0,5:0,1"
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2/tensor_names"
  input: "save/RestoreV2/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
        shape {
          dim {
            size: 5
          }
        }
        shape {
          dim {
            size: 12
          }
          dim {
            size: 5
          }
        }
        shape {
          dim {
            size: 12
          }
          dim {
            size: 5
          }
        }
        shape {
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
      }
    }
  }
}
node {
  name: "save/Assign"
  op: "Assign"
  input: "dnn/hiddenlayer_0/bias/part_0"
  input: "save/RestoreV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_1"
  op: "Assign"
  input: "dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad"
  input: "save/RestoreV2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_2"
  op: "Assign"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  input: "save/RestoreV2:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_3"
  op: "Assign"
  input: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad"
  input: "save/RestoreV2:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_4"
  op: "Assign"
  input: "dnn/logits/bias/part_0"
  input: "save/RestoreV2:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_5"
  op: "Assign"
  input: "dnn/dnn/logits/bias/part_0/Adagrad"
  input: "save/RestoreV2:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_6"
  op: "Assign"
  input: "dnn/logits/kernel/part_0"
  input: "save/RestoreV2:6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_7"
  op: "Assign"
  input: "dnn/dnn/logits/kernel/part_0/Adagrad"
  input: "save/RestoreV2:7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_8"
  op: "Assign"
  input: "global_step"
  input: "save/RestoreV2:8"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_shard"
  op: "NoOp"
  input: "^save/Assign"
  input: "^save/Assign_1"
  input: "^save/Assign_2"
  input: "^save/Assign_3"
  input: "^save/Assign_4"
  input: "^save/Assign_5"
  input: "^save/Assign_6"
  input: "^save/Assign_7"
  input: "^save/Assign_8"
}
node {
  name: "save/restore_all"
  op: "NoOp"
  input: "^save/restore_shard"
}
versions {
  producer: 26
}
