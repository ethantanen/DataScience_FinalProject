node {
  name: "global_step/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global_step/Assign"
  op: "Assign"
  input: "global_step"
  input: "global_step/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global_step/read"
  op: "Identity"
  input: "global_step"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "global_step/cond/Switch"
  op: "Switch"
  input: "global_step/IsVariableInitialized"
  input: "global_step/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/switch_t"
  op: "Identity"
  input: "global_step/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/switch_f"
  op: "Identity"
  input: "global_step/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/pred_id"
  op: "Identity"
  input: "global_step/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/read"
  op: "Identity"
  input: "global_step/cond/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/read/Switch"
  op: "RefSwitch"
  input: "global_step"
  input: "global_step/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/Switch_1"
  op: "Switch"
  input: "global_step/Initializer/zeros"
  input: "global_step/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/Merge"
  op: "Merge"
  input: "global_step/cond/Switch_1"
  input: "global_step/cond/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/add/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step/add"
  op: "Add"
  input: "global_step/cond/Merge"
  input: "global_step/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "tensors/component_0"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 750
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 750
          }
        }
        tensor_content: "\225\320\375D\332\220\354?\371\205\354q\272?\332\277\022\375^\373a\364\351\277t\\4\375:\332\372?Q\211\002\254\317&\343\277\234\312\r\377%\244\311\277\240K\344h\307\026\334?\272\366\255\307\374\335\347\277g\373\310\033F \327\277\271\200\310\303\253\341\347?\234_Q\254\215G\363?\265\310\027\037\221\205\301\277\373\360\370\243\037\036\251\277\032\006H{\257\r\352\277za[\371\363\212\340?\310\365\262W\262\316\343\277\360q\035R.\306\002@>p\220!\3328\320?\231\006\361|\332\217\361?\3330\223B}2\343?\247B\254 \3541\317?4/&]Rc\351\277\355z\313\343\240\030\325\277\t\202Qo/y\010@\000\355\205\t\345e\350\277\205Z|o\317p\215?f@\326\231\035\"\347\277\026s\201q\271f\334?\256\353\2149\343\266\342\277\370\260\236d\235F\344\277\254\254\207\225$\372\346\277\312y\335\r\255\345\300\277\t\177\312o\226+\006@\227\205\350\354\351I\350\277\231\006\361|\332\217\361?\177\374\312^\013x\360?3C\3251\265\036\370?d&{\016)\'\341\277\325m\0053\221I\006@\217\004\3336#\277\010@r\372d\220\232\350r?\221\030;1t2\345\277\357I\377\247Y\312\345\277\332\361{/ss\306?vP\030\377\326\243\361?\227@\325I\371\361\347\277\327\016\023s\\\272\345\277\027\340N\3442O\365?#X=\345\305^\343\277\350-\207\262Q\227\334\277QX0Ko\202\343?\324p\245\305\321\000\324\277\307,\231\334]d\310\277\177\266\316+\001\017\352\2773\242u\206\351D\305\277\263\261\036\266[\302\001@\335@m4\005\332\243?\005\266\267\030\236(\325\277A\325\014O\361&\333?a\033\330\200k\323\350\277\334\335^\313y\304\307\277\275\277\337\326\265\240\324\277@\000\313\213\006\332\345?\362]L4\034*\347\277\177-et\003\363\310?\275\313\373\324\031\327\335\2774t9\000C\273\351\277e\376I\366\305\027\351\277\271N\274\362u\206\204\277s\372\307\206\342\272\342\277\025\217\333\255C\353\263?\265\310\027\037\221\205\301\277V\215\325\226\234@\231\277jT#&\340\201\350\277r\204\334]xh\322?\\\n\375\363\007\236\347\277\177\005\351\024\374\341\347\277\247\010\006\304NO\340\277\177\303\\q\244\327\351\277\207z\251\245Rt\301?\032\244kf~c\315\277\t\2318i\031:\347\277\2775\362ki\004\352\277\203\023(\242\214\246\344\277\332\222+\272\013\317\341\277\3171\216\262\307A\347?>p\220!\3328\320?rbB\374lu\377?>\351y\222\267W\362?\243\000\3255\360%\350\277\236hu\207\227\007\333\277\231\014\377{\014+\366?\234\312\r\377%\244\311\277kbVi>\232\344?v\265\224,\356\221\374?\004\363\245wb\003\316\277\215\004\356\244\261\322\343\277V\334T\334PC\340\277j\017\026\250\010\200\330\277\006@\3309f\202\345\277\275\277\337\326\265\240\324\2775\336\316M5\236\002@\363W>5\352\216\342\277\222\256\203\232\322n\337\277\221\323-\263\2340\325\277\252\217\360Q;\263\307?\374QZ9hN\260\277\007\304\360\200\025\227\341\277\277\025**\2213\363?\355z\305\276\207\302\344\277\232|Vy\225Y\246?\240\354\207\251-\306\346\2775@\327\351AR\346\277\\F\362\340\007\214\360?\257[E\206AX\002@\363\347rz\375\331\347\277Y\203]\255\277;\351\277\373\360\370\243\037\036\251\277\214\001\336\355\362\003\361?^\004\001d!\005\304\277\305q\232\020\003\272\347\277\220\033\365\343L)\277?,/\225\356g|\001@\360\216\022KJ\"\346\277\321+\214\375\307R\343\277\242@\377L\251L\272\277\370\260\236d\235F\344\277\"\353orLv\372?$\002\301k\233\370\355?\024\317\021\017/\276\346\277~{\302\316\0322\347\277J\034U\360Y\017\340\277\213\305\350\000\363\025\350\277\363\001\244\005~\216\351\277\035\361\257\227\315\344\305\277\026Y8U\020n\347\277\360t\244Q\307\023\005@\335gy\307(\310\327\277\"\324*\303/\240\327\277Z\200\326\255&\356\346\277/\323).\314:\343\277<\226\235\253\315\250\n@\213\rn\243B\230\350\277\305q\232\020\003\272\347\277\035P\000\r5\211\352?\261\332#c\251\250\355?\262\3344\203\2124\300?\316\027?q\005\363\341\277\370|\310\226\260\177\362?aw\225\257C\222\350\277f@\326\231\035\"\347\277S\240M\200\005S\366?\357I\377\247Y\312\345\277\247B\254 \3541\317?\222\234Sx#G\341\277\003\017\000\264\354\207\325?a\256\204\352\366\236\336\277\317y\253\347]\022\372?\244,\342\350\257\235\253\277\240K\314\327\236\322\350\277E\376\362\307T\005\352\277\370\202\326\225\342\032\367?\262\211\000\014\207\306\344\277y\335N\374v\"\345\277Nh\313-@\035\256\277\3545\262\033\227j\344\277\267\334R<\010\343\341\277\242bN\365\275\002\013@I\262\213\352lI\351?\304n\212YD\353\364?\233T\"\326\273Q\351\277FgX\331\376S\303?\253\034SP\021\257\341\277\222]N\324d\212\345\277\352\360\236x\246\022\344\277a\237R\020\273C\362?\327\0325\226\331F\337\277R\246[\1777\356\372?\212\253\223\232\027q\322\277|\254\216\nb\200\326\277\346\342_\353\025N\347\277\335\254\233E:\355\351\277\271\261\232$\014\206\347\277\304&m$\256\032\342?\305\022\031t\217S\006@>\247v\246\205\316\344\277\257[E\206AX\002@A\325\014O\361&\333?\265\'h\224\370)\346?\025\204\366\221%!\322\277k\330;m\217\226\344\277\327\311\377\317kb\345\277\374\017\023\270\233\357\332\277\372\223\031\220\377\001\346?n\304-\341z\240\351\277G\"Q\200@\250\323?\"\0318A\007\242\347\2774\213\343\213*\"\351\277\n\341IT}^\371?\003\026\003\r|A\224\277q7\260\300\215?\333\277\362\216$\272\225$\307\2770]Pt\255\352\343\277\375\\?U\206\030\322?i7Nny>1\277\362\216$\272\225$\307\277\262\211\000\014\207\306\344\277@\361f\213{\253\262?(iN\271\223r\313?\027\340N\3442O\365?\376==\325n\237\241\277\261\377\331\305\245\026\344\277\366:\271`LJ\344?G\"Q\200@\250\323?\004\363\245wb\003\316\277W\363\237\260\206o\363?z.\204\302\344\006\337\277\203\023(\242\214\246\344\277ph\202!\356\343\312\277\311\017\016\343\246\311\351\277h\241(\326\346\365\351\277\301\337T\253\016\343\317\2773\242u\206\351D\305\2770\270?\276%\331\250?\303\025\240s(\241\010@\252\217\360Q;\263\307?\207\036\347\331\205\021\352\277\254\230d\t\326\340\351\277\026\236K\370\000\306\347\277\000\242dg\302r\343\277t\024\027\310\244\t\350?\021\325\n\016\'6\351\277(\374\304\333\264_\332\277%r\230p\272Y\351\277\023E\353\310M\016\346\2777\2345ah\326\371?S\232?\201\323\267\361?\231\247\370\227\214\252\000@\233\035Bv)\022\345?b\347ujjj\345\277[_%\3344\014\352\277\344\243EG\035n\351\277\346\342_\353\025N\347\277\026\032]\264\001\014\276\277C\346h\334\265w\005@K\016Ucw\264\351\277\031\021\310\262\372\016\351\277\273}\200\301\204\351\275?\'\337\311\275\177\255\006@_\337J\001%\227\335\277\255g\211\362m\305\350\277x\257\206-\274\366\367?\025\204\366\221%!\322\277\210\261\233t0\266\346\277C\247V\357\201\375\376?\263G\211hi\337\350\277\\\363\025\372\035\335\010@Q\265\017_\217\236\246\277K\254\217Z\206\260\325\277\305\242u\'k\325\350\277\224,\210\2756\222\346\277\331\3272\023\312z\341?\021B\227|\364i\273?\343\211\377\273b\226\345\277v\336soq\214\273\277\0204:<^\037\351\277}\016\365[\241I\376?\374\017\023\270\233\357\332\277\224]x\324\330\320\351\277\235\346g;\260(\321?.\2328\256Xo\334\277\226\260\240\004\346\246\342\277\345*\243\374\310E\300\277\213\200\325]\002\276\347\277\345\r\030\003\022\253\341\277\356w+Q`a\007@\360\216\022KJ\"\346\277\026\032]\264\001\014\276\277\273\034\t\247\031\370\351\2773&|^MW\340\277e\242\214\307\355X\351\2774\007\346i\316\206\337\2778\312\375/#\002\347\277\234\330:\035kf\345\277\007\205\361\001p0\326\277\352-\235\270\016\374\351\277UD.\t\2158\351\277\377\3220\243\t\301\322\277\203\0316\241\276A\351\277r\372d\220\232\350r?\021B\227|\364i\273?\341xN/s\247\350\277\200\377\332\025\312F\343\277\033B\323\356\357\306\336\277\315\273D\324*\332\002@p1\234\234BN\346\277\352,P\320\013+\265?\224\263\236LYs\364?\"^K\344\367\371\347\277\2205\363\273\2154\351\277\036{\312\223|\350\325\277\203\324(#\347?\331\277\347\'s\216\006\246\347\277\252\002\345V\216\240\000@Z>J\n\317\343\350\277\230n>a\002\343\350\277\356\363(\003\266X\253?\272;\301j\3555\350\277\260\272\306\"\265\276\343\277\020|\277\336\255\241\351\277\265\'h\224\370)\346?,O\021\347\034&\347\277\321+\214\375\307R\343\277\344\324&\203\236\337\332\277\246\270\'%\330l\n@\322\372\263wNX\323?\347\'s\216\006\246\347\277\241+\215M\354\202\342\277>NUw\200\200\351\277\213p\271\355)\020\352\277q\276I\342\274K\351\277\227\205\350\354\351I\350\277\367F\325^\260\200\355?\352!k\264\355`\323\277`8\223\234s\366\335?\364\234Q\330\332\346\342\277\035P\000\r5\211\352?\234_Q\254\215G\363?>p\220!\3328\320?9\t\003\324\341\276\342\277Z\200\326\255&\356\346\277t\265\306R=e\303\277\352,P\320\013+\265?\240\255\210*\210_\333\277FgX\331\376S\303?nbb\263pF\345\277\374#E\037\013\326\351\277,I\003\350\352\212\342\277f@\326\231\035\"\347\277\315\032=\271x\277\363?\315\304\026A\370\034\351\277\275\004\355T\215\242\344\277\226\260\240\004\346\246\342\277?\362\227H\250\301\351\277\266\374\251W\343v\333?~{\302\316\0322\347\277\357A\340\210F\243\316\277FgX\331\376S\303?\"r\206\001oW\330?y6\235\274\336\327\325?\304\347s\312!\n\347\277\253gt\3623\242\346\277\254\306\270 \245\256\350\277\356\363(\003\266X\253?\302W?\205\016\277\341\277|\"\214\237\333\300\351\277\tT%\306(\342\346\277\324y!1\365\177\017@\026Y8U\020n\347\277\226\244\220A\210\267\223?\201\002\331]=\023\365?\262\3344\203\2124\300?\261\332#c\251\250\355?\236\035N\300[\276\345\277\243\265\263\223\3152\343\2773I\3430\347\271\374?p\255\211z\254\217\332\277\352\360\236x\246\022\344\277\003\026\003\r|A\224\277_I\010\275\337\260\323\277Mg\240\222\360H\351\277Kah\223Jg\340\277:\263\206Z\267X\355?\336\010Yt\022\254\351\277q\273\302\342#\376\346\277\372\177\330MoN\345\277\376\223:\332k\321\350\277DH^\n4\030\016@\327\220\032\232*C\317\277`Fh*\237\371\005@\243\000\3255\360%\350\277x\244]|\003W\336\277\265\026\303Q;\347\351\277\363\242_\327\014\202\347\277\0204:<^\037\351\277\335@m4\005\332\243?K\254\217Z\206\260\325\277\r\247w\366\251\376\343\277\247B\254 \3541\317?\347\036U\330\025<\360?\245\215C~\370\315\262\277\006\376`\226H\233\351\277\357A\340\210F\243\316\277E\006\367C\266#\314\277I\204.\035\226\004\351\277D\244.\247\232\352\350\277\276\312\304\362\323j\266?\000\302\273\202\235\006\335?\017\362\236\275\345G\331\277\273\200\324\r\336\215\350\277\255\201\3033\366\360\353?\261\303H\263\361\223\017@\317\\R\024\366J\342\277\367F\325^\260\200\355?\324p\245\305\321\000\324\277\212\305\334\266\300i\347?\242p\240\360\334\332\342\277\324.=\375\324\346\351\277\217\3315\215\265u\351\277E\311\002\300\330\362\342\277w\021\261\022x\213\350\277L\353\216\331+\027\341\277\276\0338)\303\316\367?X\366\257gE>\346\277#\243^\207\350Q\350\277\255\201\3033\366\360\353?\377\354y\277\262\271\347?\360I\005\315r \326\277:\017&\323M}\351\277g\373\310\033F \327\277$\214w\215\376\220\t@\027p\367\3401\370\350\277>\247v\246\205\316\344\277\363\001\244\005~\216\351\277\235\375\321\307\246\024\000@\037J\376W5\232\346\277\363\242_\327\014\202\347\277H\351qo\030\337\335\277\343G\210\030E\257\351\277u\212\374\313\365\005\350\277\233H\006\330W\033\340\277+$G`\325\306\333?\201J\374\267\3549\350\277\267\342`;:~\346\277\330\254t\326\264\307\326?\356\004\354\004ir\345\277\357A\340\210F\243\316\2773Qe \277\356\351\277\314\177\003\236\007\305\350\277+\020\022hw\277\333\277\224q\233`\'\352\346\277\007\326 \243\304\276\337\2770\224\021\034\177j\014@u\317\017o\346]\350\277\364\307\366\201H0\002@\022\276`\202?\317\351\277\225\025\3631\211N\351\277\022\372\311&+\033\341\277\233=xJ\324\352\351\277\032\244kf~c\315\277*z\311\376\030\203\341\277`z\007\257\242\274\350\277\241y5\357\247\303\351\277\212\253\223\232\027q\322\277\226\266\264(1\230\327\277\336\031\270\222\305\035\005@+\305\352\240;v\346\277\267\334R<\010\343\341\277(\267\2618\304\007\332\277\020\215\374\263\2612\370?_I\010\275\337\260\323\277\007\250\270\221>\017\352\277;\223)\032\303n\343\277 \361}q~\021\377?{d\374\027]\020\352\277\214\001\336\355\362\003\361?8\312\375/#\002\347\277\210A\273\271\t\336\351\2772\347v\272\216\232\344\277\223\277\272J\275\251\375?2\347|\337\247\360\324\277\037J\376W5\232\346\277\026\032]\264\001\014\276\277q\273\302\342#\376\346\277\234\330:\035kf\345\277i\370e\367\007\303\350\277\320\357\rY\242\343\351\277\177\303\\q\244\327\351\277\326\317\r\317\235\375\351\277M\324\021\337\246\027\327?\327\016\023s\\\272\345\277\242@\377L\251L\272\277G\"Q\200@\250\323?\217\325.q?\n\352\277\304,\207m\022b\347\277r\204\334]xh\322?\264\031;v\263g\332\277\211\253\215u\376\032\342\277\341^55\0337\332?\\\030\036\310\032\264\302?\367F\325^\260\200\355?/\366\220\000f\235\377?\300\210\005\234<\267\340\277\241v\256\357\016v\347\277\177\303\\q\244\327\351\277\t\263i\364\231\356\350\277\377\3220\243\t\301\322\277\362\216$\272\225$\307\277\210\235x\350\341\234\351\277;k\343\001&<\351\277\342D\354\030r>\345\277\265\310\027\037\221\205\301\277\027\332@\345\000\264\360?\326\204\354,{\n\345\2775q\243%\211\240\325\277\346\243`lp\347\333\277\352!k\264\355`\323\2779T$v\004\262\347\277\010\237:\036\031)\353?\247h9\025\234\252\267?#g\241\345P\215\266\277\275\277\337\326\265\240\324\277h\006\2567d\352\270?\356f\2672s\314\351\277=#d\204\357\017\331\277\360\242A\036\217\323\305?\236\035N\300[\276\345\277\347U\375\354?R\315?\035\361\257\227\315\344\305\277#g\241\345P\215\266\277\313\276\344fk\221\320\277\206\272\247\273\325\035\375?+\277\334\241\t\333\341\277f@\326\231\035\"\347\277<\365\tH\007\354\351\2777\205\352\2142\252\346\277?\346{JD\213\340\277O\377\317\033\274\312\341?z+\270\240\300\r\264\277\256=a\006\267\204\216\277%\'w\316\227f\344\277\r\247w\366\251\376\343\277e\321g?\246\023\352\277u\351X\213\217V\335?\3714\267\253L[\340\277H\021\307b\326\336\351\2771\266\222\352\342\363\303?\236\304\315\331\2445\376?\005:\276\360\001;\340?\006\221\r\000\324f\337\277@\231}D?\013\352\277\252\2103\231\303\017\352\277+\323hd\347-\020@z\"b\237gz\345\277\362\216$\272\225$\307\277X\366\257gE>\346\277\364\341X1\231\222\342?\332<\257@\341h\354?E\006\367C\266#\314\277\217Z>\035\246\273\362?0U1U\232\303\314\277\003\026\003\r|A\224\277\034\353\217)PG\340\277j\017\026\250\010\200\330\2771\266\222\352\342\363\303?}\353\215\211\007\347\341\277\254u\2475\222\272\342?*5\266[(+\341\277\315\322+\316\024\233\341\277\322\024\245\003\336\221\004@\206\342a\213^\256\345\277/\250e\314\2351\350?a\245`\017\355\336\366?6\365\265G\037_\341\277\347U\375\354?R\315?u\317\017o\346]\350\277\245\262\031&\246\321\005@\222]N\324d\212\345\277\004\363\245wb\003\316\277\005:\276\360\001;\340??\255\212\312\320\277\331\277\346\337\013\237\274\251\274?\357\210\370\001\346\332\340?a\256\204\352\366\236\336\277\277\256j\266I\346\336?;\223)\032\303n\343\277J\034U\360Y\017\340\277\252dd;u\323\363?\\\323\026o\\\010\323?\265D\027i\n\265\350\277GS)\006\272\242\343\277o\241gW/\003\341\277\254\257\016\225\275G\351\277\250(c\004C9\352?`8\223\234s\366\335?\347\345\346\352\256\233\351\277\276\331(\363^\231\351?\027\343^\233\361\035\350\277\373\360\370\243\037\036\251\277g\312\374\337\376\321\347\277\360\216\022KJ\"\346\277(\277\3122\276\330\320?Q\211\002\254\317&\343\277\007\312\376\177G2\346\277\254\254\207\225$\372\346\277\251mm\361+\032\351\277\032\241\003#\252\361\351\277\010@\352\250\261\204\306\277\234_Q\254\215G\363?^\224#:\351M\350\2779\220\031c\004\240\360?+\277\334\241\t\333\341\277]\2327^4?\335\277#\211\360\215eC\007@\327\311\377\317kb\345\277kS\362h\263k\261?\372\223\031\220\377\001\346?\ny\274pd\220\001@\0346\261\313r:\345\277\327\220\032\232*C\317\277\245\204\355|\237:\344\277\0177\254;\275I\351\277\302io\247\275\346\337\277M\324\021\337\246\027\327?9T$v\004\262\347\277\265\r\037xO1\321\277\254gz\027M\370\326\2773\242u\206\351D\305\277\304\014\013u]\270\001@\030.\206b-g\335\277*O\005\235\352y\346?\356\200\300O+J\016@\323\301\324f&\217\335\2770\030=\321\274\222\343\277\266\374\251W\343v\333?\246\013\004\014\302\033\362?5Z&+\004\241\353?\330\016\031\230u\020\326\2775q\243%\211\240\325\277?h\024\030l\022\352\277\014hrR\353A\350\277\237v\242\245\334\311\346?-\363h\270~\212\351\277\273}\200\301\204\351\275?\265\r\037xO1\321\277\026\016\027\263\355z\342\277\t\263i\364\231\356\350\277z\251x.\212[\363?\271\261\232$\014\206\347\277^\004\001d!\005\304\277j=y\232\370\032\351\277\356\376\335\0057\327\340\277z\034T\2405\337\340\277J\356\214!\237\343\362?1\242c\027\236B\344\2775Z&+\004\241\353?\035\361\257\227\315\344\305\277\212\023\010\353\210\325\376?3\001\306\373P\351\351?qv\257?3\246\346\277nbb\263pF\345\277\362\004\026\005\335\270\351\277\026\016\027\263\355z\342\277\241v\256\357\016v\347\277h\006\2567d\352\270?\320\255\207\332c/\334\277\035\361\257\227\315\344\305\277\\\277\333Q\345\252\342\277\234\215\031{Hs\340\277\332\327>]\374&\342\277J\207\315\255W\226\336?\333\335a\\h\345\350\277v\336soq\214\273\277\2105\242L\224\310\321?\226q\260`a\r\351\277\"\353orLv\372?3\001\306\373P\351\351?\245\262\031&\246\321\005@\264\310\005\260E\203\340\277G_K)7/\335\277\317\\R\024\366J\342\277\251\010\363U\300;\005@\374#E\037\013\326\351\277\036X\032\217S\014\352\277E\311\002\300\330\362\342\277\373\360\370\243\037\036\251\277\003\026\003\r|A\224\277\267-\210\002v\307\333\277\304,\207m\022b\347\277\t\2318i\031:\347\277\331\2309\271=j\346\277\004\302\323\026\002_\336\277$\214w\215\376\220\t@\367\373\277\006\3009\351\277\327\303\361\3209\307\340\277IS;u\005\245\304\277Jgv\222|\002\345\277kS\362h\263k\261?E\006\367C\266#\314\277\352!k\264\355`\323\277\347U\375\354?R\315?4\242\215\027\022\211\350\277e\373\302\366,\312\346\277@\000\313\213\006\332\345?v\336soq\214\273\277F\233:\361\035\307\365?\373\360\370\243\037\036\251\277\"^K\344\367\371\347\277\023\212\376k>f\346\277i7Nny>1\277\313\276\344fk\221\320\277\000\302\273\202\235\006\335?r\372d\220\232\350r?;\223)\032\303n\343\277Js\230\265\371\216\336\277\017v\261\337{\006\345\277nbb\263pF\345\277\324s\0232\303\344\n@\371\205\354q\272?\332\277\221\030;1t2\345\277\304\242fLJ\010\327\277DY+\273\271\221\347?\016\205F\010\333\376\351\277\003w\254O\306\025\351\277\250\230:\tb\232\345\277V\'v~s6\345\277\003\026\003\r|A\224\277,/\225\356g|\001@_\337J\001%\227\335\277\227\231#\na\247\330?@v\260\217W\326\345\277+$G`\325\306\333?\370\202\326\225\342\032\367?\230\266\233\225\211.\014@\364\271\036c.\014\351\277\270l\207\201\033.\347\277\005\365\266\227C\217\340\277\223\363\226=\303\306\337\277\026\016\027\263\355z\342\277\0333\241\024\264k\362?v\336soq\214\273\277\331\3272\023\312z\341?\023v\333\337\357L\351\277\371@\331\316\311\347\331\2773C\3251\265\036\370?\332\222+\272\013\317\341\277\263\261\036\266[\302\001@\315\273D\324*\332\002@\376==\325n\237\241\277\025\2235U\311\265\235?u\204\356\314\303j\343\277\343J\000=\275/\332\277#\211\360\215eC\007@\224,\216\342O\350\326\277\324\265\262C\251\002\344\277\250y&\032\377\036\244\277\331\303\336b\253\263\005@\016.\216\205\314\337\361?\034\300\305\242\010\350\324?\351l\2061\367\375\347\277"
      }
    }
  }
}
node {
  name: "tensors/component_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 750
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 750
          }
        }
        tensor_content: "\357\340(f\232>\274\277\216+\326\324\262\024\360\277_L\320\350\304\253\000@\0015\252e\314%\337\277\033\320\n%\017\203\333\277\233\316\325\262\270j\304?\322 \035D\230\276\277?\320\312^\307\233)\364?i\223x\006\371\017\276\277\225\202Z\305mT\335\277\265b\334C\214\202\347?J>\357I\027u\367?R\256R5\333\035\356\277\t\010\t!_\353\374\2771\n\317,\010&\332\277\264j\272\234\310i\360?,\201\214F;\024\372\277\3768\344\220\034 \001@\0015\252e\314%\337\2773onm\305\310\335\277\311\002]\303\353\221\325?\377`\304p\364\243\360?I\004\2225B\252\314\277s\212\321*\206c\322?f\352P\253&T\344?[\225p+Z\232\363\277\"\217\247\226=w\340?;\260\214\243-\261\345?i\223x\006\371\017\276\277u\177ts\2435\343\277\245\317Y\335\205\014\364?\214d\232D\301\'\263\277\366\300C\361\224\224\362\277\371\275\205Xu_\353?\357\340(f\232>\274\277Z\353m\342\317\035\320?cb\222\357&\344\343\277i\223x\006\371\017\276\277\346\"%\2312\002\357?\261\240\352\315\360\311\000\300}8\327\374\203\310\373\277&\211j\237w\373\342\277\325\235\275\202.\357\321? \034\206\022Z\231\302?\365,\244S\345T\323\277\221\354\026\267\317\216\361\2771\n\317,\010&\332\277:\232V\307Jg\253\277\240\035\273\204\260\261\331\277\270S|\0036l\322\277\213-8\374\257\221\332?\301*\336G<\032\366\277\316\001@\214B\310\351?\264\r\262\211\253\270\231\277\203$\025\263\037\367\342?Gx\216\247\335H\364\277/\374\213#[\331\300\277\361\232f\3352\222\356\277\364)\346\272\305\037\374\277J9\317\211\372\302\365\277\013Y\346\027\270\274\347?6\227\255\250$H\354?\371\357F]\377K\377?\000\220\t&Pd\317\277(\261\251\332\326z\321?\212\027\027\232\306]\370?\224\240Y\200\223o\350\277/\374\213#[\331\300\277\036$\214$Aj\316?4d;\020\034\035\003@\366\225F\035\026\340\334\277\\[\321\315\223\306\366?XE\260k\252\222\344\277#a+d\030|\304\277\256!\276\r$\232\337\277\3571\304\023\002\007\345\277\331\234\240K\205%\346?\336\273}\003\333\033\274?\000\215\237A\2433\261?K,\321p\241)\353\277\261V\336\302\035y\270?\206\335\271\205\361\222\315\277\200\3119\205~\312\266\277\260I\375H\203\031\356?$z\313$\250\366\354?\227\310\230\273\362\356\326?M\273PN4\267\370\277\357\340(f\232>\274\277\351\221C\224\242\367\326\277\025\201%S\027<\306?+\\\311Z\n\301\360?\\\277S\327\247\237\376\277\233\"\333D\315c\353\277\361\232f\3352\222\356\277^I\263\364\035{\352\277/\377\365\007\010\n\257\277\264j\272\234\310i\360?\355\345\304\223\324\336\311?\361C\342\354wR\361?\3457\001\013\310\202\342?\262X\234\303R\036\344\277 \034\206\022Z\231\302?\363\271\202\317\001w\345?\"\021)[wk\343?\353\327\201\212\'\222\320?;\342M\250\267\235\371?\353\254\204\266\250\335\372?P\300p\016Qi\372?Xh\317\346\354_\341?\214d\232D\301\'\263\277\033\305\327\307e\327\000@\006\027\352\344\037\371\264\277\321\206\177\351\233\361\363\277\223\031\270\373<\311\323\277\260\307\017\371qE\205?bH\226\275t\261\336\277\222\326H\332\363\351j?\004\213\247\034B\251\373?,\201\214F;\024\372\277\316\305>\007\177w\362\277f\236\223t\3524\373?\376Jd\324\221\201\315?\037n\315\2439\355\275?F\277\354\343\203\307\312?\367\206\244\223\316\300\365?g\363s\364\266\356\333?\301{\273>\225\353\340?\332\354\242T&6\307\277&\007\351\332=\007\340\277\226\262wY\t\273\364?\343E\310\246W\341\277\277\312r\300\256\257:\374?\256!\276\r$\232\337\277\216\036\330\273Y{\345\277V@\220\253\215\340\322\277P\300p\016Qi\372?v\361\245)\217\346\n\300pf\225x\232\314\351\277\320\362\337K\354\261\324\277\331\234\240K\205%\346?\251\307{\204I%\353?\353\270\321;\2038\000\300Z\321q\260\035\353\352?:\232V\307Jg\253\277\250^\331\272\030\232\341?\320\362\337K\354\261\324\277s\212\321*\206c\322?u\375\362\256iA\340\277\343B^\302\252\260\301?\0021\247\334X=\331\277\305W\177\214\251T\330\277\230\304\2252\177\006\321?\342\241\300\013\242\327\327?\203\230\02443\260\313?\270S|\0036l\322\277\377\361h\016m[\206\277u\3724\026J\014\371?rx\263Q\020\030\366?\302f\337\314\377j\355?\357\340(f\232>\274\277\373@$TX\035\332?q\0073/\243\245\343?.\336J\037D\265\363?3onm\305\310\335\277\004w\345\322\335\327\322?\r\314\007\234\233\232\325\277>\366\014\343\243T\361\277\314\014\235C%\366\310?)\223\252\037\261_\346?\3745\307\234u\357\352\277\345\250\201-5\365\364?\343E\310\246W\341\277\277Q\271\257\354\275K\335?\354\353C\324\213c\371?J\245/\354J\203\326\277s3u\363u\r\310?3onm\305\310\335\277\032\373\007\371\2157\361\277\277\\\237L\306\006\352\277\366\300C\361\224\224\362\277\314\014\235C%\366\310?\216\234V\367\037\207\342\277\335\366\342\324_\232\332\277b\335R\222\315\272\371?E\267M\305\300\316\362\277>d\317l\361\221\374?\036$\214$Aj\316?\255?\275\310I\265\352\277\376Jd\324\221\201\315?\301\375<\003\317\337\343?v\350\026=\324\300\354\277c\r\021\313\341%\002@\363\271\202\317\001w\345?\303\266\341\325\240{\316\277u\177ts\2435\343\277\272\255|C\037\330\364?\0015\252e\314%\337\277/\377\365\007\010\n\257\277x\375\263t\360R\317?\206MG\313\356\275\010\300\367\352&\235\342\231\375\277zR\323.6\373\360?)\300Kd\036\232\370\277\215\231\230^\000R\373?\265b\334C\214\202\347?\256!\276\r$\232\337\277 \034\206\022Z\231\302?\335\316aP\017\022\372?>\236n\312\267e\371\277\227\252\231\000\315\323\353?&\211j\237w\373\342\277\tr\305\022\301%\341?\006\027\352\344\037\371\264\277\317\213\237\251\270\243\365?W\324/I= \362\277\364\305c\261\261F\364?\340\342 \213\373\310\361\277\260I\375H\203\031\356?\241M\330\030L\030\361?\253L\273\341\242N\365\277\212i6r\373\307\300?s\212\321*\206c\322?\006\334\204\023\233z\326?M/\356dHZ\001@\247;\272?\326\314\344\277/\374\213#[\331\300\277_\027\362\357\223\216\366\277\376\326dS~\310\344?(\025,\344\352S\351?!p\213\244n\222\351\277~)5s<\251\324?:\232V\307Jg\253\277\236,\033\305\006\310\356?:\232V\307Jg\253\277d\t.c|J\272?\376\326dS~\310\344?\210~W<\372k\327\277\343B^\302\252\260\301?K,\321p\241)\353\277iX\0235t\221\337?\212\246\226wY\353\345?\331\234\240K\205%\346?\314\014\235C%\366\310?\032\356\t\3404\236\346\277\2461\331\032$d\000\300`:S\264\307d\305\277\260\307\017\371qE\205?\313\004\376$b\375\360\277\306\336 \021\000\373\354\277bH\226\275t\261\336\277\346\207\003\024i\223\303\277\346\"%\2312\002\357?\335!\340\250\336N\360\277\252\213z\377\205\324\363\277\2140\366\224\317\306\361?x\266U8J\324\370\277\\\277S\327\247\237\376\277\343\226cT\277\251\350\2778\205\217\317\256\374\377\277\020&\010\334\204\006\370?\251\307{\204I%\353?\253\220\232\277\242\206\365?\376G\345u\353:\367?\003\270Ha\257\343\355\277`:S\264\307d\305\277Y\357pkC\006\326?\022\262J\244bV\261\277\241\016\031\373h\222\362?\345d\242O5\275\364\277u.\331\305;m\272\277T\023\357f \246\360\277\020\364F\327\372\031\344?4\304N\355\221\202\376\277\032l\210\033\373\251\343\277\326\222`\313K\301\342\277\240\030\372\037\033\373\006\300M\315n\'\252\002\345?\\\277S\327\247\237\376\277\260I\375H\203\031\356?\"C\352_\001X\367?,\030\352|\n\211\360\277cb\222\357&\344\343\277\275k\377\214\034\035\337?\223\3616w\354@\363?\2468\374\246\266\227\375?u.\331\305;m\272\277\346\207\003\024i\223\303\277\222\266\346\205\247.\001@\241\016\031\373h\222\362?\203\230\02443\260\313?\256\340Z\177R\216\344?\206\335\271\205\361\222\315\277\342\241\300\013\242\327\327?\317QB\225\343\330\312\277\216\234V\367\037\207\342\277\0021\247\334X=\331\277\371\275\205Xu_\353?\264\301>\215\203\251\355\277\3571\304\023\002\007\345\277\254\270\033D\363\016\326\277\302f\337\314\377j\355?Z\353m\342\317\035\320?\251\307{\204I%\353?c\340\020+\355\357\340\277\371\275\205Xu_\353?\275k\377\214\034\035\337?4\304N\355\221\202\376\277\377`\304p\364\243\360?\340\342 \213\373\310\361\277\001O\246\227~X\344\277>\236n\312\267e\371\277\000\215\237A\2433\261?Z\353m\342\317\035\320?\221\354\026\267\317\216\361\277\205\270U\365G;\003\300\310\006`L_z\333?\321\206\177\351\233\361\363\277\355<!\313\3444\324?\376\010&X\010\265\370?\311\002]\303\353\221\325?\"\021)[wk\343?\255?\275\310I\265\352\277I\004\2225B\252\314\277\205\215\267|P\202\354?\256\340Z\177R\216\344?\326\222`\313K\301\342\277r4\324s\020\340\365\277\326\010\001\256\325\345\366\277\366\300C\361\224\224\362\277\377\361h\016m[\206\277\233\"\333D\315c\353\277\3163\001\221\314\264\375?\332\354\242T&6\307\277+S:nO\233\002\300\307\177\276\307\010\324\346?\365,\244S\345T\323\277\350Bs\0101s\222\277\332\354\242T&6\307\277\254\270\033D\363\016\326\277\177\222\327<m4\336?SO\360\353\343\366\347?\361C\342\354wR\361?\020\364F\327\372\031\344?\300\332\035\210\214\022\347\277\265&\333\276\3101\360\2778\032L\244\007\006\333?\314\014\235C%\366\310?\376\326dS~\310\344?\030kk\344Q\340\327\277u\177ts\2435\343\277g\363s\364\266\356\333?\334\215@\013/\017\321\277\357\340(f\232>\274\277\032l\210\033\373\251\343\277\0021\247\334X=\331\277b\335R\222\315\272\371?W\30710\344\206\347\277:\232V\307Jg\253\277)\223\252\037\261_\346?1\n\317,\010&\332\277\034\026I\033\224\035\325?\020&\010\334\204\006\370?\373@$TX\035\332?J\303.\247p\236\341\277\303\266\341\325\240{\316\277\362;\004\224;k\350?MK\355bp\016\342?&\211j\237w\373\342\277\252\213z\377\205\324\363\277\034\026I\033\224\035\325?\314`\242\3259\357\357\277\343\226cT\277\251\350\277\274\250\\\203\002&\363\277\301\375<\003\317\337\343?\023\340\207\234\016c\334?\334\215@\013/\017\321\277*\374L\351\341\352\357?\341\336\261^]U\005\300m\262R\257\326\353\362\277?\246L#\364L\342\277\234\303x\373\325<\345?\206\335\271\205\361\222\315\277\026v\310\2334\016\347?\340\342 \213\373\310\361\277Y\357pkC\006\326?\251\307{\204I%\353?8\205\217\317\256\374\377\277\355\345\304\223\324\336\311?\363\271\202\317\001w\345?{?\357\341\001\005\263?\317QB\225\343\330\312\277,\177\353\344\304\250\336?\224\240Y\200\223o\350\277\306H\335\002b5\361?\301{\273>\225\353\340?\226\262wY\t\273\364?\333e\277\206\336\206\360?\240\035\273\204\260\261\331\277\\[\321\315\223\306\366?\037{\350[Q\300\330?\010\336%u\021\346\361\277\2461\331\032$d\000\300\314\014\235C%\366\310?\233\"\333D\315c\353\277\"\202\251}\344\335\365?4.\013\337\363\274\342?WB\362\322\212]\375?\222x\032E4\360\311\277\320\357!\263\314|\375\277\016S\251 \362@\352\277\261V\336\302\035y\270?x\016\364P6\303\360\277\362m\305\230\305W\374?XE\260k\252\222\344\277\215x\005\377\255-\231?\377?\007\035\257S\356?&\007\351\332=\007\340\277\022V\306\024\231q\000@}\023\024\021Su\362?i\223x\006\371\017\276\277\003\270Ha\257\343\355\277\274\026\037\rPc\376?\r\265\237B\211\304\256?\247;\272?\326\314\344\277\274\250\\\203\002&\363\277\373@$TX\035\332?\333&\000i\373\000\362?Z\321q\260\035\353\352?\030\306\312\244\325\036\310\277\301{\273>\225\353\340?\030P\000\002\314!\253?\376\326dS~\310\344?\200\3119\205~\312\266\277\355<!\313\3444\324?\212:\327\271\201/\006\300\216\234V\367\037\207\342\277?\246L#\364L\342\277\023\340\207\234\016c\334?\306H\335\002b5\361?\345\250\201-5\365\364?U\237\362\364\204\007\311\277\"\217\247\226=w\340?\322 \035D\230\276\277?r\216\324\263\371K\330?\371\275\205Xu_\353?g\363s\364\266\356\333?\177\222\327<m4\336?8\034\355\005~q\366\277.\336J\037D\265\363?AP\r#\215\300\323??\246L#\364L\342\277\346\240\243\324\370\r\354?F5\267\206\215\304\247\277\007\347\264a\314\013\000@SO\360\353\343\366\347?\202\203w\374\026\036\351\277T\201\261\360m\343\373?>d\317l\361\221\374?\006\"\005S\021\036\362?,\177\353\344\304\250\336?\034\026I\033\224\035\325?\233\316\325\262\270j\304?)\223\252\037\261_\346?7!\r\306\232#\370?\215\231\230^\000R\373?K,\321p\241)\353\277\2453\334\346\231\345\373\277I\004\2225B\252\314\277\226\327:E:\016\376\277\034\026I\033\224\035\325?\311\002]\303\353\221\325?F5\267\206\215\304\247\277\032\356\t\3404\236\346\277;\260\214\243-\261\345?A\365\255b\t\202\303?u\177ts\2435\343\277;!\"@\2249\240?i\344\023\264`\330\346\277\1776\3240\016G\000\300\r\265\237B\211\304\256?\224\240Y\200\223o\350\277\260I\375H\203\031\356?,\030\352|\n\211\360\277\305W\177\214\251T\330\277Z\0033\265\247\327\376?k\205\261ji\261\340?\031gh[\336\367\321\277\"\217\247\226=w\340?\303\266\341\325\240{\316\277\216+\326\324\262\024\360\2771\003\016\013u\010\375\277\005\206\207\\%\367\371\277\203\230\02443\260\313?\334\215@\013/\017\321\277\367T\343\216D\324\341?{\001\3667\335)\346\277\033\320\n%\017\203\333\277\362;\004\224;k\350?WB\362\322\212]\375?l\356S4\232<\352?\361\232f\3352\222\356\277\\[\321\315\223\306\366?\336\273}\003\333\033\274?q\0073/\243\245\343?\361\232f\3352\222\356\277u\375\362\256iA\340\277\203\230\02443\260\313?\226n\230{\t\203\364\277ZS\363tW\337\355?!p\213\244n\222\351\2771\237\213\001a/\365?\000\220\t&Pd\317\277\336\273}\003\333\033\274?\303\266\341\325\240{\316\277\243r\233\004}k\372\277%\305k$;L\372?\304/\376\007Y\314\367?A\365\255b\t\202\303?\335\366\342\324_\232\332\277\237\264\030\273\177&\320\277\361\232f\3352\222\356\277\314`\242\3259\357\357\277d\3134\271Wo\355\277\226n\230{\t\203\364\277H\346P1+\206\377?i_\324V\007\257\374?\203\230\02443\260\313?o\244\216\"\277\247\266?\212\246\226wY\353\345?E\267M\305\300\316\362\277\">\312\237\344\245\365\277W\324/I= \362\277\">\312\237\344\245\365\277\203\230\02443\260\313?+\\\311Z\n\301\360?\254\270\033D\363\016\326\277)\223\252\037\261_\346?J9\317\211\372\302\365\277\351\221C\224\242\367\326\277W\324/I= \362\277~=\367\274\240z\375?\302f\337\314\377j\355?\357\016\004\364F5\007\300\366\225F\035\026\340\334\277\254\270\033D\363\016\326\277\346\207\003\024i\223\303\277\014+j\345\222\301\313\277i\223x\006\371\017\276\277\344\024\342\217\205\265\345\277\277\\\237L\306\006\352\277\020\364F\327\372\031\344?}8\327\374\203\310\373\277\344\024\342\217\205\265\345\277\212i6r\373\307\300?u.\331\305;m\272\277i\223x\006\371\017\276\277\371\275\205Xu_\353?fl\322o`H\347?l\325\263s\n\302\301\277|\343\366|\267\016\333\277\256!\276\r$\232\337\277\235\023{\004wM\306\277\262X\234\303R\036\344\277\352\030\345\030\371\235\353\277F5\267\206\215\304\247\277\010\336%u\021\346\361\277%\004+B\036\322\370?\0021\247\334X=\331\277\236,\033\305\006\310\356?>\236n\312\267e\371\277\"\217\247\226=w\340?\256\340Z\177R\216\344?\237\264\030\273\177&\320\277\320\362\337K\354\261\324\277\022V\306\024\231q\000@zR\323.6\373\360?\301\353\036*Y\224\367\277J>\357I\027u\367?\307\177\276\307\010\324\346?I\004\2225B\252\314\277XE\260k\252\222\344\277\265b\334C\214\202\347?\353\254\204\266\250\335\372?+\\\311Z\n\301\360?\376Jd\324\221\201\315?\342\241\300\013\242\327\327?<\031/m^<\357?XE\260k\252\222\344\277\366\225F\035\026\340\334\277\314\230\235\302\021=\340?\336\273}\003\333\033\274?;\342M\250\267\235\371?\033\320\n%\017\203\333\277~)5s<\251\324?\221(\030<\223\337\350?\257g\374\003\2514\331?\334\215@\013/\017\321\277\332\032\037\207K1\343?\033\320\n%\017\203\333\277\200\3119\205~\312\266\277\235\023{\004wM\306\277Z\353m\342\317\035\320?\377`\304p\364\243\360?\023\340\207\234\016c\334?\211\005\371\300P\022\354\277\r\314\007\234\233\232\325\277 \034\206\022Z\231\302?\213-8\374\257\221\332?\265x\255/\340Ao\277\333&\000i\373\000\362?\213-8\374\257\221\332?m\262R\257\326\353\362\277\212i6r\373\307\300?Q\320\027F\320!\244\277?\246L#\364L\342\277\312r\300\256\257:\374?\321\206\177\351\233\361\363\277\334\215@\013/\017\321\277\203$\025\263\037\367\342?\362h\245\330\250\245\372\277M\273PN4\267\370\277\300\332\035\210\214\022\347\277\032l\210\033\373\251\343\277\2140\366\224\317\306\361?\0015\252e\314%\337\2771\n\317,\010&\332\277\255?\275\310I\265\352\277\030kk\344Q\340\327\277\010L\350\376^#\375?g\363s\364\266\356\333?\021]\351\240+\245\355?\216\234V\367\037\207\342\277_\034\022\260\260@\370?\251\256\333\303\271\252\302\277\206\335\271\205\361\222\315\277\216+\326\324\262\024\360\277\365\'\343\356O\236\000\300\022\262J\244bV\261\2773\215m(\353\343\350\277\001\312f:%/\372?A\264\217,\241\231\353?\271\347\033\241\345\253\361\277\314`\242\3259\357\357\277\243r\233\004}k\372\277/\206\301\200Q\334\243?\255?\275\310I\265\352\277\021]\351\240+\245\355?\320\312^\307\233)\364?u\365\024V-Z\367\277l \0259$)\376?\352\030\345\030\371\235\353\277\212i6r\373\307\300?\364\004#\317\224\314\362?\334\215@\013/\017\321\277\247\3129\035iZ\362\277Y\357pkC\006\326?\321\364As\351.\377?\000\215\237A\2433\261?\351\221C\224\242\367\326\277\033\320\n%\017\203\333\277\340\342 \213\373\310\361\277\332\032\037\207K1\343?-\024{Pl\025\004\300\206\335\271\205\361\222\315\277\372{\211%\335\233\270\277\332\354\242T&6\307\277u\365\024V-Z\367\277\261\240\352\315\360\311\000\300V\335\2765\370E\000@J>\357I\027u\367?\314\014\235C%\366\310?~)5s<\251\324?ns\223\221\363e\364\277f\231s\264\315\202\371\277\016S\251 \362@\352\277\032i\312\202\333t\374?\206MG\313\356\275\010\300\216+\326\324\262\024\360\277\243r\233\004}k\372\277\307\177\276\307\010\324\346?\363\271\202\317\001w\345?\335\316aP\017\022\372?*\274\3347\200&\014\300\376\326dS~\310\344?\247;\272?\326\314\344\277\314\230\235\302\021=\340?Q\320\027F\320!\244\277\212\246\226wY\353\345?\013\333g\334\361\260\352?\261V\336\302\035y\270?A\365\255b\t\202\303?1\n\317,\010&\332\277\357\340(f\232>\274\277\377\361h\016m[\206\277\020\364F\327\372\031\344?,\177\353\344\304\250\336?!p\213\244n\222\351\277\216\036\330\273Y{\345\277s3u\363u\r\310?zzT\263\206\203\321\277\031gh[\336\367\321\277l\325\263s\n\302\301\277OW\316D \336\360?\203\230\02443\260\313?\274\026\037\rPc\376?\362;\004\224;k\350?\331\234\240K\205%\346?\334\215@\013/\017\321\277)\300Kd\036\232\370\277&\211j\237w\373\342\277g\3661\215\326#\363?/\374\213#[\331\300\277\251\256\333\303\271\252\302\277\260c\371z5L\323?I\004\2225B\252\314\277\261\224\235H\026o\373?s3u\363u\r\310?\037n\315\2439\355\275?\366\212\023\300l4\002@\321\206\177\351\233\361\363\277\203V\326\267\251\343\366?\330\373\002\225|L\354\277q\0073/\243\245\343?\330y\201\320BX\351\277\022\262J\244bV\261\277u.\331\305;m\272\277\241M\330\030L\030\361?>\236n\312\267e\371\277\216+\326\324\262\024\360\277A2\016hg\245\350?\377\361h\016m[\206\277>\243\216\212\324\027\373?>(\316\347-A\345\277\301\375<\003\317\337\343?cb\222\357&\344\343\277\346\240\243\324\370\r\354?Gx\216\247\335H\364\277\364)\346\272\305\037\374\277\004w\345\322\335\327\322?u.\331\305;m\272\277\346\313AM\360\306\002\300:\232V\307Jg\253\277\023\340\207\234\016c\334?\025?\347\326\215o\361?\3457\001\013\310\202\342?\223\031\270\373<\311\323\277iX\0235t\221\337?\336}\204Y\266@\357\277&\007\351\332=\007\340\277}\023\024\021Su\362?"
      }
    }
  }
}
node {
  name: "tensors/component_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 750
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 750
          }
        }
        tensor_content: "\264a\346\360\244\346\336?\357=\210\020{k\356\277\265\324\2248/\247\370\277\026\255\233F\247\370\344\277V\035u\267\355\256\313\277tIQ\037\326M\343\277\362\264q\024\253\206\207\277]\\\312\257J1\342\277\352\363\252\263\346\221\344\277\022\030\303kB\n\266\277\221\236\016\001B>\340?\3775\240\237\257K\002\300\264\177\340\216^\201\001@f\354\337\255\227\026\362\277~\273@%u\303\302\277\215\225W\232\352\210\344?M\237\340\367\211~\361\277\274p\271\327\375\316\341?\245\202\220\224.\305\367?V\333\2247E6\351\277(b\341.\201\362\364\277qU\033\376-\223\320?\376\301\221\036\225\312\317?\007\325\017\322eu\367\277\275QA_z\362\000\300R\024\002\311p\306\372?V)\243\253\2663\335\277o\271\032\270C\036\366\277\013b\313\260\350\350\322\277M\261\003*J_\006@)7\370\33514\361?\034\231\024kR\216\221?yj\344\215\347b\005@]$fj\005\020\270?\244\23634\307Q\333?A\372$P\252g\337\2772\243\314\255\036\247\272\277V\270\334\334\261\031\377?\337\301\212d\266\230\320?\232\357-%\323=\361\277\212!\233\301\214<\366?\320*=\234\331\240\354\277q\321\322\r(\010\346\277rXZ\266\201\341\336?CZ\331f\350P\342\277\221\375\227\t8p\343\277\367\200Q\314\340\006\346?!$\327\242\262\355\360\277j4\2324\250\360\010@U\352\321\366\215\330\360\277\302O$\372\374\356\342\277H\305\233\274\024#\271?A\214M\356\336\244\344\277\276\255+N\245M\331?\355\3564\002\3078\362\277\353g\211?\331X\261\277\035\343Ox\326$\366?|\326\235\037\314\226\323\277\233`e\020\366)\t@\203[}\032\372#\340?\326\222\370\214p\376\351\277w\361\365\023\206\371\335?&\004\260pX\354\376?`i5\2267\214\324\277\201(zoJ\331\351\277\2216\033;\215_\353\277\332\315\343\2761{\342\277\246e\231\226\231+\351\277l/\215\367\207\n\371?P\023\006E\347=\002\3005\'o\266(^\326\277n\310\226(\032\311\350?4\236(\345\3753\275\277\326\010\277\221\350k\262\277\247\366\321\353B\233\347\277|\315\305O/\227\352\277\251QX\265\014\027\305?\360V\002\230\351\010\352\277\251\014=\2501\033\375?\017\223\327\036Y\265\372?\355\234\255\003\000^\335\277\276\252\325)y\310\340\277\2321$\006Ui\363?\240Q\244\204\004\277\322\277\203\343\2205\2767\362?\330\356\246\362\203!\303\277y\366\2755\213\037\352?\350\336\273[YD\344?\223(o!\353<\234\277\3655\260\350s\305\264?\240\322\365_\262\223\342\277\235d\275\311G,\353?\232\021l\262\207\222\354?&\273j)\353\230\361\277\212\306Ns0z\300?@\323\231\":c\366\277\354\306>\n\202\360\323\277]\307\201\254\t\350\346\277k\274\211\235\226\216\324\277\356\313\026|\304\324\316?\026\030SCf\257\351\277\214\350\"`\314|\001\300\326$\305\374\242\007\351\277\231\226\227|\255\307\326\277\310fG*Y\273\367\277\251\240?\0061\253\345?\363\027\002\301\300\017\350?:\322!kY\243\374?\230i\307\275\327\346\321\277p\2600C\033\254\342?4\243=2\373\t\326\277\010D\004\211\276\233\351?\227\350\006]\216\252\016@\2259\204\036\021\251\362?}5\361h\242O\264\277\342\267=\315\327A\317?%\277L\300\201X\343\277\343n\323`\327c\377\277\235\276\325\177\2548\n@\225\267\034\037\006\313\230?\337\023\341\331}I\266\277\223\333\200w\351\274\327?#`H6B\260\341\277U`;\203\264\341\321\277p\363\351\237v\273\301\277J\362\317{\306a\220\277!t\265\331\201*\325?q@\025:\310\016\346?\036\002\323\300\3560\352?\005\024}q\035\221\357\277m+0\337\247\324\350\277\rk\3403\037\334\210\277YdW\324\010\007\362?+\001\322m(\245\276?\220l_\264\216\000\345\277\302G\316\237]\026\360?\360\225kK\320\005\360\277\203E\236y\341\010\331?\243\002\246\307\007\364\327\277\276Q\232\244V\002\362\277\373\374\273\t\261\200:?\204Z\022P%\340\332\277^F\341\021\305\002\310?\323\363T\270\021\250\263\277D\025\211.\305K\001@Vm\355V^#\227?Lk\334i\302w\304\277\220lRE#\335\275\277U\272\362l8\332\345?\333\365B+v6\003@+\323\274S`;\330?#\370\346]\257~\325?\377\370\227\010q\313\353\277\273\312D\377\316a\306\277I\2750K\353\307\347\277\r\274k.\224\252\334\277\203:Ib\313\032\324\277\251\\\306\314\231\234\326\277\001\232FS9s\275\277\225_-}`\207\306?L,R\016F\204\332?\241\010\013\267\263\226\366\277=\311\024\371L\206\251?\217K\275\351\201\244\341?@\225\322B\227S\371\277\305\311\233\036\275\311\373\2775$\013\202\347\345\207?f}\262\230\201\222\260?y\020_\017\3643\360\277\354\020\370\r2\027\357\277\367\255\246\tmq\354\277\231\305\236s\237_\266\277\005\006ts:\211\311?\322F\371\304\301\260\013@\020\003Y\222kF\267\277Dj\343\335\307\226\240\277\036\343\206\201E\316\331\277\345\333\367\274\220\333\002@v\007Z3U\236\346\277%s\205\324i\320\350?\244<&\360\243\200\364?`=&\376\354\332\360\277\006B\202;\250<\327\277\222\306\3771:\302\356\277\265\255w\035\235\365\306\277G\247\237\037\032\215\376?\203\356\2675\323\013\314?\320\210W\257\331\303\361?\217\203?8\277\327\362\2774V0\241\241\310\370?v\020\267\201\250\'\301\277\334\304\225s\350u\301\277t\206\021\013\305\254\370?VJ\327c\345<\351?\246,\026eD<\341\277q\257\305xFh\335\277\356\220E\221\345\025\220\277\232uY\307\021\253\347\277\313\372c|\021Z\n@\235\005k\312\300\243\373?\355o\323G\275i\325?\203} \310\036<\372?n\342)I\310\211\346\277I\325Vt]X\350\277\272F\216\374\352\203\324\277\\\016\3068FG\301\277\020\363\342\234L\016\344\277Rn\233\251\374\254\307\277\342\003\317\371\317P\327\277\316\355\223\034\303x\361?\340%\211\023\315\237\373?\216\252\224g\277\266\362\277 \313 \234F\261\323\277\345\324\003\022\352\322\361\277?\004r\347\210\276\300\277o\3518\363&%\354\277|\224B\036\332\247\342\277\240Q\244\204\004\277\322\277_=F\\3\241\363\277\301:\243\264M\364\311\277oX{\037\307+\354?\021\347/*\315\377\340\277\212\276\031\301&\230\341\277F\032\363C\241\235\314\277l\274\250\360\335\320\354\277\323\343\336\302\362o\340\277\321\036\212)Z\222\351\277\314\247\005^\244-\306\277\303\032\357\034\316]\350?A^\022e4\200\312\277l\364)\365\313\323\314?^`\357\263\2749\304?\005(\320\307\2629\341\277B\237\017\013\275N\355\277xH\322Z\'\343\307?\230t\227V7K\305?U\360\350p\362\232\361?\'\242\202\316\356T\345\277\034\216\366\211J\036\371?B^\215\346}\366\330\277z\224\220\223!\210\360\277\177\353\007\371\242Z\322\277\244<&\360\243\200\364?_&\001\270\222\006\347?\3607\032/a9\367?!1\226\310\336\347\r@^\323a+\213\214\372?\001\344\002\311\347\251\314?H\315\263\257u#\342\277\237b\316\305S\202\240?\020\203\307\223\371p\347\277\366\376\331\2517?\366?n\037}l(\306\345\277\261\275\236\024\325p\364?\225\323\023\261q\255\372?\000\270\276||\003\361?Xt\374\000\275\276\234?\250\035T\'E\020\370?\337\252/_<K\364\277\247j*\257/\250\361?\\y\301\255\337\312\360?\n@h+@\336\235\277\247\020\340\215:\322\343\277\337\023\341\331}I\266\277(\331\276w\352\316\323\277\014\216\013p\320\367f\277n%^\'m\017\304\277\304\002\016\266\205\312\343\277\226|\030V\331-\277\277\010m\021\305\364R\276?\t\325\301\\\036\225\351\277;\263\"\226\370\234\357\277\363\035\343{\005Y\326\277 \025b\220\253q\264?\276A\3406]\375\323?}\213\034\331\365\307\373\277\026\177`\275\374\323\312\277\374\350\221;.\356\344\277\225\0255\nW\016\253?\2156\005\233c\000\365?\027\332k\005}\331\351\277\241\366\216?\027\246\340\277|\022F}zV\361?&FO\352$\250\312?\005E\376\316\266|\323\277\177D\260FTC\347\277\306\031D\226l\215\335\277\273@}\325Vl\277?\3336\301\373%\337\363\277\201\207\020\347\253.\304?/2%\363\020#\356?\013o\322\201d\004\321\277 \341EL\274\003\274?\204g\031!\241\373\330\277S\334h\016[\\\357\277L\362\355\311\007oV?Y\354T\216\363g\304\277\337r\177\371\375\375\367?\376k2\242\323\243L\277\357\35043\213Y\302\277f\303U\233\3114\323\277\364b\017#mC\336?6l\233]\220H\336?o\332,4\005\301\004@\210\035&\2644\363\263?~\372\020\220N\356\355?\3660\233\233v\357\333?z\210\375~\350?\360\277Q\2411\217\001\337\253?\324\376\315\351\273\234\360?\226\307`>\362\236\367?z\002\304#\357~\361\277\204>\206\034e\212\361\277h\347;\345v\243\364\277\027\006RM\0235\362?\331\225ap\364G\361?5U/\276\211\014\342\277\373\010\251\236\317\223\371\277\000\242\261\304b\316\356?\265\014\016\225\376J\341?\275\200[\217\317l\324?z\023g\276\330\330\332?5\322D)\355\241\265\277O\212o\37738\243\277\302\026{Y\305D\327?U\200\'n\362Q\250\277\336\372\376\222\001\004\277?\205\376\226\007\260G\363\277U!\261\'8\356\307?E\264\247\373\224,\367\277\344\234\201\303\254\237\340?\255A\332V\037,\321?\0319\353\020\006\370\351?-\273Vna\036\322?Mw)\261\322>\356\277\352Mb\235j\212\330?ob\023\314\237*\265?\r\342\"F\236\334\330?\227*\302\340\021}\331?\030H\215\360\276]\360\277-\025\001\351y\363\336\277\n\307&q\031\340\352\277;\263\"\226\370\234\357\277\355wcJi\320\250\277\352&M*\3677\336?\232\336N\272-v\304\277D0H`f\276\353\277L\351z\250\362b\364\277\252\260\253\376\342\317\325\277\230\215\277\254\020\310\355\277\rk\3403\037\334\210\277]\\\312\257J1\342\277#\277\2325\3118\361\277k\023\353b\356\001\320\277\350\357\204e%Y\361?\202\2167G21\365?}\363F\250\031P\344\277\354\324\315\032\363\361\004\300\214\323>\330\323^\344?#\025\025e\263\301\347?\320\364\017\217\2606\335?\004\207\"\3079\302\360\277\337\244\356!f\036\014\300i\324\357\202\225\253\332\277&\020\252\315\260\327\240?&\006+!Op\344\277\353\306\303\2108z\305\277\347\363\313\034,\334\321\277b6\214\003\214m\357\277\307-\266?Ix\347\277\233D\247q\245\n\361\277\374\345\025\250\037\256\350\277\017\234uF\351&\243?\2664\377\305\366\316\357\277\326wV\320\357-\355\277\276\266\003\036BM\342?\264QD9\323H\354?\316\273_QY\261\364?O\367\334t\212f\312?c&\340NM\274\331?\3752\220\001\010\022\334\277\275\275\327\002\344\376\356\277\256\273\267\246NN\363\277\276>\0279\006a\364?\014\216\013p\320\367f\277;w\370\242\271w\005\300\337\252/_<K\364\277\314\222\207\212\363B\301?74l\2127f\321?\254\310\360z\234\242\356\277T\275\315\017\033\351\337?\004\371\361 u\367\334?\006\216\372g)\264\322?]\323\257\240\322l\350?\220\236\223\177\370\307\341\277}5\361h\242O\264\277\335x\341I\014\274\251?\254\217\350\312\220)\345?|=\\\332\313\252\345?\3575`\315\334\254\346?\201\224\027\270\'J\302?\037\314\270\n_\372\007\300A\240z\325\221\222\322?\315\350}\205vr\347? \373S\356\263:\270?\216\350-0a\254\344\2776\003\270V\244%\000@d\324\242\331\374\242\320?\177\304\331\205\270p\273?|\224B\036\332\247\342\277\307\003\010\304\246C\003@_\024\205@\366\025\361?\2605\020x\307\346\343\277\215-d\3245\252\357\277\032\321\177;\006\263\272?9\201\0057g\014\335?\272\321\230,\007N\361\277R\356\001\003lx\360\2773\370C\245\242\277\376\277\352\363\252\263\346\221\344\277H\373\027\211\324\235\347\277\'\205\204H\317\301\233?\277,ML\"\220\360\277\264a\346\360\244\346\336?\374\226}\026\222*\307\277\304\210\013A\303\035\337\277\360[f\244}\357\341\277\311\273r\001\344\247\351\277\307\"\227\347R\003\345\277\210\003\030\022=\274\267?\201\003Mu\\-\353\277\270^\364\341\351\240\332\277\322/\316\264o\035\365?\0342\205>B\231\324\277\200\261\312=\342\026\346?\337<\356\025\264\000\353\277\363\377O\350g\233\230\277\331\304\220mK\005\333\277\031!X\037\005E\363\277\334\351\217\270\366\'\000@\000\227i\034\270\003\301?N\2724?\303n\340\277\023\326\223,\003\201\344?\357>*\344\276X\367\277\273\265\306+\036w\301?\214\332\215>\277\206\357?\026_\022Q\354\204\322\277u\242\007&B\212\360?5\nj\377\330p\317\277i{\353\006\342\216\317\277\320\205R\341\306\271\336\277\001\326\177\223\n\\\371?\206\342\355V{\306\356?\336.4\327g\t\324\277?\352cE\221\207\304\277\307\360b\034\351;\350\277\276VE\n\227P\314?h\242\nw\302\364\274\277\352Zin\346\245\326?TV5\304\375\217\301\277\307-\266?Ix\347\277\331\003\033\311\307\370\264\277\367{b\356\305\353\260\2772\243T\236\323@\340?))\346\304r\270\007@x\213\213\267\202\362\346\277\314\232\376\214(\022\310\277oLM+\376\246\352\277\254;q\253%I\315\277\014\236dJ\335\320\355?\307gH\rqw\356?\357w@M\205%\331\277_&\001\270\222\006\347?\0130H&\350\020\307?I`\233L\206\260\245\277\010\353%|\3559\302\277\251QX\265\014\027\305?#*\314i\2025\263?\027\241\350\323\'\352\341\277|\001\342\223\036\005\343\277L\336\310\030\213\020\350?\224\324h\032m>\360\277\252\346<\342,\315\362\277\212\262!\214}\214\342?\342\3245\025\274\013\357\277\261h_p\0172\245\277\342\346\240\362\313\r\345\277\231\214\002B\323\330\321?\257O\253@\224\006\371?\226TS\347\223\017\320?\3702l\250#_\355\277R>\312\330a\002\325\277a\347\030\227\221t\360\277H\255W\212\252\200\361?\204\276\377d\257\370\305\277\201g\265\0130\274\344\277\206\000Qi4\324\343\277\237/)\335D\314\322?\272\233\320?N\247\360?O,\266#\267\303\356?f#\356?\222v\325\277n\310\226(\032\311\350?\035\000\370\266\324\255\265?\267I\231\013\035a\265\277\356\3064\r\025\335\320?\373\231\322G\311\036\214\2776\226\247\345[Q\303?\334a\037\272>\025\241\277Z\331U\226Z\314\315\277\362\370@>\t\000\223\277\371_\023\027E\352\326?\006\027\271H\237D\346\277M\262\272\312\217\217\305\277\323\004j\342\326\350\362\277|\240p\022\243,\344?\334~\023\0316\312\362\277R>\312\330a\002\325\277\t\311<\001\240\240\361\277\253\335{\275\270\260\332\277i\'X\006.|\343?\225\216\271\362\010\251\307\277t5$8#`\305\277e\2717&\353{\367\277X\021=\306\267\026\327\277\023t\246F&v\360\277\314f\006c\315\252\367?\354\336\232\362\023\372\326?\0356t\203\224(\344\277B\326\247\342\272\374\341\277\020\211;/U\370\201?6~\320{\200\321\321\277\371\014\253\223\254\031\356\2775\035\006\265(\351\001@\211\301\214\244\373\376\257?\235&[\n\025\340\354\277H\305\233\274\024#\271?\270\013\205J\n\341\003@\276\'\322\224e\306\327?g\376i\336\356Z\360?\253\244\370\213c\301\322\277{\222\210\274U\033\362\277_oz\'\235h\360\277\177\021\026xb\374\364\277F\223\300\255\256\177\336\277\261*\267-<\244\010@\232\032\311\000\333\033\327\277%d\226\212h\016\357?k\002\2758\262)\364?\'\350\343\200\013\n\320?1\270J\201\317\221\257\277\253L\220\322W\235\377\277\0222\304\350V]\003@\373}\332>o7\340\277\224\360\364M-\224\331\277I`\233L\206\260\245\277\256VN-c\003\323\277Q\306A\312F\251\324??Q\"\000\221\233\346\277\317\375l\335\003\300\347\277>\016\356!\354\025\331?I\357d\026U\217\344\277D\367?\260ZE\342?\014)\230X\305 ^\277uU\355%}%\314\277\322 r\242\3378\345\277><\241\272\341\240\315\277y\261\014\020m\253\340\277A{\027\034\204m\321\277\02254\241\321\351\321?#s\305\220\366\\\356?\325\227\\\231\004\345\341\277\205\004\256\201\024\n\364?\277\031\001\352@\230\326\277\032\317\207rCN\340?\227\'l\274\345\367\340\277\005\366\026~\222\350\342?\223Z\302\323\254\305\361\277\236_(\305\340\220\360?\363(\263\024e\275\311?\367J$\277\267\234\306?0y_\202\340n\325?\214\032/\336,\351\377?d\324\242\331\374\242\320?\225l4N\334\242\304?X\205\225\211\244#\361\277\353\013>\245\347D\373?F\324\254\271\252_\361?\310x\215\342\3252\313\277\253r\247\001Q\030\240\277\rZ0\323o\277\312\277>]\325r\020\252\351\277\333\025\372\013\206\370\335\277V\035u\267\355\256\313\277\001\366\274e\216\274\321\277\367\225\014\220\341\304\232?\364\363Qu\203\306\337\277\237\n\207b\222\223|\277\357\361\315\223\316\006\273?\006={\314)\332\022@\034\234-\237.@\312\277p\217\374\212\354\242\326\2775Df\264\275\367\364\277\276`n\3061M\274\277%\346\316\373\203\315\363?\345\301\331\353uA\005@\335\314\351x9\232\330?\246nqf6+\322\277OVS\273D\312\252\2778_\347\007\371}\364?\236\026`\226?\036\270?\317K{Qu\275\333\277|\377\371\032\231^\347\277luE\021Z/\352?\276[\356\330T4\320?\212\216\366\276\366\314\313\277\210]{3\251)\362\277Y\221u\010&\310\344?\211\356\263\210R\231\360\277\\\001\277g\312+\303\277\236\300\360\255\021\331\305\277Q\325M\323\360L\244?\2626\271\350*\257\311?\323*j\250\3336\375?\3215j\255\212i\367\277\311\205\224\263QN\311\277\r\"\013\375\203\360\260\277W\235\255\371[`\351\277\220^\362\337\212e\361\277\177O\317\236J\270\351\277w\013\035\266\364\307\266\277%:M/6\235\t@\020b\327S\2454\366?\343d\273\374\224\237\324\277\264L\2574l\255\361?mq[\322\244\020\321\277\310#\353EO\020\340\2773\260\311\201-\257\305\277\356\364\347\245\nh\305\277T\210C \205\234\352\277\275\274\007\326jA\240\277N\2724?\303n\340\277(\r:\313\255\013\352\2777D\223\300\277\215\345?\035\255\336\362\322\355\353\277?W\321\272\347\265\253?W\235\255\371[`\351\277\301\313m\367\030\021\341?(\307\257\310\334\000\344\277atsAuC\357\277\257\203\347\342\311:\364?\3752\220\001\010\022\334\277v\243\361\234\201\017\355\277\024\n\202Y\361\324\361?H\255W\212\252\200\361?k\267tP\231\270\273\277\202\224\205\312\005\235\351\277n\346\354\313g\263\266\277\316\202\023)sk\320\277\227\256\375a\254\344\334\277\177\225\177\020\376}\303\277\n\013j\353\220u\327\277\243\264\227S\226\366\343\277J\220I =\260\310\277\352\336\244\357\200\r\332\277\276\371\274z\235\\\301\277q@\025:\310\016\346?atsAuC\357\277fD\"\370\300\177\341?|\241I\357U\303\340\277\305E\363\324\223?\322?A\240z\325\221\222\322?\206\003\"\017\252\317\312?\016\366B\276\345\246\337\277\025\271N\271&\007\350\277|\224B\036\332\247\342\277g\277{\254Q\324\330?\235\005k\312\300\243\373?\270\302\\x\275/\324\277\330\370\356K\356\237\003@\277\200D#\3675\352\277RA \375\215\207\355?\261\203\024\357\313\320\324?\017\223\327\036Y\265\372?\215q\366\rDP\273\277\365\033\242F|\216\270?\237\036\377\233\365\010\245\277&~u\236p&\226?\347\263\374e\275_\326\277\220WY\360(|\332\277\303\310_v\350#\314\277\t\311<\001\240\240\361\277\261\346\314\370\240\036\355?\310y\370\254\252v\340\277,\373Nu\204\360\350\277\351\3110\031=6\330?}(\321\227\257\234\331?Sx\241h\263\376\327\277\275C\203\355\270\246\303?\332x\365C\346\342\277?mi\222\236\332 \347?\007\232\036_\205%\261?\202[\002\231\260\255\341\277\351\341\007\203\030\266\271?d.MT\025x\335\277l\272\356\216YD\374\277\207T6\233}\007\343\277\013\270\367j\213\221\353\277\261\310\305\024\352D\316?z\336\334\316B\214\345\277\320*=\234\331\240\354\277p\202\365\271p\207\330\277J\362\317{\306a\220\277\315\205\356\313Uz\352\277\217W\336n\337\005\314\277\266S\025F\200\270\335\277}\300\254\331\'\t\362\277\313R\320\211\254-\361?#`H6B\260\341\277\347U&\313\227\t\354?^\307\374-S^\345?U\374\322\354\340R\330\277/\021[\"\237\241\360\277\241\010\013\267\263\226\366\277atsAuC\357\277\326\323\033\242\333\207\340\277;\263\"\226\370\234\357\277\325`\304\301\0067\355\277x\357\363MV\201\340\277\310#\353EO\020\340\277\254\nL|\216\221\337\277\207\260\206>\360\225\263?p\321 \203o\350\363\277\004\343\314p\377\244\264\277m]d\252\021\234\345\2772\243\314\255\036\247\272\277\361N\254=J0\367?\353g\211?\331X\261\277\202u\366\246Y\335\007@w\302\031*U\374\006@\204\301\320\n%\364\354?\034\327o\371T\200\342\277\211\337\304>Q\327\366\277%\346\316\373\203\315\363?\312\304$b\236\354\356?\232]a\265\2404\362\277w\007\325\264\236\024\345?\0202\345\007\024h\250\277\246\227\315a\003\363\345\277\226\252\212\r\267\033\031@\233\255H\336\335\000\357\277"
      }
    }
  }
}
node {
  name: "tensors/component_3"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 750
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 750
          }
        }
        tensor_content: "\211\347~\035\020\251\364\277\357\252\034\301\030\342\352?\313s\255\302\271\\\351\277\273\255\272X\375\241\357?6U\010x{l\344?\274\244\177gs \330\277\267\320j\177\266\253\360\277#\250~)4\"\346?\'P\300\t\301\000\341\277\252#\325\250\345f\354\277\221vKZ\236\034\356\2772\356Y\375\305\022\271\277\240\257\211\355\207\020\376\277\032\376\030[b\234\365?\030y{\031\005\315\365?\310$6\034Z\267\361?\257\206\316\335CD\331\277rfs}>\274\313\277:\256\272\241\225\260\373\277<N\361t6\222\362?\n\373\364\332\354\327\347?\003\023^d1+\333?\242op1P\244\275?\n\252M\276\276\220\364\277O\r\236\257X\336\254\277#\367\365\317\223\307\375\277$7W\356K\220\345?\243h\035T\024h\332\277\266\017!e\370\217\267?\213\230\373\356&\t\367?8\332\245\271\330;\344?T>2\027\232\010\266\277\230U\305L\313\370\003\300X4\271Vg\320\340?<N\361t6\222\362?\363\3416f\275.\345\277\363\3416f\275.\345\277fH/]\334\r\340?\014\361\271W29\350?\360m\361n\244\325\001\3008D\266\361{\363\362?\211\023^\255\3119\367?y\004\3173\3134\336\2778D\266\361{\363\362?\247\323i\370\336\236\302?\037-\034k\221\361\345?k\216_\212(7\312\277\363\362\210\354\274\247\366\277\341\235\201\343\361\034\274\277Z*~\323\2541\341?8\332\245\271\330;\344?,\274\364/\251_\345?rfs}>\274\313\277\023\026F\n\260\215\267\277\212,\273@\265\257\334\277\316\274\305\225\204\350\257\277\211b\325S)\337\356\277!\215\361\037z\n\365?\300z\304\305\3766\373\277l\346\035\252\233X\337\277X\212S\210\225J\360?\257\206\316\335CD\331\277\021]v\311,\324\251\277\341\235\201\343\361\034\274\277\236\224\374\343\315\370\354\277\3667\rr\342\n\266?`\271V\230\304\237\340?\227\266\254xV\345\365?#\317j\244\355\177\314?Wo\272\366Q8\371\277S\005\266F8{\360?\376zJ\256\217;\344\277\304\270\365m\350]\327\277B\335\3119N\000\362?\305F\316\240\317\256\356?\254\350\323\010\373\376\363?\230\347\337\376S\334\301?\003\023^d1+\333?Il\242\376en\361?k9\202\371\3453\202\277\227\266\254xV\345\365?\217\2426r\341\247\366?8\332\245\271\330;\344?\252c6\307\235/\364?\023\026F\n\260\215\267\277r\333_\225\242B\225\277\3168\254\"\317\364\360?\366f\324\247\032\376\344\2772\004a[M%\361\277\324\307\204\347\346b\360?\237^\342\320Y\311\332\277\277\344\324\375\241\356\351\277\352\326\373P\322r\335?u\372\223\260\020\226\336\277\302\377a\007\\\006\373\277\244\324]\002\206\301\364?{\266K\227\022\262\310\277#\022\217a\327\331\364?\321\326\246\367\027:\326\277b>\364\331!o\340?\301\032\373\230\237\030\362?\035h\035\013|Y\376\277C\002\222\306\302\266\342?5f\036$\204\203\264\277X\245\340\221Ob\341?\010%\260|a\301\364\277Vo\300\272\2265\004\300X\212S\210\225J\360?\371C0\t\353\356\351?D\037C\276\301u\311?\372\201gu\031\023\001\300\330\321\277j\241\001\360?\2547K\257Z\244\353\277\3660\272\224\246\316\322\277f\022\t\302\336\343\367\277\376zJ\256\217;\344\2775f\036$\204\203\264\277{\266K\227\022\262\310\277k9\202\371\3453\202\277\230\347\337\376S\334\301?\212}b]\343\366\377\277(\260\321\230\240{\261?\'\0011SNf\375\2774_C\3735\013\344?\314\002\206\207\321\312\350\277\336 7\021\001\247\347\277\206\266\366=Xy\261\277vM\377\026\251\265\240\277\357\252\034\301\030\342\352?N\251\323\024\037x\325?\303\237\230\332\374\347\361?)mq\001\300\277\327?#F\205\206\006b\341\277x\r\"5h\253\321?V CP\362\222\341?v\227\007\345\177\346\304?\274*;\250\374\275\000\300\301\313k\342,~\356?\016\340g\3212\300\366?\341\302\205J]5\336?(\260\321\230\240{\261?\r\305\324\0034\253\n\300\324\026\374\215F\010\350\277\301\313k\342,~\356?\375\213\242\370\323\261\000\300\267\320^\367,\261\352\2778\2239 e\223\360\277\2672X\232Zq\357?%|\223\021\361\226\375\277\304\270\365m\350]\327\277\260\362\016\214\265\235\363?\247\323i\370\336\236\302?\024;Jq\033\246\331?\265\374I\017p<\363?\347%\177\177\273\022\353?\350\207\345\213\266\000\263?_\357p\2538\317\322?\014\361\271W29\350?\325\244\324\300-Y\337?\037-\034k\221\361\345?\267\201\347P\315\013\363?\217\361\271\240\312G\364\277\025\224\010#\277\344\346?\014\217\300\264\004y\343\277\372\322\010\316\002]\351?\322B\347\245\211\223\360?\n\252M\276\276\220\364\277\211b\325S)\337\356\277\363\3416f\275.\345\277\211b\325S)\337\356\277\212,\273@\265\257\334\277\010\347~\324w\232\350?\377D0\233\033\014\322\277\332\314\300\315\027\324\335?\353/\272\002v\261\352?\263\220\ta\376\342\330\277\373:\365\027am\322\277A*\021j\337\003\316\277h\227\246\003<\263\367\2776U\010x{l\344?F\263\016\230\331\026\325?\\\257\033\025\n\001\341?\211\023^\255\3119\367?d\303\221\033\177>\340?\2424\'/\345\337\375\277~\311\301\013W\322\357\277\246Y\373C\343\220\364?\300M\251\311\035\'\277\277*\325]K\036\320\340\277\307jr\321/\333\301\277\312.q\237\024V\361?\322\221^L\3518\350\277\257\206\316\335CD\331\277<\344\340<\223\332\343?)\360\352T\330\347\361\277\223\254q\365\233F\366?\023\200\222\034J\247\347?\320n\272\255\271)\355?E|\342\r\303\023\000\300\3301\211\227\000 \371\277<\235t\243\0372\360\277rfs}>\274\313\277s\242\325\220\235t\311\277\031\236C\246y\203\346?t!\230;\335\350\320?\250-\020,\240\005\354\277|5\016BR&\320?\230\347\337\376S\334\301?\301ir?\377\275\351\277\371C0\t\353\356\351?\322\221^L\3518\350\277.\320j6\036\235\344?O\r\236\257X\336\254\277\357\376\347]\274\355\333?#F\205\206\006b\341\277Y\364W8\257\007\371\277\227\253}\353\364#\304?\252c6\307\235/\364?T>2\027\232\010\266\277\246Y\373C\343\220\364?M3\271\3046\263\310??\370VC\010\030\343?}o\033\330\225k\306?\322\242\260\322\350\261\371\277\236\344\235\021\343f\003\300:\311S3\331\302\362?%\227,\2434\251\364?\004l\034\026\325i\350?\267\320j\177\266\253\360\277.A\222q\006/\345?\304\270\365m\350]\327\277\253mqJX\316\363?\372\201a\261\324\025\366\277>\"\022\345|\001\360\2778D\266\361{\363\362?,\274\364/\251_\345?<3X\343\362\177\373\277\246\250~r\3140\362\277\234\017k*\372#\363\277\340\245\324R^v\347\277#a\022\220\300y\362\277h\334\342&\341\271\337\277F\263\016\230\331\026\325?s\242\325\220\235t\311\277\270 \000%B\037\001\300#\026\355\336\344uh?\377D0\233\033\014\322\277\024wW+\300%\320\277\365w&.\032w\366\277\027\212\315\237\004F\347?\310$6\034Z\267\361?t\265W\215k\217\366\277\207\3357\022\314\017\357\2776U\010x{l\344?\277U\3748\212\200\352\277\253|\223Z\211\245\331\277]\376\222\273i\246\370\277\362\243\005\276\323\007\371?\035\031\246d\034\264\346?\222@1G*\355\333\277\014/\353\377\033`\364\277M\014\315I}U\342?\016\024^\366aH\343\277\021]v\311,\324\251\277\363R^\241\245\300\345\277\363\264WD\323\200\352?VP,\177\275\330\251?\326\233\231\317\243\327\347\277Q\026\374D\256\371\373?\374W\246\017`,\351?\333\354@\354\321\036\373?\037<J\003L\303\341\277\327_\371~\314\205\264?O\r\236\257X\336\254\277<N\361t6\222\362?2\351\323Q\223\r\340\277\362\352qWG\260\334?\000q\017+\325\234\344\277\266B\206\304E`\303\277\275_CD\316\031\360\277\'\262\271\254\356\300\345?\263\375&\375\324\277\243\277\'\034\312\344\221x\364?\000b\341\222\032\313\350?G}\364\204e\347\342?%\227,\2434\251\364?\014\361\271W29\350?4_C\3735\013\344?\016\024^\366aH\343\277,Z\373\214{\237\340\277\030\310\376G\356l\363\277\2672X\232Zq\357?\000\000\350\357\354\n\344\277\362&\177\021\354/\323\277\207b\341\333\262\331\364\277\326V\374\312\272\235\302\277\217\361\255\030AM\356\2776U\010x{l\344?\332x\3650t\310\354?\223\373\364#\205\346\363\277\331\352\034\376\214w\325\277\273\255\272X\375\241\357?O\r\236\257X\336\254\277\346\010\316\207\274S\324\277\325\244\324\300-Y\337?\225\200\206\335X\273\355\277\n\223\010\221\216\307\316?\031\255q>4U\342\277\2251\0177\371\025\366?\325\341\215\203\331,h\277M\326\246\256\177+\372\277$7W\356K\220\345?q\3416\035% \371?:\311S3\331\302\362?\177\031c9l@\006\300\017\0050^\247v\347?\177\006Z\320(F\202?\332\314\300\315\027\324\335?\2166\366\303oN\334\277\326\375\222r\321\227\354?\223\373\364#\205\346\363\277\366\255@A\216\246\370?\023\026F\n\260\215\267\277\353\315\300_H\361\345\277\037W\327\014\006\333\362\277y\365\254#\232]\370?!\301\347D\251\222\341\277\332\007\316\365\2136\354?\024;Jq\033\246\331??\370VC\010\030\343?\'\262\271\254\356\300\345?\363\362\210\354\274\247\366\277\260A\2062\025C\353\277#\026\355\336\344uh?\214\3367\244\374,\307\277\364(\243\3770\327\370?\353/\272\002v\261\352?\260\362\016\214\265\235\363?\314d\177*\377\212\355?\300M\251\311\035\'\277\277K\207/\010 \206\342?&\241g&\357G\364?\037<J\003L\303\341\277\000b\341\222\032\313\350?9i~~\360\251\343?\323\275Id,\304\360?\014\361\271W29\350?\017\0050^\247v\347?\025\2436\273y\266\342\277\275\020\300\025\345y\362?\030y{\031\005\315\365?\016\340g\3212\300\366?\n\373\364\332\354\327\347?B\335\3119N\000\362?c\371\253.\363m\322?1\201\347\0075\375\326?\231;J\272\263\264\365?\345\0322\205^\240\010\300O\373z\303}\334\360?n\203\221\336\n\251\305?\376\213\2344\217\264\365\277\362&\177\021\354/\323\277\004l\034\026\325i\350?\314d\177*\377\212\355?\337\366{o\214\275\372?\265K\315=Y\334\360\277B\335\3119N\000\362?U\352\034\265\364h\371\277W\017\361\311\362\031\360?N\307\204\236NT\324?\231;J\272\263\264\365?\032\273\364\235xB\315?\3667\rr\342\n\266?\024;Jq\033\246\331?\232T\247M\237*\333\277s\242\325\220\235t\311\277\366f\324\247\032\376\344\277\3344\006\037U\275\014\300\365\327\373\342\002\220\345\277\224\221\330cX4\377\277Dbg{\253\317\361?c\371\253.\363m\322?\331\256\017D\350\367\336?\013\'\324j\246h\332?\363\264WD\323\200\352?n\203\221\336\n\251\305?\035\031\246d\034\264\346?\362\352qWG\260\334?\324\207#\311.\232\350\277G}\364\204e\347\342?[\3455(~0\323?\326L\")D2\360?\205X\232\320n@\357\277\275_CD\316\031\360\277\257\206\316\335CD\331\277\3579\365\2050P\352?\027(\324\374\326\205\342\2778\026\233cj\306\316\277\032\273\364\235xB\315?\327_\371~\314\205\264?T>2\027\232\010\266\277\230 \267\354\264\237\t\300\201\030E:@r\335\277\031\255q>4U\342\277~\311\301\013W\322\357\277h\334\342&\341\271\337\277\344\324\327b\215\313\367\277Mv\335\201 \r\361?Il\242\376en\361?\253mqJX\316\363?\037\313\"\310c1\341\277\244#\3410oa\362\277\310\370J\004\027,\351\277\273\255\272X\375\241\357?\035\203\266\234\277k\365?\301ir?\377\275\351\277)mq\001\300\277\327?(\260\321\230\240{\261?\263w\254\315\022m\363?\'P\300\t\301\000\341\277C\3026lO\353\005\300I>\207pTA\315\277\231;J\272\263\264\365?\377<\031\006\246\024\370?\325\341\215\203\331,h\277\377D0\233\033\014\322\2774\211\376\234\252\364\360\2772\351\323Q\223\r\340\277T\013\315\267L8\312?\031\017k\341a\025\347?\323\275Id,\304\360?C\343\340\252b\275\313?t!\230;\335\350\320?.\320j6\036\235\344?\263\220\ta\376\342\330\277\263w\254\315\022m\363?\362\352qWG\260\334?\014[\312\217\325\360\366?\226Jl\312\344\213\333\277\037-\034k\221\361\345?\300\256\272\352-\277\327\277\270\232D\344\270\201\330\277\250\370\023\030X\244\002\300\343\000\267\362F\\\372?\273@\265\3149\272\240?\301\313k\342,~\356?\224\277HK$\232\272?\037\313\"\310c1\341\277#\250~)4\"\346?v\"\033\315\033`\233?mG/\313\253\360\307?\242O\300\300(\362\364?\014[\312\217\325\360\366?#a\022\220\300y\362\277CX,\370\3600\362?\374W\246\017`,\351?\3660\272\224\246\316\322\277\316\274\305\225\204\350\257\2771:{n\301T\363?\335\270J\307\242\226\336?N\307\204\236NT\324?\227\005$\037\266\212\355\277/0@\353\006\266\363?\202\323\374\216\021q\357\277\227\0050\247?\205\363\277\371\305\370h\330n\216?<\344\340<\223\332\343?CX,\370\3600\362?\244#\3410oa\362\277#\026\355\336\344uh?\016vW\231\217\010\350?\325\3474X\016\025\271?s\242\325\220\235t\311\277$c6~\005!\330?<N\361t6\222\362?\377<\031\006\246\024\370?\374W\246\017`,\351?\035\031\246d\034\264\346?\207\277\363\361ia\303?\254\350\323\010\373\376\363?Q\026\010\3157\364\341?\000v\225\326\007\242\275\277g\003\347\261\255\014\322?\200\377\347\246T\374\367?\363\3416f\275.\345\277\031\236C\246y\203\346?*\306/\263c\376\344?\013@1\376\221\336\377\277\273@\265\3149\272\240?\314d\177*\377\212\355?7)#$}\336\006\300Z*~\323\2541\341?N\307\204\236NT\324?\037<J\003L\303\341\277\357\252\034\301\030\342\352?\031\017k\341a\025\347?X4\271Vg\320\340?\271U\010\301\023{\360\277\304\270\365m\350]\327\277,Z\373\214{\237\340\277 Y\373\372J\202\330?\376zJ\256\217;\344\2772\232D\233 s\374\277.A\222q\006/\345?s\242\325\220\235t\311\277\277U\3748\212\200\352\277\341\226\246\272\243\244\353?\000b\341\222\032\313\350?\300\256\272\352-\277\327\277\257\206\316\335CD\331\277\362\305m\360\333\227\272\277\361\276\222\307\215\037\352?#\317j\244\355\177\314?\360\036h|v8\371?\274\244\177gs \330\277\207\3357\022\314\017\357\277\341\235\201\343\361\034\274\277vM\377\026\251\265\240\277\362&\177\021\354/\323\277O\221j\213\332$\342?\240\312\"\177\313\"\365?\0229&\203\326\376\363\277\010\347~\324w\232\350?sf\324^\202\357\370?\016\024^\366aH\343\2778\026\233cj\306\316\277\275\365&\204\241g\373\277mG/\313\253\360\307?\003\023^d1+\333?h\227\246\003<\263\367\277\317~\350\327\244\030\301\277\204\227\\>:\037\274?\345\240\341=^C\353?\275_7\274D\037\352\277g\003\347\261\255\014\322?\334\214k7\351\005\354?\031^\342\207\301\272\376\277+u\210\2265\267\361\277x\r\"5h\253\321?\332x\3650t\310\354?\232T\247M\237*\333\277f\022\t\302\336\343\367\277|\010d\366\006\243\017\300`\271J\020;\245\372?\263\306/\374\373\014\361\2772\351\323Q\223\r\340\277\313s\255\302\271\\\351\277|5\016BR&\320?\0041\017\356`\007\332?\334;\304\032\273\276\370\277\355;\257a\372V\233\277\336 7\021\001\247\347\277\027\212\315\237\004F\347?\236\224\374\343\315\370\354\277\010Q\217\014\033R\367?M3\271\3046\263\310?\223\373\364#\205\346\363\277QR\375v\311~\314\277\376zJ\256\217;\344\277\356\350S-G\006\002\300\275\3010_r\337\356?#\250~)4\"\346?\245\032\232\267[\345\304\277|5\016BR&\320?\373:\365\027am\322\277;\323\216\266\223a\362?\037W\327\014\006\333\362\277\233\312\301\235\207\357\307\277mG/\313\253\360\307?\3660\272\224\246\316\322\277\177Nk\325=\234\365\277\320\035\023\221\213\342\371\277\000b\341\222\032\313\350?\025\224\010#\277\344\346?\037-\034k\221\361\345?\004l\034\026\325i\350?\305F\316\240\317\256\356?\223\373\350\233\373\353\355\277\320\035\023\221\213\342\371\277\310\3020\361\242\374\326\277\331\256\017D\350\367\336?\031\255q>4U\342\277\326V\374\312\272\235\302\277\n\373\364\332\354\327\347?\324\026\374\215F\010\350\277\217\2426r\341\247\366?\353\336\022\346Gj\367\277d\303\221\033\177>\340?fH/]\334\r\340?\327\342\005i\027\200\373?#\317j\244\355\177\314?#a\022\220\300y\362\2776U\010x{l\344?\236E\205=nS\365?\202\204\205\350\261\313\367?\350\207\345\213\266\000\263?\305\325\246e\347\034\356?\357\376\347]\274\355\333?t\265W\215k\217\366\277\204\227\\>:\037\274?\331\256\017D\350\367\336?1\265\335,d\205\363?M\014\315I}U\342?\227\253}\353\364#\304?\325\340\341z\322\330\325\2771\201\347\0075\375\326?<\344\340<\223\332\343?\366\364\254\332\001O\334?N\251\323\024\037x\325?.\320j6\036\235\344?\327_\371~\314\205\264?\207\216\300klj\367?mG/\313\253\360\307?\307jr\321/\333\301\277\004l\034\026\325i\350?rfs}>\274\313\277][\245\321 .\307?\002\366\254l2l\344\277\351\271JY\323\263\346\277\007Y\246\241\220I\321\277\177\006Z\320(F\202?R0w\327\305=\n\300.A\222q\006/\345?,\274\364/\251_\345?x+\323\276\227\207\320?\340\245\324R^v\347\277#\022\217a\327\331\364?d\303\205\223\365C\372?)\273\342\270\006\214\002\300\305\325\246e\347\034\356?\366f\324\247\032\376\344\277\022\247~\227\003\005\316?\362\305m\360\333\227\272\277\326\014\301\n\214i\350\277\307ZD\247D\354\355?\301\313k\342,~\356?\301\313k\342,~\356?rfs}>\274\313\277\355;\257a\372V\233\277O\r\236\257X\336\254\277\301\032\373\230\237\030\362?H\002%]\365\210\317\277\010\347~\324w\232\350?\201\323\010\027\233k\365\277p\027]\270\"J\321?#\022\217a\327\331\364?C\343\340\252b\275\313?\273\332\231z\347O\352\277\035\031\246d\034\264\346?\363\362\210\354\274\247\366\277\341\302\205J]5\336?-\253\242\251\251\346\363?\032\273\364\235xB\315?\037<J\003L\303\341\277k\216_\212(7\312\2778\332\245\271\330;\344?6\016\234\336\007\304\360\277N\251\323\024\037x\325?\357\252\034\301\030\342\352?\365\327\373\342\002\220\345\277\007Y\246\241\220I\321\277X4\271Vg\320\340?\304\204\377H\271\325\372\277.\320j6\036\235\344?\344\021\tyF\325\353?vM\377\026\251\265\240\277\035\031\246d\034\264\346?\215\002\000\237@\306\377\277U\352\034\265\364h\371\277\227\253}\353\364#\304?\201\030E:@r\335\277M\326\246\256\177+\372\277\234\300\347\373\020\204\365?\333\354@\354\321\036\373?\253mqJX\316\363?k9\202\371\3453\202\277\3301\211\227\000 \371\277\031\236C\246y\203\346?\311\356\017\201\\\215\351\277mG/\313\253\360\307?|5\016BR&\320?\363R^\241\245\300\345\277{\017(\266\261\241\006\300y\365\254#\232]\370?\250\336\230\205@`\364?\314d\177*\377\212\355?\273<\223\035\025\020\357?x+\323\276\227\207\320?\232T\247M\237*\333\277\035\267\254\301\356\363\341\277vM\377\026\251\265\240\277\3414\255\027v\344\346\277\037\010T\336\034;\365?\305\232\231=s\272\337?v\227\007\345\177\346\304?:\030\327a\302b\360\277\310$6\034Z\267\361?M\014\315I}U\342?.\337\230\316\330n\340\277\027(\324\374\326\205\342\277\310\3020\361\242\374\326\277\365\327\373\342\002\220\345\2773\367V\261\327\372\312?\034O\300w\220\343\330?\312\023\336\321\025A\005\300V CP\362\222\341?Cs\271\001\253H\343?\253H\2355Z\035\375\277K\207/\010 \206\342?\211\023^\255\3119\367?}\311\315\223\340\314\365\277F\216\n1n\376\262\277O\r\236\257X\336\254\277\242op1P\244\275?k9\202\371\3453\202\277_\010\316>$E\370\277\273\255\272X\375\241\357?\'\0011SNf\375\277\222@1G*\355\333\277\257\206\316\335CD\331\277\264\274\350\360\267s\353\277\332\314\300\315\027\324\335?\217\361\271\240\312G\364\277}\224\305\367\016q\006\300%\227,\2434\251\364?\001\302\266G\003\344\367?\217\361\255\030AM\356\277\301\032\373\230\237\030\362?\301\313k\342,~\356?\031\236C\246y\203\346?\227\253}\353\364#\304?\010%\260|a\301\364\277\320n\272\255\271)\355?\300z\304\305\3766\373\277\363\3416f\275.\345\277\023\200\222\034J\247\347?\316\274\305\225\204\350\257\277\027\223\366\253\034\021\004\300*\306/\263c\376\344?\266\017!e\370\217\267?\232T\247M\237*\333\277/0@\353\006\266\363?\227\253}\353\364#\304?\300\017\314\013>W\300?\212,\273@\265\257\334\277\325\341\215\203\331,h\277\003\033{\275\353\037\000\300\027\212\315\237\004F\347?<\235t\243\0372\360\277\024o@\226J.\366?"
      }
    }
  }
}
node {
  name: "tensors/component_4"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 750
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 750
          }
        }
        tensor_content: "@\263b\312\330\246\273\277\262.;N\312\252\273\277\030\000\326\340\213{\272\277{\016B\014?z\273\277\350\030\271\316 v\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277}\037\201\301\370\210\273\277\352\263v/\273\250\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\252\373}.\235~\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\030\270\375\356}\031\267\277\262.;N\312\252\273\277\034\0314\211UH#@\262.;N\312\252\273\277\262.;N\312\252\273\277\034\005;48\250\273\277\262.;N\312\252\273\277\315Na\035\263\252\203?\334\324\274\3719;\273\277}{I\306\023\021\243\277\207\200\273\317D\262\264\277\262.;N\312\252\273\277\220\373i-*\034\266\277\262.;N\312\252\273\277\234\320\360\371v\347\273?\304\207\001\n:\035\260\277\262.;N\312\252\273\277\262.;N\312\252\273\277\220\373i-*\034\266\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277I\004p\310\226\215\273\277\221$%#\260&\272\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\274\223X\004\372\243\273\277x:\355;!u\273\277\370\206$\244B\246\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\3055`\237\305\246\273\277\262.;N\312\252\273\277\255&$/\ng\266\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277T\304\020\264\370?\216\277\262.;N\312\252\273\277\262.;N\312\252\273\277y\330\306J\n\025\273\277\262.;N\312\252\273\277\020_\315\302\243\243\273\277y\214\226\315]\351\032@\262.;N\312\252\273\277\262.;N\312\252\273\277\222`\277\364\327\212\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277b\247_\310\377\203\025?\262.;N\312\252\273\277a\220\006\223\023\244\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\001$\307$\312\245\264\277\262.;N\312\252\273\277\026g\231o5\247\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\\\217q\277\002\246\273\277\204N\246\253p%\272\277!\374\307+\020\235\273\277\262.;N\312\252\273\277f\301\254l\317\236\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\254\261\005\026\247\321\272\277\262.;N\312\252\273\277-\325\331),\221\265?\347\245S(P\007\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277i\241X\251}}\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\3301\373\241\'f\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277q\212^\024z\336\261\277\262.;N\312\252\273\277\352\023\231;\021\242\273\277\262.;N\312\252\273\277\036O\201&\252\360\264\277\262.;N\312\252\273\277\262.;N\312\252\273\277\267\337\014\205\377\177\266\277\003VlB\001\242\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277E\204\346\227>\250\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\030\307\273{\213\240\273\277\377\004Jp\236N\360?\262.;N\312\252\273\277\362\033e\350\242\245\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\'\372\032\301s0\242\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\246\210\315\3345\246\273\277-\020\201\233_M\272\277\262.;N\312\252\273\277\262.;N\312\252\273\277\341\241\274\000w\037\025@\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\301\230\365\332\364\230\266\277\262.;N\312\252\273\277\000s\343^\342 \240?\262.;N\312\252\273\277\262.;N\312\252\273\277\260\257~;ib\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277M\274\303J{\250\273\277\370#1\2254\251\273\277SZe\017~\251\273\277\262.;N\312\252\273\277\034\005;48\250\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277|\365\\lT\375\272\277\316:[I\237\246\273\277T\'\203\006\033\251\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\327%\2445\227\214\273\277\262.;N\312\252\273\277\262.;N\312\252\273\2772\276IL\216V\273\277\257\340\021\264t\222\273\277f^\271]\301\241\273\277\210^\225M\266\216\273\277\222\346\352*\240w\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277J\027O\2448\347\270\277\262.;N\312\252\273\277\3326\343\352P\233\273\277\262.;N\312\252\273\277\201y\001\310\336z\273\277\262.;N\312\252\273\277\216\350q\005\336\346\272\277\001\026xi\236\314\241\277\216\265\030\026Z)\262\277\342\241\242\246\360\233\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\352\263v/\273\250\273\277\262.;N\312\252\273\277\364{\322\237\217\010\273\277\\\357\223\313X\237\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\001m\275Q);\254\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\311\231\350\201\344\241\273\277\262.;N\312\252\273\277\205\307*b4\223\273\277Us\340\005\226\371\272\277\262.;N\312\252\273\277\236s(Q\263\225\273\277qI\002J\271\207\273\277:\307\342\026\027\367\272\277\262.;N\312\252\273\277\262.;N\312\252\273\277\237\260\0226O\237\273\277u\2413\300G\251\273\277\234\266\264;\277\246\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\221\332\223\276\017\236\273\2772\276IL\216V\273\277IAZ\2552\227\273\277\262.;N\312\252\273\277\231Z\264\245\302\036\254?\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277!\231\324\034\002\240\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\376\204\350t\233\240\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277;\204\331!\210\356\271\277x\tZ\303\025E\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277!\006\320\007I\246\273\277\207\344\300\203~{\273\277\352\263v/\273\250\273\277\3119\306u\216\250\273\277\262.;N\312\252\273\277\231?4j\274\237\272\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\030d\310l}\243\273\277\262.;N\312\252\273\277\271\202\265\220gy\270\277\262.;N\312\252\273\277\262.;N\312\252\273\277&\204\336l\277g\262\277\262.;N\312\252\273\277\316:[I\237\246\273\277\026c\032\r\364\016\257\277\262.;N\312\252\273\277\262.;N\312\252\273\277\275y\246F\030\212\273\277u\370\032\016\\6\273\277\262.;N\312\252\273\2771L\200\225\216\0350@\006\0377\304\205j\273\277\333h\337\302zL\270\277\342\241\242\246\360\233\273\277\244\273\257\345\230\246\273\277\272\226)\007\262\247\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\374\272\233\200\266\244\273\277\262.;N\312\252\273\277\r\004\313I]~\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\317\244\2051.\251\273\277zK,\361\332\203\273\277\364{\322\237\217\010\273\277\177\356\355H\355X\273\277\245w\331\322\022\001\273\277\360NG\361\005\246\273\277\006o\3478\031\362\272\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\332\246\031\273\212\373\266\277\262.;N\312\252\273\277\257\035\374\230\020\234\273\277\262.;N\312\252\273\277\006\215\264!-\244\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277B\260\221\307 \243\273\277Em\005\335\024\222\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\324\313#/\261\232\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\ta\t\362J\251\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277(\274\037\245lZ\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\323S\275\263>`\256\277\262.;N\312\252\273\277\262.;N\312\252\273\277\263\264f\204\222\227\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\030d\310l}\243\273\277\304!P\347S\224\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\267\035G}\017/\265\277\262.;N\312\252\273\277.\256Z\252H\355\271\277\262.;N\312\252\273\277p\206\354.U\221\273\277\277*\303\357{\237\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277M*G\314\204\034\264\277pL\007\210G\256\005@\262.;N\312\252\273\277\262.;N\312\252\273\277\365$\215\267\004\232\260\277\262.;N\312\252\273\277\023\351^\3174\222\273\277\370#1\2254\251\273\277F\302\235\232\321N\273\277\253YQ\252\233\247\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277E\204\346\227>\250\273\277\262.;N\312\252\273\277\245\253\354\211K%\300?\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277J\205{kO\246\273\277\2376>l\027\214\273\277\262.;N\312\252\273\2774\000\034zS\225\273\277u\351y\323-\247\362?\225~\327\210\202\246\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277AFg\337\221\240\273\277h\241:}\360\270t\277\3119\306u\216\250\273\277\262.;N\312\252\273\277;\204\331!\210\356\271\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\023\247\003Z\226{\306?\262.;N\312\252\273\277\262.;N\312\252\273\277I\307\205\343\372\203\273\277\345\370\014#\352Z\264\277\262.;N\312\252\273\277\035\322X+\325\247\273\277\267\205n\247\242i\254?\316\266LDB\374\271\277\210\247\326\236\342q\273\277\205\307*b4\223\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277L\037\267Y\211\245\273\277\301\353\324%\037/\273\277\205\307*b4\223\273\277\235\\\312\213\006\210\272\277\262.;N\312\252\273\277\010\253\232V\3531\272\277\262.;N\312\252\273\277\ta\t\362J\251\273\277\262.;N\312\252\273\277\352\263v/\273\250\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\204*\272\262it\270\277T\'\203\006\033\251\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\355J\341\032=\244\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277a-\023\204\005\247\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\211\263-\013sK\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\301\207;\233Dh\232?\264\244w\242~s\253\277CM\236\270\022\246\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\330\251\200\333\007\251\273\277\262.;N\312\252\273\277\262.;N\312\252\273\2776\252L\365\314\016\273\2774\252\001J6\245\273\277\004\266^\313T\242\002@\262.;N\312\252\273\277\262.;N\312\252\273\277\r\2521\267\376\365\256\277\271\207\204\215\346\322\272\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\351bJ3\301\376\271\277\336Sy\014\233\203\273\277\262.;N\312\252\273\277}\211\230\201?\352\265\277\262.;N\312\252\273\277+\250\223\002\327]\275?\262.;N\312\252\273\277\225\"\236Hr\267\272\277B\374?],n\270\277\262.;N\312\252\273\277\362\240\016\254\n_\273\277\013\373D\340\204\250\273\277P\271\216\020\264\244\257\277\262.;N\312\252\273\277\007\261\271f\3360\273\277\262.;N\312\252\273\277IAZ\2552\227\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\251\276\223I\001u\273\277\2605\252q1O\273\277 \243\371\366M!\213\277X\252\304&\351\337\267\277\3545O\360j^\273\277O\254\031i\322\227\273\277]\255\014I*\312\272\277H\274~\212\336O\272\277B\035\215\262g\251\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\241TV\000\302\247\273\277FQ\004\217\333\247\273\277\262.;N\312\252\273\277\301\230\365\332\364\230\266\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\273At\356:\223\010@\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\014\251\023|\255\302\272\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277(\355\262\035x\212\273\277\331\273\230\275\024\240\261\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277^\371\233\247\221\250\273\277\262.;N\312\252\273\277$\214vc\317\225\374?\253YQ\252\233\247\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277u\2413\300G\251\273\277\365\354\350\265\010\247\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\334\310e\215\251a\273\277\246%\332\315\'\251\273\277\262.;N\312\252\273\277-\361c\237\327\365\272\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\032\177\222\363\354\303\272\277\262.;N\312\252\273\277\205\212@}\230\211\273\277\330\253\317k_y\273\277\304\021\355\267\335\357\200?S\006\232o\270\211\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277>\002F!u\221\273\277w\361\253\352\364\221\273\277\224\002\277,mp0@\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277q\235\315\351~\247\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277l\314I\034\031\246\273\277X\213\013\3519\244\273\277\262.;N\312\252\273\277\2101prW\006\002@\262.;N\312\252\273\277\262.;N\312\252\273\277>\003\2264\3516\272\277\374Y\367\001\000x\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\247R\032\321\032\242\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\356\264\013\003\314\246\273\277\257Z\346}\254\245\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\032`w\323N\001\004@$\237\211\203\"r\273\277\225\033\344yt\251\273\277C\352\252\251\004\251\273\277\262.;N\312\252\273\277\325\360x\207\326\314\271\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\316\251\245\304=}\273\277\006P\312<\221\232\273\277\311\231\350\201\344\241\273\277\262.;N\312\252\273\277nu\255y\233\202\273\277|\234&\216\350\237\273\277\262.;N\312\252\273\277\350\030\271\316 v\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\266j\356k\234\352\272\277\376$\306hE\247\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\363\351O\3756B\273\277\264[{Q\275\243\273\277\303^:\314\357\235\273\277\262.;N\312\252\273\277 \314\266%e\240\273\277|\234&\216\350\237\273\277\262.;N\312\252\273\277Z\211\007\004y=\273\277h\230\322?\245\247\273\277\262.;N\312\252\273\277$\334sh\276{\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\2254\024\305\365\217\273\277\326\262>\217\306\035\273\277\262.;N\312\252\273\277T\207\245\022q\242\273\277\345Dd\376\002q\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\253\037\336=\346\213\334?\262.;N\312\252\273\277\262.;N\312\252\273\277\277\326/\323\004H\265\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277+N\273\223o\374\270\2777\324pJq\232\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277i_\237\307b\032\271\277\241Q`;\241\276\317?\262.;N\312\252\273\277\345Dd\376\002q\273\277\3119\306u\216\250\273\277t\035W\032\327\214\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\236 \337#N\251\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\357:79\224\223\273\277\262.;N\312\252\273\277E\266F.Au\273\277\377\004Jp\236N\360?\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\243\253u\321$\375\264\277\262.;N\312\252\273\277\262.;N\312\252\273\277\345\373\"\255\326\215\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\216\265\030\026Z)\262\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\225q\376\251\221\231\273\277\010\207\256]\344\200\270\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\345&\227\025\357\276\272\277[\314)E\262!\272\277dd[c1\251\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\307\237\212\207T\251\273\277\225q\376\251\221\231\273\277r\207Wj]\247\000@\2376>l\027\214\273\277\236\271\234\212\370:\207\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\n*WiLz\272\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277I\004p\310\226\215\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277K\357\245S\336\250\273\277q\317-\200\201t\273\277\262.;N\312\252\273\277Yg\2731Z\327\266\277\262.;N\312\252\273\277\262.;N\312\252\273\277\345B\025n\253\240\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\302\376\027\300\231\244\273\277SZe\017~\251\273\277\262.;N\312\252\273\277\264l\354\376\000\202\305?\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277i\301\305\270yz\271\277\036(s[\362\227\273\277\233\237\323\200\225\220\273\277q\014\030e\035~\273\277\220\373i-*\034\266\277 l\224\031\017\247\273\277\255&$/\ng\266\277\014\335\257z\277\276\264\277\262.;N\312\252\273\277\262.;N\312\252\273\277\ny\267\312k\\\273\277f\376\226Qk\250\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\262.;N\312\252\273\277\222\024\255\240\363\243\273\277[_`\271W\251\273\277\262.;N\312\252\273\277v.\226\317\220\233\273\277"
      }
    }
  }
}
node {
  name: "tensors/component_5"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 750
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 750
          }
        }
        tensor_content: "\367\244O\037W\274\307?\367\177\344h\275s\344\277\rcZoz\005\363\2779)F|\364(\360?\010\243\314#Y?\355\277\010\243\314#Y?\355\277\236\316\241\230/\344\266\277\rcZoz\005\363\277a/\244=M\206\347?a/\244=M\206\347?a/\244=M\206\347?KL.7\220\364\370?\rcZoz\005\363\277\236\316\241\230/\344\266\277a/\244=M\206\347?\237\030x\005cu\335?\rcZoz\005\363\277\236\316\241\230/\344\266\277a/\244=M\206\347?\010\243\314#Y?\355\277\236\316\241\230/\344\266\277\226t\316LHk\367\277\237\030x\005cu\335?\226t\316LHk\367\277\313\271\370[CP\327\2779)F|\364(\360?\367\244O\037W\274\307?a/\244=M\206\347?\367\244O\037W\274\307?\226t\316LHk\367\277\rcZoz\005\363\277\236\316\241\230/\344\266\277\237\030x\005cu\335?\237\030x\005cu\335?9)F|\364(\360?a/\244=M\206\347?\302:\272Y\302\216\364?\237\030x\005cu\335?\302:\272Y\302\216\364?\302:\272Y\302\216\364?\237\030x\005cu\335?9)F|\364(\360?KL.7\220\364\370?KL.7\220\364\370?KL.7\220\364\370?\367\244O\037W\274\307?\226t\316LHk\367\277\226t\316LHk\367\277\237\030x\005cu\335?\367\244O\037W\274\307?\226t\316LHk\367\277\302:\272Y\302\216\364?\237\030x\005cu\335?KL.7\220\364\370?\rcZoz\005\363\277a/\244=M\206\347?9)F|\364(\360?\367\244O\037W\274\307?\367\177\344h\275s\344\277\010\243\314#Y?\355\277a/\244=M\206\347?a/\244=M\206\347?\rcZoz\005\363\277\010\243\314#Y?\355\277\236\316\241\230/\344\266\277\rcZoz\005\363\277\237\030x\005cu\335?\226t\316LHk\367\277\313\271\370[CP\327\277KL.7\220\364\370?\367\177\344h\275s\344\277KL.7\220\364\370?KL.7\220\364\370?\367\244O\037W\274\307?\367\177\344h\275s\344\277\226t\316LHk\367\277\226t\316LHk\367\277\313\271\370[CP\327\277\367\244O\037W\274\307?\367\244O\037W\274\307?\rcZoz\005\363\277\237\030x\005cu\335?KL.7\220\364\370?\313\271\370[CP\327\277\237\030x\005cu\335?KL.7\220\364\370?\rcZoz\005\363\277\236\316\241\230/\344\266\277\313\271\370[CP\327\277\226t\316LHk\367\277\236\316\241\230/\344\266\277\010\243\314#Y?\355\277\236\316\241\230/\344\266\277\367\177\344h\275s\344\277\367\177\344h\275s\344\277\rcZoz\005\363\277\302:\272Y\302\216\364?\010\243\314#Y?\355\277\226t\316LHk\367\277\367\244O\037W\274\307?\rcZoz\005\363\277\226t\316LHk\367\277\010\243\314#Y?\355\277\236\316\241\230/\344\266\277\rcZoz\005\363\277\313\271\370[CP\327\277\367\244O\037W\274\307?\rcZoz\005\363\2779)F|\364(\360?\010\243\314#Y?\355\277\302:\272Y\302\216\364?\010\243\314#Y?\355\2779)F|\364(\360?\313\271\370[CP\327\277\367\244O\037W\274\307?\010\243\314#Y?\355\277\226t\316LHk\367\277\rcZoz\005\363\277\010\243\314#Y?\355\2779)F|\364(\360?a/\244=M\206\347?\010\243\314#Y?\355\277\236\316\241\230/\344\266\277\237\030x\005cu\335?\237\030x\005cu\335?\010\243\314#Y?\355\277a/\244=M\206\347?\rcZoz\005\363\277\010\243\314#Y?\355\277a/\244=M\206\347?\010\243\314#Y?\355\277KL.7\220\364\370?\302:\272Y\302\216\364?\237\030x\005cu\335?KL.7\220\364\370?\237\030x\005cu\335?\236\316\241\230/\344\266\2779)F|\364(\360?\237\030x\005cu\335?a/\244=M\206\347?KL.7\220\364\370?\367\177\344h\275s\344\277\237\030x\005cu\335?\236\316\241\230/\344\266\277a/\244=M\206\347?\302:\272Y\302\216\364?\226t\316LHk\367\277\237\030x\005cu\335?\010\243\314#Y?\355\277\236\316\241\230/\344\266\277\237\030x\005cu\335?\010\243\314#Y?\355\277\237\030x\005cu\335?\rcZoz\005\363\277\226t\316LHk\367\277\367\244O\037W\274\307?\367\244O\037W\274\307?\236\316\241\230/\344\266\277\313\271\370[CP\327\2779)F|\364(\360?KL.7\220\364\370?\236\316\241\230/\344\266\277\rcZoz\005\363\2779)F|\364(\360?\367\177\344h\275s\344\277\010\243\314#Y?\355\277KL.7\220\364\370?a/\244=M\206\347?KL.7\220\364\370?\367\244O\037W\274\307?\rcZoz\005\363\277\367\244O\037W\274\307?\236\316\241\230/\344\266\277\226t\316LHk\367\277\010\243\314#Y?\355\277\302:\272Y\302\216\364?\226t\316LHk\367\277\226t\316LHk\367\277\367\244O\037W\274\307?\302:\272Y\302\216\364?\226t\316LHk\367\277\236\316\241\230/\344\266\277\010\243\314#Y?\355\277\313\271\370[CP\327\277\367\244O\037W\274\307?\010\243\314#Y?\355\277\302:\272Y\302\216\364?KL.7\220\364\370?\237\030x\005cu\335?a/\244=M\206\347?\237\030x\005cu\335?\236\316\241\230/\344\266\277a/\244=M\206\347?9)F|\364(\360?\rcZoz\005\363\277a/\244=M\206\347?\010\243\314#Y?\355\277a/\244=M\206\347?\237\030x\005cu\335?\367\177\344h\275s\344\277\313\271\370[CP\327\277\226t\316LHk\367\277\rcZoz\005\363\277KL.7\220\364\370?KL.7\220\364\370?\236\316\241\230/\344\266\277\237\030x\005cu\335?\rcZoz\005\363\277\226t\316LHk\367\277\226t\316LHk\367\277KL.7\220\364\370?\rcZoz\005\363\277\367\244O\037W\274\307?\237\030x\005cu\335?\302:\272Y\302\216\364?\302:\272Y\302\216\364?\226t\316LHk\367\277\313\271\370[CP\327\277\237\030x\005cu\335?\302:\272Y\302\216\364?a/\244=M\206\347?KL.7\220\364\370?\237\030x\005cu\335?\rcZoz\005\363\277\rcZoz\005\363\2779)F|\364(\360?\302:\272Y\302\216\364?9)F|\364(\360?\237\030x\005cu\335?a/\244=M\206\347?a/\244=M\206\347?\236\316\241\230/\344\266\277\rcZoz\005\363\277\rcZoz\005\363\277\236\316\241\230/\344\266\277\rcZoz\005\363\277\rcZoz\005\363\2779)F|\364(\360?a/\244=M\206\347?a/\244=M\206\347?a/\244=M\206\347?a/\244=M\206\347?\226t\316LHk\367\277\367\244O\037W\274\307?\313\271\370[CP\327\277KL.7\220\364\370?\rcZoz\005\363\277\367\177\344h\275s\344\277\236\316\241\230/\344\266\277\237\030x\005cu\335?\236\316\241\230/\344\266\277\010\243\314#Y?\355\277\313\271\370[CP\327\277\010\243\314#Y?\355\277\236\316\241\230/\344\266\277\010\243\314#Y?\355\277\226t\316LHk\367\277\236\316\241\230/\344\266\2779)F|\364(\360?\226t\316LHk\367\277\010\243\314#Y?\355\277\313\271\370[CP\327\277\rcZoz\005\363\277a/\244=M\206\347?\010\243\314#Y?\355\277\313\271\370[CP\327\277\226t\316LHk\367\277KL.7\220\364\370?\226t\316LHk\367\277\010\243\314#Y?\355\277a/\244=M\206\347?\237\030x\005cu\335?\226t\316LHk\367\277\367\244O\037W\274\307?a/\244=M\206\347?\237\030x\005cu\335?\rcZoz\005\363\277\237\030x\005cu\335?\rcZoz\005\363\277\237\030x\005cu\335?\010\243\314#Y?\355\277\237\030x\005cu\335?\010\243\314#Y?\355\277\010\243\314#Y?\355\277\302:\272Y\302\216\364?\313\271\370[CP\327\277\236\316\241\230/\344\266\277\302:\272Y\302\216\364?KL.7\220\364\370?\237\030x\005cu\335?\010\243\314#Y?\355\277\367\244O\037W\274\307?\010\243\314#Y?\355\277\367\177\344h\275s\344\2779)F|\364(\360?KL.7\220\364\370?\010\243\314#Y?\355\277\226t\316LHk\367\277\236\316\241\230/\344\266\277\367\244O\037W\274\307?\367\177\344h\275s\344\277\rcZoz\005\363\277\rcZoz\005\363\2779)F|\364(\360?\rcZoz\005\363\277\rcZoz\005\363\277\237\030x\005cu\335?KL.7\220\364\370?\237\030x\005cu\335?\226t\316LHk\367\277\302:\272Y\302\216\364?\010\243\314#Y?\355\277a/\244=M\206\347?\237\030x\005cu\335?\313\271\370[CP\327\277\226t\316LHk\367\277\367\244O\037W\274\307?\rcZoz\005\363\277\237\030x\005cu\335?\237\030x\005cu\335?\rcZoz\005\363\277\rcZoz\005\363\277\rcZoz\005\363\277\010\243\314#Y?\355\277\010\243\314#Y?\355\277\226t\316LHk\367\277KL.7\220\364\370?KL.7\220\364\370?\367\244O\037W\274\307?\302:\272Y\302\216\364?\010\243\314#Y?\355\277\313\271\370[CP\327\277\226t\316LHk\367\277\237\030x\005cu\335?\237\030x\005cu\335?\302:\272Y\302\216\364?\226t\316LHk\367\277\302:\272Y\302\216\364?\236\316\241\230/\344\266\277\302:\272Y\302\216\364?\313\271\370[CP\327\277\236\316\241\230/\344\266\277\237\030x\005cu\335?9)F|\364(\360?9)F|\364(\360?\236\316\241\230/\344\266\277\302:\272Y\302\216\364?\302:\272Y\302\216\364?\237\030x\005cu\335?\010\243\314#Y?\355\277a/\244=M\206\347?\236\316\241\230/\344\266\2779)F|\364(\360?9)F|\364(\360?\010\243\314#Y?\355\277\010\243\314#Y?\355\277\rcZoz\005\363\277\236\316\241\230/\344\266\277\010\243\314#Y?\355\277\rcZoz\005\363\277\367\244O\037W\274\307?\367\244O\037W\274\307?\367\177\344h\275s\344\277\226t\316LHk\367\277\237\030x\005cu\335?9)F|\364(\360?a/\244=M\206\347?\237\030x\005cu\335?\313\271\370[CP\327\277\226t\316LHk\367\277\010\243\314#Y?\355\277\302:\272Y\302\216\364?\010\243\314#Y?\355\277KL.7\220\364\370?\010\243\314#Y?\355\277KL.7\220\364\370?KL.7\220\364\370?\302:\272Y\302\216\364?\302:\272Y\302\216\364?\237\030x\005cu\335?\rcZoz\005\363\277\367\244O\037W\274\307?\226t\316LHk\367\277\rcZoz\005\363\277\313\271\370[CP\327\277\313\271\370[CP\327\2779)F|\364(\360?\237\030x\005cu\335?\rcZoz\005\363\277\rcZoz\005\363\277a/\244=M\206\347?a/\244=M\206\347?\rcZoz\005\363\277\367\244O\037W\274\307?\rcZoz\005\363\277\367\177\344h\275s\344\277a/\244=M\206\347?\237\030x\005cu\335?\237\030x\005cu\335?KL.7\220\364\370?\302:\272Y\302\216\364?9)F|\364(\360?\237\030x\005cu\335?9)F|\364(\360?\237\030x\005cu\335?\rcZoz\005\363\277a/\244=M\206\347?\237\030x\005cu\335?\313\271\370[CP\327\277a/\244=M\206\347?KL.7\220\364\370?KL.7\220\364\370?\367\177\344h\275s\344\277\rcZoz\005\363\277\313\271\370[CP\327\277\010\243\314#Y?\355\277\010\243\314#Y?\355\277KL.7\220\364\370?\rcZoz\005\363\277a/\244=M\206\347?\226t\316LHk\367\277KL.7\220\364\370?\226t\316LHk\367\2779)F|\364(\360?\226t\316LHk\367\277KL.7\220\364\370?\236\316\241\230/\344\266\277KL.7\220\364\370?\237\030x\005cu\335?\302:\272Y\302\216\364?\010\243\314#Y?\355\277a/\244=M\206\347?KL.7\220\364\370?\226t\316LHk\367\277\236\316\241\230/\344\266\277\rcZoz\005\363\277\367\177\344h\275s\344\277\237\030x\005cu\335?\rcZoz\005\363\277\367\244O\037W\274\307?\302:\272Y\302\216\364?\rcZoz\005\363\277\313\271\370[CP\327\277a/\244=M\206\347?\313\271\370[CP\327\277KL.7\220\364\370?\rcZoz\005\363\277\367\244O\037W\274\307?\rcZoz\005\363\277a/\244=M\206\347?\237\030x\005cu\335?9)F|\364(\360?\237\030x\005cu\335?9)F|\364(\360?\010\243\314#Y?\355\277\236\316\241\230/\344\266\277KL.7\220\364\370?\302:\272Y\302\216\364?\rcZoz\005\363\277\237\030x\005cu\335?\226t\316LHk\367\277\226t\316LHk\367\277\237\030x\005cu\335?\226t\316LHk\367\277\367\244O\037W\274\307?\237\030x\005cu\335?\rcZoz\005\363\277\010\243\314#Y?\355\277\226t\316LHk\367\277\226t\316LHk\367\277\010\243\314#Y?\355\277\rcZoz\005\363\277\367\244O\037W\274\307?\313\271\370[CP\327\277\237\030x\005cu\335?\367\177\344h\275s\344\277\367\177\344h\275s\344\277\313\271\370[CP\327\277\313\271\370[CP\327\277a/\244=M\206\347?\237\030x\005cu\335?\313\271\370[CP\327\277\367\177\344h\275s\344\277\367\244O\037W\274\307?\302:\272Y\302\216\364?\226t\316LHk\367\277\237\030x\005cu\335?KL.7\220\364\370?\010\243\314#Y?\355\277\237\030x\005cu\335?a/\244=M\206\347?a/\244=M\206\347?\226t\316LHk\367\277\rcZoz\005\363\277KL.7\220\364\370?\367\244O\037W\274\307?\237\030x\005cu\335?\302:\272Y\302\216\364?\010\243\314#Y?\355\277\rcZoz\005\363\277\236\316\241\230/\344\266\277KL.7\220\364\370?\010\243\314#Y?\355\277\226t\316LHk\367\277KL.7\220\364\370?a/\244=M\206\347?KL.7\220\364\370?\302:\272Y\302\216\364?\237\030x\005cu\335?\302:\272Y\302\216\364?\rcZoz\005\363\2779)F|\364(\360?\rcZoz\005\363\277\rcZoz\005\363\277\237\030x\005cu\335?KL.7\220\364\370?KL.7\220\364\370?\010\243\314#Y?\355\277\237\030x\005cu\335?\226t\316LHk\367\277\367\177\344h\275s\344\2779)F|\364(\360?\236\316\241\230/\344\266\277\302:\272Y\302\216\364?\302:\272Y\302\216\364?\010\243\314#Y?\355\277a/\244=M\206\347?\rcZoz\005\363\277\302:\272Y\302\216\364?\226t\316LHk\367\277\226t\316LHk\367\277a/\244=M\206\347?\010\243\314#Y?\355\277\237\030x\005cu\335?KL.7\220\364\370?\226t\316LHk\367\277\rcZoz\005\363\277\236\316\241\230/\344\266\277\010\243\314#Y?\355\2779)F|\364(\360?\rcZoz\005\363\277\rcZoz\005\363\277\236\316\241\230/\344\266\277KL.7\220\364\370?\313\271\370[CP\327\277\367\244O\037W\274\307?\236\316\241\230/\344\266\277\367\244O\037W\274\307?9)F|\364(\360?\236\316\241\230/\344\266\277\367\244O\037W\274\307?\367\177\344h\275s\344\277\367\244O\037W\274\307?\rcZoz\005\363\2779)F|\364(\360?\236\316\241\230/\344\266\277\302:\272Y\302\216\364?9)F|\364(\360?KL.7\220\364\370?\313\271\370[CP\327\277\302:\272Y\302\216\364?\rcZoz\005\363\277\367\177\344h\275s\344\277\010\243\314#Y?\355\277\367\244O\037W\274\307?\226t\316LHk\367\2779)F|\364(\360?\367\244O\037W\274\307?KL.7\220\364\370?\313\271\370[CP\327\277\236\316\241\230/\344\266\277KL.7\220\364\370?\226t\316LHk\367\277\226t\316LHk\367\277\226t\316LHk\367\277\367\244O\037W\274\307?a/\244=M\206\347?\010\243\314#Y?\355\2779)F|\364(\360?\rcZoz\005\363\277\rcZoz\005\363\277\rcZoz\005\363\277KL.7\220\364\370?\236\316\241\230/\344\266\2779)F|\364(\360?\226t\316LHk\367\277\010\243\314#Y?\355\277\367\244O\037W\274\307?\302:\272Y\302\216\364?\237\030x\005cu\335?\236\316\241\230/\344\266\277\367\244O\037W\274\307?\010\243\314#Y?\355\277\rcZoz\005\363\277\226t\316LHk\367\277\237\030x\005cu\335?9)F|\364(\360?a/\244=M\206\347?\226t\316LHk\367\277\237\030x\005cu\335?a/\244=M\206\347?9)F|\364(\360?\237\030x\005cu\335?KL.7\220\364\370?\rcZoz\005\363\277\367\244O\037W\274\307?\236\316\241\230/\344\266\277\rcZoz\005\363\277\rcZoz\005\363\277\367\244O\037W\274\307?\226t\316LHk\367\277\302:\272Y\302\216\364?\rcZoz\005\363\277a/\244=M\206\347?\rcZoz\005\363\277KL.7\220\364\370?\010\243\314#Y?\355\277a/\244=M\206\347?\rcZoz\005\363\2779)F|\364(\360?\236\316\241\230/\344\266\277\226t\316LHk\367\277\rcZoz\005\363\277\rcZoz\005\363\277KL.7\220\364\370?\rcZoz\005\363\277\367\244O\037W\274\307?9)F|\364(\360?\010\243\314#Y?\355\277\237\030x\005cu\335?\226t\316LHk\367\277\367\244O\037W\274\307?\010\243\314#Y?\355\277\010\243\314#Y?\355\277KL.7\220\364\370?\302:\272Y\302\216\364?\237\030x\005cu\335?\302:\272Y\302\216\364?KL.7\220\364\370?\237\030x\005cu\335?KL.7\220\364\370?\237\030x\005cu\335?\237\030x\005cu\335?\313\271\370[CP\327\277\367\244O\037W\274\307?\367\244O\037W\274\307?\237\030x\005cu\335?\226t\316LHk\367\277\237\030x\005cu\335?\rcZoz\005\363\277\313\271\370[CP\327\277a/\244=M\206\347?9)F|\364(\360?\rcZoz\005\363\277\226t\316LHk\367\277\236\316\241\230/\344\266\277\rcZoz\005\363\277\302:\272Y\302\216\364?9)F|\364(\360?\226t\316LHk\367\277\302:\272Y\302\216\364?\313\271\370[CP\327\277\010\243\314#Y?\355\277\367\244O\037W\274\307?KL.7\220\364\370?\rcZoz\005\363\277\237\030x\005cu\335?\367\177\344h\275s\344\277\237\030x\005cu\335?\rcZoz\005\363\277\237\030x\005cu\335?9)F|\364(\360?9)F|\364(\360?9)F|\364(\360?a/\244=M\206\347?\237\030x\005cu\335?\367\177\344h\275s\344\277a/\244=M\206\347?\302:\272Y\302\216\364?\rcZoz\005\363\277\rcZoz\005\363\277KL.7\220\364\370?\367\177\344h\275s\344\277KL.7\220\364\370?a/\244=M\206\347?\302:\272Y\302\216\364?9)F|\364(\360?\367\177\344h\275s\344\2779)F|\364(\360?\367\244O\037W\274\307?\010\243\314#Y?\355\277\302:\272Y\302\216\364?\302:\272Y\302\216\364?\367\244O\037W\274\307?\236\316\241\230/\344\266\277a/\244=M\206\347?KL.7\220\364\370?\226t\316LHk\367\277KL.7\220\364\370?\226t\316LHk\367\277\226t\316LHk\367\277\226t\316LHk\367\2779)F|\364(\360?\rcZoz\005\363\277\rcZoz\005\363\2779)F|\364(\360?\rcZoz\005\363\277\313\271\370[CP\327\277\226t\316LHk\367\2779)F|\364(\360?\rcZoz\005\363\277\237\030x\005cu\335?\313\271\370[CP\327\277\237\030x\005cu\335?a/\244=M\206\347?\367\244O\037W\274\307?9)F|\364(\360?\236\316\241\230/\344\266\2779)F|\364(\360?\237\030x\005cu\335?\rcZoz\005\363\277\313\271\370[CP\327\277\236\316\241\230/\344\266\277\226t\316LHk\367\277\226t\316LHk\367\277\313\271\370[CP\327\277\rcZoz\005\363\277\302:\272Y\302\216\364?\302:\272Y\302\216\364?\313\271\370[CP\327\277\226t\316LHk\367\277\302:\272Y\302\216\364?\302:\272Y\302\216\364?\313\271\370[CP\327\277\302:\272Y\302\216\364?\010\243\314#Y?\355\277a/\244=M\206\347?9)F|\364(\360?KL.7\220\364\370?\302:\272Y\302\216\364?9)F|\364(\360?\226t\316LHk\367\277KL.7\220\364\370?\302:\272Y\302\216\364?\010\243\314#Y?\355\277\rcZoz\005\363\277\302:\272Y\302\216\364?9)F|\364(\360?\236\316\241\230/\344\266\277\226t\316LHk\367\277"
      }
    }
  }
}
node {
  name: "tensors/component_6"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 750
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 750
          }
        }
        tensor_content: "\312*\246\230p\002\362?\257=?\273\374S\316?\017\273\260\221\270\305\345\277\261;+\236+)\337\277\302*\006\267\235\276\347\277\200\246\035KAj\341\277va\024\210\341\351\355\277\322\370\332^\324;\262\277\351\253\242x\314\217\342\277\2079)\277\300\263\336\277]7\'\340U>\336\277-\242\031\215k\177\340\277]7\'\340U>\336\277\376\253\231Y\0315\303\277\33283B\247\375\364?a+\2454=\023\353?\314\020\356B\233=\342\277\002\033\034\224\335\324\351\277\017&\027\350\376\222\332\277;\250\362K\253\213\021@\376\350\037$12\377?d\033\373N\202\222\271\277\213,\035\205?\363\333\277\3100g\356\374\227\343\277\250PI\327>\t\372?(\211K\344+\014\346\277I\316\335\305\223\366\267?g\035\017lS\275\330\277\330d\316z\364\306\343\277B\243\232\374 \272\340\277\215\372\375\202\232\363\342\277\333\253\253\227\177\352\321?\014\016H\203:\307\022@\366^\227\352i\231\010@\351\2305\007\354\365\343\277W\244\033l\326\364\340\277\200\246\035KAj\341\277-\242\031\215k\177\340\277\350\337\311A\0367\316\277\331w;\354\324`\342\277=\033\r\215\350G\330\277#\n$HE/\004@\361\326\345A?\314\271?\317\267-C\230\025\345\277\024\n\353V+\347\265\277#\203\352\254\3142\352\277\240_8\327>\201\026@\366\022\360!\006\263\342\277\344\247\177\302\302}\n@\2079)\277\300\263\336\277\014\302\373u\255\360\366?l\001\343\332\177\021\264\277g\214\3162L\274\346\277\t3#\"\200S\335\277\262\034y\rg\303\344\277\363\322\275\007\235v\313\277@\016\001Sg\207\325\277\204\023\253\332=\347\234\277-\016\nr\032\342\344?]7\'\340U>\336\277P\225g\211\325H\361\277\344\360\212\352\217\220\225\277B\243\232\374 \272\340\277\375\372\025/Y\371\000@?K\304\251\263\343\370?\n\333)=\032 \347\277 \312\307\311WV\330?7)\243U\322\235\352?\3370!C\025\336\334\277W\244\033l\326\364\340\277$\317\236rN\232\344\277\204\'\203h}\016\347\277S\260\235\027\357\037\304\27710+\306\373\'\363?^\246\346\246N=\354\277-\242\031\215k\177\340\277\302\007\373\265&\'\324\277\225\247\236\272\366\244\341\277-|?\252\252K\343\277v\366\352\275\317{\320\277\240v\203\330,\371\354\277\016o\374\3136^\353\277\26161c<\210\364?\230\241\335dj\017\360?]\200\014\304\215\t\357\2774\312\276\252\244\373\350\277\352\027\223]{\362\346?\231\337\355\275\352\241\273?\271\"\235\270\221=\351?U\253fP\313\037\362?\314\352\023`\332\t\345\277\377\030\024\3150-\347?\227\335\331\240\031w\334?\351\026\t\317\022]\327\277\030\241\230\035\266D\340\277\237\311\202\202\243\213\370?\235\371v+\243\206\340?@\0132q\035\353\353\277/\304]sE\"\355\277B\243\232\374 \272\340\277\246\255*)\320\214{\277\367\305\261\315\033\266\310\277\376\253\231Y\0315\303\277\013\356\226\256\372\271\345\277p3\256\024\034\330\363?c\345\2162O\344\343\277\333=-}\226\236\337\277\350\337\311A\0367\316\277\035\001\007WL|\301?\027hQ\311\024w\344\277\n(+\005\320\275\311?\022\233e\345\365\036\242\277B\017\213\341\317\034\345?\345#\025\t\224\035\332\277\t3#\"\200S\335\277\341]\026{\264^\010@\034[E\217\223\266\341\277N\277\275nA\013\326?\200\246\035KAj\341\277-\242\031\215k\177\340\277$\317\236rN\232\344\277^g\326W\237(\177?m\277]uy\336<?@\016\001Sg\207\325\277\361\014\217\352\246\331\346\2779(\031\307i\010\333\277\345#\025\t\224\035\332\277\204:\360\331]\250\345\277\027U\344W4\335\345\277?\345W\216\\\267\356\277a*\033\246\324}\333\277\215\372\375\202\232\363\342\277\241\211\360I\r\223\353\277\00757?Q~\314?\177\255h/6\225\362?\225\247\236\272\366\244\341\277\3642,A3\256\354?\372  \2410\013\361\277w\255\310McQ\350\277\273\311\031E\303t\343\277\337\3365\266\203w\226?\034\000}\310\343\346\341?\265w\004H\3423\355\277\231N\336\272\363|\344\277G\327\301\305ra\314\277B\243\232\374 \272\340\277\306\372\356{\245f\321\277\263\372\367\232X\301\340?R\304\224\0278O\342\277\200\001V\2461\316\235?S\260\235\027\357\037\304\277\304\330\220\233\217\301\373?%\266p\253\341j\364?\273\266\254\323\342\332\344\277\231\337\355\275\352\241\273?\233\333\305\203HL\315\277\006\234\201\261\031y\357\277a*\033\246\324}\333\277\034\234[+\000\003\360\277\352\027\223]{\362\346?\0074\352<\035H\344\277W\244\033l\326\364\340\277\373\270\245\223\232\365\305\277\337\3365\266\203w\226?\335\374\371y\3036\341?F\322\212\376Na\372?\363\322\275\007\235v\313\277\265.\037d\252h\334\277?H\002\305\207\310\003@q\005\013\025\"g\302?\263BS\360\'\367\341\277+\243\243\033\324\024\320?\277\251\240\231a\032\342\277\t3#\"\200S\335\277\267\017m\323\345\002\342\277\017&\027\350\376\222\332\277L\364\350\336d\006\320\277[9;\375&i\315?n\003\367\367P<\323\2775\360\230\215e/\346\277\256b\314\233\211Q\343\277\177\247\247\331\251\377\320?\373\270\245\223\232\365\305\277\014$\003\313-h\273\2779(\031\307i\010\333\277\230\241\335dj\017\360?\323\261l\355\013\200\363?\t3#\"\200S\335\2779(\031\307i\010\333\277v\366\352\275\317{\320\277l\245\234\333\213/\341\277\225\022\005\021=r\326\277\017\250C \330+\347\277o9oj\250m\345\277R\262\2614\300J\323?\312*\246\230p\002\362?\000^}\256\275i\360\277\376\206I\005\301\226\345\277!\303|\345b+\367?\t3#\"\200S\335\277k\020\0032\322\374\325\277\234\370\354\234:\361\320\277&L&\000}`\022@E\021\223\250|\304\347\277l\001\343\332\177\021\264\277<\344\315\377\363!\317\277\262\034y\rg\303\344\277\312*\246\230p\002\362?\025\344\337=Z\327\335?4\003\006\377E\311\344\277\3370!C\025\336\334\277\252\247\225\233CJ\302\277^,/\303\245\250\312?\266\326%\177D5\346\277\323q\332\264u\207\346\277-\242\031\215k\177\340\277\271\"\235\270\221=\351?\230\241\335dj\017\360?9\252E\377B\241\347\277\350\355W\325\343\277\022@\003\317\225\315\372 \255\277\352\360\375\265AM\277?\003BCy\322>\317?w\3005\277C\353\346\277W\244\033l\326\364\340\277\225\022\005\021=r\326\277wN\247\026\001P\357\277\003\240\027\256\000\n\340\277\262\t\014\234\206)\346\277]8\261n\276\323\355?\210\032w.\374M\344\277ff\364O\213\210\351\277\246\242\276\362L\006\346\277\023\256\244W7\005\343\277\350\337\311A\0367\316\277\007\377\373X.\254\341?\2079)\277\300\263\336\277\2079)\277\300\263\336\277\273!\023*)\250\331\277\220\264\252\364we\344\277\306\253k\324\331b\355\277\351\026\t\317\022]\327\277\256b\314\233\211Q\343\277t\031\366\276F\023\344\277l\245\234\333\213/\341\277\016\t\243\330\217\364\003@\207\273U\367\231L\353\277\210\370\365\273\355K\340?J\027\364\337\333\235\343\277\030\241\230\035\266D\340\277\365\331\250\315d\345\346\277\2614[\273\035\351\251?\263k\342\272\366\304\377?4\003\006\377E\311\344\277\213,\035\205?\363\333\277\t|\010\006\270\036\356\277\037(_rQ\302\341\277.=7\000}\350\365?\322\370\332^\324;\262\277z\252\326\331 X\360\277\205\005\002\366n\014\343?\273!\023*)\250\331\277\256<\362\270\310\035\346\277\371\274\315\315<K\264?\333=-}\226\236\337\277\005A\271\352i\251\357?\324\252!\t\027U\342\277F\254u\335L\312\245\277\2074/\204\321\022\364?R\261\'\246W\265\343\277\204`\312\274\036\334\342\277\343\302\310x\214\027\360\277\2079)\277\300\263\336\277\220\216\320\021\2671\347\27735%\001\353\310\335\277a*\033\246\324}\333\277\003\317\225\315\372 \255\277\2079)\277\300\263\336\277#\342\013\344.4\343\277\241\257\312,\316\306\350\277\213-\247\023\250\210\353?$\317\236rN\232\344\277k\341\230\027;\227\375?\034\000}\310\343\346\341?,\035\036sHJ\352\277i\037#\211$\350\307?F\002\177\247N\\\342?\333=-}\226\236\337\277\376\206I\005\301\226\345\277D\001\365\030\346\306\322\277%\266p\253\341j\364?\031<\266\220\307\255\365?\2079)\277\300\263\336\277\333=-}\226\236\337\277[^\310\335\263f\342\2779(\031\307i\010\333\277\354\t\375\224\221\234\324\277g\035\017lS\275\330\277W\020\014Q\205W\345??\345W\216\\\267\356\277\324\204G&V!\345\277\344\360\212\352\217\220\225\277\311\374\002\231v\221\300?\251E c<\000\021@\365\215\364\007\343}\354\277=\033\r\215\350G\330\277\231;qI\023\343\345\277y\267\262\204\213:\000@\375\263n\314v\365\363?Z\377\246\246Qe\351\277\2079)\277\300\263\336\277\003z=\313?\326\342\277\266#\'G\372\322\310?W\244\033l\326\364\340\277g\237;\244,V\345\277=d\362p \023\351\277^\337-\373\357\n\350\277D\001\365\030\346\306\322\277\303P\340\231^\362\344\277Z\206\340A\312a\003@#\342\013\344.4\343\277\371\274\315\315<K\264?]7\'\340U>\336\277\023\031\013\256}\322\327\277\004;5!\022s\365?35%\001\353\310\335\27735%\001\353\310\335\277\266#\'G\372\322\310?\356x\274[\212\233\342\277\371\271/\"\003\213\345\277\024\n\353V+\347\265\277\204\023\253\332=\347\234\277\321#\036(Gx\351?va\024\210\341\351\355\277\302\007\373\265&\'\324\277\365aY\317\225\264\375?kY\350\025\n\310\346\277a%!k\345\334\360?\333=-}\226\236\337\277Z\022\024\0302\377\347\277\017\"\241\020\346E\361\277\316\246\376R\rC\n@\343\302\310x\214\027\360\277\271\"\235\270\221=\351?\335j\"\2655\037\013@B\276\326\265\314\322\361\277\030\241\230\035\266D\340\277I\361\031\375\032j\346\277\267\351\222\360$\317\344\277\2022<\357f\271\023@t\316\313\207-A\331?^+\342\300qr\342\277\037\334\252\254\317Z\347\277\204\023\253\332=\347\234\277r92\336s\016\356?v\366\352\275\317{\320\277\300\025\221~\020}\346?O\270r\212L\340\364?|\264\263\023+\300\323?\023\031\013\256}\322\327\277\334\013\016{\361\236\346\277#\226W\036\255\314\350\277.=7\000}\350\365?N\344\r\303\231\251\343\277\261;+\236+)\337\277B\243\232\374 \272\340\277\032B:Z\037\344\357?i\037#\211$\350\307?>\034\227\033Q\335\347?]7\'\340U>\336\277%\266p\253\341j\364?\367\014\307\023\205\214\022@\177\247\247\331\251\377\320?\261;+\236+)\337\277\360\346\264\007\346\245\351\277\344\360\212\352\217\220\225\277]7\'\340U>\336\277\023\2337\346Vk\344\277\210\370\365\273\355K\340?\00757?Q~\314?\234\370\354\234:\361\320\277\371\274\315\315<K\264?,i\3228\312\261\344\277\3371\253\321}s\354?\005A\271\352i\251\357?-\242\031\215k\177\340\277\322\370\332^\324;\262\277\224\256\351\236\353\317\362?\236jaKA\212\377?\230\241\335dj\017\360?\261;+\236+)\337\277\223\352\345\332\2327\337?G\327\301\305ra\314\277\367\305\261\315\033\266\310\277\262\366\236*\246\217\347\277\265.\037d\252h\334\277\"(\"\346\034c\352?8\275\262p#;\346\277\017\273\260\221\270\305\345\277\307\230\376b\371\310\356\277\003\240\027\256\000\n\340\277]7\'\340U>\336\277<\267\361\032\227\245\364?\273!\023*)\250\331\277\236\320\315f\230\266\331?R\262\2614\300J\323?]7\'\340U>\336\277}x+\214\253A\216?]7\'\340U>\336\277\016\341\212ty\371\342\277\014\302\373u\255\360\366?\221\037\021K\2762\331\277\261<\265,\224\276\356?\234;4\275\336\203\356?m@\272N\235\230\366?\354\t\375\224\221\234\324\277\2079)\277\300\263\336\277W<w\372\273B\001@\237\311\202\202\243\213\370?\351\253\242x\314\217\342\277\t3#\"\200S\335\277\003\240\027\256\000\n\340\277#\2741\001n\000\346\277l\245\234\333\213/\341\277k\020\0032\322\374\325\277h\036\231\372\273R\350?U\253fP\313\037\362?35%\001\353\310\335\277\032$<\274G\260\t@\306\372\356{\245f\321\277\350r[$+\302\346\277\324\227\264\2276\273\343\2778\227\330\215b\007\351\277vt\201\371\301\203\354\277\023\031\013\256}\322\327\277\2074/\204\321\022\364?\246\333\005G\356\323\341\277\266#\'G\372\322\310?\375\263n\314v\365\363?\242Z\223,\224\256\007@\356\n\207#\3721\344?\304v\272|\037&\342\277k\222/j\253\225\342\277k\341\230\027;\227\375?\302*\006\267\235\276\347\277\230\241\335dj\017\360?\251\251\251\270\024u\321?@\016\001Sg\207\325\277\033\326Iup\201\353\277I\361\031\375\032j\346\277S\260\235\027\357\037\304\277\214\301\266.\371%\347\277K\312\265\213\361\240\311\277\035\001\007WL|\301?a+\2454=\023\353?]7\'\340U>\336\277$\365xU\017\316\341\277\345#\025\t\224\035\332\277\003\014\010\223\257l\344?\3370!C\025\336\334\277]7\'\340U>\336\277V\221\256\372\365Z\342\277\007\377\373X.\254\341?l\245\234\333\213/\341\277\337+\'\010&=\362?I\336\254\213:\320\347\277\251I\376\362I\336\350\277{\354c\334Ew\013@#\2741\001n\000\346\277\246\266\265\362\2255\324?\001Fk\263t\224\255?\303cM\013?\214\343\277t\031\366\276F\023\344\277y\272ti\267U\365?\376\206I\005\301\226\345\277\264,\013G\331=\275\277\212\260\207>nS\014@\221\037\021K\2762\331\277>\034\227\033Q\335\347?\002\237\215\037\230t\300\277\351\205\310\225\013\\\345\277\344\360\212\352\217\220\225\277\227B\274-\010\016\367?L\364\350\336d\006\320\277\373\270\245\223\232\365\305\277\025I\302\312Hn\370?=\033\r\215\350G\330\277\246\265+d-\240\344\277\210\370\365\273\355K\340?\350\000\315{\350&\357\277\225[\352\364t=\347\277-\242\031\215k\177\340\277\023\2337\346Vk\344\277E7m\213=\370\344\277@\252\345\340\025\345\361?\240\337\276\325\315\301\360\277\334\036{\354\3218\345\277v\366\352\275\317{\320\277\245C\235\273\352\004\355\277\353\341\335^\357a\335?\236\320\315f\230\266\331?\204\'\203h}\016\347\277\017&\027\350\376\222\332\27735%\001\353\310\335\277\017&\027\350\376\222\332\277\031\016\023\221\315<\304?G\327\301\305ra\314\277\007\377\373X.\254\341?\304v\272|\037&\342\277-|?\252\252K\343\277\220h\366.\366\375\351\277+\243\243\033\324\024\320?\272\004\237\032\272\t\003@V\221\256\372\365Z\342\277~NG\370\323\223\371?\333=-}\226\236\337\2779(\031\307i\010\333\277A\220-\213@ \342\2779(\031\307i\010\333\277\271\245}\343W\010\n@<\344\315\377\363!\317\277H70\377\010\231\355?\256b\314\233\211Q\343\277\220U\211\275\025d\353\277-\242\031\215k\177\340\277\002\237\215\037\230t\300\277\177\247\247\331\251\377\320?\351\205\310\225\013\\\345\277\356\n\207#\3721\344?\307\367\037\232[\312\347\277\200\001V\2461\316\235?F]Gn\376+\342\277N\277\275nA\013\326?\014$\003\313-h\273\277{\263)\205\302*\344\277s\315A\371\304\253\351\277\036\377\3629{Q\322\277s\363\033\334\205\337\346\277K\305~\304\315\240\367?)\033\026\254\233\242\347?\307C\324_\3351\342\27735%\001\353\310\335\277l\245\234\333\213/\341\277\306\372\356{\245f\321\277\231(\004\3302I\347\277\217\253WI\326\222\360\277L\364\350\336d\006\320\277\305\t\017\323\367Q\303?\00757?Q~\314?\003\240\027\256\000\n\340\27710+\306\373\'\363?\023\2337\346Vk\344\277\251\257j\016\241\n\363?\247\264\241\325\304\n\305\277\230\316\271I\307\213\312\277\017&\027\350\376\222\332\277\237\311\202\202\243\213\370?[9;\375&i\315?Q\264\305Q\221u\262?\265.\037d\252h\334\277\033\"\376:\362\350\345\277\245V\n-\313\236\353\277\345#\025\t\224\035\332\277\231aK,\324\026\343\277\256O_*\251\267\344\277\010\317\007\260.\261\371?\234\370\354\234:\361\320\277]7\'\340U>\336\277\376\255\255v\352_\322?\t3#\"\200S\335\277\2079)\277\300\263\336\277\224\256\351\236\353\317\362?\n(+\005\320\275\311?k\020\0032\322\374\325\277\345\336\210\225\016\204\342\277\200\246\035KAj\341\277=\033\r\215\350G\330\277]7\'\340U>\336\277ZK[l\323\314\343\277C>\270o2#\366?g\035\017lS\275\330\277\376\253\231Y\0315\303\277i\037#\211$\350\307?B\017\213\341\317\034\345?-\242\031\215k\177\340\277x\323\2420$\205\345\277\036/\252VF\355\362?\221\037\021K\2762\331\277\377\030\024\3150-\347?\230\241\335dj\017\360?\240(\244\271\005\215\361?\375s\334\223\340\374\346\277\302*\006\267\235\276\347\277\313\375\200\321\272\243\343\277\213-\247\023\250\210\353?\324\3537\245\203\241\360\277\t.)\347\220\262\362?\365\215\364\007\343}\354\277V\243\221\335m_\301\277\333=-}\226\236\337\27735%\001\353\310\335\277\220U\211\275\025d\353\277\366\354\025?E\177\345\277\253\024\020\017[B\346?\273!\023*)\250\331\277AW\3466\237R\346\277R\262\2614\300J\323?\030\241\230\035\266D\340\277s\363\033\334\205\337\346\277\025\344\337=Z\327\335?\253\024\020\017[B\346?[2-\245f\235\363?\213,\035\205?\363\333\277\367\275\270!\314\232\001@\023\031\013\256}\322\327\277B\243\232\374 \272\340\277\200\246\035KAj\341\277#p};\354\230\353\277}x+\214\253A\216?\n\001\367\"\275\322\017@35%\001\353\310\335\277#\2741\001n\000\346\277I\316\335\305\223\366\267?fya\301k\"\350\277\333=-}\226\236\337\277\246\333\005G\356\323\341\277\313\261\314\0139<\351\277\003\207\201.\237I\021@\027U\344W4\335\345\277#\226W\036\255\314\350\277Vk\324\0275\'\345\277\264\312\003\362X\306\370?\023\256\244W7\005\343\277\265/\251\362\022\376\353?\213,\035\205?\363\333\27710+\306\373\'\363?\n\001\004 \333S\344\277NYQS\352\336\373?\225\022\005\021=r\326\277\"(\"\346\034c\352?\204\'\203h}\016\347\277AjS\250\177\354\344\277\017&\027\350\376\222\332\277\304v\272|\037&\342\277\213\'#JPR\361?\313\261\314\0139<\351\277Z\377\246\246Qe\351\277\350\337\311A\0367\316\277\014\302\373u\255\360\366?\036\377\3629{Q\322\277\276J\177b\377\030\351\277\265.\037d\252h\334\277\204M]K>B\344\277E7m\213=\370\344\277 \357\027\036\260\364\345\277^g\326W\237(\177?\365\331\250\315d\345\346\2779(\031\307i\010\333\2779\320\037\342\003\325\344\2775\026sp&c\343\277\030\241\230\035\266D\340\277\246\265+d-\240\344\277p\004\201\206\271\321\342?35%\001\353\310\335\277Z%\201\211\022\231\346\277\204:\360\331]\250\345\277\014\302\373u\255\360\366?\345#\025\t\224\035\332\277\361\323G\226\005\014\353\277\345#\025\t\224\035\332\277<\267\361\032\227\245\364?\351\026\t\317\022]\327\277\251\251\251\270\024u\321?AW\3466\237R\346\277\016\341\212ty\371\342\277\241\305\325I\350 \266?\t3#\"\200S\335\277\210\370\365\273\355K\340?\200\001V\2461\316\235?\220h\366.\366\375\351\277F\002\177\247N\\\342?K\312\265\213\361\240\311\277\265.\037d\252h\334\277\3351\350]\262\322\343\277\255\003\253d\'P\352\277\230\316\271I\307\213\312\277\213,\035\205?\363\333\277]7\'\340U>\336\277v\366\352\275\317{\320\277\023\031\013\256}\322\327\277A\220-\213@ \342\277n\003\367\367P<\323\277\302\361\276b\374\360\353\277\003\240\027\256\000\n\340\277\361E\326>H\247\342\27735%\001\353\310\335\277D\001\365\030\346\306\322\277@\252\345\340\025\345\361?\314\305\303\013\202k\327?b\231\332l\315|\351\277\367\305\261\315\033\266\310\277\277\024\007\360\247\347\326\277\353\341\335^\357a\335?\330>\364\2273\223\346\277\302\004,\324\334\212\352\277\375\263n\314v\365\363?\2335\260\363\206M\364?\216 \233\331&\310\350?\265.\037d\252h\334\277#\n$HE/\004@\234\370\354\234:\361\320\277\302\313\344\177;\275\356\277B\243\232\374 \272\340\277\266#\'G\372\322\310?\351\026\t\317\022]\327\277ZK[l\323\314\343\277\231aK,\324\026\343\277m\277]uy\336<?-\016\nr\032\342\344?\360\374\360Z\020\334\321\277g\035\017lS\275\330\277\226\275\205\325\243u\251\277W\244\033l\326\364\340\277]7\'\340U>\336\277C>\270o2#\366?a%!k\345\334\360?J\027\364\337\333\235\343\277g\035\017lS\275\330\27710+\306\373\'\363?\225\022\005\021=r\326\277\265.\037d\252h\334\277\256)\205G\350\203\347\277\312e\030F\267\324\356\277-\242\031\215k\177\340\277\200\246\035KAj\341\277\177\247\247\331\251\377\320?\363\322\275\007\235v\313\277\341\353\224\317\217D\345\277..81\221\316\022@\320\244\300\321\267{\346\277\2614[\273\035\351\251?x\346\017\242\004\037\344\277\253\024\020\017[B\346?r92\336s\016\356?I\316\335\305\223\366\267?VXg\246T\215\346\277l\245\234\333\213/\341\277\030\241\230\035\266D\340\277\006GW\256\375\341\342\277\323q\332\264u\207\346\277"
      }
    }
  }
}
node {
  name: "tensors/component_7"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 750
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 750
          }
        }
        tensor_content: "\007\355\201c\353D\323\277\006\246\377\0378\304\347?\\\316\371\274-|\357\277T\r\330\nb&\362?\3232\227\361\007i\320\277O\207Dwf\266\330?,\271J\006l\323\355\277\336\030\'\261a7\355?>\205\023\003S\025\326?\250\215\200\312\272\261\312\2773?U~\034\331\276?`\207\252\325\364\363\314?\304`\272\355\360p\377\277\204\244\2364\255\315\360?\203Y\007\026\177\245\353?xj\273V\304\257\321\277s/\036\\2\347\352\277\331\250\3027\035\361\321\277\005c\340\330\307\353\346\277i\202\035\274\246\311\311?J \233\351f1\305?5\354\357\277\031\271\353?\032(R3\336x\316\277c\363o\225w?\364\277\257\035\033j\r\337\340\277\364\3641;Z\000\000\300G\216\317\325\000c\354?\257QQ\206\275\020\332?\333^n\207\334\355\275?(k=\221\321\177\305?|:\3671\231\310\243\277k\007e\\C\027\305?\364;\254\206\236\\\017\300\372\016\247\362\203\313\333\277\333\310O\340\3672\356?\337\235\010\306\274m\335\277\304\035Nl!$\354\277;z\215\324\325\026\331\277n\365S\317+l\344?\247L+\337\031\212\340\277\372\335K\376\313)\371?\352Q\306f\247}\343?:\037\374\276\276h\354\277\"-\253c\257\321\327?>q7`\266\006\347?C\203\342a\214\232\354?\216.\300\373C\340\332\277p1\266B\360+\307\277\244\003x\'Sh\322?\351J\242M\004\233\322\277\356%E\231\351\240\357?\202\2273\345\022\026\345?u-\206ut\242\336?h-TZ\311\351\301\277\211\223\362\276#\016\360\277\357\321o\235\310X\251?b\003j\214`\305\353\277\230\224\327?\330\214\344?/\212\272\'9\225\371\277\001y!3[ \300\277t\356\310p\221\277\320?\013\276W\343FD\363?K\034\005\276\\j\270?u[\237\374<\352\327\277\315d\317\310k\030\331?\026n3\253\312\361\352?\310|\016hK\317\322\277\316\336\366\305\314~\342?\t>.\351\230\"\253\277)\313u\236\033\324\376\277\222_gp\245C\350?\241\276\215\312],\323?\020\'\262N\200\375\335\277\305\337\207(\317\312\335?\325\277\340G\251Y\372?Xg\035-\032\262\340?\210\021\216\021;\233\340?\177\277\0056\344\210\363?\321T\"\014\342\006\344?\037\363zKg?\346?\34402:\021C\326?\270\342\321\215-I\363?A\316\223\213R\030\322\277f\271%r\227W\342?\343\313\207\253\023\363\312\277R\372G[$:\321\277\027w\"\332\3627\332?8\323S\324ga\347\277\202\257\245\263\271\353\320\277\235o\002\355RJ\362?\037<\307\2756\227\321?\023F{e\221\324\354\277\225D\000on\210\345?\256W\262\307L;\305\277|\255\247nmi\340\2776\227%J s\336\277\273d7\365\313n\272\277v\317\177\303\246{\366?\367\027\226!\254\021\353\277\236\331\364\313\224\347\325?\226\010\005A\241\222\325?\210O\220\244\302\230\006\300fC\372+\202\317\340?\244\010\005\024\356\270\356?\351!\004\240\255r\361?\273-\310\371\343\026\357\277\225\327]\314?/\350\277\205\301\266@\321\226\341?\347\362\321\201\000\001\263?%Z\276M%\255\316\277\334\324\210G\313\035\374\277f\005\002s\036\n\310\277\202F\252\225\010\330\374\277\215\272\305V\365\322\342\277b\257\204\361\201\261\360\277Iw\313\320\014P\304\277\034+\024dZ\031\352\277\216\222\246\313\304\353\341?n\033\250D\327\357\346?\341\275\306)\363h\254?\002\032\307\225\277\262\355\277\222o\024-/U\335?x\033u\350\\\367\355\277\2773[\260\204\255\344?<Nq\330\243\236\270?R\3119\241\313\014\341\277\354}\256L\251J\303\277\302\201\316\260`\030\350\277r\000\333\267^\035\331\277:\362\2030p\002\311\277\032\254_z^b\344?\207\3025c\367\327\361?\366\204\236O\034\202\303?]D\213\216\204\033\334?3\225ZaN\351\346?\327\266>S\340\207\335\277^!\201Q\204<\370\277\320\005\312]\236C\365?\032\034LU8`\360?\215\231dY&\267\347?\266\r\366\352\253\341\257?\027\262\253T\214\252\016\300%m\325w\217\304\341?\215\256\321\213x\353\310?\302\201\316\260`\030\350\277\244\374S\016\260\205\341\277sb\367+\020x\311\2777\030\361\366\375(\364?\317C\367V\210\243\227\277m\352\000\320u\214\331\277^\025H\352\260Q\352?\327\023\314\337q\237\275?\034\354\t\370d\350\362\277\"\035\376\246%\300\342?;\241\013\224?\366\312?\340\013*\270\304\341\361?\"\201\261\032,\323\320?\260\271\000\261\017\002\320?Rj\022`\252\227\307?\324c\275\230\237N\215\277\265\261\220\244\r\375\360?\tg\017\277\332\350\340\277\246p\264>@\252\344?\247\266/\37672\337?\345\354\344\03130\225\277\202S\013y\310\005\255??\355e\302\321t\006\300\336~r\013&\217\347\277\325I\002<\363E\353\277\245\344{\264\307\230\352\277\r\342-}\314\330\351?y\201Y\375)\205\345?-/\334\327\302r\332?aa\000>\314\024\263\277\362}\253\212zR\216?\272\013#\001%\375\361\277|z\002\210\014\252\313\277J\305pF\372&\322?Y\272\320\3371\371\375\277\210K\276)\203-\322?\317\345N\310\3542\335\277\347e\tO;V\325\277WpY\226\241l\362?\025D\026\333M\210\311?-\262\214x\n\010\350\277\345\216\270\202\270\326\311?V\310\355\255l\352\362?e\024\331fH\334\256?\326\302\230\251\236\206\302\277sz6\313\357.\263\277\310\371]\307\003:\345?\016\326\026\354L\216\301\277`\245\026\2403*\341\277<}F\355k\322\226\277\0368\377\034\033d\332\277P\357@\334\027\034\361?J\213@.\262\224\340?\354?\233\316\367|\362?\204]\303\001^\315\005\300\344\252\246q\321\035\362\277\300\207\r\034\234\242\375\277fY\010*\233\013\301\277}\277\270\373\204\024\321?\367O\373#o@\336?\003\316\321p\t7\366?\220\366\300\204\302\310\322\277\026E\352\002\217\210\321\277\315.\001\306\375\241\323?\215\327\335b\031\234\363\277\316\317!s\301\353\221\277\351wg\026\262u\370\277Fx(\035\337\360\336?\316\207\310\177E\237\311\27741\332\034\017\365\352?\246\274\\)\227\261\351?WD\245\231\034q\374\277\027\362\267sS\207\260\277f\271%r\227W\342?@\250rEn\263\341\277\207\243\237{\255\037\365?4\324\005S\010\233\360?\323\205c\365\001S\346?\217\017\220\237;?\351?\017^ \220\262\242\321\277\r\371\223#\201B\005\300\035\206\213n\331q\366?\'6g6]\037\356?\272\315\251\3671\030\346?\2359\340\236\177\307\354\277\305\356pS\217q\345?@3\013\221\"\226\355?(\226\351O\345\317\242?\007(d\315 7\367\277\367\007\351d\"\000\326\277\327\211\222\333\024P\340?4\324\005S\010\233\360?\3433\274=)\236\002\300\3232\227\361\007i\320\277\302\334_\306w\306\324\277\216\254I\016\177b\320\277\356\'\020\257n\004\356\2773_\300t\020\036\302\277\317\345N\310\3542\335\277T\036\004\352\021y\347?\177w\342\213mx\000\300\221L\033vU\316\274?>\222\230]\205\"\342\277P;\234\214\017\257\323?\305\n\234\023Cq\314?\337 \271\223\267\334\301\2775|q;=\035\360?@\300KY\014S\260\277c\006\237\357\263@\201?\357\246\303\336\264\010\314?\331\2573\213\037H\365\277\377\350\205\254\237f\353\277\307\022\245J\356\350\251\277\013\003B@<\200\362?p\313\003\2434\n\332?\257\035\033j\r\337\340\277\270\225\367\272\017u\360\277\005^e\377U\314\376?\367\372c7\243\314\320?+m<\220\323\264\315\277\232\240\020\247\253w\362\277fQ\334\322\206}\307?\341\301\304\201]\206\332?\\\360?hd\360\365\277U\377m\002\310\300\352?\244e\307\312\313\341\344?eZ\262\260\314 \376?\331\'\335\254Z\277\342\277\333!\026\340\211}\334?\300}\005V\2172\331?\365\036\272:O\364\333?\227o\317\275\213+\360\277.\343\000\276\244L\343?\352\360:U\370n\316?P\n\217\214l4\313\277\244\177|Mbc\376\277\334\253\352\231t\365\332?9\017\265\215vn\342?u_\235T\247\007\246\277P\002\353\226\355]\362?\3151]>\205Q\355?\323\253\267j\255\326\350?\256\235\371p\024\030\337?(@\221\322\275/\270\277\213\332\205[J\r\310?\005\233\254 \202\344\334\277]q\230\355Z\367\004\300c\226`\244:\242\353?\341\3316P\004\\\346\277\3340\230\230\237\200\312?\033\244\357m\\]\365\277\354\304\206\205&M\317?\262\221{\232\235\003\344?\324f\315\r\270\232\351?\243\322\320\205>+\336\277\305\227ui\202\212\325\277\"\035\376\246%\300\342?n\td[EL\315\277:\266T\354ra\330?\240\215\346U\374\310\345\277\314\3472/T9\364?\352F\014\"\372\323\325?\204r^\222\215\323\362?\027\256*\220\343\305\342\277\316\004K;x\002\345?\226V\252\266\216i\263?\233Q\270\370g\264\343\277v\267Z/_\032\335??\275\337J\r\016\354?zd\364\266\246G\322?65\226\010\356\034\005\300Z\211u\353yW\333?\026a\256P\230\344\316?\347as#1\217\330?>1\rL\326\023\335?\2330W\373\230\230\350?\245\025\275\235\347\344\354\277\367@\253\340j\251\272?\340;\206\363|\325\330\277\270\232i\342\\\275\264?\365\034\357$\312\220\315?\246p\264>@\252\344?J \233\351f1\305?\263\220\332\241#\"\276?\324\324\231\315\361u\277?l5\030+\027n\314\277\345eo\332|m\340?\027`\004\312f\317\361\277\367\335e\td\177\331\277<*O\276tH\327?\340\013*\270\304\341\361?\310\371]\307\003:\345?\365\300eg\271\314\262?\332\235\273\270\020\323\361?q:\245De\230\317\277-\227\322\334\335\274\222\277\234\264\354IH\206\361?*\313(d\274_\354?\331\'\335\254Z\277\342\277Gj\254\001\034Z\323?qE+\240\225p\343?c\34490X$\332?n\033\250D\327\357\346?\247y\327V\345\301\315\277\360\311\274\302Ai\343\277%\271}b\346\313\346?3\004\310\031\002\246\342?\323hK\351\335\211\365?\373\031\372\3619\253\346?\303\275/jo%\343?\317\233q\363\032\217\306\277\352DA\014up\307?D>\370\004\227^\355?\nD\224\374\346\024\021\300X\215q\242\3055\343?\277\371\221\3353\345\305\277\251J\255\003\364\232\364\277\207\037\n-\3761\354?GOy\351ap\312\277\241\311G\017\013\326\340?\270\317\'\323W\007\362?\'v^\033v\363\345\277Q\320\252\364\315c\364?\356\202\241\304\205\262\332\277l\263\303i^\'\206?I\021\0311Q.\327?\3504\256Z\203\264\362?!U14\327\202\313\277`\335{\242\366X\324?\225\272_\313\263\273\307\277<\032\242\001\3536\342?\031`Q\004\306C\324\277\353\264\224,F8\366\277z\365j~\032U\022\300)\2166H\253\006\326\277\r\303\344\317\341\224\377\277(\0277\332T~\314?\205\334Pq\317p\326?A\312\375_HQ\325?\022\265N\251\206\250\323?fQ\334\322\206}\307?\321\026\366<N\226\352?p\313\003\2434\n\332?\210\332\037\320\010\366\354?\324&N\276\303\330\246\277\357\010\340Rfc\334?\177\022\037t=\347\333?\030Q\317K\260@\306\277O\026Q\017\213\211\241\277\373\265\023\"\271\237\337\277J\270R1\277\343\350?\362}\253\212zR\216?ou\251\261\241\004\260\277\024\366pe`\261\333\277\241\025\360\371a\335\345?\326\037)\206g\313\006\300D\021\346\001\212\017\345?wVd\3567\201\r\300\177\232(\030\243\373\313?\017\316\352\2248\000\310?\372\324\017\225Do\347?\206]\320pP\213\332\277\373\027@\307\336\027\003\300\244\003x\'Sh\322?V\203\003Qw\256\363?\212\375\344\235e\253\343?N\364\200\273\006\322\321?-\367v\325\377C\347\277\273\245#\025\223XY\277f}*D\312a\322?D\021\346\001\212\017\345?\2059\255\234k\202\341\277\224\230\240\232\251r\323\277\335\226\003^\222I\225?.\260\301b\205\244\351?>\205\023\003S\025\326?\213\241n\332\346\244\373\277lW=\024\026\250\322\277rd\301\207\337(\340?+\210o\250\215\236\326?\203\203\211\267\207s\260?\370\307\213!{\356\331\277\032N\3311\267\316\340\277\312\203\314\365\254\232\330\277[\265\365\321\316\247\260?\275\214\356\200O\331\340?9\367\3343\216\201\353?^\025H\352\260Q\352?AI)\300\257\357\000\300^\254:\271\326\014\322?\267\332.Rd%\322\277\241\224\no\237\253\326?it;\025\242\033\343?a\374^\304\237\205\363?\372x@\267 \005\222?\372\374. uV\350\277\225qC-\327\220\240?\310\371]\307\003:\345?@\017\2021\374u\351\277\331\r:=\355n\355?\010;\'\331\330\033\301?\024\265\233\343\345\034\366?3\245\007\036\330\372\333?\310\016\206]\377j\362?\347\'C\013\351\374\346?3\240\340b\030\016\315?\2626\352\204\206U\327?\306y\304/\240*\364?\303\177\003\233\333\264\351?\327\302\335E\365\211\366\277\034\003(\010\361P\333?uF\252\302\273\261\363?\211\251Dr*\301\305?\036\302\323\326\005\334\330\277\244\276\332\004\275\240\365?:F\212\347\354\003\302\277I\021\0311Q.\327?\210\021\216\021;\233\340?\316\217\236\027\211\273\363?\307\2363\367\343U\333\277\201q,\252\306\006\365\277\360n^\334\361\331\350?)\201\376T\213G\363?\370\320\340\2561r\355?\234u\333\314L\275\334\277\302z\020#\377L\342\277I\324[\305f\254\213\277)\177\346\004\247o\302?T\036\004\352\021y\347?\231\314\t\346 \303\336?\351\357\303\375\215x\363?E\013\331AY\001\233?d\333J\0010\336\352?\323\205c\365\001S\346?c\226`\244:\242\353?\000\235\335\301H_\346\277\230\017\303\316\002^\333?\2474!=\323\n\266\277\205-t5\230\227\363?\305\321XGk\250\364?\206\002?[9\335\355\277\034s\341\263\0030\365?A\303\214\014F\372\361?i\323\332\364-\331\373\277\361\3370\037\351\342\307\277\321.\316\2266\203\341?\373\353\025\241/\264\021\300\312\000\034Ue\005\353?\3151]>\205Q\355?H\240z\004\212\320\330?\200C\222\271y#p\277\030\337\321\004E)\320?\365\034\357$\312\220\315?2IL\353\265\312\326\277\314\356=\367\024y\354\277\225\272_\313\263\273\307\277\032\335\240c~\256\346?\241\276\215\312],\323?\224k\240\327x.\366\277<T\322\0313\311\323?\010`\353\2457\006\300\277\233h\274\375[\307\313?\242\261o\265\"\351\351?\005\324\177\277D\374\274\277?\030?\353\022P\276\277\224\032\027\210n\360\335\277\037\252a\010_\006\355?|\013a\346\333\033\326?>\211\251.]\334\322\277\244\'\233\3737q\353?\276\345\350i^\365\310\277\327a\247f\024\024\320\277\257QQ\206\275\020\332?\3468\347\017\035%\260?\365L\206\207\270\307\362\277\207\325\370A\374\342\304?\274\355\276\001\242\021\363?\312\371\367;\302\"\332\277\024\256\335U\204Q\360?1q\204\307\310T\360?qmJ+\306W\344\277\0064P\372\224\255\362\277\250\021\257\323r\325\360\277!\363\024\300%(\333\277\020\205\003x\201\271K?\314T\274\200\240\357\330\277\344F\331\3622\265\343?\033y \037?\272\352?\261\234\234$Bw\304\277:\311)8\007Q\275?\272{:@\n\317\312?\217**\3209\031\336?X\247&%\\\267\374\277\375B\016\312\217\266\247?\220g\264\354\235\365\251?\215\256\321\213x\353\310?nt\325\211`\004\330\277\350\207a\r\233\373\357\277Ny\320\252\027H%\300k\020\273\320b\'\347?e\007\231rs\302\345\277\360\356\2663$\nu\277\024\366pe`\261\333\277\327\264ag\365\r\201\277\3301\303\311\306h\310?\003\252b\034{l\302\277\250\311\024\263\220\335\347\277\207\257\330\342\200\n\343\277\377\014\017\014\306\206\357?\032\205Y\206\022\245\370\277\027\362\310\371y\337\363?\367)\016\364\272\206\336\277\311a\353~\256t\235?\204\253\251\374m\r\351\277y\027x\244\016@\265?\322\360\356\001\002\207\372\277|\330\356[\365T\352?=\2478\222\353\233\336?\324H\236%\020\276i\277\032\372\236d\n\"\307?\377\374\310\2243?\315\277H\331f\364.\213\361?\206T\341n\333\036\322\277\000\211\232\331\264\206\324?y<o\2404I\346?J\325Q\031\264\343\327\277\301C\242\341\314\247\356\277\030\303\205U\246\025\362\2773?U~\034\331\276?{\376B\321\240\330\354?\224\321b\026\362\033\270?\032\313B\234\007\217\363\277Q@)y\252\377\357?\017\204\r\300f\\\321?\317\240\0271\230\202\373\277M\202@\334\017\340\245?\266_\252\333}D\267\2770\275,\262\037\\\365?\262k\'%\362\177\341?Wy\310.\360E\346?\3232\227\361\007i\320\277\302\352Am|t\353?\005\233\254 \202\344\334\277\206\000\245\000\0203\242?h\212I\023\273W\303\277\346\305@\242\317\367\366?}\2255\240\306\223\324?\252A\nUu\026\300?\3232\227\361\007i\320\2771\213\354\017\000b\367?\013\021\242\257H\202\247?\370\215\'\363\002\261\327?1&\355\250\232,\353?\342\377\360P\361\366\323?\030\017.@\375\034\367\277F\354\260\375\330<\200\277\234\342\027\021\355\330\325\277\202\313i\001\303G\316?\272T\364\005\301\362\234\277\006a\025\303B\210\350?\204_\001\022\027\006\344\277\034\222w\233M\350\361?\324|\246;\353x\261?\336\030\'\261a7\355?\236c\311\205\177_\324?\202S\013y\310\005\255?<R\007\004\256e\305?\363\232_\023\326I\361?\275\302\357\262\204n\330?\2059\255\234k\202\341\277$\031\316\006]\020\261?\233\036\337(\212#\325?\031\002\313\273\036\260\300\277\265\350\252m\'\274\335\277\221\270\307\344\365v\353\277\356\326\247{\002\264\323\277\370\215\'\363\002\261\327?i\276)\325\235\217\004\300\177\231\261\3008\005\361?\316\030\'\336\024\021\324?\234\003E\370\213I\340?I\2570\323\317~\347\277\357\246\303\336\264\010\314?\010\201*\315\262\201\365?\013)\343\357Fx\347\277\265\350\020\371h\323\350?\036c4\367y\036\360\277\310B\2529\323\221\320?\0267\263Vo\033\363?\224s\335\207\000;\354\2771\204.\202\236\226\361?\277\035\264\367b;\327?g^.\321>\222\352\2776h{\215\010\271\320?\221\257qp\326f\331?\027\"\213\300s\352\345?\222uun\276\177\310\277t\225\002q\377t\342?\305g\221\3144\337\315?Z\335\225\255\216\256\364\277\360\356\2663$\nu\277\357\246\303\336\264\010\314?su4\244\004\276\277\277\363\3334\225P\336\326\277!\265N|\323\316\354?\030\\UMze\354\277@\234\006\257\323\251\361\277\354\303\365\365p\'\335?\016F\341\360\322\353\327?H\240z\004\212\320\330?2\300)\260k\214\361\277\017\3728\006|\344\322?\373\265\023\"\271\237\337\277>1\rL\326\023\335?(N?\220E\014\345?U\370\257tf\365\344?2R;\032\336\020\346\277\264\3758\217d\004\366?\3264\332\245\367\024\376\277\271\372\273\372>g\356?\236\272+\265\203\020\347?\302\201\316\260`\030\350\277!\265N|\323\316\354?\361\243i\007L\230\270\277\333\306\014,\010\207\360\277\001\023o\223\237\376\322?\177\232(\030\243\373\313?\354e<~\002u\347\277\\\200\206\274Q\021\354?lV$P~\244\366?\212\375\344\235e\253\343?Pe\037\350\315/\320?\344\252\246q\321\035\362\277\206Y:EF\304\335?\335V\355\364\263\220\333\277[e\205F\\m\304?\264\302\274\203\275O\346?U;JR\265\273`?\261@2\026\000|\t\300\"k$m\242\266\363?&\262\277\324\204\000\341?\326\032%#a\223\344?%\273I2!\342\274\277l\254:\214#3\353?\200K$\210\021k\306?\212\310\247\375\371\200\331?\3468\347\017\035%\260?5{?SvP\362\277\321\247\356\017\334\360\311?\'\217-6\357i\334?\335\226\003^\222I\225?Q\314\310H\032\333\354\277\301\033\203\203O\232\324?!\217\372\006(K\352?\375\217%8O3\350?\032\313\\z\354\n\315\277\242\250\263\342t\233\323?.Q\275N\301\230\225\277\2309F*\301\336\327?\302\304\355\367\320\360\350?\276\300\227\340\016\t\021\300ck\031\267\262\266\341\277\213}\220\242X\237\306?\302N\017\354\032\335\371\2776\315Y\330\317\000\357?\352Q\306f\247}\343?\206]\320pP\213\332\277e=3_\261\215\312?\225jT\344\031\014\350?\t\004\271\227\246v\315?v\333k\360\032\362\361?\023\202)Y\377U\372\277\246\252\344V\210<\326?x\033u\350\\\367\355\277\225\016f\2020\275\300\277!\217\372\006(K\352?EK\260\216\220\212\353\277:U\036\r\222\353\361?\tg\017\277\332\350\340\277\322\032\262(-\276\004\300a\213s0\306\331\353?f\325\013\226\364S\365?\352\350R\252\213!\340\277\210\362\367)\361\342\343?\277\035\264\367b;\327?\034\327a\370B$\361?\210\362\367)\361\342\343?\372I\200i\376\021\001\300|\330\356[\365T\352?c^\256g\030\377\365\277\304\035Nl!$\354\277\'\016H\330\337\021\304?\357\321o\235\310X\251?j\342\326\177X0\022\300bF\211\323\320\235\354?\t\252.\006K\301\341?\'G\033w\242)\324\277\357\036\207\013\210\325\351?\006a\025\303B\210\350?\220\303\347\264\3447\344?\010n\315L<\264\346\277\231\263m\'\"E\341?|\264e\374\3164\346\2779\257c/Jw\340?\330\036\356}2y\323\277\262N\017\031\316\266\360?"
      }
    }
  }
}
node {
  name: "tensors/component_8"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 750
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 750
          }
        }
        tensor_content: "\351\205\263m/\322\346\277.s\2536\252:\336\277f\375\352\245H\224t\277\033\373Q\331\333\243\343\277\307a\343\360\225\311\342\277.8 \030A8\341?\032\307V\371u\227\311?\334\001\366\024\210.\347\277\266\251qQ\300\264\345\277\334\001\366\024\210.\347\277T\214E\020\3236\345\2771\331\030\034S\024\323\277S%\242_\020\353\340\2773\257\035\024D\242\326?\357t\272\333\006\330\304\277\345\205G\035Wj\242?\366,*!\317v\361?\357]\036\343\257H\362?\253\300\013\360\t\316\347\277L\205\337&\030\201\336?\224\354D\205\351\367\345\277\344\302\242\257\032G\333\277E\241\344\006iG\341\277\207h\207,BT\346\277[t\370\262A)\007@\334\033P8\037\347\345\277\343\320\001S\247\\\346\277L\205\337&\030\201\336?\021\231e\241\377\023\261?\267\303\313tWm\344\277$T\272\"\266\036\362?1\265\276 e\301\346\277\017\221\356\243\313\270\342\277\333\315S\354\253_\004@\247\276\020HV\305\341\277v\323\316\347d@\364?\307\310\206\241X\025\347\277~\242\332%\204n\363?\356\371\025\316\217\034\005@]u\253q\211\035\343\2772\216\311\211\324N\003@\004\377\321\247\227\377\327\277\327\237\352\200\3442q?}\357#\263\257\001\371?}\361\210\2038\257\000@&\376\021^)C\340\277\'2\244\302\300\345\270\277\373W\1770\234\237\342\277\342\324`\036\335\327\343?\220Q\355\215\370:\344\277@\212\220\"F\333\255\277:\236$\202\033\250\344\277\001\361\224\346\241\270\301?#\tH\001\232O\335\277\006\210\215\022]\372\325?<C|Qc\377\323\277o\254\375Zn_\270\277\202\315/5Q\227\344\277g\004\237m\241\315\337\277\227$X\227M\344\340?A\222\300\206B\233\337\277\001\r1K$\025\343\277\320n8x^#\373?!\260\003\364c\031\344\277\305\017/\"c\211\334?\344\302\242\257\032G\333\277W\227\237\357\347\207\367?\201\263\325\021\272\336\345\277\272D\311H\261q\347\277`\326\255\025+J\327?\251\222\370\265\374{\312\277[_\260\031(\340\341?\025\255Co\026z\347\277\010\342\002M\005/\252\277\370\224nr\207\024\327\277.4\301L\013\275\343\277>\322\330\310I\031\342\277;\335\016l\272%\337\277HF\321\000\325\276\376?\026\321\235j\004\315\323\277\203\014\032\037\360\024\337\277^\225\246\241A\365\301\277\201\213\034K\226\020\334\277\273\317\306\364a\020\330\277\271\335%\230\356%\343\277\014\3507\tN\346\325\277\337[\376QQ\300\006@\277\222\327\262v\233\343\277\307\310\206\241X\025\347\277\037\325\223\272k\336\337\277\351\251\ri\035%\323\277\036|O\2555\250\346\277\023,F\233\274u\344\277*q\260\216\3661\330\277AS\326\234\243\035\345\277\032\307V\371u\227\311?)\262\267\002\340\206\315?\030\341\367\265D\353\344\277\217\2506\363zh\327\277o\'|\004>\023\320?\275x}\217\337\342\344\277\201\263\325\021\272\336\345\277\200L2a\367\222\341\277\201\263\325\021\272\336\345\277\350\014RN\252\365\311\277\020I:\255\357\022\352?\020E\"\224v\014\020@\246\323\377)\346\320\337?\025\255Co\026z\347\277Q\353L\014\301Z\323?=l\262\225]\264\020@\267\303\313tWm\344\277\304K\350\2304\214\341?\243p\002\336\220\233\345\277\230\207\234|\332\264\347\2772\247_}\330\253\333\277a\201\246\361\223\300\326\2772\216\311\211\324N\003@\206 \3235f\256\355?/&b\251~\247\330\277q\341\033m\237\263\004@Q\353L\014\301Z\323?\320\360\326\354\255y\337\277\333\331<Nd`\335\277\022\261\351\323\203\220\301\277\2531\257x#\264\331\277\014]:]\235G\345\277\301\023\325\206\320\237\346\277z\227\200Fo\035\341\277\242*\220(\240\231\317\277SE\302Fi\217\247\277u!\271\025\206%\333\277\310R\343\254\023b\366?wc\314\377@\254\343\2771\265\276 e\301\346\277B\232~\035\256\221\332?\2167\223ja\202\345\277\255s\302b\336:\342\277\275x}\217\337\342\344\277\225\336\345\341\\\342\332\277\206 \3235f\256\355?\005A\345\221R\206\340\277\277\222\327\262v\233\343\277\231:S\357\256!\342\277\363\222s\312\323\013\321\277\207h\207,BT\346\277r\207\004\r|\233a?,\362\255bP6\333\277\317\227\222\337wC\346\277\257\215\034\206u\363\340\277\020\334\365\357\013\250\305?\215@\362\241\302\312\361?\220\035Ke\034l\001@*\231iU\032\000\342\277\255s\302b\336:\342\277z\227\200Fo\035\341\277*\231iU\032\000\342\277\233\223\227\374\344W\333\277\370b\265\323\014\254\337\277\030\341\367\265D\353\344\277\3160\357.\265\367\341\277\243p\002\336\220\233\345\277\222\2761K\334\245\310\277\231L\024\021\234\257\217?\201\263\325\021\272\336\345\277\204\013y~\372\302\375?\376\330|\004\366\243\345\277\362n\031\317\345\270\344\277\312i\231%\337\251\020@\344\302\242\257\032G\333\277\025^\335W\240\017\267\277\'e\265\016\354\216\344\2772hu\2239.\341\277%o\265\346B)\322\277Mp\360D\210u\340\277\242HI\027m\315\333\277R\013H<y2\342\277Rr\353\354;~\346\277+\322\2622\230^\354?W\230@\220\335\331\330\277\031 \342\237\343h\337\277\2531\257x#\264\331\277\256\262\254L}\270\334\277\204\000\330\005\256\326\316?AS\326\234\243\035\345\277\376\252\"1\261\266\353?a\251_\270\267\216\340\277\330?\251\206\006\377\001@x\010$\317\210\003\323\277\330\360\372(R\276\364?T\214E\020\3236\345\277\037\325\223\272k\336\337\277\223]\350\r\003\336\327\277]\177\253I\340\267\320\277\247\242t\343\323h\300?N\277\310)\217\251\247?\265B\316\240\375h\341\277eD\267\257\250K\342\277#\312]\027\373\321\342\277T\214E\020\3236\345\277\263}Y\277fk\316\277\231\022\232(\213S\330\277\017\304\357+\2625\004@$I>a\n\377\272\277\272(R\233\317\341\275\277\262\374[\353\014g\313\277\317c\227\377\0217\314?\215@\362\241\302\312\361?f\202\000\371Qw\373?$\304\274\n\332\262\322?\240V\250\272\371\342\346\277\234N\014\006%\273\320?\0144\340\365\203\'\372?@y*\223>>\007@\021\253H\307bq\341\277jJ\021#\222\317\345?\216\320\357\271\2366\341\277\273\317\306\364a\020\330\277\274~CS\241\316\254\277\006\210\215\022]\372\325?u\025w\374C\347\312?\223\322\352aR?\347\277\216\320\357\271\2366\341\277\245\256\266\374\025\247\320\277\235\325\252\346\237\336\343\277\211\301\3139x\212\337\277&\376\021^)C\340\277\347\213TzP\361\306\277\330\200\370@.*\344\277\357:e\210\267G\347\277\246|\375]\233>\331\277\310O%\202\3238\312\277\303\306\213\371\244\014\341\277\000&\330\257s\331\005@\303\306\213\371\244\014\341\277\035T\226\346\021\332\334\277\203\323\320Ar\266\304\277\350\036\020\275l\206\342\277\213\003\337#3\021\350\277\245\311F\353\306\321\336\277O\027B\017}\232\005@\303\306\213\371\244\014\341\277\031 \342\237\343h\337\277ZA\367*[\254\345\277\203\260\314*\227.\233\277W\227\237\357\347\207\367?\211\202\341O\331\014\345\2771\265\276 e\301\346\277ZA\367*[\254\345\277\362\255\003\271\2046\337\277\005A\345\221R\206\340\277\301\023\325\206\320\237\346\277\332\232Rd\305\342\342\277\253Yh?G\202\343\277\310\370\"\266\210\246\263\277\3216I\242\236{\345?%K[\353T\326\345\277\204\r\336N\203p\005@<\270~\245\262`\343\277\317\267\215\0170\033\305\277\301\320 \374\037\307\374?\r\347\226hX\224\364?\234\251\222TF\225\314\277\262\374[\353\014g\313\277\003\216.\037~\031\346\277\027`\372\341\352\346\341\277\0144\340\365\203\'\372?W\230@\220\335\331\330\277$\344\267:\222\212\341\277\304K\350\2304\214\341?[?\265\351o\010\303?\231L\024\021\234\257\217?\253\221\347\241\203\326\242\2771\265\276 e\301\346\277\277\222\327\262v\233\343\277\330\200\370@.*\344\277,\362\255bP6\333\277\224\354D\205\351\367\345\277_f\253-\007\266\366?\024k0\205[\363\336\277]u\253q\211\035\343\277\272D\311H\261q\347\277\247\242t\343\323h\300?\242HI\027m\315\333\277\3216I\242\236{\345?\277\222\327\262v\233\343\277\240\357\004\n7\227\342\277\234N\014\006%\273\320?\342\364[N\225\257\322\277\2572\t\200\341j\376?z\344\311\323\232\260\346\277\220Q\355\215\370:\344\277$\304\274\n\332\262\322?i\337\016\247\231\010\344\277f\321\256V\006\270\010@a\031b\240\333\"\361?\366\tq\306\326u\346\277]M\362\252eO\331\277\373\226i\032;\035\335\277\253Yh?G\202\343\277\231:S\357\256!\342\277\261\016\032Z\317\367\343\277\3160\357.\265\367\341\277\330f\236\035\227q\345\277h\267U\340u:\332\277\311\342\340\304\357\315\345\277\216\320\357\271\2366\341\277sma\002\274f\377?\010\302\342e\254\212\343\277\025\255Co\026z\347\277\315}8\274\340\212\347\277\204\000\330\005\256\326\316?T\214E\020\3236\345\277\245\256\266\374\025\247\320\277\3375\252[\266\237\344\277*\006\256\022\376j\306\277\030\307\235\222\2552\346\277\2539m\017\217\252\324?]u\253q\211\035\343\277\023\305\242\352\371)\340\277K.\335Z\315\356\327\277H\"\342\332\302K\344\277\215\0359G\312\311\346\277I\016\342*\025\027\351?\024k0\205[\363\336\277,\263\303x\261\270\340\277\314\026\225\013\036?\343\277*q\260\216\3661\330\277\333\331<Nd`\335\277\344\211Y\322\234\350\300\277g\305\264\203\002P\345\277\014\203\216S8h\007@\275\221$\364.\247\007@`\326\255\025+J\327?\3069**r\373\330\277eD\267\257\250K\342\277\351\205\263m/\322\346\277\024\266\242\246w\302\363?\003\262\210\032ll\322\277I\016\342*\025\027\351?4\033\n$w\314\266\277\313;%\322%\004\337\277\231L\024\021\234\257\217?\370#\313\351m.\345\277\362:w\246\t\352\001@{\360\253\226uJ\207?\244\372^\351K\350\364?P+Cl1\n\301\277+\000\r\006\335K\346\277\022`\261\177\025\326\223\277\303\005v\343C\212\333\277\310\272\'\376\313\377\333\277\025\255Co\026z\347\277\200L2a\367\222\341\277R\361\3136K\253\276\277\"\356L=\rE\375?f6X\014\0346\327\277%K[\353T\326\345\277?\021\303\262\350\226\334\277U3\227\332\307[\n@\300\371zc9\347\347\277-X\033H\371\017\320\277&=\374G\310\300\332\277\374\276\"\341^\353\346\277\037/\006 \n\025\341\277\023\003\3543\243U\371?o\301\016\037\2259\333?\333\315S\354\253_\004@\213\355O\034\252;\253\277nzf\236\212\305\345\277\236\371\004\342\2151\320\277\327\214\362\0232\222\007@\261{^\027\263b\310\277\234+S\253,\272\365?\251\260\261\244\311\257\326\277\267\303\313tWm\344\277\223\245\234\004\337\203\300\277\224\205\241\324&\254\341\277l\375\307\225f<\340?\303-/\252gX\345\277\033\033M\t\224{\302\277\334\033P8\037\347\345\277\325\345\240I=m\342\277\266\251qQ\300\264\345\277\027`\372\341\352\346\341\277\337Y\231\201\310\022\377?<\270~\245\262`\343\277L\301\230\235\351\203\343?\263\372\031\252!\303\350?+\322\2622\230^\354?g\305\264\203\002P\345\277\270&W\363\033\331\267\277\357\014\013\265rZ\355?\t\320\327\340c\373\014@\340O\004\177MX\343\277D\207\212\343\321\216\342\277\275x}\217\337\342\344\277)\346\262\342E\223\347\277\037/\006 \n\025\341\277E\241\344\006iG\341\277nzf\236\212\305\345\277c*]\214\021\223\343\277\372=%\r\005\347\343\277\230\207\234|\332\264\347\277OD\330\262.,\311\277\352kkh\352\273\002@\266P\303\033\265\331\n@\225\037,\251\'\373\210\277\ng:5\364\341\322\277R\013H<y2\342\277\201\263\325\021\272\336\345\277P\312\370\201Q\007\000@\0146E\306\014\325\001@\202\315/5Q\227\344\277/o\'\264\323\362\270?&\376\021^)C\340\277aO\355R\031X\337\277 \231\214!>V\232?\214\332\204\274\031\361\374?\266\251qQ\300\264\345\277>9|y\014e\346\277\021P5\301\316\350\376?\027`\372\341\352\346\341\277\230\250\250\300\0132\276?[_\260\031(\340\341?\233x\2348XM\373?u+\037\343\333\306x\277k8S\264\317>\335\277\330?\251\206\006\377\001@:\236$\202\033\250\344\277\'e\265\016\354\216\344\277\202\315/5Q\227\344\277s\310t\010P\357\341\277\341\216\356h\354\325\335\277\333\331<Nd`\335\277t\350o8\010\307\300\277\307\345z\263\213\262\354?`\366\250E\343!\346\277\354\370Q\236\374\300\336\277\262\374[\353\014g\313\277\272$\316\030\371\231\330?\376\330|\004\366\243\345\277a\020\003iz\332\344\277\305\017/\"c\211\334?l\377\t\327Q\340\302\277\032\005R\2612>\321\277\216\320\357\271\2366\341\277%K[\353T\326\345\277\037\232\010\234\002\334\342?\3375\252[\266\237\344\277~\022\335\r\250\002\324?\213\'9\037!d\324\277\313\374:\350\206\206\344\277U3\227\332\307[\n@W\227\237\357\347\207\367?\334\001\366\024\210.\347\277.\205i\245l\313\346?\275\021\332\336\034\227\340\277\025F\240\276S.\343\27734\237jt\356\276\277nzf\236\212\305\345\2776jp;\3556\347\277N\277\310)\217\251\247?\323\313F&\246\264\343\277\270N\311 \010\014\325\277\252?\016\034\260\311\344\277\037\325\223\272k\336\337\277\ng:5\364\341\322\277\267\303\313tWm\344\277\366\364\246\233\3476\240\277\034b\365\211\236\357\347\277\014\203\216S8h\007@ZA\367*[\254\345\277x}&#\330d\342\277\225\037,\251\'\373\210\277\027`\372\341\352\346\341\277\263(t}f\260\342\277k`\014{\363\014\347\277\224\354D\205\351\367\345\277\352wT\312\242\274\333\277\344\203\270\305{\311\340\277+\000\r\006\335K\346\277\354\271g\264]C\344\277\030zT\005\202\237\340\277\377\3735_\356\244\360?\033\373Q\331\333\243\343\277\001\331\216\"HF\000@\317\"\220\213(\342\326\277\230_\343\265\266\346\335\277w\242\266\351\337)\336\277\256ec\277Q%\327\277\253\221\347\241\203\326\242\277>9|y\014e\346\277D\306t\315p\014\335\277\330f\236\035\227q\345\277\023,F\233\274u\344\277[\232;8\221\342\336\277\227\350\236 |\341\333?ol\007\373\375\257\332\277O\361\355\030\342y\343\277\014\3507\tN\346\325\277[_\260\031(\340\341?\207h\207,BT\346\277\235\024\225\320>\\\336\277\275x}\217\337\342\344\277\314\026\225\013\036?\343\277\312\320\"V-=\315\277W\300\371V\001\250\342\277ij\014SJ\247\324\277\353\237\r\221\306\212\345\277\377\374\326\377\343\366\321\277z\376#\3671i\345\277[t\370\262A)\007@\263}Y\277fk\316\277\363\222s\312\323\013\321\277\3676\277#J1\335?}R\323m\030\262\301\277\243p\002\336\220\233\345\277\0344\233\266Y\002\356?\346*\n\220p\356\005@\351\205\263m/\322\346\277\246\244\266$\277\014\343\277wc\314\377@\254\343\277\226\006\237\250\200\260\344\277\223\251\220\3728\037\374?\001L\0335\303\222\335\2773\257\035\024D\242\326?\246\013Z\325\201X\347\277P\310\223\261\310Y\370?Y\332Sz\230`\341\277.\205i\245l\313\346?E\356-\224\224\332\346\277M\327\223\365J\301\344\277\247\276\020HV\305\341\277R\226E\350)\321\322\277\210\363\204\330\362\362\326\277\337\242\356\030\232\n\311\277\021\253H\307bq\341\277\374I \215\017\212\327\277!\272\003\314\272\263\321\277\351\267J*\023l\271\277\366\310!\014\257J\004@\300\314,\006\306+\301\277X\317\266h\265ap\277\002t\324\373\346`\347\277\225q\241$yw\346?\354\370Q\236\374\300\336\277\366,*!\317v\361?Rr\353\354;~\346\277\344\352[v>\025\345\277z\213\033\236\217\325\013@Bm0\300:\326\343\2776jp;\3556\347\277\232\241\366\237qm\346\277\330f\236\035\227q\345\277\373\226i\032;\035\335\277[\232;8\221\342\336\277o\'|\004>\023\320?I\016\342*\025\027\351?\314\026\225\013\036?\343\277\005\250\210B\025\322\344\277{\360\253\226uJ\207?`\366\250E\343!\346\277\370#\313\351m.\345\277\257\215\034\206u\363\340\277\334\"\333\330zi\244\277\337Y\231\201\310\022\377?\317\227\222\337wC\346\277\212\234;sp\305\343\277>\322\330\310I\031\342\277\223\322\352aR?\347\277\377\3735_\356\244\360?\220Q\355\215\370:\344\277\252V8%\253lR?\355\363\274\007\255\323\301\277Bm0\300:\326\343\277\346\004\266\231\325\315\343\277\027`\330\377S\030\275\277f\030\237\035O\002\313\277\303-/\252gX\345\277`\366\250E\343!\346\277\313;%\322%\004\337\277 \231\214!>V\232?\236\202\230\355\003\374\226\277\317\227\222\337wC\346\277O\361\355\030\342y\343\277\210\206@\033\017\210\342?$\304\274\n\332\262\322?\356\323\301\327\364\373\342\277\244\251K\273\016\372\357?\221\270\220>\273\206\350\277\333\331<Nd`\335\277\307a\343\360\225\311\342\277[?\265\351o\010\303?\334\264\254\207\\\233\341\277\025^\335W\240\017\267\277|\030~\032\311!\344\277\036|O\2555\250\346\277@w0\230\221p\321\277y\254o(\377(\337?\360T\277\253N\000\346\277\206@\316e\036\206\334\277\310R\343\254\023b\366?\224\253\365\312\301\314\003@ij\014SJ\247\324\277\350\036\020\275l\206\342\277.8 \030A8\341?g\004\237m\241\315\337\277\343K^\032\340A\331?\370\224nr\207\024\327\277\230_\343\265\266\346\335\277\311\342\340\304\357\315\345\277Bm0\300:\326\343\277\347\216\022\245\220\032\363?\024k0\205[\363\336\277\231L\024\021\234\257\217?V\246\2373j\357\343\277/\233d\375\315\010\350\277`\326\255\025+J\327?E\010\210\267+\223\345\277\320\261\354\002\017\374\344\277Z\314\364\326\013K\326\277\271\034\020\202\215\243\335\277\211\301\3139x\212\337\277\005\250\210B\025\322\344\277nzf\236\212\305\345\277\355\253\010\021\321-\331\2772\247_}\330\253\333\277\247c\375A\302<\377?\240\357\004\n7\227\342\277\256ec\277Q%\327\277\222kG\261\217\363\342\277 \231\214!>V\232?\340\234M\014y\353\350\277\362\255\003\271\2046\337\277\0146E\306\014\325\001@\363b\264&\006q\017@\326\377\372l\324%\341\277\212\036\340\323\010}\213?9s\366\203\374\301\253\277\3676\277#J1\335?k`\014{\363\014\347\277\347\265O\202_c\263\277E\356-\224\224\332\346\277g5\267k&\344\365?\355\253\010\021\321-\331\277\206\001\344{\177\010\342\277z\376#\3671i\345\277\262g^g\005.\335\277)\277\275K\265 \004@vIr\334\251\363\344\277\240V\250\272\371\342\346\277\233x\2348XM\373?D\306t\315p\014\335\277\352kkh\352\273\002@\224\354D\205\351\367\345\277H\373\354C2\331\000@\204\277\320\221\304\201\331\277E\241\344\006iG\341\277\001^\331\243\205#\346?\271\335%\230\356%\343\277\363\222s\312\323\013\321\277\317\227\222\337wC\346\2771\265\276 e\301\346\277~\231{\356\"&\347\277\301\023\325\206\320\237\346\277\262g^g\005.\335\2778\204\312^\204\357\345\277\325\212\215C\251\344\377?1\331\030\034S\024\323\277\372=%\r\005\347\343\277\tC\3409\006\217\346\277_\026\244u\233\371\304\277o\'|\004>\023\320?R\013H<y2\342\277\271\003z\216\211F\005@T\214E\020\3236\345\277\367\367\262W\024\345\315\277\"\241\003\260\341\261\367?>9|y\014e\346\277jJ\021#\222\317\345?\r\347\226hX\224\364?\266\251qQ\300\264\345\277\2572\t\200\341j\376?v\375p8\352t\t@\024k0\205[\363\336\277\027`\372\341\352\346\341\277\3676\277#J1\335?_\3321\230\001\222\274\277\354\271g\264]C\344\277\243p\002\336\220\233\345\277$\313\245\000g\346\014@\331X?z\n\\\332\277\014\203\216S8h\007@\325LD\372\377\270\346\277\370\224nr\207\024\327\277\206\323\211\250:\033\350?\272g\202\243\251r\362?`\366\250E\343!\346\277nzf\236\212\305\345\277\034\025\254\374r\\\342\277^\334N\"Li\347\277\256\262\254L}\270\334\277c*]\214\021\223\343\277\315\n0c>\367\r@e\203\241\231G\311\334\277\027\237\344\313\211d\334\277\357\324\t\301`\020\r@\305G\211\315\376\020\344\277\004\377\321\247\227\377\327\277\311\241\221\n\310\242\003@\001L\0335\303\222\335\277q\025\276\225{\202\347\277Y\332Sz\230`\341\277\327\271\210\267\343#\313\277L\205\337&\030\201\336?\263\217\027.)\374\346\277\320\360\326\354\255y\337\277\244\251K\273\016\372\357?4\351rg\2232\344\277\336\r\361\224\222\321\332\2771n\026\240ZM\301\277\243p\002\336\220\233\345\277Bm0\300:\326\343\277V\246\2373j\357\343\277\212t\202\254L\367\331\277\325\345\240I=m\342\277\303\005v\343C\212\333\277\0146E\306\014\325\001@e\253Z`k\227\346\2774\r\315b\201\205\320\277\033\323\230\022\270\325\331\277.s\2536\252:\336\277\374\276\"\341^\353\346\277\307\310\206\241X\025\347\277\3055\246\247\233\263\263?<C|Qc\377\323\277\234N\014\006%\273\320?\227\350\236 |\341\333?\r\33671\367K\350\277~\022\335\r\250\002\324?\247%\264\370\030\021\346\277\224\253\365\312\301\314\003@4\362\321\236\364z\360?\330\245\210\0076\357\337\277k`\014{\363\014\347\277uo\306\322D\024\007@34\237jt\356\276\277A\222\300\206B\233\337\277\244\372^\351K\350\364?"
      }
    }
  }
}
node {
  name: "tensors/component_9"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 750
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 750
          }
        }
        tensor_content: "\000x\302X\024\244\367\277\231\377\263\272\2365\366?\236\002|\264$M\350?\355\321\234\"\220\217\341?\370nV\321\025\351\255?%\342\216>\377\236\372?\241\360\375\361\224\023\364\277\305\243\257\354\312\310\300?\357\227\304y\202}\270?sF\305\267\032\273\354?|f\250\205\331\207\356\277B3\206{j\\\332?!\2422h\252\377\336?\225:\336u\225\\\366?\371\202Ke\333\036\365?\332\353]\273\264\315\343?\2559r\311\311\363\311?\037\306\026\231\272u\311?~\334\347`\003\305\370\277\333u\302\347Sq\370?\260\217\226\024\017\207\333\277,P.}\001b\270?\\\2751\005}\016\332?H\032\340\216C\263\367\277\262\225\3765\321\372\350\277\013\014\314\340\362 \347\277\336\223l\001\334T\343\277\312\343\212#\014s\372\277\243\\X\241\n\025\362\277X\247\235(\233w\334?KMd\356o\n\357?\301\350\227%l\034\367\277Sz\021m\0367\225?\230\370 \322P\025\004@\177\034]\212\221\221\341?\307$]\3209p\351?\r\201s\205\221\035\367\277\250\'\224V\215~\355\277(#\366\345\006\350\374?\300$&\361\000 \367\277\376\245u\033\353\024\371?\307\266\355\323l\241\360?L\367\311\301\330\032\367\277}\036\202U#\035\365?\024\310\273 si\372\277\022?\007\177n\003\356?s\301\351P\271\202\265\277\322H\336:A\221\343?\337\3557\276h\253\341\277>\365\t\304|\035\311?\275)J\225Q\023\357?\244\244/\202;\217\360?#\016\322mf\326\362?(\302 \330\355\301\361?\317\177.A\360\035\321?\022\305\202\223\362!\361\277\000*\001\223\315\024\371\277_\2415\007\331\003\357?T\222N{I\024\347?\266\363 23\227\364?\354\277\217\363\372\205\344\277\004\201Nl\223N\350?\365Y\360lB\005\346?@jI\306\\\374\300?\021\tk\327\014t\372\277\252\203\346\016\323\245\307\277w.\025\001\343\252\372?v\222\230\255E\262\324\277\036\037C\256\372\202\356\277<~\340\260\225\251\201\277\252\202\346\031L\244\372?@A\003i\207\363\307?\217\nF\270\241\302\362?\275M\311\334\356W\311?\227\217\2218Y\276\363\277\013\354\274+dO\367?\366\266\261\021R\261\311?/;\224\326\003w\333\277\251\310\3069%t\363\277I\231Xv\361\215\360?\314(\242I\3244\363\277\332\353]\273\264\315\343?3\365\002S\273\024\352\277K\211p\022\356\017\327\277\3622\rG6\204\334?\275T\277`\023m\355\277S\340X\002A\030\366?\016$\230\277\354\355\350\277\315v\331\014\252\303\322?\376\353\220\275\341\032\264\277\006\341=\302\367\231\333\277 \360\"\352I#\356\277\202m\373\344!I\350?\252\273\267\343\303\333\354?\323\367\34161\327\371\277\2107\262D\273\306\366?-\370\352\211\2112\363\277\370=\241g\243\355\350\277\353\277\364\334m\267\324\277\030\234lG\2043\353\277]pR\250\275]\343\277\347\210X@\205&\344?\2467\023\031\250\256\357\277\355G\000\030\216k\333\277\373\252\003/\200\254\345\277\302e\236\310a\332\324\277k\342\203\250\262\234\360?\260\273!S\010\200\321\277\342\250\220y|f\355\277\260\254=\200\304|\361\277\320\241\001{\202/\264\277\374\265\005\016_\266\346\277uM\257\246H\010\261?\240\231\311k\010\007\342?OL`\252\273\014\362\277\350oG2\373%\332?\017\343\350\010S\343\350\277Lp~\217\215b\361\277\0248\202\252\201\301\373?\347\324\032\006W\254\360\277\021\tk\327\014t\372\277\007}i\277\342h\341?\020\203o\314\272:\361\277\213\321#\356[\267\343?\307\206\257]gC\354\277\321\342\247$\243\204\332\277Bz\332j\357P\321?H\217\3303\260\203\344\277\204\365\006 B\375\356?\225\210\321\260\200l\355\277!\345~\264\352\033\360?\002\261@\033\221\316\347\2778\303\300\243z\267\373?\313\\\313\336!Q\316?\261\307e\376\017\'\306\277\024\240\341\022Y\234\355\277\230\274d\265\022-\375?\335\'\330\235\244s\340?\027\335\033\376\035>\353\277\346\'\265\247\020\201\361\277\341m\344\3721\236\352?\311\225\354SY\326\352?/\355L\306\301\003\305?\024\036\350\216\230\270\335\277\033&\226\rCD\350?\2549Yv\220\306\354?\373\300\277\335\253\376\351\277\230-ViY\330\326\277d\371\213\342\236\364\264\277kw\315\331O\332\343?\326\372\324eh@\347?V?\240\360\352\341\342?\202\222\243\245\256\375\350\277C\353xm\037E\354\277\031\351\2431\020d\350?\037,b\312\"V\232?%\316\0245FH\354\277\0205\303\205\372\030\316?\333N\243\224\267s\275\277o4\000\230\027s\355\277\257%\330,\344@\321?\022\2411:R\033\352\277\014P\333\356S%\341\277\"\371OLF\302\345\277\324\315;\235p\261\322\2775\223j \325_\002@\374\261@\364\332,\372\277gH\r\261\272\177\264\277\243w\234+\333\330\373?\336;\254\356K\006\356?\257\034H},\035\264\277\214`0\227\261\362\233?\323)/\336\332\177\354\277\3261\370\023\374\236\311?\246\251W\2553\305\335\277M\362\363\236\261\301\354?\310D\025iG\353\337\277-\354+[!\031\351?6\262m\357\345-\365?]\000{\356U\224\366\277\323QEQ\377\017\340\277\336\303\342\226\227R\265\277\343\202\272\361\250\025\327\277\365B\036K\337\023\352\277\035\337^\242\272i\360\277\252`g\321M\231\341?\375\002\027\021\221\301\267?\3043\224\252x\200\373?\016E\235\252jX\371\277\210mk\306\375\305\354?\037+\310(\241\274\363\277\230\200\220\2134K\321?\235ezEE\033\316?\020\251\354L\035\237\263\277\210\034\205\\\333L\350?\226O2x\352X\276\277\330\355n\235\241\373\363?v\365nl\034\305\343?\204m\014\025{\272\363\277\307*\215`\244\340\341?&\300}\320\257\327\340\277E\002\003\200\360t\352?,i\025$6g\364?k\200\261-\220\207\356\277,P.}\001b\270?\010\273\034V\t\370\364?\345\020\276l\257\300\346\277\372\3643\0010\026\362\277`rQ\2502g\365?\335\360\353\316Ie\360\277\361?\037V\343\010\333?\354M\260H\342\240\346\277\351]vhp\337\363\277\316\255\324Z\025`\374?%\306\361\233\371I\365?Dt\322\344H\342\264\277\321C\322\352\377\232\371?K\211p\022\356\017\327\277\261\312\326i\363\356\360\277L\244z\350\374\363\353?\375\232\307\365%\313\354?Y\373\351!u\020\362\277\031[\275\220\352(\353\277\236\254+\245\370\304\246\277\035\032\235FV\356\363\277\355b\034\320\024t\356\277\245fq\036\236_\002@J0\220\223\347\006\345\277/\211\2757]\267\256?\277\375p\325.\200\333\277\255\014gn\255\004\377\277\371x\345\321\200\256\210\277\006\230\224\366y\377\355\277o}R\325\362\275\343?\365\351\201T\303\211\300?\265J\235\307Qe\344\277\303\317I\252\324O\340?\217\003:\232\217l\311?a\210r@\321\352\371\2771\202\033\220;r\355\277J\337\230\371k\034\365?\200\004\240*\250R\331\277\323QEQ\377\017\340\277\022f\007\177[\364\351\277\332q#\231\354i\355\277\253g\026\r\220\326\261?\326\272\216)\001\342\300?\232=\246o\033t\350?\302FH\217\251X\374\277\272M\244\337-,\365?\370O\331\313\351H\321?.\2363\266\2419\370\277\267\376\021\341\270/\332?9qb@\025\004\364?f\235\243a#+\332?z\371oA\217g\372?\233\255\257\236\'\276\355\277\\_*T\314\320\001@iA\242\305\350z\347\277H8\322\267]X\320\277\262/\322\363[\215\323?4\212\241<\234B\321? \315\271\025\344}\333\277\373\227\267\354\r\362\374?=\305\310\224+\323\354?\033\252e\r\020\303\300?$\307\026\216Aw\366\277B}0\356\215\253\307\277\246\231\345\223\312\303\361?\n\347\220H\366\374\362\277\355\227\217\032\3046\366?\205#o\032;\300\372?\376\231\307\034\334l\372?\314\005gck\315\343?\202L\277\032k\216\345\277g\271\357f\007S\006@\214\007\367t\366\226\311?#\345\311|\310\311\325?*>dV\026\361\002@Cc\335\023\333\r\352\277\2001\332A\035\326\364\277\010o\026\010M\363\337\277\244\027\375\007\351\n\270?\322\260\365\223\206\252\367\277\0134\317ru\\\355\277\373\347\033\272\222k\334?\302\r\r\252\227\340\201\277&\232h\016I4\321?\314\203\353\033WH\321?{\326\343\275\004\323\001@\202f+HWY\340\277\217j\026\030g.\247\277\371\202Ke\333\036\365?\277\177\200\363\334\244\360?dx\232>\313\207\356?\334X\362\3675\r\371\2775\244d\370*]\343\277\270\367\321\215\004n\007@\267Y\204S\341T\354\277S\373\2048\002\337\361?\365\305\204\320y\346\350\2774\344(q>\032\327\2774\302Y\276SK\311?/\207/\003]$\311?gH\r\261\272\177\264\277\224S\035r\034\233\323?0:\266A/X\365\277\361\361\022\310\276\313\366?\366\257x\323\236s\372\277|\311\350\263\364>\342\277p\352l\215=\273\342?\236\037\254#!\023\336\277\356f#\335w<\314\277\257G\024\354!\375\360\277\2779\222x3\363\376\277\320\374%4\007t\303\277o\367\2237\256P\367?\276\035\231\335\366~\370\277\332\027V\361o}\264\277\272\014\313\245\001\203\354\277\005\322\226S[\231\204\277\321S\300\334\327\224\355?\220I#\253\244N\321?\005\235DN\204\326\366\277\226H\250N\372}\351??\033\320\005\220\366\313\277\034\331\2462I\325\350\277\002\352\332L?\271\000@\346\254\347\270Q\254\372?\212E\024{a\312\361?\344\263\352\345\'\360\324\277\022 \2410\304\343\343?\365\262#\363C\033\352?=\311\215\256\257\\\371?\017\003\"AtS\341\277\005\031n\016\304(\341\277\267\355 \002\350\224\230?\220h\267\003\211O\371\277\302\220\251$\337\217\356\277\332s$J\252V\321?\315R\200\254f\244\264\277\036qJ\2737-\264\277\205#o\032;\300\372?\030\217\251\270*y\311?\010\234\217=\030&\372?\363\177\350T\3108\343\277\007\213Ycd\014\366\277\320\351\027^\314\265\346\277\201Z\020!\270 \365?\213m \376\037\030\367\277\202>dU\206\223\311?\367\036\251\327jn\323?;b:\345\346\201\333\277\341s\261\005gC\350?3\254\225\354G=\363\277\303\033NGHq\323?\260\177\025/\212z\351?P\013?a\375\241\333\277X\330\n4C\310\343?=\360=`\355,\353\277\203\225\231\2151S\336?\271\375\000\364R\003\327\277\200\030\0324a\251\367\277eZ\331\202RZ\350?]\031*\314\270O\350?\023N\312\014g\367\360\277\006\200\200\010\356p\356\277\006\260\276~\363\316\362?T\033\227\246\334\234\371?\273\017\2519u\333\343?\266\316\013eS\365\341\277R\221\207\001\263\017\307\277\201\275\375r\312u\000\300m\n\027YY[\362?\220\370\"\341\306\236\231?-\365\222q\337\227\345\277\230C\273\211\342\332\343?\363Gr\252\262\313\361\277wkmx\247o\355\277\321\270\237Z\273\031\353\277\'\370\216\221R\023\362\277\024\207H\317\343!\341\277\300\005\257r\375\216\341?2\263\364\365\027\375\323?\033\252e\r\020\303\300?\232l\037s\267\006\362\277iA\242\305\350z\347\277w\344G\365;\226\336?\000\0161|\371\016\354\277\335\325\323\201-\374\367\277\334U\216\213u\272\204?\302\210\363\227\345~\311?J>\030ym\351\326?\375\"t\177\303s\372\277/\237\257K\035\355\267?\363\211qs\247\230\203\277InO\324\225\224\357\277\022\014-C\276\017\322?_|\276\027\267\346\227?S\002V\207\353\201\334?PG?\277\266\005\362\277\244\246i\350\220+\372\277\263\356J\017\014>\332?,\2118\302i\226\347\277\325x\234\247\024\n\316?$\347S1\315\206\371?p\352l\215=\273\342?\262\032\031\327\305\205\311?\226\031A-\326\017\376?\210\277^\316Xo\344\277\220\346\261\325@m\322\277o>8\313\306\273\373?\203Q\364\356\024\363\350\277\313\010\240\014)\270\307\277F\2577\033\261\322\323?%\227_E$\212\356\277\327e\323C]\304\361?5Dl\034\000\214\253?s\034\2724\347c\365?\357\227\304y\202}\270?\302ctw\376\333\374?~\242\332X7l\355\277\024\030\\S\002\246\360?\243\003<\275\371H\351?\373\245\316Z\326G\342\277\210\034\205\\\333L\350?\212\202A\275t=\331\277\276\222\307\257}\354\344?XF\340\321=\365\002@\313\251{0P\204\264\277\025O\030\203\027\223\333\277(\274\000\306\275\017\362\277\305B3XD\210\267?\020p\2716A\177\356\2778Xn\341y\310\002@\310\177\224\334\201\002\364?\0268\336\242\270\340\374?\343`\353>\276F\311?\333\230\351\344\027{\344\277Z\202=w\240\204\311?/\026\340k\357\303\363\277\200bY\032\254\024\243\2774\275{xL6\355?\\\241}\026k\305\354?(\274\000\306\275\017\362\277\372\010z\344\373\010\346?\233u\3215\026\220\311?\356\221\'\371\001\303\370\277$\n\217\0276\356\350\277\252\002\232\256\353\273\201\277\363\247\332\266\361\002\376?\212\347\210\016\345\271\300?\372\'\002\223X\013\327\2772\232H\321\000.\332?\276:\326\365\244s\344\277ez\236\304\021\004\365?\304\304\267\254\321\302\343?Q\307M,\247=\343\277\251\274\007\013\275Z\351?\036\337\251j\230\027\346?\273\017\2519u\333\343?v\331gv\017o\344\277\276\003!\006\203\265\346\277\313\\\313\336!Q\316?x&:w(n\321?b\277\203(*\310\370\277xQk\272\377H\307\277\200\343\246\351\261\346\337\277\\\221_\266\033\204\305?+M\314:J\322\343?0\360\025\216\243q\344\277\355\333\003\022\230l\360\277\022f\007\177[\364\351\277\3074\336\265\276|\333\277\tem]\340\035\265\277\014\220\237gg\342\324\277\203\260\033.U\275\300?v}5\373\021N\321?\220\035\201\312\272\013\360?\251\371\220>[\200\256?K\322_QF\277\267?\316\275>\236\251\"\303\277V\203\315\212K\t\362\277z&WQ\t\336\343?\277\034=\014v\001\345\277;_\344aH\'\305?\305\031][4F\001@2M\251D\266\337\364\277\\]\006fK\243\372?\373;\027\263\2360\365?0\201F\354\242e\366\277t\300H\354\370\275\211?\273\263qp \216\301\277\212\253 \016m8\322?P\305r\333\235\314\231?\343c2CL\023\346?m\206\242\346\023L\001@{\305\307\2419\226\364\277\346\300u\253\257`\334?\323\317T\242=\233\324?\360\256W\231\314b\300?@A\003i\207\363\307?\234\022\014\247\230\356\365\277\202\034\025{\377\317\343?\234\301\024\r\035\004\346?n\005\246\037\2453\350?\004\237\000\251\373\355\304?S\025w\224\254\352\371\277>\'\363O\017\353\350\277\035E\001\342\276\326\346\277\027,\216M);\321?\005\252\201\222\342\254\360?\202 \257_\322\007\365\277R\247-G\277\372\327?YN\t@\316r\355\277\330v\240|(\220\356\2778FA\0220\307\277?$\n\217\0276\356\350\277\r0h\002q\325\343?\230\242\314Jr\007\361\277`=\364\367p\345\362?y\332\32705J\373\277W\316\251\247\035\274\005@kP\007\216$\311\354?\314F\026\032\005\330\343?\020X<\330\232|\311?K\212[Pt]\343\277\377\265\275\376\314\364\350\277\317/\374\350\017%\352\277I\326\375\037m\340\001\300\301\271\202.2]\001@4g\014\201f\230\360?}`\335+\355\305\362?\352\246\2546\032j\001\300\236\036\326\261,\260\311?\367\t\360\272\324f\311?\352\024q\244\273%\365?\212\251\256\311\264\033\367\277\371\263<;\004J\364\277\367N[\266\363\213\361\277\260\002\244\206n\010\357?\023\206\017\037\351A\006@P\326M\013pZ\330?\234\220W]\341<\321?\202}\025\276\311G\332?\362\325\273\203\002U\355\277\177Y%\3431\323\370\2779\nW\206\336\352\323\277\225\262\357\024V\030\362\277bP\207f\210\324\264\277k\021\305\261\256\013\376?Y/\233\262\006\364\366\277+\244\247\201\353\253\354?\210KD\276\300\275\335\277w13\320@\362\255?Ij0s#\317\343?:\376}n[\224\264\277 \330\016\374\275\224\356\277\303?\016\203\232\304\377?\224P\025\250!!\340?J\024c\266\200\213\311?\302\224HsF\227\371?<$\3219\215B\001@\026\036\231?\023\310\362?\362;\014\2735\345\360\277wQ\027\345\250\345\367?\214\324\202F\371\200\356\2775\242\367\035\007\020\362\277F\236.}\333C\300?p4\0262\005\264\362?\334\317\372\2603\265\310?\273\224N\2536\275\320\277\037\301!\261\302\026\362\277>\301DJF\334\300?P\260\327\036\270\016\263\277GR=\346\037\363\313\2777\217\2371\rW\362?\332\351\207?\2502\353\277\204\235\025fi\204\356\277\224\376\020\214\252\251\367\277\253\223\305\201\232\021\362\277k\270|\220\351\344\343?i\235\305\301\325\r\341\277G\020v\346\357\351\360\277VL,\204\316\250\367\277\021f\202\321\355\214\275\277\273\350;-5\375\365\2774\037\24630N\351\277\307\266\355\323l\241\360?6r\001\267\223s\333\277\310\262\252}<\271\346\277\312\351\247|\3608\342\277\370nV\321\025\351\255?.4\361Y\332n\311?\257\314\3734\205z\344\277H\320x\214\365\316\202\277\005\241\th\010`\343\277\260I\335\276|i\343\277\275>)\231A@\265\277\023\nV\025\223\301\366?\006\201_\234\354\277\363\277\232l\037s\267\006\362\277i\254\311\'Fm\333\277G\266\252)c\223\362\277\353\312I\303G\316\347\277\306\336\304\315\327+\222?\204@H\373\2246\371?\223\376\264\223s\212\366\277\346e\030\360\207\357\372\277\341\216\357\035\240.\342\277U\202:\006\307\010\207\277\3527\307A\233 \347?\252\225\0026\271\207\205\277\203d\231T5=\340?\030\001a\221\371\242\300?\330\211\230\351C\347\327?\205\001jVs\367\367\277\267\333\205\026\277\227\370\277\346W\252\017Z\355\350\277\325\236\302\231\324\036\371\277\315\"\260%\241\300\346?&\003Ia\237[\365\277878^h;\346?\370\"\274\216U5\370\277\232J\220\254~=\340?h\245\366\265\362\355\360\277\000r\276\265\025\262\000@\2421\\\250`J\367?\240KBZ\203W\350\277HzJL\313\315\325?\275=.\016O\016\362\2772\026\367\r\340\r\357?X\342t\334\226\221\352?-\005\202\025\326D\354\277\022\336\307\001\0219\316?\337\270^\274\352`\314?J\374\341\273\241\017\370?5q\266\025lg\303\277\241\020`\256\036\362\345\277\333\361\305\334vA\321?\'\266\337\3451\007\305?\343\276e{\341\345\336?\367\345ps7\"\357?\324P\001\324\215\217\372\277\350s\271D\204\242\364?\000r\276\265\025\262\000@c\010\267\366\030c\305\277\266\356\263\267\223r\201\277\026-$\323k\230\371?D\313\005\201<\365\356?\352\361\333\314H\330\311?\317_\245\205\367\005\203\277\346\317\016\266\025\266\346\277\212\253 \016m8\322?\014\367\224\207\260\272\357\277\351\341\376\n\312O\321?\034\366\357\364~\310\353\277B\326\014\346\354q\344\277\334OD\240A#\314\277\231\343\327\371B1\362\277\207\236\230\0011\264\362\277;\276\010>![\270?\363\341T\347M\354\365\277\232\240\376\361E(\332?i\360\0278\300}\311?H\217\3303\260\203\344\277\026-$\323k\230\371?C}\371\362\027\270\372\277H\237\307\327\2460\353\277\203j\367\241\316\021\312\277\263\356J\017\014>\332?\303(d\335\2348\327\277\017:\300+\371 \000@0\271On(B\373?\210\277^\316Xo\344\277\036\t0\222\350\257\212\277\307*\215`\244\340\341?\253\276,\326N\346\374?tL\377\352\337\360\366\277\341\270\340\267\270H\264\277\275\025\021[7O\321?\230\002\014\323H\320\343?=e\321\033\347\313\367\277a\310\226i\221\343\325?\315\313mDD\322\373?U\017[:\362T\321?\300\034\224\232\030Q\314\277\322>\371\016\215U\367?\233\360\266\224!\005\351\277G^}\n\200W\333\277$\n\217\0276\356\350\277\202\345p\2736\203\361\277{\\\017!-*\327?A2\255\037\\3\354\277\'\375\203yJr\311?\345\013\353\020\271\035\230?\232Ak\211\237\375\364?\237\014\346\\x\026\357?\333\250\330\210\016(\353\277\201\372\334BiV\371\277z\215LqR\266\336?\001Z\320/\372\376\356?Vk\030NB\206\353?\327\324\0262\244\354\356?o\322\255\n\352\237\352?y\031\236l\251\317\203\277N\022\257\232&\323\347\277\361\343e\311:\032\346\277M\362\363\236\261\301\354?\307\266\355\323l\241\360?B0kz\3517\366?yW\025\263cX\373\277\236\251\350,\021\321\205\277\312\332\346\237@(\321?\203\301{Z\315\233\353\277\037\024^\251\374\350\337\277o#\321\022\350\276\275?\020\203o\314\272:\361\277\234\220W]\341<\321?\250\271S\372\333\240\372?`&v\217\'\264\353\277E\362\313\314g\006\346?\022\2411:R\033\352\277y\024\310^ 3\344?\037\306\026\231\272u\311?\375+\241\341\277\022\362\277\224\232\301\0055\006\330?\245\374c\341\021\372\364\277\337\270^\274\352`\314?\313he\364\213\233\311?\226\327\213\017\036+\321?9\2449\303y\013\330\277\027A3\254\014\220\001@\262\3122b*\016\362\277\r\201s\205\221\035\367\277\001_os\350\007\327\277\022\305\202\223\362!\361\277pt\222\233\206\257\370\277j]\031\235\321M\353?Ax\221\252\237\242\357\277\020\252u\023MY\003@\006\356\257\345\032z\231?G\266\252)c\223\362\277A\304\324\201\246\026\314\277\001\360\202\367\006\214\366\277\322\343\257<\nB\331\277\336\370\3757=\362\373\277\033(\003\350f\221\371?\375\333\343\324Of\371\277\207\314\314\271\377o\311?"
      }
    }
  }
}
node {
  name: "tensors/component_10"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 750
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 750
          }
        }
        tensor_content: "\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277??\376q\207\307a\t\300\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?CQC\215T\207#\300\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277??\376q\207\307a\t\300\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277??\376q\207\307a\t\300\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277??\376q\207\307a\t\300\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\220H)&\303Y\013@\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277??\376q\207\307a\t\300\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277??\376q\207\307a\t\300\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\220H)&\303Y\013@\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277??\376q\207\307a\t\300\022\245t\353\271\177\277??\376q\207\307a\t\300\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277??\376q\207\307a\t\300\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277??\376q\207\307a\t\300\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\035\272\366\342\305\036*\300?\376q\207\307a\t\300\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\220H)&\303Y\013@\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277??\376q\207\307a\t\300\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277??\376q\207\307a\t\300\022\245t\353\271\177\277?\022\245t\353\271\177\277??\376q\207\307a\t\300\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277??\376q\207\307a\t\300\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\220H)&\303Y\013@\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277??\376q\207\307a\t\300\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?CQC\215T\207#\300\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\220H)&\303Y\013@\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277??\376q\207\307a\t\300\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277??\376q\207\307a\t\300\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\220H)&\303Y\013@?\376q\207\307a\t\300\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?CQC\215T\207#\300\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277??\376q\207\307a\t\300\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277??\376q\207\307a\t\300\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?\022\245t\353\271\177\277?"
      }
    }
  }
}
node {
  name: "tensors/component_11"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 750
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 750
          }
        }
        tensor_content: "kB\330F6B\332\277$h\035\031P\n\321\277\264\235\217\0143i\333\277c\3035\377?\341\346?\247\300\022\351\025{\352?Z\007 \'\377\026\327\277~\365Z\366\373Q\350?\"d\353c\260o\374?\241\204-\241\316\010\375\277;\310cv\202\252\373\277V*\243\003\342(\346?\034x\267\271\326\'\000\300\010\223\006\366\235\217\367\277_\210}\337\010\266\343?d\204\352\tvk\372?YlT\246.\242\361?e\312\254\226\264\255\272\277^\302\177>\272W\000@\371\227\006I\206\377\357\277\235F\017\324\024\332\372?-_\353\020\310\377\343?\007\265\373\211}\252\327\277?\227\334b\211w\343\277\021\020p\270!4\346\277=\031Fx\365\213\332\277\267\031\314\246\246\306\317\277U\3105R(Q\377?C\333\306\212H\255\303\277>:/\257r1\360?p~\275\216}\264\367\277\361>\354j\002\004\346?\255A\017\201,j\342?\010\325\267\230\352\010\343\277;\\$CRL\340\277\035\347\201\241,\313\355?\240\214\374\006\244\366\375\277\0163\222t\021\226\340\277\010\325\267\230\352\010\343\277]&\020.O\336\374?\366>\213J\017T\321\277\355\242\222\241.\230\341\277\014h\337Y6j\312?\246E\315\"\251\017\215\277$\223\330\321C6\373?\260\025\273\274\264\375\312?i\311\2409R8\300\277\026nJ\224H\301\343\277\004T\273\000\324\031\353\277Et\272\246\231\025\351\277<\030:\033\223\026\320?\260\217\213\325\034H\362?\215\362\223(\206\236\344\277\225\351a \376\223\327?\354\376sM(G\357\277\233\354f\255\215\347\321\277\317\255\277o\017\277\374\277\273+\204~\375\003\362\277\373\372\001CC\316\305?\344\366;q\027-\364\277^\207P\267\370n\371\277\323\315{~|\035\370?a\\_\2253\037\376\277\227]f\336`\327\360?5\336\215X\276`\327\277\310s4x\350\332\343?\311o\241\242U\220\372?\344\366;q\027-\364\277(\237\243\203\347\232\377?j;\000\217\316\305\301?4\337\272\200\316\247\361\277j\277\242)\255\226\375?\357\376\022-5\227\312\277{\350b\034H\246\371\277\333j\241Om \342?\r\362n\032\310\023\304?\373\352B\233\031o\363?\rw|\234\320\313\300\277\004\003\331\376`8\374?\243\205Z\311\336O\347?$\243\3258\2075\324\277W\353W\016\030\263\371?\022l\360C(3\317\277L\322\224\202\300\242\346\277\210r\304\270\177\366\366?rLjsg\352\371?&\345\347\373\306^\364?\0043\363\224\004F\325?\204\267\333\010Os\341\277\021\355M\3741\322\353\277\0046YB\207I\344?\"\347 \2019\033\331\277\026nJ\224H\301\343\277$\243\3258\2075\324\277\210q\227\220o\257\354\277AT\376\227,\267\335\277\225\013W\264\335\256\367?\223he\210\347\244\337?C\316\246\371\247\351\257?. \240\033\376\211\367?\363\257\212{\342C\360?\2117\212\255\247I\277\277!\207\r \240\321\366?Q\356\275\273\232\266\370\277\300y\000\323\355\341\341\277\256\222\361\202\237K\361\277\201\265\201\270.\345\314\277Z{\205\005U\n\365\277\305\226\267T\313\354\302?rLjsg\352\371?\034\213\240\3652\034\340?\303\025Z\234\301M\346?4\255ge\270\335\363?4\255ge\270\335\363?\rw|\234\320\313\300\277\032(\006\034i\375\356\277X)v\333\321\341\373\277WJ_\022O\207\321?\370\312\206\214\254\020\370\277\215\362\223(\206\236\344\277k \343\262V\'\372\277\237\351\000\000\013\344\342\277\'\301\230\027\307\265\357\277\263\035B\210\315B\262?Y\007\201G\362\306\353?E\324\260\023\307\220\264?\344\366;q\027-\364\277R\016z\312\007\025\364?\260+nv\320{\240\277\243\'\037\315\304\022\325\277x\373&Q\001Y\346\277\234\004^1\310`\357?\371\2303q\226F\372?\0163\222t\021\226\340\2771\240o\213\0042\345\277\256%d\\\261\324\273\277\002\330\223\357\273?\212?\250\001\227cR\255\353\277\0163\222t\021\226\340\277\322\037\213\250\377E\361?M0o^\347/\344\277\0043\363\224\004F\325?{\350b\034H\246\371\277\217\320\236\224\246\203\364?\243\'\037\315\304\022\325\277\np\3449\256-\375\277\300y\000\323\355\341\341\277\250\001\227cR\255\353\277A\325\274p)\006\317?\276YD\304\200\203\326\277\267\330G,j\224\336\277\326\014\307sF\223\344?\210\365\371\325\010\242\323\277\301\221\367V([\337?\242\307\013l+\311\362?=w\201t\017\311\354?\326\014\307sF\223\344?L\323\301\252\320\351\360?\023\356z$B\031\366?\266IG]=\204\375?\313M\254\016vu\332?\017N\357\245\316\022\355?\t\2243\036\256\326\341?r\177\352\266\215\373\341?8\231v\010\357\343\374\277D#\330\244&4\372?\326\224:\243\321N\260\277\355\242\222\241.\230\341\277\026nJ\224H\301\343\277\327\316\250\246\214d\322?K\220\343\337s)\373\2776\334T\323K\244\362?\246E\315\"\251\017\215\2773\340H\311\321\236\300?=w\201t\017\311\354?i4\324\017 !\361?\205vW\216\022A\340?p\241\337Jm\026\362\277\321\314NVl\326\355\277\276Zq\354\220\312\360\277\270\374\226\020j=\363\277\0163\222t\021\226\340\277;\\$CRL\340\277z\261p\316<\034\310?\204f\371\006\334\221\362?\324\013\232K6L\372\277DU+\300<\376\367\277\340\270\035\244]\376\361?\244\263\032\017b\317\373\277Z\007 \'\377\026\327\277\026*`l\211\213\323?\373\372\001CC\316\305?7\333\'\253;]\350\277\374\030\003\341\234\356\347\277\2200\262\365?\315\326\277?\227\334b\211w\343\277\222\377\213\002:J\363?\204f\371\006\334\221\362?\201\3228:\014\360\355?\314\320\341+\377 \367\277;\310cv\202\252\373\277\364\276\273\332\010\254\363\277\311\221\22665\253\352\277)!\315C\016\321\321?\271\232\310>\275\265\307\277>\325[P6V\352?i\361\365D\303`\373\277\224\311\245\021\2215\354?2,k\315\241\356\373?\205\224\271L_\021\347\277\250\340\316\367\202\331\325?\035O\272\030\275e\247\277)C\302\327\355\353\361?\210S5\322\"\337\345?\220\255|\330\266!\372?\027-\306\031\014\217\342?\240\371^\207A\223\360\277\325\2215\026B\373\305\277\210r\304\270\177\366\366??\227\334b\211w\343\277\243\243\274\207+ \356\277\233J\242\251\247$\344?E\324\260\023\307\220\264?\177\010\037+\265\004\365?\325Nx\026\223\014\360?J\263\005\234c\213\365\277\324\t#\007\252\357\276?\235F\017\324\024\332\372?\002\262\366\374\355V\335?\201\364-\316\353\n\376\277M\216\252Z\001m\326?\035O\272\030\275e\247\277]\004\033\232o\303\334?p~\275\216}\264\367\277\345\001\332\372\252J\336\277\021\355M\3741\322\353\277$Y\247\016\321\273\221?\335\230a\225\360\237\366\277\270\374\226\020j=\363\277\326]\251u\271t\363\277\206t\375=\362\262\333\277\222\017\352\211p\371\340?^\207P\267\370n\371\277\0163\222t\021\226\340\277\014\217s \013E\356\277\032(\006\034i\375\356\277\232\337\370%\224\353\375\277\036\251\002\264\177\354\346\2777\333\'\253;]\350\277BS\264{\260\241\274?\362\000\316\235H\325\323?(\001\0215\241r\346?:\227=\203|\'\330?~\027P\212\333l\370\277\210\274\227/\260\001\254\277\324\t#\007\252\357\276?\314\320\341+\377 \367\277w\036I\r\361\272\340\277d\326\3713\371\223\363?\326\014\307sF\223\344?xX5%\013O\376?1\240o\213\0042\345\277w\036I\r\361\272\340\277d\326\3713\371\223\363?\222\016\275a`\262\366\2778\031\247\230\350;\357?\033{Bn\374l\362?\351\0034K\313\330\342?\345\001\332\372\252J\336\277\036\252/\334\2173\361?\\x\037X\322\006\366?gK\251.\313\234\262\277rLjsg\352\371?\226\n*\214\315g\355\277\233\354f\255\215\347\321\277B\314)H\256K\315?Du\347\316\251\\\363?/\333\210\313.\r\335?\234\246\"5\256#\335\2772\260\315\022;\341\362\277\3008|X\261\257\340?:\227=\203|\'\330?P\314\310\'\273\233\350?\031)3DyD\371?\265li\031-\346\367?\310\222\303^E\362\364?\251\021\365\352\210\\\371\277_\205\0272\206\262\324?n\276\024\341\251\237\316\277\224.yp\315\020\362?gK\251.\313\234\262\277\334\024\377OW\255\377?*\200\024\235\212\203\356?\333j\241Om \342?\235\'\341\r\253r\316?Uo\272S\261\245\360\277\366\355\250H\234r\362\277;\\$CRL\340\277\231kj\025w\370\331\277M\257r\306\320@\354\277\0046YB\207I\344?\373\352B\233\031o\363?3\340H\311\321\236\300?4~z\367$\027\365?\210q\227\220o\257\354\277\326\0104\236\263H\373?\226\032\210\023\004\027\373\2774\215\253VK\177\370\277\341\306!\333s\037\333\277-_\353\020\310\377\343?\300y\000\323\355\341\341\277nO\320 \352\355\370\277gK\251.\313\234\262\2772,k\315\241\356\373?\326\224:\243\321N\260\277\317\255\277o\017\277\374\277\033{Bn\374l\362?\027-\306\031\014\217\342?\2060\023\0263}\353?\225\013W\264\335\256\367?\024\254\311\201\365\237\352?\331\214\226\343L;\362\277\210\274\227/\260\001\254\277@\334\322\347\252\"\276\277\235\312q\031\256\314\361\277wN\303\tC\013\000\300\314P\022\274\370x\351?\204#\033<\177\321\374\277\303\022\364\356>J\327?\263\035B\210\315B\262?_\205\0272\206\262\324?\031[\206_\217\016\367\277P\314\310\'\273\233\350?\331\213i\273<\364\327\277j;\000\217\316\305\301?*\"\331\240pF\334\277\026\035h\222\325\337\364?\032\254ha\002\360\325\277WM\305\277\321\212\340?\350\210\242\355\306@\304\277w\315f\013~\331\361?!\207\r \240\321\366?5<\311T\330\235\351?rLjsg\352\371?\334\007\246U\260Q\314\2770r\257E\201\262\360?\017m~\214+*\376?\275(\036\321z\000\363?\034X \262\014\013\370?\255\202\223\373h\234\343\277(\001\0215\241r\346?Z\367\"\300\273\027\376?\304\327;\317\007\037\324?)\024\325iZ%\363?\350\210\242\355\306@\304\277F\204\030.\320\304\366\277\362\000\316\235H\325\323?<\030:\033\223\026\320?\026nJ\224H\301\343\277Et\272\246\231\025\351\277\222Pn\004\255+\342\277L\322\224\202\300\242\346\277\"E\\}SX\353?$\344\272\323\266\027\352\277O\337\214\\tN\365?\270x4\313\320J\374?\364\275\216\262\370d\331\2774\255ge\270\335\363?$h\035\031P\n\321\277)\024\325iZ%\363?OV\034\317\374\326\000\300q\\\310\372\235\231\347?\245G\333\3331q\340\277J\r\256\302\352}\336?\267\330G,j\224\336\277\371\227\006I\206\377\357\277_k\022\365\302\327\203\277\262$X\377N_\301\277y\271u\256\264\337\372\277R@\315\345\035\337\361\277\253b\327\354\373=\330\277\356.\216\343\313T\370?\235\'\341\r\253r\316?\216\252ZW\273\377\250?\233\354f\255\215\347\321\277\033{Bn\374l\362?\335\21106\3127\363?\326\014\307sF\223\344?\r\362n\032\310\023\304? j\027\024\223\007\000\300\3054\351\202\036e\367?_\247\014\306e\315\364?w\036I\r\361\272\340\277Z\007 \'\377\026\327\277?I`\016\231\231\363\277\222\017\352\211p\371\340?\314P\022\274\370x\351?M\216\252Z\001m\326?\366\272(\005va\352\277d\345*\223\037\374\366\277C36,]\343\347?6\274\230\304\336E\367\277\333\210\003\016\272\360\350\277\014\217s \013E\356\277\371\227\006I\206\377\357\277V=g8\233\333\362?\204\267\333\010Os\341\277g\303\226\0373\221\313?)!\315C\016\321\321?\325\014(\2249C\311?\351!\226\t\030\251\351\277b\246\337\235U\206\352\277\021 \316?X\343\363\277\257\373\312\010M\246\355?^e[#\031T\351?AF\372`\026\226\364?\344G\036s\212\016\323\277y\227\200\032\325\304\352?\341\225\373\347m\234\367?\030LU\000i\246\363?\241\204-\241\316\010\375\277\250$\271\037B\017\346\277\373\357\361h\316u\261\277U\3105R(Q\377?\264\235\217\0143i\333\277\210q\227\220o\257\354\277\256\016\217=\006Y\372?\323\230K\215\303\027\245\277\237\247O]\276j\367\277\024\251c\324r\234\333?\271V?7\361/\334?gK\251.\313\234\262\277H\221\020\010\204p\345?B\342\334\001\312\311\242\277w\315f\013~\331\361?$\027;\027\335(\362\277\370\273U-\206\250\364?R\016z\312\007\025\364?\0375\376\365\034\251\375?w\036I\r\361\272\340\277\367\200\033\"\256\373\274\277\022q\260A\313\304\322\277R\016z\312\007\025\364?e7:\275\242$\360\277y\374Sy\021\240\360?\243\'\037\315\304\022\325\277\255A\017\201,j\342?\346\363\325\303\224)\365?e7:\275\242$\360\277\377\\7\027\242\247\376\277D\247:\352\277&\361\277\2006\337p8\204\351\277d\326\3713\371\223\363?hA\216*\272,\271?\271V?7\361/\334?y\272\003\367\267\326\311?\016\357\247LR`\320?\007\265\373\211}\252\327\277\263\035B\210\315B\262?qo\214/WL\364?\366\017D\250\307#\223\277OV\034\317\374\326\000\300\225\354\307\315\200\227\346?\357\376\022-5\227\312\277\302W\013?\016\307\361?\247\300\022\351\025{\352?\305\226\267T\313\354\302?\251\245\026\330K\256\322?\240\237J}F\247\304?\240\306\336C\033\202\350\277%c]\033\255x\315\277\303\342\331X\233<\376?\361>\354j\002\004\346?\014\217s \013E\356\277_k\022\365\302\327\203\277\243\205Z\311\336O\347?\255\202\223\373h\234\343\277\204f\371\006\334\221\362?h\300\317Q\275\335\327?\344\366;q\027-\364\277\264Y\245\344s3\353?Z\007 \'\377\026\327\277\035\344\033\364\251\307\336?\222Pn\004\255+\342\277\020\021\235\3401{\360?\323\230K\215\303\027\245\277j;\000\217\316\305\301?\233J\242\251\247$\344?\304\223\013\304&$\000\300m!\020\333fn\344?iD\223\267I\200\303?\272\033&\367\306T\344\277\352\275\357\322\353\024\356?]\004\033\232o\303\334?O\234\256\221\027\216\377\277\375\0310\t\2555\362?c\3035\377?\341\346?\231\'\200\355\267\302\351?\0046YB\207I\344?\014h\337Y6j\312?\310\264\270\362$\r\345\277\205\224\271L_\021\347\277\357\376\022-5\227\312\277\222Pn\004\255+\342\277\323MK\356\202\305\345\277\301\024-t\261\006\374\277\210q\227\220o\257\354\277 \351\333\361LY\302?j=}@\310c\244?Z\007 \'\377\026\327\277\032(\006\034i\375\356\277(\001\0215\241r\346?)\024\325iZ%\363?\370V\202\316I\315\356?&\345\347\373\306^\364?\364\276\273\332\010\254\363\277\213\260\342\2059%\371\277\2027\014\231H\313\363?p~\275\216}\264\367\277\021\020p\270!4\346\277\235i1\220\004<\365?_\247\014\306e\315\364?{\330\004\225\021\367\353\277\224.yp\315\020\362?\200\345\374n\305\242\372?\203\362\364HyN\331?\201\023\275\264H\"\357\277o}\220fmm\335\277B]\317\177\301\021\266\277\232:D\"qu\366?\366\272(\005va\352\277WJ_\022O\207\321?J\r\256\302\352}\336?\256\343\323\204\022-\320\277\233\354f\255\215\347\321\277\301\221\367V([\337?\236$\032@5\277\332?\372;\206\275\177\000\327?=\352\376\325\255[\234\2778Z\312\3621\276\313\277\210S5\322\"\337\345?\212\257\265])\336\336\277\021\020p\270!4\346\277F\204\030.\320\304\366\277\273\3710c\3479\364?4\337\272\200\316\247\361\277\270\233V\207\300\254\366?\007\266(\262\215\361\361\277\010\325\267\230\352\010\343\277\326\224:\243\321N\260\277\265\275K\033\240\307\346\277\034X \262\014\013\370?\237\351\000\000\013\344\342\277\261\234E\360\266S\272?D\247:\352\277&\361\277]H\244\241;I\310\277\276YD\304\200\203\326\277e\004\272y|\023\350\277k3b<\267\363\232??I`\016\231\231\363\277\324\013\232K6L\372\277\237\351\000\000\013\344\342\277\006U\350(\344`\365?\333\210\003\016\272\360\350\277\037\346\326d\275\005\270?C\333\306\212H\255\303\277\234\004^1\310`\357?,R\3636\024T\365\277\347\002\007#\273\221\370\277c\3035\377?\341\346?nO\320 \352\355\370\277I\365\266>\260\004\341\277Q\356\275\273\232\266\370\277\305\226\267T\313\354\302?\2504\027\247x\276\363\2772,k\315\241\356\373?\353\377\240u8\216\371?\326\224:\243\321N\260\277o}\220fmm\335\277,\304\036\326\262\035\000\300e\312\254\226\264\255\272\277\375\336 \244%c\375\277nO\320 \352\355\370\277\324\023>\013\273_\270\277\017N\357\245\316\022\355?C\316\246\371\247\351\257?\370V\202\316I\315\356?\233\233\204\253\032\006\363\277\366\272(\005va\352\277\3054\351\202\036e\367?\362\000\316\235H\325\323?\'\2436Yz\345\350?\037a\311\342\264M\253?\247\300\022\351\025{\352?\247\300\022\351\025{\352?\360\200\235\rO}\361?\333j\241Om \342?_k\022\365\302\327\203\277j\302\212\302\320\033\261?I\365\266>\260\004\341\277\035O\272\030\275e\247\277\357\376\022-5\227\312\277e\312\254\226\264\255\272\277\235\'\341\r\253r\316?=\352\376\325\255[\234\277\020\316\276\025\325\272\372\277:\270\005\357K\373\355\277\364\033\312\256\022\242\353?\264Y\245\344s3\353?\021 \316?X\343\363\277\016\357\247LR`\320?\272\033&\367\306T\344\277>\013BA\337j\361?p?\021y\300\216\306\277\201\265\201\270.\345\314\277\224\353\232\245pP\374\277p?\021y\300\216\306\2771\240o\213\0042\345\277\246E\315\"\251\017\215\277x\373&Q\001Y\346\277\"\350M\251Ib\363\277\240\371^\207A\223\360\277\336e\341Q\312\216\356\277\014\217s \013E\356\277\302W\013?\016\307\361?\337\ta\306\303\217\325?\373\371s\372?\327\366\277\017N\357\245\316\022\355?\222\334iFJ\350\370?7\333\'\253;]\350\2777\212E\251\310{\371?\273\332\241|\212\"\343?\346\363\325\303\224)\365?\326]\251u\271t\363\277M\257r\306\320@\354\277Z\314g\007\310\353\323\277\257`\236g\211\201\363?n\333\313b\207\252\357?\303V\336\026\376\177\347\277\'\301\230\027\307\265\357\277\021 \316?X\343\363\277\000I\035w@\374\360?\226\n*\214\315g\355\277\004T\273\000\324\031\353\277\204u*f\002\372\365\277\034\213\240\3652\034\340?\017N\357\245\316\022\355?J\020\024pm\201\355?7\212E\251\310{\371?\234\004^1\310`\357?\261\234E\360\266S\272?P\274j\240\204\354\372?\222\017\352\211p\371\340?y\272\003\367\267\326\311?O\234\256\221\027\216\377\277O\021\340w\212\030\363\277\2551\261\371\365\272\364?r\320\314\270\000\335\360\277B\322\365\242\263R\333?q\\\310\372\235\231\347?=\352\376\325\255[\234\277\306\225)\014\310\365\363\277\256\016\217=\006Y\372?\210\330\355\202d\312\375\277R\016z\312\007\025\364?g\256kA\255\310\275?\260+nv\320{\240\277\234\004^1\310`\357?\3432\341\205\273$\376\277\034\213\240\3652\034\340?\"\347 \2019\033\331\277\014\217s \013E\356\277T\035\253).}\367\277\336D\031\346\372\272\330?\0163\222t\021\226\340\277\351!\226\t\030\251\351\277\260\025\273\274\264\375\312?;\310cv\202\252\373\277\263\035B\210\315B\262?\331it\']\331\367\277\222\334iFJ\350\370?_\311\001ZE\350\344\277\224\254\356\217\263*\313\277\313\363\003\350\356\202\361\277\260\217\213\325\034H\362?\260\036N\345/\270\314?-_\353\020\310\377\343?\372\177\017\305K\206\302\277\326\212\037\237\300\336\266?\204\267\333\010Os\341\277\243\'\037\315\304\022\325\277p~\275\216}\264\367\277\267\031\314\246\246\306\317\277W\032E|\253y\370?\246\243[g8p\311\277\307\2556\327\231|\000@\371\034\226\266/9\361\277~9E\036\273\207\330\277\250\001\227cR\255\353\277m\303\324\336L1\322\277&\364\030[\355\306\367\277&\364\030[\355\306\367\277\310\264\270\362$\r\345\277m!\020\333fn\344?\325\2215\026B\373\305\277\321\314NVl\326\355\277\203\362\364HyN\331?\326\014\307sF\223\344?\373\372\001CC\316\305?\032\254ha\002\360\325\277\014h\337Y6j\312?F\204\030.\320\304\366\277\263\035B\210\315B\262?\334\007\246U\260Q\314\277\261\301\336\3602\022\360\277\034\213\240\3652\034\340?\306\225)\014\310\365\363\277\250\323\326\035\317-\367?\263\035B\210\315B\262?\316\321\016T\017h\341?\374\030\003\341\234\356\347\277\344G\036s\212\016\323\277\216\254O\260\246\332\357\277\t\2243\036\256\326\341?\212\257\265])\336\336\2770^\276\350\267\270\371\277?\305\375\310\377\246\374?\374\307 \337)\r\371?\240\250|\205\316\261\341?\257`\236g\211\201\363?\370\273U-\206\250\364?\313\363\003\350\356\202\361\277Z\367\"\300\273\027\376?\224.yp\315\020\362?\326\003\225k\276\210\307?\0163\222t\021\226\340\277\026*`l\211\213\323?\317\255\277o\017\277\374\277\336e\341Q\312\216\356\277\002\366\177\004\272\334\310\277hA\216*\272,\271?}\373\306\352R\026\000\300xX5%\013O\376?=\352\376\325\255[\234\277rLjsg\352\371?]U\375\233\342\244\373?\240\306\336C\033\202\350\277?\227\334b\211w\343\277k3b<\267\363\232?H\306\204%\304W\226?;\370}\014&\270\344?"
      }
    }
  }
}
node {
  name: "tensors/component_12"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 750
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
            size: 750
          }
          dim {
            size: 1
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "buffer_size"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1000
      }
    }
  }
}
node {
  name: "seed"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "seed2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "count"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "batch_size"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 300
      }
    }
  }
}
node {
  name: "Iterator"
  op: "Iterator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "TensorSliceDataset"
  op: "TensorSliceDataset"
  input: "tensors/component_0"
  input: "tensors/component_1"
  input: "tensors/component_2"
  input: "tensors/component_3"
  input: "tensors/component_4"
  input: "tensors/component_5"
  input: "tensors/component_6"
  input: "tensors/component_7"
  input: "tensors/component_8"
  input: "tensors/component_9"
  input: "tensors/component_10"
  input: "tensors/component_11"
  input: "tensors/component_12"
  attr {
    key: "Toutput_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
      }
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Iterator"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "ShuffleDataset"
  op: "ShuffleDataset"
  input: "TensorSliceDataset"
  input: "buffer_size"
  input: "seed"
  input: "seed2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Iterator"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
      }
    }
  }
  attr {
    key: "reshuffle_each_iteration"
    value {
      b: true
    }
  }
}
node {
  name: "RepeatDataset"
  op: "RepeatDataset"
  input: "ShuffleDataset"
  input: "count"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Iterator"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
      }
    }
  }
}
node {
  name: "BatchDataset"
  op: "BatchDataset"
  input: "RepeatDataset"
  input: "batch_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Iterator"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
      }
    }
  }
}
node {
  name: "MakeIterator"
  op: "MakeIterator"
  input: "BatchDataset"
  input: "Iterator"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Iterator"
      }
    }
  }
}
node {
  name: "IteratorToStringHandle"
  op: "IteratorToStringHandle"
  input: "Iterator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "IteratorGetNext"
  op: "IteratorGetNext"
  input: "Iterator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/acousticness/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/acousticness/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext"
  input: "dnn/input_from_feature_columns/input_layer/acousticness/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/acousticness/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/acousticness/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/acousticness/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/acousticness/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/acousticness/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/acousticness/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/acousticness/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/acousticness/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/acousticness/Shape"
  input: "dnn/input_from_feature_columns/input_layer/acousticness/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/acousticness/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/acousticness/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/acousticness/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/acousticness/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/acousticness/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/acousticness/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/acousticness/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/acousticness/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/acousticness/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/danceability/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/danceability/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:1"
  input: "dnn/input_from_feature_columns/input_layer/danceability/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/danceability/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/danceability/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/danceability/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/danceability/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/danceability/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/danceability/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/danceability/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/danceability/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/danceability/Shape"
  input: "dnn/input_from_feature_columns/input_layer/danceability/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/danceability/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/danceability/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/danceability/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/danceability/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/danceability/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/danceability/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/danceability/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/danceability/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/danceability/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/duration_ms/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/duration_ms/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:2"
  input: "dnn/input_from_feature_columns/input_layer/duration_ms/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/duration_ms/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/duration_ms/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/duration_ms/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/duration_ms/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/duration_ms/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/duration_ms/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/duration_ms/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/duration_ms/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/duration_ms/Shape"
  input: "dnn/input_from_feature_columns/input_layer/duration_ms/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/duration_ms/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/duration_ms/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/duration_ms/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/duration_ms/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/duration_ms/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/duration_ms/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/duration_ms/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/duration_ms/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/duration_ms/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/energy/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/energy/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:3"
  input: "dnn/input_from_feature_columns/input_layer/energy/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/energy/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/energy/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/energy/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/energy/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/energy/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/energy/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/energy/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/energy/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/energy/Shape"
  input: "dnn/input_from_feature_columns/input_layer/energy/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/energy/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/energy/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/energy/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/energy/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/energy/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/energy/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/energy/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/energy/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/energy/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/instrumentalness/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/instrumentalness/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:4"
  input: "dnn/input_from_feature_columns/input_layer/instrumentalness/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/instrumentalness/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/instrumentalness/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/instrumentalness/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/instrumentalness/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/instrumentalness/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/instrumentalness/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/instrumentalness/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/instrumentalness/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/instrumentalness/Shape"
  input: "dnn/input_from_feature_columns/input_layer/instrumentalness/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/instrumentalness/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/instrumentalness/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/instrumentalness/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/instrumentalness/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/instrumentalness/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/instrumentalness/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/instrumentalness/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/instrumentalness/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/instrumentalness/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/key/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/key/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:5"
  input: "dnn/input_from_feature_columns/input_layer/key/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/key/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/key/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/key/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/key/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/key/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/key/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/key/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/key/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/key/Shape"
  input: "dnn/input_from_feature_columns/input_layer/key/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/key/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/key/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/key/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/key/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/key/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/key/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/key/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/key/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/key/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/liveness/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/liveness/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:6"
  input: "dnn/input_from_feature_columns/input_layer/liveness/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/liveness/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/liveness/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/liveness/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/liveness/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/liveness/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/liveness/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/liveness/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/liveness/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/liveness/Shape"
  input: "dnn/input_from_feature_columns/input_layer/liveness/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/liveness/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/liveness/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/liveness/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/liveness/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/liveness/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/liveness/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/liveness/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/liveness/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/liveness/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/loudness/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/loudness/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:7"
  input: "dnn/input_from_feature_columns/input_layer/loudness/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/loudness/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/loudness/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/loudness/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/loudness/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/loudness/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/loudness/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/loudness/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/loudness/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/loudness/Shape"
  input: "dnn/input_from_feature_columns/input_layer/loudness/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/loudness/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/loudness/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/loudness/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/loudness/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/loudness/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/loudness/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/loudness/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/loudness/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/loudness/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/speechiness/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/speechiness/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:8"
  input: "dnn/input_from_feature_columns/input_layer/speechiness/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/speechiness/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/speechiness/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/speechiness/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/speechiness/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/speechiness/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/speechiness/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/speechiness/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/speechiness/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/speechiness/Shape"
  input: "dnn/input_from_feature_columns/input_layer/speechiness/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/speechiness/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/speechiness/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/speechiness/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/speechiness/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/speechiness/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/speechiness/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/speechiness/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/speechiness/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/speechiness/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/tempo/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/tempo/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:9"
  input: "dnn/input_from_feature_columns/input_layer/tempo/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/tempo/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/tempo/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/tempo/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/tempo/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/tempo/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/tempo/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/tempo/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/tempo/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/tempo/Shape"
  input: "dnn/input_from_feature_columns/input_layer/tempo/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/tempo/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/tempo/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/tempo/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/tempo/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/tempo/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/tempo/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/tempo/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/tempo/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/tempo/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/time_signature/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/time_signature/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:10"
  input: "dnn/input_from_feature_columns/input_layer/time_signature/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/time_signature/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/time_signature/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/time_signature/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/time_signature/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/time_signature/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/time_signature/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/time_signature/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/time_signature/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/time_signature/Shape"
  input: "dnn/input_from_feature_columns/input_layer/time_signature/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/time_signature/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/time_signature/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/time_signature/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/time_signature/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/time_signature/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/time_signature/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/time_signature/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/time_signature/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/time_signature/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/valence/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/valence/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:11"
  input: "dnn/input_from_feature_columns/input_layer/valence/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/valence/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/valence/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/valence/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/valence/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/valence/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/valence/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/valence/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/valence/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/valence/Shape"
  input: "dnn/input_from_feature_columns/input_layer/valence/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/valence/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/valence/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/valence/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/valence/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/valence/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/valence/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/valence/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/valence/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/valence/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concat"
  op: "ConcatV2"
  input: "dnn/input_from_feature_columns/input_layer/acousticness/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/danceability/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/duration_ms/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/energy/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/instrumentalness/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/key/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/liveness/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/loudness/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/speechiness/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/tempo/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/time_signature/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/valence/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/concat/axis"
  attr {
    key: "N"
    value {
      i: 12
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 12
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\014\000\000\000\005\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.5940885543823242
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5940885543823242
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/max"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/RandomUniform"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform"
  op: "Add"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/mul"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 12
        }
        dim {
          size: 5
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Assign"
  op: "Assign"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/read"
  op: "Identity"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/part_0/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/part_0"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/part_0/Assign"
  op: "Assign"
  input: "dnn/hiddenlayer_0/bias/part_0"
  input: "dnn/hiddenlayer_0/bias/part_0/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/part_0/read"
  op: "Identity"
  input: "dnn/hiddenlayer_0/bias/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel"
  op: "Identity"
  input: "dnn/hiddenlayer_0/kernel/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/MatMul"
  op: "MatMul"
  input: "dnn/input_from_feature_columns/input_layer/concat"
  input: "dnn/hiddenlayer_0/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias"
  op: "Identity"
  input: "dnn/hiddenlayer_0/bias/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/BiasAdd"
  op: "BiasAdd"
  input: "dnn/hiddenlayer_0/MatMul"
  input: "dnn/hiddenlayer_0/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/Relu"
  op: "Relu"
  input: "dnn/hiddenlayer_0/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/zero"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/Equal"
  op: "Equal"
  input: "dnn/hiddenlayer_0/Relu"
  input: "dnn/zero_fraction/zero"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/Cast"
  op: "Cast"
  input: "dnn/zero_fraction/Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/Mean"
  op: "Mean"
  input: "dnn/zero_fraction/Cast"
  input: "dnn/zero_fraction/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/fraction_of_zero_values/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/hiddenlayer_0/fraction_of_zero_values"
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/fraction_of_zero_values"
  op: "ScalarSummary"
  input: "dnn/dnn/hiddenlayer_0/fraction_of_zero_values/tags"
  input: "dnn/zero_fraction/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/activation/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/hiddenlayer_0/activation"
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/activation"
  op: "HistogramSummary"
  input: "dnn/dnn/hiddenlayer_0/activation/tag"
  input: "dnn/hiddenlayer_0/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1.0
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform/max"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform/RandomUniform"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Initializer/random_uniform"
  op: "Add"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform/mul"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Assign"
  op: "Assign"
  input: "dnn/logits/kernel/part_0"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/read"
  op: "Identity"
  input: "dnn/logits/kernel/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/bias/part_0/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/logits/bias/part_0"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/logits/bias/part_0/Assign"
  op: "Assign"
  input: "dnn/logits/bias/part_0"
  input: "dnn/logits/bias/part_0/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/logits/bias/part_0/read"
  op: "Identity"
  input: "dnn/logits/bias/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel"
  op: "Identity"
  input: "dnn/logits/kernel/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/MatMul"
  op: "MatMul"
  input: "dnn/hiddenlayer_0/Relu"
  input: "dnn/logits/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/logits/bias"
  op: "Identity"
  input: "dnn/logits/bias/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/BiasAdd"
  op: "BiasAdd"
  input: "dnn/logits/MatMul"
  input: "dnn/logits/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/zero_fraction_1/zero"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/Equal"
  op: "Equal"
  input: "dnn/logits/BiasAdd"
  input: "dnn/zero_fraction_1/zero"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/Cast"
  op: "Cast"
  input: "dnn/zero_fraction_1/Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/Mean"
  op: "Mean"
  input: "dnn/zero_fraction_1/Cast"
  input: "dnn/zero_fraction_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/dnn/logits/fraction_of_zero_values/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/logits/fraction_of_zero_values"
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/fraction_of_zero_values"
  op: "ScalarSummary"
  input: "dnn/dnn/logits/fraction_of_zero_values/tags"
  input: "dnn/zero_fraction_1/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/activation/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/logits/activation"
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/activation"
  op: "HistogramSummary"
  input: "dnn/dnn/logits/activation/tag"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/predictions/logits/Shape"
  op: "Shape"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/predictions/logits/assert_rank_at_least/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "dnn/head/predictions/logits/assert_rank_at_least/assert_type/statically_determined_correct_type"
  op: "NoOp"
}
node {
  name: "dnn/head/predictions/logits/assert_rank_at_least/static_checks_determined_all_ok"
  op: "NoOp"
}
node {
  name: "dnn/head/predictions/logistic"
  op: "Sigmoid"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/predictions/zeros_like"
  op: "ZerosLike"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/predictions/two_class_logits/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/head/predictions/two_class_logits"
  op: "ConcatV2"
  input: "dnn/head/predictions/zeros_like"
  input: "dnn/logits/BiasAdd"
  input: "dnn/head/predictions/two_class_logits/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/predictions/probabilities"
  op: "Softmax"
  input: "dnn/head/predictions/two_class_logits"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/predictions/class_ids/dimension"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/head/predictions/class_ids"
  op: "ArgMax"
  input: "dnn/head/predictions/two_class_logits"
  input: "dnn/head/predictions/class_ids/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "dnn/head/predictions/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/head/predictions/ExpandDims"
  op: "ExpandDims"
  input: "dnn/head/predictions/class_ids"
  input: "dnn/head/predictions/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/predictions/str_classes"
  op: "AsString"
  input: "dnn/head/predictions/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "fill"
    value {
      s: ""
    }
  }
  attr {
    key: "precision"
    value {
      i: -1
    }
  }
  attr {
    key: "scientific"
    value {
      b: false
    }
  }
  attr {
    key: "shortest"
    value {
      b: false
    }
  }
  attr {
    key: "width"
    value {
      i: -1
    }
  }
}
node {
  name: "dnn/head/labels/Shape"
  op: "Shape"
  input: "IteratorGetNext:12"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/labels/Shape_1"
  op: "Shape"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/labels/assert_rank_at_least/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_rank_at_least/Shape"
  op: "Shape"
  input: "IteratorGetNext:12"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/labels/assert_rank_at_least/assert_type/statically_determined_correct_type"
  op: "NoOp"
}
node {
  name: "dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  op: "NoOp"
}
node {
  name: "dnn/head/labels/strided_slice/stack"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/head/labels/strided_slice/stack_1"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/head/labels/strided_slice/stack_2"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/head/labels/strided_slice"
  op: "StridedSlice"
  input: "dnn/head/labels/Shape_1"
  input: "dnn/head/labels/strided_slice/stack"
  input: "dnn/head/labels/strided_slice/stack_1"
  input: "dnn/head/labels/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/head/labels/concat/values_1"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/head/labels/concat/axis"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/head/labels/concat"
  op: "ConcatV2"
  input: "dnn/head/labels/strided_slice"
  input: "dnn/head/labels/concat/values_1"
  input: "dnn/head/labels/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/Equal"
  op: "Equal"
  input: "dnn/head/labels/concat"
  input: "dnn/head/labels/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/Const"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/All"
  op: "All"
  input: "dnn/head/labels/assert_equal/Equal"
  input: "dnn/head/labels/assert_equal/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/Assert/Const"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "expected_labels_shape: "
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/Assert/Const_1"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "labels_shape: "
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/Assert/Assert/data_0"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "expected_labels_shape: "
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/Assert/Assert/data_2"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "labels_shape: "
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/Assert/Assert"
  op: "Assert"
  input: "dnn/head/labels/assert_equal/All"
  input: "dnn/head/labels/assert_equal/Assert/Assert/data_0"
  input: "dnn/head/labels/concat"
  input: "dnn/head/labels/assert_equal/Assert/Assert/data_2"
  input: "dnn/head/labels/Shape"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "dnn/head/labels"
  op: "Identity"
  input: "IteratorGetNext:12"
  input: "^dnn/head/labels/assert_equal/Assert/Assert"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/ToFloat"
  op: "Cast"
  input: "dnn/head/labels"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Less"
  op: "Less"
  input: "dnn/head/ToFloat"
  input: "dnn/head/assert_range/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/All"
  op: "All"
  input: "dnn/head/assert_range/assert_less/Less"
  input: "dnn/head/assert_range/assert_less/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Label IDs must < n_classes"
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x < y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (dnn/head/ToFloat:0) = "
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (dnn/head/assert_range/Const:0) = "
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Switch"
  op: "Switch"
  input: "dnn/head/assert_range/assert_less/All"
  input: "dnn/head/assert_range/assert_less/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/switch_t"
  op: "Identity"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/switch_f"
  op: "Identity"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/pred_id"
  op: "Identity"
  input: "dnn/head/assert_range/assert_less/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/NoOp"
  op: "NoOp"
  input: "^dnn/head/assert_range/assert_less/Assert/AssertGuard/switch_t"
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/control_dependency"
  op: "Identity"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/switch_t"
  input: "^dnn/head/assert_range/assert_less/Assert/AssertGuard/NoOp"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/assert_range/assert_less/Assert/AssertGuard/switch_t"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert/data_0"
  op: "Const"
  input: "^dnn/head/assert_range/assert_less/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Label IDs must < n_classes"
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert/data_1"
  op: "Const"
  input: "^dnn/head/assert_range/assert_less/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x < y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert/data_2"
  op: "Const"
  input: "^dnn/head/assert_range/assert_less/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (dnn/head/ToFloat:0) = "
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert/data_4"
  op: "Const"
  input: "^dnn/head/assert_range/assert_less/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (dnn/head/assert_range/Const:0) = "
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert"
  op: "Assert"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert/Switch"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert/data_0"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert/data_1"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert/data_2"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert/Switch_1"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert/data_4"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert/Switch_2"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_FLOAT
        type: DT_STRING
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert/Switch"
  op: "Switch"
  input: "dnn/head/assert_range/assert_less/All"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/assert_range/assert_less/All"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert/Switch_1"
  op: "Switch"
  input: "dnn/head/ToFloat"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/ToFloat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert/Switch_2"
  op: "Switch"
  input: "dnn/head/assert_range/Const"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/assert_range/Const"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/control_dependency_1"
  op: "Identity"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/switch_f"
  input: "^dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/assert_range/assert_less/Assert/AssertGuard/switch_f"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Merge"
  op: "Merge"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/control_dependency_1"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/LessEqual"
  op: "LessEqual"
  input: "dnn/head/assert_range/assert_non_negative/Const"
  input: "dnn/head/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/All"
  op: "All"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/LessEqual"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Label IDs must >= 0"
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x >= 0 did not hold element-wise:"
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (dnn/head/ToFloat:0) = "
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Switch"
  op: "Switch"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/All"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_t"
  op: "Identity"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
  op: "Identity"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/pred_id"
  op: "Identity"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/NoOp"
  op: "NoOp"
  input: "^dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_t"
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/control_dependency"
  op: "Identity"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_t"
  input: "^dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/NoOp"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_t"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_0"
  op: "Const"
  input: "^dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Label IDs must >= 0"
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_1"
  op: "Const"
  input: "^dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x >= 0 did not hold element-wise:"
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_2"
  op: "Const"
  input: "^dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (dnn/head/ToFloat:0) = "
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert"
  op: "Assert"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/Switch"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_0"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_1"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_2"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/Switch_1"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/Switch"
  op: "Switch"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/All"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/assert_range/assert_non_negative/assert_less_equal/All"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/Switch_1"
  op: "Switch"
  input: "dnn/head/ToFloat"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/ToFloat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/control_dependency_1"
  op: "Identity"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
  input: "^dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Merge"
  op: "Merge"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/control_dependency_1"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/Identity"
  op: "Identity"
  input: "dnn/head/ToFloat"
  input: "^dnn/head/assert_range/assert_less/Assert/AssertGuard/Merge"
  input: "^dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/logistic_loss/zeros_like"
  op: "ZerosLike"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/logistic_loss/GreaterEqual"
  op: "GreaterEqual"
  input: "dnn/logits/BiasAdd"
  input: "dnn/head/logistic_loss/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/logistic_loss/Select"
  op: "Select"
  input: "dnn/head/logistic_loss/GreaterEqual"
  input: "dnn/logits/BiasAdd"
  input: "dnn/head/logistic_loss/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/logistic_loss/Neg"
  op: "Neg"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/logistic_loss/Select_1"
  op: "Select"
  input: "dnn/head/logistic_loss/GreaterEqual"
  input: "dnn/head/logistic_loss/Neg"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/logistic_loss/mul"
  op: "Mul"
  input: "dnn/logits/BiasAdd"
  input: "dnn/head/assert_range/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/logistic_loss/sub"
  op: "Sub"
  input: "dnn/head/logistic_loss/Select"
  input: "dnn/head/logistic_loss/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/logistic_loss/Exp"
  op: "Exp"
  input: "dnn/head/logistic_loss/Select_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/logistic_loss/Log1p"
  op: "Log1p"
  input: "dnn/head/logistic_loss/Exp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/logistic_loss"
  op: "Add"
  input: "dnn/head/logistic_loss/sub"
  input: "dnn/head/logistic_loss/Log1p"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/weighted_loss/assert_broadcastable/weights"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/head/weighted_loss/assert_broadcastable/weights/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/weighted_loss/assert_broadcastable/weights/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/head/weighted_loss/assert_broadcastable/values/shape"
  op: "Shape"
  input: "dnn/head/logistic_loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/weighted_loss/assert_broadcastable/values/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "dnn/head/weighted_loss/assert_broadcastable/static_scalar_check_success"
  op: "NoOp"
}
node {
  name: "dnn/head/weighted_loss/ToFloat_1/x"
  op: "Const"
  input: "^dnn/head/weighted_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/head/weighted_loss/Mul"
  op: "Mul"
  input: "dnn/head/logistic_loss"
  input: "dnn/head/weighted_loss/ToFloat_1/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/weighted_loss/Const"
  op: "Const"
  input: "^dnn/head/weighted_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/head/weighted_loss/Sum"
  op: "Sum"
  input: "dnn/head/weighted_loss/Mul"
  input: "dnn/head/weighted_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/grad_ys_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/head/gradients/Fill"
  op: "Fill"
  input: "dnn/head/gradients/Shape"
  input: "dnn/head/gradients/grad_ys_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Sum_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Sum_grad/Reshape"
  op: "Reshape"
  input: "dnn/head/gradients/Fill"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Sum_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Sum_grad/Shape"
  op: "Shape"
  input: "dnn/head/weighted_loss/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Sum_grad/Tile"
  op: "Tile"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Sum_grad/Reshape"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Sum_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Shape"
  op: "Shape"
  input: "dnn/head/logistic_loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Shape"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Mul"
  op: "Mul"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Sum_grad/Tile"
  input: "dnn/head/weighted_loss/ToFloat_1/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Sum"
  op: "Sum"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Mul"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Reshape"
  op: "Reshape"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Sum"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Mul_1"
  op: "Mul"
  input: "dnn/head/logistic_loss"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Sum_1"
  op: "Sum"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Mul_1"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Reshape_1"
  op: "Reshape"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Sum_1"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Reshape"
  input: "^dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Reshape_1"
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Reshape"
  input: "^dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Reshape_1"
  input: "^dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss_grad/Shape"
  op: "Shape"
  input: "dnn/head/logistic_loss/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss_grad/Shape_1"
  op: "Shape"
  input: "dnn/head/logistic_loss/Log1p"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "dnn/head/gradients/dnn/head/logistic_loss_grad/Shape"
  input: "dnn/head/gradients/dnn/head/logistic_loss_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss_grad/Sum"
  op: "Sum"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/tuple/control_dependency"
  input: "dnn/head/gradients/dnn/head/logistic_loss_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss_grad/Reshape"
  op: "Reshape"
  input: "dnn/head/gradients/dnn/head/logistic_loss_grad/Sum"
  input: "dnn/head/gradients/dnn/head/logistic_loss_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss_grad/Sum_1"
  op: "Sum"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/tuple/control_dependency"
  input: "dnn/head/gradients/dnn/head/logistic_loss_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss_grad/Reshape_1"
  op: "Reshape"
  input: "dnn/head/gradients/dnn/head/logistic_loss_grad/Sum_1"
  input: "dnn/head/gradients/dnn/head/logistic_loss_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/dnn/head/logistic_loss_grad/Reshape"
  input: "^dnn/head/gradients/dnn/head/logistic_loss_grad/Reshape_1"
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/dnn/head/logistic_loss_grad/Reshape"
  input: "^dnn/head/gradients/dnn/head/logistic_loss_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/logistic_loss_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/head/logistic_loss_grad/Reshape_1"
  input: "^dnn/head/gradients/dnn/head/logistic_loss_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/logistic_loss_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Shape"
  op: "Shape"
  input: "dnn/head/logistic_loss/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Shape_1"
  op: "Shape"
  input: "dnn/head/logistic_loss/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Shape"
  input: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Sum"
  op: "Sum"
  input: "dnn/head/gradients/dnn/head/logistic_loss_grad/tuple/control_dependency"
  input: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Reshape"
  op: "Reshape"
  input: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Sum"
  input: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Sum_1"
  op: "Sum"
  input: "dnn/head/gradients/dnn/head/logistic_loss_grad/tuple/control_dependency"
  input: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Neg"
  op: "Neg"
  input: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Reshape_1"
  op: "Reshape"
  input: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Neg"
  input: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Reshape"
  input: "^dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Reshape_1"
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Reshape"
  input: "^dnn/head/gradients/dnn/head/logistic_loss/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Reshape_1"
  input: "^dnn/head/gradients/dnn/head/logistic_loss/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Log1p_grad/add/x"
  op: "Const"
  input: "^dnn/head/gradients/dnn/head/logistic_loss_grad/tuple/control_dependency_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Log1p_grad/add"
  op: "Add"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Log1p_grad/add/x"
  input: "dnn/head/logistic_loss/Exp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Log1p_grad/Reciprocal"
  op: "Reciprocal"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Log1p_grad/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Log1p_grad/mul"
  op: "Mul"
  input: "dnn/head/gradients/dnn/head/logistic_loss_grad/tuple/control_dependency_1"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Log1p_grad/Reciprocal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Select_grad/zeros_like"
  op: "ZerosLike"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Select_grad/Select"
  op: "Select"
  input: "dnn/head/logistic_loss/GreaterEqual"
  input: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/tuple/control_dependency"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Select_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Select_grad/Select_1"
  op: "Select"
  input: "dnn/head/logistic_loss/GreaterEqual"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Select_grad/zeros_like"
  input: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Select_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/dnn/head/logistic_loss/Select_grad/Select"
  input: "^dnn/head/gradients/dnn/head/logistic_loss/Select_grad/Select_1"
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Select_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Select_grad/Select"
  input: "^dnn/head/gradients/dnn/head/logistic_loss/Select_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/logistic_loss/Select_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Select_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Select_grad/Select_1"
  input: "^dnn/head/gradients/dnn/head/logistic_loss/Select_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/logistic_loss/Select_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Shape"
  op: "Shape"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Shape_1"
  op: "Shape"
  input: "dnn/head/assert_range/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Shape"
  input: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Mul"
  op: "Mul"
  input: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/tuple/control_dependency_1"
  input: "dnn/head/assert_range/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Sum"
  op: "Sum"
  input: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Mul"
  input: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Reshape"
  op: "Reshape"
  input: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Sum"
  input: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Mul_1"
  op: "Mul"
  input: "dnn/logits/BiasAdd"
  input: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Sum_1"
  op: "Sum"
  input: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Mul_1"
  input: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Reshape_1"
  op: "Reshape"
  input: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Sum_1"
  input: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Reshape"
  input: "^dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Reshape_1"
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Reshape"
  input: "^dnn/head/gradients/dnn/head/logistic_loss/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Reshape_1"
  input: "^dnn/head/gradients/dnn/head/logistic_loss/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Exp_grad/mul"
  op: "Mul"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Log1p_grad/mul"
  input: "dnn/head/logistic_loss/Exp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/zeros_like"
  op: "ZerosLike"
  input: "dnn/head/logistic_loss/Neg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/Select"
  op: "Select"
  input: "dnn/head/logistic_loss/GreaterEqual"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Exp_grad/mul"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/Select_1"
  op: "Select"
  input: "dnn/head/logistic_loss/GreaterEqual"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/zeros_like"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Exp_grad/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/Select"
  input: "^dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/Select_1"
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/Select"
  input: "^dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/Select_1"
  input: "^dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Neg_grad/Neg"
  op: "Neg"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/AddN"
  op: "AddN"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Select_grad/tuple/control_dependency"
  input: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/tuple/control_dependency"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/tuple/control_dependency_1"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Neg_grad/Neg"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/logistic_loss/Select_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/logits/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "dnn/head/gradients/AddN"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/logits/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/AddN"
  input: "^dnn/head/gradients/dnn/logits/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "dnn/head/gradients/dnn/logits/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/AddN"
  input: "^dnn/head/gradients/dnn/logits/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/logistic_loss/Select_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/logits/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/logits/BiasAdd_grad/BiasAddGrad"
  input: "^dnn/head/gradients/dnn/logits/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/logits/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/logits/MatMul_grad/MatMul"
  op: "MatMul"
  input: "dnn/head/gradients/dnn/logits/BiasAdd_grad/tuple/control_dependency"
  input: "dnn/logits/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/logits/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dnn/hiddenlayer_0/Relu"
  input: "dnn/head/gradients/dnn/logits/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/logits/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/dnn/logits/MatMul_grad/MatMul"
  input: "^dnn/head/gradients/dnn/logits/MatMul_grad/MatMul_1"
}
node {
  name: "dnn/head/gradients/dnn/logits/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/dnn/logits/MatMul_grad/MatMul"
  input: "^dnn/head/gradients/dnn/logits/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/logits/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/logits/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/logits/MatMul_grad/MatMul_1"
  input: "^dnn/head/gradients/dnn/logits/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/logits/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "dnn/head/gradients/dnn/logits/MatMul_grad/tuple/control_dependency"
  input: "dnn/hiddenlayer_0/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "dnn/head/gradients/dnn/hiddenlayer_0/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/BiasAddGrad"
  input: "^dnn/head/gradients/dnn/hiddenlayer_0/Relu_grad/ReluGrad"
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/dnn/hiddenlayer_0/Relu_grad/ReluGrad"
  input: "^dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_0/Relu_grad/ReluGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/BiasAddGrad"
  input: "^dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul"
  op: "MatMul"
  input: "dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/control_dependency"
  input: "dnn/hiddenlayer_0/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 12
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dnn/input_from_feature_columns/input_layer/concat"
  input: "dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul"
  input: "^dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul_1"
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul"
  input: "^dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 12
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul_1"
  input: "^dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 12
          }
          dim {
            size: 5
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 12
        }
        dim {
          size: 5
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad/Assign"
  op: "Assign"
  input: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad"
  input: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad/read"
  op: "Identity"
  input: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad/Assign"
  op: "Assign"
  input: "dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad"
  input: "dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad/read"
  op: "Identity"
  input: "dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/kernel/part_0/Adagrad/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/kernel/part_0/Adagrad"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/dnn/logits/kernel/part_0/Adagrad/Assign"
  op: "Assign"
  input: "dnn/dnn/logits/kernel/part_0/Adagrad"
  input: "dnn/dnn/logits/kernel/part_0/Adagrad/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/dnn/logits/kernel/part_0/Adagrad/read"
  op: "Identity"
  input: "dnn/dnn/logits/kernel/part_0/Adagrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/bias/part_0/Adagrad/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/bias/part_0/Adagrad"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/dnn/logits/bias/part_0/Adagrad/Assign"
  op: "Assign"
  input: "dnn/dnn/logits/bias/part_0/Adagrad"
  input: "dnn/dnn/logits/bias/part_0/Adagrad/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/dnn/logits/bias/part_0/Adagrad/read"
  op: "Identity"
  input: "dnn/dnn/logits/bias/part_0/Adagrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/Adagrad/learning_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.05000000074505806
      }
    }
  }
}
node {
  name: "dnn/head/Adagrad/update_dnn/hiddenlayer_0/kernel/part_0/ApplyAdagrad"
  op: "ApplyAdagrad"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  input: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad"
  input: "dnn/head/Adagrad/learning_rate"
  input: "dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/Adagrad/update_dnn/hiddenlayer_0/bias/part_0/ApplyAdagrad"
  op: "ApplyAdagrad"
  input: "dnn/hiddenlayer_0/bias/part_0"
  input: "dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad"
  input: "dnn/head/Adagrad/learning_rate"
  input: "dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/Adagrad/update_dnn/logits/kernel/part_0/ApplyAdagrad"
  op: "ApplyAdagrad"
  input: "dnn/logits/kernel/part_0"
  input: "dnn/dnn/logits/kernel/part_0/Adagrad"
  input: "dnn/head/Adagrad/learning_rate"
  input: "dnn/head/gradients/dnn/logits/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/Adagrad/update_dnn/logits/bias/part_0/ApplyAdagrad"
  op: "ApplyAdagrad"
  input: "dnn/logits/bias/part_0"
  input: "dnn/dnn/logits/bias/part_0/Adagrad"
  input: "dnn/head/Adagrad/learning_rate"
  input: "dnn/head/gradients/dnn/logits/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/Adagrad/update"
  op: "NoOp"
  input: "^dnn/head/Adagrad/update_dnn/hiddenlayer_0/bias/part_0/ApplyAdagrad"
  input: "^dnn/head/Adagrad/update_dnn/hiddenlayer_0/kernel/part_0/ApplyAdagrad"
  input: "^dnn/head/Adagrad/update_dnn/logits/bias/part_0/ApplyAdagrad"
  input: "^dnn/head/Adagrad/update_dnn/logits/kernel/part_0/ApplyAdagrad"
}
node {
  name: "dnn/head/Adagrad/value"
  op: "Const"
  input: "^dnn/head/Adagrad/update"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "dnn/head/Adagrad"
  op: "AssignAdd"
  input: "global_step"
  input: "dnn/head/Adagrad/value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/ones_like/Shape"
  op: "Shape"
  input: "dnn/head/logistic_loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/ones_like/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/head/ones_like"
  op: "Fill"
  input: "dnn/head/ones_like/Shape"
  input: "dnn/head/ones_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/mul/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/head/mul"
  op: "Mul"
  input: "dnn/head/mul/x"
  input: "dnn/head/ones_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/head/Sum"
  op: "Sum"
  input: "dnn/head/mul"
  input: "dnn/head/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/truediv"
  op: "RealDiv"
  input: "dnn/head/weighted_loss/Sum"
  input: "dnn/head/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "loss/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "loss"
      }
    }
  }
}
node {
  name: "loss"
  op: "ScalarSummary"
  input: "loss/tags"
  input: "dnn/head/weighted_loss/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "average_loss/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "average_loss"
      }
    }
  }
}
node {
  name: "average_loss"
  op: "ScalarSummary"
  input: "average_loss/tags"
  input: "dnn/head/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "init"
  op: "NoOp"
  input: "^dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad/Assign"
  input: "^dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad/Assign"
  input: "^dnn/dnn/logits/bias/part_0/Adagrad/Assign"
  input: "^dnn/dnn/logits/kernel/part_0/Adagrad/Assign"
  input: "^dnn/hiddenlayer_0/bias/part_0/Assign"
  input: "^dnn/hiddenlayer_0/kernel/part_0/Assign"
  input: "^dnn/logits/bias/part_0/Assign"
  input: "^dnn/logits/kernel/part_0/Assign"
  input: "^global_step/Assign"
}
node {
  name: "init_1"
  op: "NoOp"
}
node {
  name: "group_deps"
  op: "NoOp"
  input: "^init"
  input: "^init_1"
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_0/bias/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "dnn/logits/kernel/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "dnn/logits/bias/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "dnn/dnn/logits/kernel/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "dnn/dnn/logits/bias/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/stack"
  op: "Pack"
  input: "report_uninitialized_variables/IsVariableInitialized"
  input: "report_uninitialized_variables/IsVariableInitialized_1"
  input: "report_uninitialized_variables/IsVariableInitialized_2"
  input: "report_uninitialized_variables/IsVariableInitialized_3"
  input: "report_uninitialized_variables/IsVariableInitialized_4"
  input: "report_uninitialized_variables/IsVariableInitialized_5"
  input: "report_uninitialized_variables/IsVariableInitialized_6"
  input: "report_uninitialized_variables/IsVariableInitialized_7"
  input: "report_uninitialized_variables/IsVariableInitialized_8"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 9
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 9
          }
        }
        string_val: "global_step"
        string_val: "dnn/hiddenlayer_0/kernel/part_0"
        string_val: "dnn/hiddenlayer_0/bias/part_0"
        string_val: "dnn/logits/kernel/part_0"
        string_val: "dnn/logits/bias/part_0"
        string_val: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad"
        string_val: "dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad"
        string_val: "dnn/dnn/logits/kernel/part_0/Adagrad"
        string_val: "dnn/dnn/logits/bias/part_0/Adagrad"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 9
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables/boolean_mask/strided_slice"
  input: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 9
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 9
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_variables/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables/boolean_mask/concat/values_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  input: "report_uninitialized_variables/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables/Const"
  input: "report_uninitialized_variables/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables/LogicalNot"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/GatherV2/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/GatherV2"
  op: "GatherV2"
  input: "report_uninitialized_variables/boolean_mask/Reshape"
  input: "report_uninitialized_variables/boolean_mask/Squeeze"
  input: "report_uninitialized_variables/boolean_mask/GatherV2/axis"
  device: "/device:CPU:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_resources/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/GatherV2"
  input: "report_uninitialized_resources/Const"
  input: "concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_0/bias/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "dnn/logits/kernel/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "dnn/logits/bias/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "dnn/dnn/logits/kernel/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "dnn/dnn/logits/bias/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/stack"
  op: "Pack"
  input: "report_uninitialized_variables_1/IsVariableInitialized"
  input: "report_uninitialized_variables_1/IsVariableInitialized_1"
  input: "report_uninitialized_variables_1/IsVariableInitialized_2"
  input: "report_uninitialized_variables_1/IsVariableInitialized_3"
  input: "report_uninitialized_variables_1/IsVariableInitialized_4"
  input: "report_uninitialized_variables_1/IsVariableInitialized_5"
  input: "report_uninitialized_variables_1/IsVariableInitialized_6"
  input: "report_uninitialized_variables_1/IsVariableInitialized_7"
  input: "report_uninitialized_variables_1/IsVariableInitialized_8"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 9
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables_1/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 9
          }
        }
        string_val: "global_step"
        string_val: "dnn/hiddenlayer_0/kernel/part_0"
        string_val: "dnn/hiddenlayer_0/bias/part_0"
        string_val: "dnn/logits/kernel/part_0"
        string_val: "dnn/logits/bias/part_0"
        string_val: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad"
        string_val: "dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad"
        string_val: "dnn/dnn/logits/kernel/part_0/Adagrad"
        string_val: "dnn/dnn/logits/bias/part_0/Adagrad"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 9
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  input: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 9
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 9
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape_2"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_variables_1/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables_1/boolean_mask/concat/values_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2"
  input: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables_1/Const"
  input: "report_uninitialized_variables_1/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables_1/LogicalNot"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables_1/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/GatherV2/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/GatherV2"
  op: "GatherV2"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape"
  input: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  input: "report_uninitialized_variables_1/boolean_mask/GatherV2/axis"
  device: "/device:CPU:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "init_2"
  op: "NoOp"
}
node {
  name: "init_all_tables"
  op: "NoOp"
}
node {
  name: "init_3"
  op: "NoOp"
}
node {
  name: "group_deps_1"
  op: "NoOp"
  input: "^init_2"
  input: "^init_3"
  input: "^init_all_tables"
}
node {
  name: "Merge/MergeSummary"
  op: "MergeSummary"
  input: "dnn/dnn/hiddenlayer_0/fraction_of_zero_values"
  input: "dnn/dnn/hiddenlayer_0/activation"
  input: "dnn/dnn/logits/fraction_of_zero_values"
  input: "dnn/dnn/logits/activation"
  input: "loss"
  input: "average_loss"
  attr {
    key: "N"
    value {
      i: 6
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save/StringJoin/inputs_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "_temp_97b928c0f8ac4d66b8c7f25cec324b90/part"
      }
    }
  }
}
node {
  name: "save/StringJoin"
  op: "StringJoin"
  input: "save/Const"
  input: "save/StringJoin/inputs_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "separator"
    value {
      s: ""
    }
  }
}
node {
  name: "save/num_shards"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "save/ShardedFilename/shard"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "save/ShardedFilename"
  op: "ShardedFilename"
  input: "save/StringJoin"
  input: "save/ShardedFilename/shard"
  input: "save/num_shards"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/SaveV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 9
          }
        }
        string_val: "dnn/hiddenlayer_0/bias"
        string_val: "dnn/hiddenlayer_0/bias/t_0/Adagrad"
        string_val: "dnn/hiddenlayer_0/kernel"
        string_val: "dnn/hiddenlayer_0/kernel/t_0/Adagrad"
        string_val: "dnn/logits/bias"
        string_val: "dnn/logits/bias/t_0/Adagrad"
        string_val: "dnn/logits/kernel"
        string_val: "dnn/logits/kernel/t_0/Adagrad"
        string_val: "global_step"
      }
    }
  }
}
node {
  name: "save/SaveV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 9
          }
        }
        string_val: "5 0,5"
        string_val: "5 0,5"
        string_val: "12 5 0,12:0,5"
        string_val: "12 5 0,12:0,5"
        string_val: "1 0,1"
        string_val: "1 0,1"
        string_val: "5 1 0,5:0,1"
        string_val: "5 1 0,5:0,1"
        string_val: ""
      }
    }
  }
}
node {
  name: "save/SaveV2"
  op: "SaveV2"
  input: "save/ShardedFilename"
  input: "save/SaveV2/tensor_names"
  input: "save/SaveV2/shape_and_slices"
  input: "dnn/hiddenlayer_0/bias/part_0/read"
  input: "dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad/read"
  input: "dnn/hiddenlayer_0/kernel/part_0/read"
  input: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad/read"
  input: "dnn/logits/bias/part_0/read"
  input: "dnn/dnn/logits/bias/part_0/Adagrad/read"
  input: "dnn/logits/kernel/part_0/read"
  input: "dnn/dnn/logits/kernel/part_0/Adagrad/read"
  input: "global_step"
  device: "/device:CPU:0"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
      }
    }
  }
}
node {
  name: "save/control_dependency"
  op: "Identity"
  input: "save/ShardedFilename"
  input: "^save/SaveV2"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/ShardedFilename"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/MergeV2Checkpoints/checkpoint_prefixes"
  op: "Pack"
  input: "save/ShardedFilename"
  input: "^save/control_dependency"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "save/MergeV2Checkpoints"
  op: "MergeV2Checkpoints"
  input: "save/MergeV2Checkpoints/checkpoint_prefixes"
  input: "save/Const"
  device: "/device:CPU:0"
  attr {
    key: "delete_old_dirs"
    value {
      b: true
    }
  }
}
node {
  name: "save/Identity"
  op: "Identity"
  input: "save/Const"
  input: "^save/MergeV2Checkpoints"
  input: "^save/control_dependency"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/RestoreV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 9
          }
        }
        string_val: "dnn/hiddenlayer_0/bias"
        string_val: "dnn/hiddenlayer_0/bias/t_0/Adagrad"
        string_val: "dnn/hiddenlayer_0/kernel"
        string_val: "dnn/hiddenlayer_0/kernel/t_0/Adagrad"
        string_val: "dnn/logits/bias"
        string_val: "dnn/logits/bias/t_0/Adagrad"
        string_val: "dnn/logits/kernel"
        string_val: "dnn/logits/kernel/t_0/Adagrad"
        string_val: "global_step"
      }
    }
  }
}
node {
  name: "save/RestoreV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 9
          }
        }
        string_val: "5 0,5"
        string_val: "5 0,5"
        string_val: "12 5 0,12:0,5"
        string_val: "12 5 0,12:0,5"
        string_val: "1 0,1"
        string_val: "1 0,1"
        string_val: "5 1 0,5:0,1"
        string_val: "5 1 0,5:0,1"
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2/tensor_names"
  input: "save/RestoreV2/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
        shape {
          dim {
            size: 5
          }
        }
        shape {
          dim {
            size: 12
          }
          dim {
            size: 5
          }
        }
        shape {
          dim {
            size: 12
          }
          dim {
            size: 5
          }
        }
        shape {
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
      }
    }
  }
}
node {
  name: "save/Assign"
  op: "Assign"
  input: "dnn/hiddenlayer_0/bias/part_0"
  input: "save/RestoreV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_1"
  op: "Assign"
  input: "dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad"
  input: "save/RestoreV2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_2"
  op: "Assign"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  input: "save/RestoreV2:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_3"
  op: "Assign"
  input: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad"
  input: "save/RestoreV2:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_4"
  op: "Assign"
  input: "dnn/logits/bias/part_0"
  input: "save/RestoreV2:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_5"
  op: "Assign"
  input: "dnn/dnn/logits/bias/part_0/Adagrad"
  input: "save/RestoreV2:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_6"
  op: "Assign"
  input: "dnn/logits/kernel/part_0"
  input: "save/RestoreV2:6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_7"
  op: "Assign"
  input: "dnn/dnn/logits/kernel/part_0/Adagrad"
  input: "save/RestoreV2:7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_8"
  op: "Assign"
  input: "global_step"
  input: "save/RestoreV2:8"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_shard"
  op: "NoOp"
  input: "^save/Assign"
  input: "^save/Assign_1"
  input: "^save/Assign_2"
  input: "^save/Assign_3"
  input: "^save/Assign_4"
  input: "^save/Assign_5"
  input: "^save/Assign_6"
  input: "^save/Assign_7"
  input: "^save/Assign_8"
}
node {
  name: "save/restore_all"
  op: "NoOp"
  input: "^save/restore_shard"
}
versions {
  producer: 26
}
