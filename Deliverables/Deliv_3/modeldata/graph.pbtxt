node {
  name: "global_step/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global_step/Assign"
  op: "Assign"
  input: "global_step"
  input: "global_step/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global_step/read"
  op: "Identity"
  input: "global_step"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "global_step/cond/Switch"
  op: "Switch"
  input: "global_step/IsVariableInitialized"
  input: "global_step/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/switch_t"
  op: "Identity"
  input: "global_step/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/switch_f"
  op: "Identity"
  input: "global_step/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/pred_id"
  op: "Identity"
  input: "global_step/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/read"
  op: "Identity"
  input: "global_step/cond/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/read/Switch"
  op: "RefSwitch"
  input: "global_step"
  input: "global_step/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/Switch_1"
  op: "Switch"
  input: "global_step/Initializer/zeros"
  input: "global_step/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/Merge"
  op: "Merge"
  input: "global_step/cond/Switch_1"
  input: "global_step/cond/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/add/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step/add"
  op: "Add"
  input: "global_step/cond/Merge"
  input: "global_step/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "tensors/component_0"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 750
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 750
          }
        }
        tensor_content: "\225m\3130\237\367\350\277k\266\2744p\355\361?|g\222\244\366\246\345?1\267\326\361c\237\325\277`j\332\355\022r\340\277\014P\262R\364\311\257?F\252\3611sB\352\277h\311\376O\322\213\367?m,\004\005yH\365?<\002\021#NZ\001@\221\036jz\317O\350\277\277_\317\356\221\377\324\277\002\256I\207V\300\365?jj@,\344\007\350\277\246\316\346\3700\311\362?C\375\034\021@\301\337?*se\305\275%\320?\236\304\207j\367E\302\277*\244\210\365\311x\352\277L\306G\"\204\271\352\277\021\001%n\307k\350\277ZB_Q|}\342\277\267\372\333\305h\301\342\277\204\200tnG5\343\277\314g\314\3274i\352\277rk\325\256AI\343\277\232\270\030\365\2361\377?\372\0229)\022h\347\277\323\370A\200\366\020\263\277\301Ip\033!4\347\277\210G\330\311\271\356\327\277\2467\3422\362\354\351\277\276\317\024YHk\371?\255\270RZ&\277\352\277M\356T&\177&\374?\220\220\330Q\273\371\351\277Ia\266\253\364\246\244\277\026\360\320\306\347N\327\277\227(\357\230#\245\352\277\345\207R\231\003!\344\277\225\321)\327j\364\337\277\215\367P\301\255\321\341\277E\336^\333\246\351\341\277rW1\260j4\346\277\334\301G/\266\247\350\277C\352\332\365\335\"\332?\223\013(_m\261\342\277\014\233$t\256\221\260\277\266\177\214\270\266\t\352\277\203@\337)\246\276\346?\306\225\037\303\225\344\364?\344&;X\337\345\332\277\322\t5\236\010\237\351\277\360\233\\\326\253\313\350\277m,\004\005yH\365?\324\017\341\303?C\352\277\236\327\311\205Y\344\307\277e5\347\221\241c\312\277\331\352\000v\tN\352\277\277\025ydS\006\301\277\330\206\212w\275\024\345\277\035\211\363\260\251%\361?\226&PI\357\243\002@_\304@\302U\314\352\277\314q\036W\240\363\350\277\220\323\341\274\034Y\351\277v\246\222f:\334\346\277\360o\267\260\026\016\275\277\312\345_[\246\220\351\277I\270\034\252\373}\352\277nX\212\241\217t\337\277\334\260\300\350\355\277\323\277\312\004\014<\'\020\300?\\\007\3258l\265\342\277\0135\266\346\303\003\327?\236\304\207j\367E\302\277\026\214r \034R\340\2771\267\326\361c\237\325\277\231\034M\356\321\231\360?K(\214\306\213\302\352\277K\tQ\215\345\030\352\277\242\2027Q\274\030\345\277\017B\023\244\215\"\316\277\201\206\330\213\375#\311\277#E)\232W\242\352\277\200\304\356\"N\021\352\277?\010T\313\327\240\222?\221\036jz\317O\350\277\2041FW`X\346\277\333\r\3047B\215\362?\251\004\327l3\274\351\277\326\214\356\224s\003\313\277\233\275\216\312\343\025\341\277]\247\037\333\274\360\320\277\234\022\337\351\000Z\t@\214\2269\200\211\226\330\277\373\306\340\244F\335\352\277\177y{\3163\005\322?\326\214\356\224s\003\313\277\263\2032\022\353\357\347\277\372v\227\317\335d\336\277E\237\300\320\306\263\367?7\004}\323\231\220\345\277\244\373\233\331\323\240\320\277E\362\224F\254J\255?m\273\\\267Mf\331\277\223L\324\177\263\340\r@\347\217\274\0169R\232\277xD\"4\361`\344\277\367#\334\364?\005\005@M\010\310\353\277_\324\277\326\214\356\224s\003\313\277\261\2555\3442\320\322\277\014\301\250\252r\316\273\277\3401+\342\010\024\326?E\237\300\320\306\263\367?\277_\317\356\221\377\324\277\202n\213D\n\327\326\277\243)\267\272i\261\351\277Z\032\027T\316S\350\277\362\205h\254\3565\360?\304\034\361\303\204\245\251\277\345\207R\231\003!\344\277\374\276\323\267<&\247\277\024\237\264;~\360\345\277\357\330<\"\324\314\245?\"\237\316Y\032\342\271?\236\304\207j\367E\302\277\334\260\300\350\355\277\323\277INY\263\242\335\352\277\003\212\025|x\004\346\277S\220\370\345\005\031\344\277\3156\224>\220+\351\277\240\365\231s\201\261\361?\315\205v5Bd\262?\267\247P\206\232P\264\277\201\233aj<\335\352\277\032z\274\225\307\276\327\277\000\000*\255\230\224\345\2777\202\227u\275\354\313?\\\177\327\335\016\307\326\277\024\2312f\217D\213?\217\200\332\254\030\313\352\277~\005n\222\342\317\266\277\2423\t:\325;\350\277\341{\201lG\r\312?\247\202j\360\244\343\350\277;S\336\211i8\346\277\035\211\363\260\251%\361?\263\2032\022\353\357\347\277\233\251\352\313\014\001\344\277\177y{\3163\005\322?\247\217H\356P\223\330?\357v1\221\014\317\326\277Y\241\035uj\001\362?\031\372\221\014\205\321\336?\360\023_{N\335\334\277~l\235\320\207U\342\277)\000\264~\252\014\007@\224\343\223A\212\343\264?\246j\035\251\261\226\346?,q}/\013H\352\277\261\2555\3442\320\322\277|\316\r\003\321\320\344\277\360\233\\\326\253\313\350\277\270\225j`v\316\000@\240! \020\230\335\333\277<\377\244F\361\254\354?\224\271G9+\335\362?\031\356\025\362M\230\346\277Q/\341\244\341\335\332\277e\"\245v?\305\304\277\035=w\250\035@\347\277q;\016_B\210\351\277ej\r\215\373<\344\277\223]\315\213\374\310\351\277\272(\273\177\265\244\306\277?V.\341`0\322\277{\342\261\001\250\345\341\277\212/\332\246\024\"\002@\025\3172\325*\323\352\277\362M\220\2429e\343\277\226\336\007\325\026\244\357?\tO\276\002Q\007\352\277\326y\254y\021e\305\277\315J8=g@\346\277\332\233\272\006\2424\337\277\360\253W\214f\250\340?\201\233aj<\335\352\277xhV?\317\034\364?\225\201o/v\014\346\277\370ag@\371D\344\277,\223\004\236\351\342\314\277]\270\246!\205\330\345\277\271\227\t\260\252\317\350\277I\005x\224\310g\350\277\352\257\3155\232\025\342\277\367\024\364\375\253\036\330\277\354tC\035\212M\342\277\304\277\267\353)\217\352\277\ncb\001(\034\347\277\000\354\205\256\301\177\350\277m\253\036\025<)m?\344\242\023\007\267V\351\2772\217\246L6\262\351\277G@\002\255\330/\350\277\254\371\023\244\"\265\343\277\017W\244\321p[\004@8h\333ye\215\334\277\036\002\355\217\rx\347\277\036\026\221\216\344\214\344\277\265A\342\370\257\302\332?2\324\201\366\250S\225\277\334\260\300\350\355\277\323\277\234F\030\266N\017\352\277^\314J \\\355\342\277\242\016\336\3645?\326\277\356N\351\223^\245\334\277\003\2720KA/\303?\326y\254y\021e\305\277\261\2555\3442\320\322\277p7\274\204\327\013\317?\332\261I\212\023y\351\277\212/\332\246\024\"\002@D\327\230\332{\204\324?\023\264\311\203\372\201\352\277\313R\017\254;\274\352\277\375\326g/\236$\261?\316\333tX\t\303\005@\216\035D\240\036\341\352\277\300\364\225\336\002\263\351\277i\324/\261~\032\352\277\331r\346x\346\377\347\277 \263\276x&\233\352\277\206\237\016\325\027\034\352\277\373\260\310\366\310\354\344\277\037\377:\201\262\200\364?\2636\327\'\036\006\352\277,\200\302\202\207D\307\277.\241D\177\n\t\344\277\312\004\014<\'\020\300?,\272\030\214\021\255\206\277\257HuZ\362\\\344\277\004c/b?Q\343\277\376\355@\203[6\331\277.\036\335\233\325v\006@ZB_Q|}\342\277\315\205v5Bd\262?f\334\253\024\350_\342?\374\276\323\267<&\247\277\037\233q13N\350?\207#N~\300\347\351\277U\271\372\222b\303\352\277\327\255p\221\366\307\347\277,E\032\344\335\301\352\277\2212\016y\246d\345\277qC\215\261\223\037\351\277<\320v\2464\246\010@\320\324#\014G\260\346\277A\274\005GF\\\017@\213\n\223\334\017p\347\277z\365\363\034\n\204\347\277\267\315\324\274^\215\277\277\255Y\030& \372\001@\337K3\376\225\027\351\277D\242r\337!\253\352\277-\262\263mR\264\352\277-\261\324\213\021\260\366?\331*\t\256\3015\n@\225\\D\352\326\017\324\277\344\370\216={\315\352?\236\304\207j\367E\302\277\201\206\330\213\375#\311\2777\220#w\023\267\326\277\265p\360\366\210Q\342\277\374\234$\370\361\327\347\277\327\035\014<\310~\352\277?\010T\313\327\240\222?\347\217\274\0169R\232\277\2475\367\255W\275\334\277\340Dm\375j\262\333?\360o\267\260\026\016\275\277\202\244\250y%\361\362?\232\274,\347n\237\351\277\004\233\007l\364!\360?S\321\244\006LH\017@\024\2312f\217D\213?\234\005\342w\007\243\351\277rk\325\256AI\343\277\222\343\337a\277\207\350\277&a\021\362\314\221\376?|\214\275\351\225\243\327?\237\244\022?d\035\353?\327\255p\221\366\307\347\277d\271;\244\342\031\341\277R\2112\345\332\263\326?\225\274\371G\206\324\345\277m\310:\265\371\025\351?\"\200\263\262gj\352\277\236\352\013\241\273\202\315\277\263\2032\022\353\357\347\277\332_\244]\204a\342\277\025\260\246+\372\r\360?\363\335\337\216\317\303\311\277\233V_\214>\220\265\277\360\303\244\323Y\365\342\277\376JD\322\257\003\370?\230\203]\243\370\215\332\277=,\370o0\205\343\277\272\\\177\227\232\007\351\277\021\266\234\260\024u\351\277\363\312\235sm%\304\277\221\036jz\317O\350\277S\323\210o\031\255\312?I\312\355{\270\237\350\277\0321\246{a,\315?\214\245!w\035}\005@\025H\007\322E|\351\277e\"\245v?\305\304\277\000\354\205\256\301\177\350\277&a|\233\200\307\343?b\003_\2178H\341?5\023\026\246\337\366\345?\303~\201\255\342\"\352\277/\'\034\\\032\013\372?ZI|\300X\236\352\277\030\025\374\013\207K\351\277\323\370A\200\366\020\263\277\2353\326\232\354p\344\277\237\244\022?d\035\353?\000P\344T\215|\337\277 z\007\2150\306\351\277\340p\311\354\350I\360?}\313[\364u\331\361?\322\301\341\360\344\021\341\277&\240\257\374\254\307\350\277\246\303\216\343g\237\227?\3639\354\243bP\346\277#e\362D\2644\345\277\203\223\266\211\251\323\350\277p7\274\204\327\013\317?\263\276\274*\373\267\347\277\022y\'\023j}\334\277\365\353\037p\360\351\340\277h\000\251\303\314\331\352\277\270\tx\207\226y\352\277\\\007\3258l\265\342\2772\324\201\366\250S\225\277\r\"t\313ae\321?\265.\240\335M$\325?\214ukc\321-\310?\332\233\272\006\2424\337\277\322\177\221\327\251\344\323?f\334\253\024\350_\342?\353O\030\330\352P\320\277\375\326g/\236$\261?\364b\3001\036\205\335\277\300-M\312\370\207\352\277&\264S\373\203\334\345\277\264\034\267\263\020\306\350??\266\343>\020\365\343\277m\310:\265\371\025\351?\303\363{\003\017\362\334?\024>\235\372Y\265\334\2777oUZ[N\306?q\217\t\272\037\005\363?|\316\r\003\321\320\344\277\270\225j`v\316\000@\206\252\252\337w\340\321\277lW\376\020\202i\342\277\376\337\264\201\005l\316?\003\212\025|x\004\346\277\264\034\267\263\020\306\350?\021\377\205\036\223j\000@G@\002\255\330/\350\277xX\3062\310u\341\277\222\343\337a\277\207\350\277\323\370A\200\366\020\263\277\361`\322\275\233\003\351\277\2121y\366H#\352\277\232\370\030\343\363\335\340\277,\304\026\247sN\374?\t\313~Y\250;\352\277\353\340z\303\211\311\352\277e\"\245v?\305\304\277(y\311\342s\024\346\277\362\000\035`\354>\327\277\376\337\264\201\005l\316?:\216h\242y\000\346\277\222\343\337a\277\207\350\277\227\341s\261sQ\004@\362\033\366% \261\352\277R\234t\000=R\334?\303\273\016\243\rW\345?\363\360!\2521b\317\277\212\2559M\240W\352\277\221b)Ho\217\302?\317#R#.\215\343\277\320Q\274(\022\036\t@\222\303J\224H\347\004@G\214~\265d\025\362?\375\326g/\236$\261?\317*\220r\353L\313?\240\275\301i\314\340\344\277\312\232\327\235\363\231\352\277\321Zf\222\n\350\341?\030\302$\254\2036\347?ej\r\215\373<\344\277\272\\\177\227\232\007\351\277\230\013[\376U|\346\277\n\020\213\241$\007\345?\251[\204\326k0\346\277\211}\365\376\324\010\364?\262\322`)\322\314\344\277\000\024\316\253o\251\342\277,\223\004\236\351\342\314\277\3273Hn\006\312\375?\240\251\035k\365\313\347\277m\273\\\267Mf\331\277YU\241l\336\033\350\277\355\"c\367Gy\362?M\276qa\201f\300\277e\"\245v?\305\304\277\"\237\316Y\032\342\271?~\224w:d\313\252??\010T\313\327\240\222?\374\225^\367\306r\332?\237TC.\327J\352\277`j\332\355\022r\340\277 S\t\033w\326\330\277(y\311\342s\024\346\277\307tge\006\022\020@Qd\007\240;\267\344?\376\337\264\201\005l\316?\360o\267\260\026\016\275\277\007\355\0321\037\301\343\277\2041FW`X\346\277g\033\337u\024`\347\277\224\343\223A\212\343\264?\020\364\022#a\310\352\277e5\347\221\241c\312\277\'\231\351\373\201b\333?\"\'g\371\372\364\005@\214\363<\317\335c\367?\240\251\035k\365\313\347\277\344s\256\232,\014\347\277jY\271\345\033 \323\277|z\324\277XE\353?\251D.\3119$\366?Ec\213\236*O\271\277\032\333\323\326\353\371\340\277\nWS\034\303\327\352\277\031\026^\357\373\301\340\277jY\271\345\033 \323\277U\271\344\313A\212\351\277\275\372\016eQ\214\346\277\215`E\337\241*\007@\"\365\314|\341@\r@d\221\363\2464\360\346\277j\271nC\313\344\344\277\024\304\307(\235\260\351\277\025S\243\334\245@\321\277\251\304x\364_\211\013@\034Q\033\247\364T\344\277\315\205v5Bd\262?\323Z\373\350V\262\374?C\005E\365\337\234\344\277\002=\2429+\336\331\277\206\032\360I.L\366?MT\331J\230\017\351\277\242\016\336\3645?\326\277\035\366\373\300m\354\000@ZB_Q|}\342\277N\223<\\\305\210\352\277\374\276\323\267<&\247\277\314\201\256c\247\232\373?\'\231\351\373\201b\333?5+c\355\322C\350\277\226\371q\324\030\036\332\277\242\226\333O\223-\342\277f/\203t\353t\344\277(y\311\342s\024\346\277\375a\232\337\341\017\350\277\310fj\234\344\337\352\277\213\251{\233\3534\336\277\226&PI\357\243\002@\341$M\344\\d\346\277\277\025ydS\006\301\277\235\020M$\225\305\352\277\251[\204\326k0\346\277])\343\305\374\204\354?\027=D\t5u\343\277{\272i\004\372\273\347\277A{Y&\000-\344\277\315\205\302Uw\010\346\277|\177\337\353\351\363\347\277\312\224[(\275n\346?\224\343\223A\212\343\264?\370u\013?\320Y\341\277\3025\314\034J\037\352\277\332\261I\212\023y\351\277\333\362\177\310Z\345\351\277\212Q\231\017Wq\337?\262\322`)\322\314\344\277\250\306\214\210(\333\352\277\223\367\203`\226\234\345\277\023f\345\367\007\337\326\277\260Z\tr\252\340\276?R\330+\334\024\244\256\277\316\256\226\3432=\335\277\017/\321\210+\204\310\277n\332#\3376t\325?]\247\037\333\274\360\320\277\306\225\037\303\225\344\364?\227(\357\230#\245\352\277\016\374\031B6\275\353?\0135\266\346\303\003\327?\305\027NW\211\256\305?+\203z\217\t\334\352\277\007\006\tr\270\003\352\277\347\260&\'\277U\333\277\030\325f\307\345\324\354?\252HB\273\t\222\340\277-\215\240\2003\364\346\277@\217\375$\327A\341\277\023{\022\230\004\255\351\277\301q\270\030\317]\341\277\244\373\233\331\323\240\320\277\033\034\200\3671)\014@C\352\332\365\335\"\332?\251=\216X)\221\352\277\030\330\322\243B\202\001@\266!\302\337\241t\345\277L\213Oq\330i\376?5Z\310Y]\216\352\277YU\241l\336\033\350\277|2l\251\234\315\333\277\005(\245I/\211\343\277:z\304\243\242\353\350\277{,\330\333\345e\351\277\024Lr2\307\245\376?\245 \307\036s\235\342\277,\200\302\202\207D\307\277\377\374(z\357\034\006@\246\275\364\010\265\253\350\277\033\\\336o\005\\\352\277M\010\310\353\277_\324\277<\377\244F\361\254\354?\2423\t:\325;\350\277\337\037B\270\313\265\351?\370ag@\371D\344\277\272R-\030/}\352\277jY\271\345\033 \323\277p7\274\204\327\013\317?b(\212\324\327D\323?\351\374\353eba\274?\224\320\235F]\351\342\277x\222\242G.#\266?\0321\246{a,\315?\221\345\2326Y>\331\277\0321\246{a,\315?M\027\260\342SF\001@\207\207\370Y\362\022\006@.f\272f\372@\344\277\240\\\252(\250\245\333\277F{\214\305\350\367\347\277\375\326g/\236$\261?\206s\226p\233\205\303\277j\245\312D\364\317\347\277\365{\372\247\035\366\010@\033%\277\267v\275\377?\244\370~!\305s\350\277\213E\035\365\0378\347\277G\214~\265d\025\362?8%\377\317\034U\322?[.\273R\245h\345\277\217M\003\304?\214\001@++\375\256\001\256\340\277o\362X\316\251\204\351\277\323\370A\200\366\020\263\277\212\031,\257U\326\347?\323\014\340\220\226\313\n@\017\213\335\235\276\020\345\277X=T%\353\316\345?`B\222\360dH\346\277]\232\260\243B9\352\277\266!\302\337\241t\345\277~TP\211\224\010\340?E\362\224F\254J\255?\366\210MZ2\370\346\277\363\312\235sm%\304\2775+c\355\322C\350\277\014\375\335\334\0163\372?\210t\266>\220t\000@\326\275\000\236\375n\372?\344s\256\232,\014\347\2773\212!\021\301\307\367?\346\345L\"\031/\345?\340\010*\2234\270\351\277\014\257\302\204NL\010@\223\367\203`\226\234\345\277\n\020\213\241$\007\345?\027=D\t5u\343\277\376\324\374\001\247\250\364?;S\336\211i8\346\277Ia\266\253\364\246\244\277\224\271G9+\335\362?\2676Z.\034L\250?\263\2032\022\353\357\347\277\010bnY\211\226U\277\363\376a\213R\210\346\277\362\033\366% \261\352\277\372\0229)\022h\347\277\360V\200>0y\352\277,\223\004\236\351\342\314\277\333\374\321G\306o\350\277\304\034\361\303\204\245\251\277\270\tx\207\226y\352\277\031\356\025\362M\230\346\277\322^\017\333& \347\277\266\207\013\013\010\241\351\277Q`1\226\006X\352\277\236\2274A\270m\333\277\303\273\016\243\rW\345?2\324\201\366\250S\225\277\330\206\212w\275\024\345\2778h\333ye\215\334\277\316\200\352\310\316$\355?\263\2032\022\353\357\347\2778%\377\317\034U\322?\017/\321\210+\204\310\277J\300\233\374L\025\352\277\333\3260\351\360\306\352\277\304\347\377\350\327\270\344\277\332_\244]\204a\342\277<\354b+\217\016\347?\267\247P\206\232P\264\277\354`\237\036\2638\345\277\346\345L\"\031/\345?\030&\356\373\002i\363?5+c\355\322C\350\277\374p3\262\'v\350?jj@,\344\007\350\277\257c6\310\245\222\351\277\026\360\320\306\347N\327\277\013<|\347\356h\344\277\314e-\210\000h\002@\364&\252\210\000\262\340\277\000\024\316\253o\251\342\277\374\276\323\267<&\247\277\243[Q7\203e\342\277\263\"\033\321\306\264\336\277\036\206F\267\342_y\277\3639\354\243bP\346\277\242\336.\375\266\272\352\277\341{\201lG\r\312??\360\277Sv\242\270?\371^\2651\236M\361?x\013S\360zO\325\277\353:*N\037\002\352\277\177y{\3163\005\322?7\220#w\023\267\326\277\231\034M\356\321\231\360?e\245\227\245\013\005\344\277>ip\374\302\316\327\277\225\\D\352\326\017\324\277\013tT\361\2439\361?h\364\370[\333\254\344\2772\244\224\326\001\001\320\277\363\360!\2521b\317\277\031\033\2501\276\357\351\277\337\037B\270\313\265\351?N\212\213\326\377\363\357?\3036.\000\277\225\341\277qC\215\261\223\037\351\277[\337\214;\276\213\350\277\310\036\251\256\000\336\375?);\215\273\010U\363?YiEk\2650\345\277\273Y\315\210?\020\366?\3156\224>\220+\351\277R\234t\000=R\334?\244\373\233\331\323\240\320\277\252\204Xd\'e\335\277\273\342Vt\252\t\377?)\022\232\244\316\216\272\277\363\376a\213R\210\346\277\234\022\337\351\000Z\t@\007\355\0321\037\301\343\277\242\016\336\3645?\326\277#\005=\347\004p\323\277e\"\245v?\305\304\277b\360\261\312\"t\366?k\316\236\322\257\004\337\277\203-\235\016D \341?\201\206\330\213\375#\311\277\224\250UI\257\277\350\277\245 \307\036s\235\342\277\213>W\364\364\322\331?\311xo\243b\006\010@\344\370\216={\315\352?)\000\264~\252\014\007@~s\272?dv\352\277\006\3033\344<\226\001@\257\2473~\340\340\363?\003\236\271zO\031\343\277V\267\021\237\'\227\352\277QwI\273\235U\352?<\\\023?\371\257\300?\315\262T\225\347_\351\277\031\356\025\362M\230\346\277\315 Q\360\204\025\004@\027\215\376\260)]\335\277\312\004\014<\'\020\300?(\311\203\212h\374\337\277\342a\305p\357\255\332\277e5\347\221\241c\312\277\242\353+o\260q\n@\212\2559M\240W\352\277\342\036\351\306\246u\320?\345\233\366\227\3325\341\277m\265\370\231\227w\343?e5\347\221\241c\312\277\224\271G9+\335\362?\3468$\202\034D\347\277\213+\025\331\2224\324?\037\210/\026\321\257\342?\227(\357\230#\245\352\277\341h?Q\345n\304?M\276qa\201f\300\277\027=D\t5u\343\277j\315\022B\242\371\341\277H\344\365\227E\243\313\277\201\206\330\213\375#\311\2772&X\301A\225\353?\2259\222dQB\010@+N\317\326j\363\370?rk\325\256AI\343\277\277\025ydS\006\301\277\356\314\224oP\t\352\277il\373\000~\276\330\277\305\250a\336\367\202\372?\030\325f\307\345\324\354?<\377\244F\361\254\354?\032z\274\225\307\276\327\277\256\024<\216\244\247\003@\364\212\010/\314\256\327\277\336\302\251\022+\036\340\277z\035<\032\270\255\341\277\351\352WN\252\335\341\277"
      }
    }
  }
}
node {
  name: "tensors/component_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 750
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 750
          }
        }
        tensor_content: "\220\256\301Z)[\357?_4\316\311\376\273\326\277\377\003\245FT\022\371\277\204C#$\230\224\362?^k:M:\263\335\277{\025\020.:\022\361?B\243\014c\256\314\260?\321\246\214\r\276\006\360?\266\306\24158\302\300?%Jf$)\342\333?\204C#$\230\224\362?\004\266Z\221\353\302\315?3\274\361\036\314\033\377\277w\330\375\026\233\261\347?\253\337@\024\005\037\342?\215\020\343\275\034\314\342\277Y~e\213;\300\314\277s\353(U\234\276\346\277f\002:\323\014\010\340?\324\340\313Z\2532\000@\215\315\261\351\205\036\345\277\220\256\301Z)[\357?\342sL\247B>\340\277av\270m\347_\360?\315\315\007#\336\030\331?l\317\371l\221?\360\277\\R\360QAY\372\277w\330\375\026\233\261\347?\265u\rT\342B\375?\264\272\334\344\334\013\312?$\0075P\2224\336?%\320\310\314V=\327?+\373\366\325\242\232\345?,|\201\361\206\262\320\277Y\306n\354\033\261\352\277\254;\274\343\224&\363\277v\017j\232\326\250\356?3}\320\3178@\000\300\022\237\320\351\346\225\342?\002\030|\364\3363\321?Y~e\213;\300\314\277\221wU\327\355c\350?\003G\326\032\353\277\366\277\265@?\215\ng\305?\034\352Y\370\375\240\336\277+\373\366\325\242\232\345?x\241\221\223_\272\340?\222\370\337\362\321{\323\277\367\363\263\3308-\353?P\036Y_\020\177\277\277\335\021+DO\315\354?6\235\210f\333t\367?;f\034\343\237}\360?m\231\010\274\313:\270?\346`!iA1\341?\263]\n\211\227\362\375\277,\201Y~\320\365\340?\222\265\256\036;\316\325\277\251\212+2\033n\371?\'\tJ\207Zd\304\277\255\020\216\332H\311\364?\202\251\351\315\337\027\337\277\200\037[\010\362\215\374\277\301\214\353\205\017\233\301\2778\275\235\216U0\310?\240\224\206h\332\361\273?s\222\305\276a\315\275?P\177\021\373\304\324\365?\364\317r\223\376B\343\277_4\316\311\376\273\326\277 \273\377\321\361\024\371?^|\327*\337\254\344?+\373\366\325\242\232\345?\036#\333\262\001\310\273\277\271\3571\202 \004\360\2773\274\361\036\314\033\377\277,\335\324M`\375\361\277m\036i\273\027\207\366?re\306\254nc\353\277\363I\020\353\320\347\347\277^\256k!\321`\333\277%\002]\303H\361\355\277\266\306\24158\302\300?\016\371\265\252\026\006\000@Q\005t\243\362/\361?\362\013\267\243\203}\332?eG\001\266\003M\001@\204C#$\230\224\362?u\024B\215\022\021\215\277\362N\350w\032+\330?\r,\231\177\272G\346\277\266&\236\005\\\373\366\277\256l\t\252\330\320\345\277\335\021+DO\315\354?!\275\225\340Q\254\014\300R\252?\004\0212\364\277,\366\036IYW\325\277\266>\241\320\246K\366?KW\035\302^\237\350?\305\332\023\244\347\330\363\277%\002]\303H\361\355\277\ro\312SQ\365\343\277\2061a\255\325\242\260\277\246l\306\001\216\327\251\277wR\233nmV\354?\002\301sr\275d\373\277$\206)]\026\265\005\300\223;\021\307h)\321\277\321c[9\'Y\362?\362\221\031L\261\330\325?\362\026-\026-\246\001@KW\035\302^\237\350?\002\226Eiq\007\375?\3701\r \206\227\330\277&V+u\204\230\322?\ro\312SQ\365\343\277\366\260\202\004\242\177\355?\306\274\361\033\245;\320\277wR\233nmV\354?\221/Lv\rs\332\277\364\207i2\036R\305\277.\016\"\024\244\247\344\277\220.\005F_i\366?\243\241\337\036\2640\t\300^k:M:\263\335\277,\366\036IYW\325\277\020P\332\304\3641\356?s\353(U\234\276\346\277\037\257\301W\002{\360\277\316\0209\367t\306\326?\014\007\2123f7\374?\370t>\364\034E\326\277\005\3158\303\030\033\362\277.\016\"\024\244\247\344\277l\214\310\230\372\221\362\277B\243\014c\256\314\260?{q\213\375\311\031\342\277\356\177#\033\376\344\000@DQ\376\004gR\364?\004\266Z\221\353\302\315?\362\200|n\014\337\356\277P\036Y_\020\177\277\277\323TJ\365\205\212\000\300s\222\305\276a\315\275?i\230\006\023\352+\373?\265@?\215\ng\305?\367hy\243\301\216\337\2777\340\271:r\"\365?\204%\234\\z\354\271\277\220Y3O\253\306\364\277&\375\2046\377\255\315\277\322\216\211Bs\266\360\277&\375\2046\377\255\315\277Z\327\013\312\300\252\321?\021\326<m\"\215\351?\034\243\374\006\247\304\371\277\215Mn\376O\020\376\277,9P\035\360\004\323\277\315G\245z\260\275\335??\344\345W2Q\354\277\336\035\360\224\252\203\343?b\3223=wg\341\277Y~e\213;\300\314\277\221\272\206\253\204\021\346?\356\002\263\371y\013\363?\277\372\303\214\206\211\317\277l\317\371l\221?\360\277M\236z\263\265{\375\277^\256k!\321`\333\277\'\203\347\336,\t\311\277\002\030|\364\3363\321?6\235\210f\333t\367?a\360U\305\271\004\365?{q\213\375\311\031\342\277\004\266Z\221\353\302\315?\366\325\221P\366\217\367\277\017\304X_\317\211\376?\315\315\007#\336\030\331?\202nQ-\344\361\360\277\'\231\\I\033F\320?\215\377E\340w\322\313\277?\241\264\203\233\243\356\277\016\234\311eD_\266?+\373\366\325\242\232\345?\361\310\205\317\354\317\334?\3410\033\323\253\220\342\277\034\352Y\370\375\240\336\277\2027^\323<\336\373?\303/\242\257em\356?m\231\010\274\313:\270?\362\200|n\014\337\356\277\r\275F\317&\014\236?\340g\207V\347\207\351\277\253\234\017@nq\344?+>(\2529H\343?.\365\327\030\253M\361?_\2720r,\027\322\277\037l\220\203k\315\362\277,9P\035\360\004\323\277\341\252\270*~5\347\277\340\013\014\207W\200\370?.QS\350:U\342\277\353\']\006\363\020\270\277\034p\274\240+\374\331\277\222\370\337\362\321{\323\277\302\021\200\'#\320\372\277\215\020\343\275\034\314\342\277\370\356\333K\357\351\332\277\304\362\026o2)\363?iU\325>S~\375?,\335\324M`\375\361\277\367y\026\201f\210\346?\004\345;\216ck\361?^|\327*\337\254\344?\304\362\026o2)\363?#2cY\336\221\354?C\321\272\0311D\355?.\365\327\030\253M\361?\006\302\037\342Fy\304?\277B\315\355fz\355\277\362N\350w\032+\330?\336\227\215\354|(\350?v\017j\232\326\250\356?\300\305Jv\t\236\226?N>~\343\221B\307?\'\tJ\207Zd\304\277\315G\245z\260\275\335?aL\321\224I\014\346\277.QS\350:U\342\277\020\270\032\345\337\357\365\277L\335\177j\214\372\343?@\255y\324\366Y\345\277\232\t\366\371\nY\334?\333\240K\2715\250\262?WE\344\3207\231\337?\253\234\017@nq\344?\220\353\323q\310\273\370?\216\013\0131\323\210\302\277\266\270>(y\360\372?\303r\323\203\374\032\354?w\330\375\026\233\261\347?\305\332\023\244\347\330\363\2778\013\350C\276\177\363\277\233\322\211v\317a\325?\3676\345\254\317\332\350?\014c\005\003\366>\355\277\231\306\304%t\253\336?\014\220\004\025\351\250\277?^k:M:\263\335\277_w\377\235\225i\324\277X@\014D\356U\357\277\362\013\267\243\203}\332?O\304\340\213\277\235\302?\320 *e\220\253\364?\237_\353\005o \001@Y\203=\030\205\003\355\277\271Y!\024\"\275\242?3\274\361\036\314\033\377\277WE\344\3207\231\337?\254D\256j>\250\000\300,|\201\361\206\262\320\277\020P\332\304\3641\356?w\225\314B\004\004\352?wR\233nmV\354?wR\233nmV\354?\277\205\376\301\375\'\353\277\'\203\347\336,\t\311\277\253\234\017@nq\344?\353\260p\341A\217\003\300t\270E\200\370|\000@\014\2466\327\214\354\352\277\322KXn\334\010\363\277\306y\300G\016\216\322\277\354\363\241\265\330<\001\300.QS\350:U\342\277X\210\025\245\316F\335?i\006f\360\3146\367\277\253\337@\024\005\037\342?\221wU\327\355c\350?\315\315\007#\336\030\331?\004\266Z\221\353\302\315?\277\372\303\214\206\211\317\277\331gD\256\234\216\255\277\362N\350w\032+\330?\222\370\337\362\321{\323\277tqHU\177 \246\277\303r\323\203\374\032\354?\220\353\323q\310\273\370?{\322\336Y\243d\363?tqHU\177 \246\277\321c[9\'Y\362?\240E\301\340\373\257\301?\220\256\301Z)[\357?\304\265\004X\223\310\351?&\313\360?\r\372\346\277\035\263\355t\302\251\327\277]\366t\202\261Q\351?\317\305\365\305\256\255\367\277\202\364,\377\2450\376?\300\013aj+\203\346\277\222r}J\244 \330\277\277\377\233\031\320\314\357\277\002\030|\364\3363\321?L\335\177j\214\372\343?Y\224\332\365)\375\323?^\256k!\321`\333\277{q\213\375\311\031\342\277\314\006\221\213\345\303\001@\036#\333\262\001\310\273\277Av\312\250pi\242\277Y~e\213;\300\314\277\2061a\255\325\242\260\277,\335\324M`\375\361\277\364\207i2\036R\305\277,\201Y~\320\365\340?\377\003\245FT\022\371\277\314\301\311\250\356~\340?\204%\234\\z\354\271\277Av\312\250pi\242\277\220Y3O\253\306\364\277\362\200|n\014\337\356\277O\371\256R\227y\372?\3410\033\323\253\220\342\277l\214\310\230\372\221\362\277\301\006\211\335\341?\306\277C9\3739\034\002\365\277\003_\331\3455\020\366?\221\354\032\242v\305\334\277.\016\"\024\244\247\344\277\220\256\301Z)[\357?\020\223\013\231\213\337\353?@\255y\324\366Y\345\277\014\220\004\025\351\250\277?\264\272\334\344\334\013\312?N\270\033;d\347\313?\363\214A\277g\225\345\277\270\376B\306\301\322\001@\206\240\235:\330_\216?\020\270\032\345\337\357\365\277L \261>#\250\341?\037P\035m?+\252?Z\004\3103i\033\310\277y\375\014c\357\301\361\277B\243\014c\256\314\260?\366\222`|_\342\371\277^|\327*\337\254\344?\302\035Ex~\206\361\277\363O/\250\3104\374\277w\330\375\026\233\261\347?\003\r\227\315\375\223\006\300\034\243\374\006\247\304\371\277\230\205\2606\251\261\002@\r\336\270\325Z\3544?^k:M:\263\335\277&\023\372\240\355\352\324?\014c\005\003\366>\355\277\342sL\247B>\340\277&V+u\204\230\322?\342sL\247B>\340\277re\306\254nc\353\277^\256k!\321`\333\277\317\305\365\305\256\255\367\277,\335\324M`\375\361\277\271Y!\024\"\275\242?\371\267o\310\263\362\323\277\203\000\362O\001\347\364?+>(\2529H\343?\202\251\351\315\337\027\337\277\245\366\364\000\236\341\001@\365\r\314\332K\255\300\277\216S\024\222\263y\340\277Y\203=\030\205\003\355\277\256\226\360\202v$\360?\373\022\244g\225\360\340\277\217\"@\365\003\263\377?\005<\2759\031\036\311?\'\203\347\336,\t\311\277\214\301\354\230*h\356\277Q\005t\243\362/\361?\037/\240\003]~\262\277\177\245\275\260\037\351\367\277]\366t\202\261Q\351?^9\246VH\377\346?\353\']\006\363\020\270\2776\235\210f\333t\367?^9\246VH\377\346?\362\200|n\014\337\356\277v\tK\335\336[\372?@\360\252\250\215\007\343\277\\\'\302H\365\373\373?&\014\214\005D\020\001\300\354T\237\3000t\246?\235\263\231\347r\236\317?\034\243\374\006\247\304\371\277\256l\t\252\330\320\345\277]p\022\332\203\366\355?\214\250\242\2351\016\373?\r\336\270\325Z\3544?\022>}\215\rK\361\277&\210\277kvL\351\2779C\0007\203\213\303?\222\370\337\362\321{\323\277f=\322s\010.\376\277\370t>\364\034E\326\277&\375\2046\377\255\315\277wR\233nmV\354?\362\221\031L\261\330\325?\021\031nA\271:\347?\014\351g\253#\232\350\277\367hy\243\301\216\337\277\372\360g\345\362\024\000@?\344\345W2Q\354\277%\002]\303H\361\355\277N\270\033;d\347\313?r\"\225\330\327\265\355\277&E\216\227\337\236\353\277\351\247~Z\230\r\366\277\315G\245z\260\275\335??\'\027,\311\376\351\277\2369\374\217\240\371\312?\302\021\200\'#\320\372\277X\210\025\245\316F\335?P<\340&.\'\370?\001\325J H\206\323?8\013\350C\276\177\363\277\313\3705,*v\347?\240E\301\340\373\257\301?\356\002\263\371y\013\363?^k:M:\263\335\277\034p\274\240+\374\331\277\331$V\202P\332\353\277\252{\032\356y\237\007\300\r\275F\317&\014\236?v\tK\335\336[\372?\366g2s\023\205\373?\246\346\246\001\253u\352\277\303)\203\362m \372?\303r\323\203\374\032\354?\240\\\030<\275\353\367?\354-\341\002\306h\361\277]\366t\202\261Q\351?\365\r\314\332K\255\300\277\037l\220\203k\315\362\277\334\205\251\336)%\375?\367y\026\201f\210\346?.\016\"\024\244\247\344\277\317\305\365\305\256\255\367\277\002\030|\364\3363\321?\362\200|n\014\337\356\277\363\001\007\212\360\366\311\277\363I\020\353\320\347\347\2777\340\271:r\"\365?O\304\340\213\277\235\302?\214\301\354\230*h\356\277\220\361\362.\300\010\355?\340\013\014\207W\200\370?\366\233R\003\td\007\300B\263\230\221\356\246\371\277\336\332\276\300\023\326\345?\370\377x)\224\343\341?\022\342\001\276}C\340?\254;\274\343\224&\363\277\202\251\351\315\337\027\337\277\277T\261\373\271}\370\277l\214\310\230\372\221\362\277\222\337\225\367\330!\360\277\241%\254\270\201\364\360?\362\221\031L\261\330\325?\237\277^8\316T\306?v\017j\232\326\250\356?\363{\244\341\302\233\316\277Y\224\332\365)\375\323?\036#\333\262\001\310\273\277\014\351g\253#\232\350\277\264\272\334\344\334\013\312?\366\325\221P\366\217\367\277\305\260,\313I\205\331\277,|\201\361\206\262\320\277O\304\340\213\277\235\302?\331$V\202P\332\353\277\340\310\332\262\300\322\372?,9P\035\360\004\323\277\346\\\230\272\251{\000\300X\210\025\245\316F\335?_\2720r,\027\322\277\3410\033\323\253\220\342\277\330\341$\256\271,\356\277\021\\\237\025P\350\344?\335\316\371o\270\037\357?\253\215\376\373\314\242\002@_\033\204\316\005b\363\277P\302B\317[\202\363?&E\216\227\337\236\353\277\305\260,\313I\205\331\277u\236\212\017\275\203\264?u\236\212\017\275\203\264?\362N\350w\032+\330?x\033/\3531_\345?\004\266Z\221\353\302\315?\241\237I\020T\231\365?v\017j\232\326\250\356?P\036Y_\020\177\277\277\034p\274\240+\374\331\277\271\254\000\256\211V\362\277s\256\026>\375]\375\277\333\240K\2715\250\262?\220q6\032\366\026\364?l\317\371l\221?\360\277Y\224\332\365)\375\323?\314~\230\324W\321\342?\222\375\267\177\033\277\343?\035\366\230\370\303d\235\277.QS\350:U\342\277tqHU\177 \246\277&\313\360?\r\372\346\277\204%\234\\z\354\271\277R\252?\004\0212\364\277&V+u\204\230\322?\3701\r \206\227\330\277tqHU\177 \246\277\320\335\370\220\371\375\366?_w\377\235\225i\324\277\ro\312SQ\365\343\277\021\023O\204\301\355\362?_4\316\311\376\273\326\277\346\\\230\272\251{\000\300\273\304\003y\324\246\361?\271\254\000\256\211V\362\277\r\336\270\325Z\3544?\362\303\255B\243\214\354\277Av\312\250pi\242\277\222\375\267\177\033\277\343?\335\316\371o\270\037\357?\255\020\216\332H\311\364?O\371\256R\227y\372?\2369\374\217\240\371\312?tqHU\177 \246\277\340g\207V\347\207\351\277.\016\"\024\244\247\344\277\020\223\013\231\213\337\353?i\3337\347\200\331\370?\220\361\362.\300\010\355?\335J\233\031N\342\255?\322KXn\334\010\363\277\255\020\216\332H\311\364?\341\355\351\376\024\343\344\277^\256k!\321`\333\277&E\216\227\337\236\353\277\021\031nA\271:\347?_\277\010\377uZ\342?\363{\244\341\302\233\316\277u\236\212\017\275\203\264?\304m\373\366\262\327\333\277\353\']\006\363\020\270\277/\224\204\274\321\002\340\277re\306\254nc\353\277\346`!iA1\341?x\033/\3531_\345?\377\003\245FT\022\371\277_w\377\235\225i\324\277\037l\220\203k\315\362\277\266\306\24158\302\300?\321\246\214\r\276\006\360?\214GOAX\303\351\277a3\207\231P\262\362?\363{\244\341\302\233\316\277\214GOAX\303\351\277Y\314\215\251\023\376\376\277\315?\223\035\201R\374\277A3\334|$\265\340\277_\033\204\316\005b\363\277R\252?\004\0212\364\277L\232N\226\365L\346?\331gD\256\234\216\255\277w\225\314B\004\004\352?\363\014\376\3231\207\376\277\335ykd:\213\364\277\346`!iA1\341?\304m\373\366\262\327\333\277\302\346Q\036\327r\374?\014c\005\003\366>\355\277\2369\374\217\240\371\312?8\013\350C\276\177\363\277\300\310/\226\224\325\350\277\221\354\032\242v\305\334\277a\t\240\300\262^\350\277\335\316\371o\270\037\357?\277\372\303\214\206\211\317\277\301\006\211\335\341?\306\277\316\0209\367t\306\326?\2061a\255\325\242\260\277\003_\331\3455\020\366?\305\260,\313I\205\331\2779C\0007\203\213\303?\202\251\351\315\337\027\337\277\216\013\0131\323\210\302\277f\002:\323\014\010\340?\006\302\037\342Fy\304?\355\277\201%\343]\365?\370\377x)\224\343\341?\213eq\311\232`\375?\r\336\270\325Z\3544?\021\\\237\025P\350\344?YQ\251!\223O\326?\314\301\311\250\356~\340?\322KXn\334\010\363\277i\006f\360\3146\367\277\340\310\332\262\300\322\372?\222\265\256\036;\316\325\277\253\234\017@nq\344?\014\351g\253#\232\350\277\354T\237\3000t\246?Av\312\250pi\242\277X@\014D\356U\357\277\237\277^8\316T\306?\202\251\351\315\337\027\337\277x^`\277\310\014\343?^|\327*\337\254\344?\315\315\007#\336\030\331?R\252?\004\0212\364\277\351\247~Z\230\r\366\277C\313\233\\9\367\370?B\210j\210\242I\373?\235\263\231\347r\236\317?\004\266Z\221\353\302\315?L \261>#\250\341?L\232N\226\365L\346?/\224\204\274\321\002\340\277\346`!iA1\341?Av\312\250pi\242\277,|\201\361\206\262\320\277\314W\226\350\313\242\373?A\227G\022S\026\272?)\024A\321\233\364\370\277\'\203\347\336,\t\311\277\367\253\252wX<\335\277\303/\242\257em\356?\234\326\265\223\217\220\374?&\375\2046\377\255\315\277P<\340&.\'\370?,|\201\361\206\262\320\277\021\031nA\271:\347?Y~e\213;\300\314\277\221\264g\356\214\304\361?3}\320\3178@\000\300eG\001\266\003M\001@\006\302\037\342Fy\304?\034\243\374\006\247\304\371\277\002\030|\364\3363\321?\363O/\250\3104\374\277i\230\006\023\352+\373?\234\223\204\277\370\342\376?\034p\274\240+\374\331\277)\351\022\310O\227\372?\3410\033\323\253\220\342\277\265@?\215\ng\305?\235\263\231\347r\236\317?\305\363]\237\3402\327\277YQ\251!\223O\326?\222\265\256\036;\316\325\277\303\257\345\232\233{\365?\215\377E\340w\322\313\2775BT\307\371v\372\277a3\207\231P\262\362?5\324\364\351\026l\376?\363\006\337\026::\352\277,9P\035\360\004\323\277&V+u\204\230\322?\021\\\237\025P\350\344?\221\264g\356\214\304\361?\246l\306\001\216\327\251\277Av\312\250pi\242\277y\375\014c\357\301\361\277\341\355\351\376\024\343\344\277\340N=[\356-\366?a\217\002i\340\271\343\277\331gD\256\234\216\255\277WE\344\3207\231\337?\r\336\270\325Z\3544?\364\317r\223\376B\343\277%\215\227\370\277\217\331?x\033/\3531_\345?\366mQ0\013\322\357?l\317\371l\221?\360\277\204%\234\\z\354\271\277\253Y\336k\327\303\346?\034p\274\240+\374\331\277\330\341$\256\271,\356\277\246\346\246\001\253u\352\277\300N\222>\3020\344\277\014\220\004\025\351\250\277?P<\340&.\'\370?\300N\222>\3020\344\277u\361G\022\224\013\373\277\300\310/\226\224\325\350\277v\017j\232\326\250\356?y\375\014c\357\301\361\277]p\022\332\203\366\355?F\277]\342I]\360\277\315G\245z\260\275\335?\014\2466\327\214\354\352\277\315G\245z\260\275\335?\014c\005\003\366>\355\277]\366t\202\261Q\351?x^`\277\310\014\343?\2369\374\217\240\371\312?\203\350\356\204\266\226\365\277\"\3571\205G\344\356?\021\031nA\271:\347?^\361\234\365g\016\331\277\233\025\273Jf\017\323?\302\035Ex~\206\361\277\241\237I\020T\231\365?\267 \032\t\211\243\275\277\340\310\332\262\300\322\372?\302\021\200\'#\320\372\277\367hy\243\301\216\337\277\346\\\230\272\251{\000\300\003G\326\032\353\277\366\2776\027&\276\255\031\374?\300\310/\226\224\325\350\277\037/\240\003]~\262\277\341\324\237\003\034\211\361?\221wU\327\355c\350?u\306\031\tH\256\374?\364\317r\223\376B\343\277%Jf$)\342\333?\022\237\320\351\346\225\342?P\036Y_\020\177\277\277\335\316\371o\270\037\357?\021\\\237\025P\350\344?\336\227\215\354|(\350?\2204$\003W\266\352?\221/Lv\rs\332\277\036#\333\262\001\310\273\277\001\325J H\206\323?\233X\354\036\375\274\320?l\317\371l\221?\360\277\3127\336Q)n\004\300\206\240\235:\330_\216?\036#\333\262\001\310\273\277\354-\341\002\306h\361\277C\313\233\\9\367\370?\215\377E\340w\322\313\277\336\227\215\354|(\350?\266\306\24158\302\300?\035\263\355t\302\251\327\2776ZW\222D\307\371?\222\337\225\367\330!\360\277\336\332\276\300\023\326\345?"
      }
    }
  }
}
node {
  name: "tensors/component_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 750
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 750
          }
        }
        tensor_content: "\020*|\351Z\010\347\277\027\316W\211\'\341\220\277?\252\220\002\331\271\251?\260\202\306\253\234\206\313\277\241,]D\'\353\330\277\236\307nm\262\036\257?t3fP\202\031\327\277\361\277Mk\322A\366?$\263\316D\010\203\360\277\373|6yw\004\245\277l4?rnt\341\277[\215\206\004\263\221\304?G\202\367\321/R\353?\2613?\321H\253\351\277Fv\2164\245\022\321\277F\324\275\032\252\364\361\277S\242\333T\353)\331\277\013\222\322\371N4\347?\225e\027c\346\004\311?\023y\357;y*\360\277\247\010hw\311\013\352\277\013\rZ^\205x\271\277\013&\276\356%\333\272\277WO\337\360XJ\335\277\026\325E\\\007>\373?\372\300\201J\2211\337\277\022\257x\212Q(\324\277\256O\210\304\224I\300\277\223\023\347\360\331W\331?Le`\026)8\301?\257\362\202\000\376\252\340\277\032\323`\\\315\231\200?\361:z\210\323\207\306?w\325\305\2514<p?\322C\330F\344\277\301?\220I/\324\027\261\361\277\365zH\275\361\371\313\277>\223\331KS\370\363\277n-s\315fj\304\277E\2131\227\256<\361\277\274\303]Z-k\356\277\346|\241p\211\331\377?\216\274\320\317\242\227\360?\003\375\322\342\263\350\237\277Ns\200\212\3225\320?\266\244\265\001>\274\331\277\312\332@\260\372\266\330\277+\263\356\367\006F\345?\260\351\377\204\327\342\356?=\362\206\306\221qt\277\200 \324\212a\204\361?\264\n\033\237\030\333\345?\353\2230\034\242l\354?:]\312\211\3258\354\277Y\266<\2432\035\340?\006\204\334\003\211\006\276?5\215\001%\013\234\236\277|G&\315\004\214\010@\214\rb\001o\355\356?\302\222\336\223\036\367\322\277\327\213\217\022\022W\367?\320\331l/\351\304\367?I\271\253\267\231\306\007@\364\"{i&\357\351\277)\032\206F\333g\267?&ix\004\2265\003@\307\016\2525\336\032\311?i\003\023qjq\327?\323T\217\306\266\262\300\277\020n;\242\212\032\307?\234\215E%\255\322\352\277\277TMvr\306\370?a\377\010\322\334\017\364\277\353\207\307~\027-\322\277\013\231PG\324\367\356?\204\207<\272wm\344\277\226\203\211\345n+\342\277\361\211p-\224\326\272?\231\300\036\204\375m\346\277\247$dJO\222\345\277+\204+v\237\272\312\277r\274\216\304\017`\362?\336\3735,\024\260\365\277\310\320j\020\360\276\263\277cJ\313\024{x\365?,\000\260RH\027\000@\272\251\324H\371-\325\277l4?rnt\341\277}\014\036\215\310\271\352?\326Z>4\005\355\320?v\362\376\351\327;\344\277\215h\324\307\205D\351?\240rQ\205=\177\337\277\304 >\374\t\356\347\277\340\3559\325\207\257\372?\323\\/\247\036\372\344?\317\266\251X6\235\350?A\372\350\246\252\204\361\277V\364\\\014+t\351\277:\036T\226Dh\355\277\354\340\370\014\032\323\256\277\366+R\0301\253\267\277\233\267\035W\017\342\342?\354\204\251?]\014\366\277\204#\270q\237\334\302\277O\235\ne\262\376\342?]\327\036%\343\266\364?\366\272\340CeN\347?/!\026\234\276\020\367\277\t\240\034\354\333\001\314?\365\326\351FQ\375\300?V\364\\\014+t\351\277\271C#\007\306\332\361\277\024\237\t.\365W\342\277\234\375DX\037=\270\277\366+R\0301\253\267\277\n\313\361\230b\001\233\277\215\276\332&\033\022\315?\320\322\024\366(\227\266?\220d\240ec^\326\277hVS\352\311\305\325\2773\2538\334?3\272\277ni\222\245.5\300\277\242\205\003u-\234\373?\363\274\301\230g\334\341?q\027&h/\036\331?g1\022\325\210>\304?\013\222\322\371N4\347?\210\021\3065\332C\345\277U\0365>\215\203\341?8\333\333\t\202\272\361\277\035\023z;\326\327\320?\026n\303\314$\004\314\277\364\240gPH\220\347\277\002\351Ay\247\272\270\277a\342\252{\024\026\377?\352\252\350\312c\032\360\277N\321 \256\272,\360\277\223\343\234\222X\351\256?\032\321\253\365\277\322\304\277M\212\241+j\277\322\277\327\312\005\006\243\'\366?~\"\016\264\"o\341\277\007\245\016P2\210\364\277\326(\374\017\231$\360?\246\000\376\204\277R\361\277R\251\360\257\232\021\362?\313\030\346U\334\240\273\277 &\225\035\234\320\333?\362\035\356\216\2728\326\277x:\246\033 K\246?\026H\312\t\025}\362\277\rl\334$\360\003\371?u\211\006\253\362a\367\277\257\326\226K\217\243\336\277mj2\352\330|\356?\250\307^\206\270\363\325?\330:\303V\013N\234\277H\227}\346\273\324\363?\271\274\253\025\362\261\335?\tU\337\345&,\344\277\313\236\021\272\033m\343\277\222G\025\243\006>\320\277\340\212\221\023\035\225\320\277i\267\341z#m\356\277\207`\254\274\203\023\300?Y\301\203\255\332\330\355\277\335}Q\324}\316\354\277\013\266\354\271\271\301\022@l\"\352d\346a\265\277\3610\305[\263\274\336?\245\230W\357\203\363\350?\307w\201EWN\375?\2725?\031^\222\320\277?\356c\277\014\216\334\277\334\217\004W\237\246\267?\354\322\226\361\033\276\321?+d\010q]v\312\277\230\210\0161O\"\361?\207\354\224>\260;\315?D>\225W\335\326\277\277\371\374\240\"Y\374\332\277\367\317~\005\224\017\356\277\316\246\327*\027S\270\2772\325\177\330\016\266\344?\020\335\207\014\207t\352\277\223\033\2258d\366\245?V\373\023\362@\226\363\277\3413\001\252\t\035\360\277\300Fi\210\n~\347\277W\247\372\233\246\233\324\277\253)\203\221\n\004\341\277k\356\310\342\037\244\354\277\031\333_\353#o\262\277:\234@}f\t\353\277#\311\303P\273\'\325?\325\215\311;\323A\347\277A\236\014\316\305\372\350?=w\345\007Y1\355\277d\317B\365V\016\243\277%x\003\010\224\207\223?\035\007\202\037\2553\312\277\317\232\255\205\260\026\355?\343\221\302@\334@\355?\370\335\374\356\326\322\353\277\353\\WY/\221\003@\377\343E\324\316\220\242\277\260\255\320\216\370\230\331?\242\010\302\307\365K\343\277\266\344$\312\271\252\367?\333 \247\227\317\236\260?\216\314\022\004\351\307\365\277\"Lg\220,O\274?\277TMvr\306\370?\r\002\333\362\010\215\363\277\220-3\001\222*\366\277b\227\344\316Ws\336?\022\316z3m\027\342\2771W\001\205\235Y\337?\24218v\025\350\321?\265\262\003\330\0363\203?\236\313\343r\277+\363\277\330^\251{\216\037\330\277\r\036p\212\255_\261\277\376\246;P\327\372\002@\357s\255l\267\305\r@\217\377\027\017\342\037\332\277H\002\341\233\345\276\362?b\323\003\247\037>\332?3@\260\013\246\335\001@\247\302s6\263w\343\277\361<\201mi\264\261\277\377\375:\302\276\352\302\277\255u^\241C\002\360\277\205\234\312]\217\257\321\277\340R\231m\021\210\331\277\2403\313s\225/\347\277\3705(\270;\243\334\277F\302\026\r\001\037\225\277\342\r\353\337_\037\207?9>w\233\206\254\355\277\260\351H;\177\300\372?\266\300\261\324\303B\325\277\343\240\252<\3556\371\277]^\367y\001\374\302\277(\275\000c\004\250\341\277j`)\212\324\275\312?\301\211:\245\r\002\304\277\277\007\363\224y\255\350\277~\350\222.\256\231\356?)\032\206F\333g\267?AY\232L \330\336\277\332\025\320\327\314O\354?\337\230$\274Q@\361?pd\361\206\013L\370\277\235l\242\027\357D\277\277\355\"a\322<J\275?|\241\265vw\327\243?>\223\331KS\370\363\277H\n\206}\316\266\007\300\347f\234F\277\265\341\277TR\271\032F\366\366?\231$\343\2745\356\304\277\236\032\322\210\364\272\302?\177\372\347;6\254\272?\241\346h\003\021W\322\277\251\3037T\3745\321?\274\020J\250u?\366\277\005W&?N?\362?\241\277\206\211-1\323\277\027\316 \343@\327\350\277m\t\206\324E\377\263\277\271\341:\202\265\177\344\277\"\322\r4Q\221\364\277\t\345\200\006_\315\335\277 \026\246\2336\002S\277\222\310\007`\276G\340\277\226L\263\322E\242\307?\254\303{i\311\252\323\277Q\020r\010\301\034\347\277\243w-\356\347\252\262?\351r\227P\231\260\343?2\200\353\032\323\332\303\277\303n\022\016\350\270\337\277\354\2664\032q\262\362?\022\247\313;\034\264\004\300\023\230};\3468\005\300\306\3702\227t\263\361?\025Hy\304\341\337\361?&f\207+Y\271\260\277)\037*S\257\247\372?\204\200u\266J\314\360\277\003^\n\221\370\207\335?\260\312\2734g\334\242?\351H\277\0367\241\353\277\227\255\023\300N\364\324\277\233\225\025\330]\212\342\277]K\r)=\257\356\277\237:1\024x\264\360?\372=\364\000\316 \365?\344fhO\t\300\330?0\252A\376\374\255\335\277\265\250\3343\372y\336\277\341~\325\001g\235\275?Y1\352\033.\367\370\277\010p\027\233c\364\301\277\230\032\353\261\004\335\304?\343#i\217\265\346\320\277\242\306E\376\316\022\322\277\027\024\276ABc\224?\304`\026s\3351\320\2779o\327\233\243\223\234?\331e\221\256\'g\364?\3067`\324]\246\344?m1\232\377\"(\311\277\017\016\336\213nG\352?1\215\330\246\306\246\242\277^\273\264\276\254\353\360\277\244\377\356=X\025\273?\333\3262\025\211\303\226\277N\312a9\031K\361\277\321\n\276\r\366.\356\277Dh%\nT7\366?\304\337\222\200\222\233\302?\3204\226?X>\346?\311X,``)\274\277;%dP\031\347\334\277D)?\221h\315\224\2778A\034\016\322\370\325?\003^\n\221\370\207\335?=C\226\342A\036\351\277\027\334E\370\304=\361?\264\n\212i\205N\270?\020\0009\323x\310\225\277\03350>\230c\346\277?\254\227\347n\346\304?\205\213V\274\315\002\313\277?\252\220\002\331\271\251?\215.\312;v\375\320\277\213\236s\014\014Y\272?\270\215\177\241\264J\364\277\321\203\036QhH\302?x\323vD\347O\364\2770`\224\036\333\240\352\277\210\003HL\227\200\347\277\t\177\327S\2679\357\277p\350R\310\260\023\325\277\37265\214,?\366?\204\201^\261\234\361\312?\345\233\031\370bF\346?\024\032\257\027er\326\2779\036\262\013\336-\354?\271\357\310\211\017\302\333\277\277\007\363\224y\255\350\277\233e\237\215\200\356\315\277\221\335a\014 \224\344?\214Q\033\033%sf\277\035\243d\022\266V\366?\r\002\343\201\224L\350\277\274\274\337\014\250\247\346\2775\217\337\312\334\025\312\277]K\r)=\257\356\277~\316\253\247\340\226\326\277\034\030dT\037%\351\277\222\371\266\263dw\365\277k\275\320\330\321\226\353\277#\3142\325\250\345\361\277\213@\325[\232\003\367\277*\244N{\341\376\312\277\037\277\271\271\3729\347\277\316\244\320E\201&\315?\273\267\364\274\242+\304\277\312\211{\207xk\361?\005\037\363\207$\260\004@\244s\267-\355w\356\277\320\272&\355\316i\241\277\021w\200\344E\033\335\277\002\341\003\323\237v\001@90\371\261C\351\357\277~\223\306\313\037\010\361?\235\031\250f\206w\361\2779e\232<\206\360\343\277\317=)\331\225\205\321\277\010/\315\2026\276\346\277\245\230W\357\203\363\350?\252\"\203\365L\004\353\277\314\277\370\334\246o\321?R\315\344\000\213\r\335\277\252S{\377\232\021\354\277\243\313c\016\316U\263\277\357\372?w\371\370\351?\327\031Ea\013T\306?\003\014d\374\257\326\360\277\244.\r\007\365\236\367?\372\026\271\262+\236\320?\244\377\356=X\025\273?\221Z\004\331#z\362\277\267\003\311\375;\324\366\277\235Y/\334\244\244\375?\274\355\327\026\366\264\347\277\372\342y\253+\n\346?\"b\370\n1\020\332\277\240~\352\364\020/\315\277o\242]P\336P\264\277\224\233\001\321\212\230\362\277i\021\221Z\2554\325?\300@\213\177/\002\316?F\035\204\266n\004\254\277\217X}\324M,\361\277\370\326~\241Q\017\344\277Jr\341I\222\336\376?\030\376s\311\242/\005@\217w>VM\375\367?\204\371\234a,\207\302?d{\024d\374\"\367\277\035\225\235r\313\265\354?&\r\030d\353K\330?HJ\342\335\246\235\354\277ie\003\205\006\214\331?\263\240\320\266\211\206\364?n\026bJ\346_\353\277=\362\206\306\221qt\277\222,\337\"\331\022\002\300\360\300\327uP\354\302\277\337`}[y\320\372\277\315\277;\273\267\265\271\277\030s\004st\325@\277\004\225\310:\375X\376\277\241,]D\'\353\330\277\270\276&f\317\272\364?\307s1U\243*\333\277\373\250\250\373*\250\364\277\257U\275.\270\200\362?R\315\344\000\213\r\335\277t\201\244Gth\363\277\226\203\211\345n+\342\277SD\277\370\310\222\013@\324\\x]\306\327\360?\372>^\023\234S\343\277|X>.<\020\340\277\206I\212\344/[\323?\361\001\342\235\0353\341\277Yz`I\325P\005@;%T2\002h\343\277n\3078\345+J\310?\237\312\332\303;\025\357\277\271{\332\205\265\311\361\277\030<ZX93\302?\372\235\367\013oh\342\277\354\250\256\241\242/\340?\353\374\216_\254\313\334?\242\241\374\032u\221\024@{\253\375\217\037W\352?\256\202\024\003\037\315\340\277!W\'#\305X\371?\022\257x\212Q(\324\277\372\342\322\177\352f\373\277\030\241\n6\366\250\361?\255\027\220\036\211<\311\277W:\212\345\321f\362\277t\034U\315\001\017\356?\\\374\343\303\202\231\313?\260\204Z\340\330\374\352\2773\307\243y2-\350\277\002\351Ay\247\272\270\277{\261\333\230\372\322\303\277!\347\260\226Z\273\344?S~M\010 \263\321?\364\231O\007\350Q\363?\3546\030\316(\203\t@\356\374\302Vb\301\345\277\222!\303O\266\340\305?\001a\200)7P\260\277v\000}\323\032\377\341\277\273\364=\267\3309\361?\346\343\030\343\325D\006@(\312\313\203\321Z\345?6\357\343\014:\214\361?~0\234\273|\261\330\277\345\253\314i\214\213\312\277+^2\263\2173\361\277\004z\006d~\016\331?&\233VY\354\025\340\277\t\267`/V\323\263\277>\340\315(\'\214\360\277\265I\362\365\363\307\356\277\243\313c\016\316U\263\277T\355\252\307\357\272\330?\247\336<I?7\260?\353\317A\215G\340\277\277\363\006\253\202\374\225\250?\346f[\037\243\227\352\277r\027\270\324~\331\340?\274\267H\220\340\327\010@\031\377\252Y\336\237\321\277\360\005\001AN1\361\277\345\343\304\017\230\230\301\277\251\006\345\227`C\356?\326\2402u\033\201\327?d{\034\363\207\342\353\277\330^\251{\216\037\330\277\343\343\220\030\342\242\350\277\322\224\325\320:;\301\277\023Y\223\236\246\207\355\277;T\220\200\330\307\361\277q=P4DD\360\277\274\026\237\nI\356\346?G\301]\247\251\243\320?r\264\371\000>\347\006@\201\0131(XZ\341\277\334K\256L\307\351\361\277\260uZ7%\310\320?\330\027\220\372\375\214\212\277\231\217\036\353#\241\360\277\270q\231\304\334\332\265?\301\320\276\014\267^\337?\\\264[N0\217\345?0\017y\017KO\351\277=\304\271\357\341\367\216?\346}\212\']x\305?\"\212\0146\0169\337?\233\351\263\356\022\017\241?I\007\206\337u-\340\277\260\325\266\026\205l\343\277\334\353\211\022\272\373\333\277\235>\276JY\367\330?3\253\247\246\254\246\354\277D%1\307<t\276\277\274C\366\336\257:\365\277\376iF\007\240U\360\277\326>R\177\226\345\356?\006\327?\037\313\242\301\277\250\230\213\3469\351\321\277\310\265\356E\346\201\343\277U\355D\303\3125\365?\263\240\320\266\211\206\364?\002\261\3615\231\177\366\2775O\264W\341\014\260?:\310M7\257\232\311\277\241I\351=@:\311?\346f\372\273X{\340?\253\340/\352\0351\367?\000\234\032\334\331_\355?9\004m\017we\305\277\347f\234F\277\265\341\277\301\320\276\014\267^\337?\2502\3423\222U\343\277\336\212]\034g\237\347?\311 \203H\223\221\344?=\257\010\241kA\001@\036\200C\306ii\350\277V\321\362\t7\251\337\277\237\0365A\362-\365?\024\021j\325\251q\300? \263\257\253w\367\030@\340\3559\325\207\257\372?b\004=\330\211i\322?\003\204\343\027\332\020\364?\017\016\336\213nG\352?\343\271\250\310h\024\327\277`c\363\036\332%\311?\271\276\300a\2525\341\277\211\320\274D\311+\321?\272\273\033\357^\351\310\277&\024\327\330\214-\327?\037\303rX\006\263\323\277\250p\022\265\327\326~\277\331\274r]n|\325\277\336\025\246Y\351\177\306\277\231\300.\242\024\355\337\277\314\206p\020\010\232\305\277}\262\237\266C\221\341\2772\235\2072\003\251\355?\271\224F\245\341\353\347\277\2550S[\177\223\303?\307*G\\\016\255\313\277V3\005\211\371\334\254\277\231\300.\242\024\355\337\277ZT\245cU_\363\277\252.\004\374\373\373\376\277\037\362E\370\204\275\327?II .\326<\263?l\037SY\275l\325\277\256\366\271P\321\347\336\277\346\350\277}\264\223\335\277n9\334j\361\251\356\277\250\230\213\3469\351\321\277\2142\361m2\273\325\277\177\004\217\0014 \352?5\276\242LD\241\344?9o\327\233\243\223\234??\221N\335^p\323?\376;\331\223\002;\241?\307\006\nUv\323\344\277\003\023+\000\335w\344\277\202\227\253\026\324=\326\277\203x;\332\007\n\300\277\211e\312\314\202V\321\277\r\036p\212\255_\261\277x\262\310\375j2\335\277\001\221<\304\007\200\376?\351\355\215\177<h\350\277\373\351\231\203\027\010\357\277\271\274\253\025\362\261\335?\373:G\377\366\024\330\277\025{\346\305\251\021\224? L\277\351\260\366\362\277\215Yur|\033\306\277\257]\205\226[\377\331?\247`\223@.\334\332\277\035\261\231EQ<\350?\327\031Ea\013T\306?\205\342\276\236\245C\330\277\227_q7\256\301\241\277\214x\325\2201\320\342\277I\275\364\020KDs\277\264W\017|\354n\342?\t\177\327S\2679\357\277o\206\320G\305=\353\277Q\234\017}\367\206\016@2\201\r\256\265^\340?*\027\2630?\306\323\277\301\177\273fK\305\367\277\303\237\362j\223\207\362\277M)A>am\305?\365Q\340u\364\264\325?\342h\242x\312\252\370?mn\232C\261X\352?\374\376\'\'/J\334\277\364v\355\223\177F\356\277\213jO\030cM\360\277\251\3037T\3745\321?3\030\277\210\302~\351\277\251M\315\310\010\006\346\277\217\005\203gc\345\267?\361U\345\375\t\027\263\277\345 \267\354\003r\272\277^\207\276mT5\322\277.`\362\223tf\351?\340,\361\3574\236\360?6\357\343\014:\214\361?\270+V\365\207\321\357\277I\227\027\342\226O\340\277)\303\246\n\013\364\362\277>\223\331KS\370\363\277S\242\333T\353)\331\277y\003\033p|E\001\300\340R\211O\372\010\340\277V,\014\374\216\243\364\277\367\310+\253\025O\003@e\345\025\226\343\231\374?y`3\276\365.\364?\\6og\016\356\347?O\010;\230I&\000@\250\0049\266\201\216\360\277\246\000\376\204\277R\361\277\177{k.\201B\330?!\030\362VP\246\361?\233\261\320\203\307\362\346\277\255\217\316\316\030\322\300\277\322PD\273[~\334\277\221b\274\"\260y\320?L\272\330\245y\035\n@\237\333Ne\375\301\345?\300\371\006\030\206\245\322\277\3523\303\347n\032\346\277\300\241\333N!\325\341\277\317\214\037~V\324\325?\262aj\341\0175\377\277\341\244x\232\352\227\350?\"\250\334-0%\347\277\204\207\363\003\320\217\370\277.w\003\027\365p\322\277\344\345\344\\\276)\273?P\331\333\345\367\202\331\2776\276\021\027\261\024\267?\275~m\'\300\204\302\277\246w+\367?\022\360\277\000\000 <.\376\322\277\305\251\242\366\330\351\320\277\354\211\264\207\022\000\367\277\336\233\341\333?\313\327?\0044\022#hz\322?\3746 \315:W\323\277\177_\001\310Jw\344?\021\025\200\262\222\201\341\277\032f\206\275\1776\346?}\307\233\355\013\030\347\277\226\203\211\345n+\342\2777\341\276\367\265%\351\277\022\375\266\201Cw\360\277\222,\337\"\331\022\002\300\261\200T\340\355\217\202?\224\3623\305\004K\304\277\2150%\330!\025\376?\221\272\347\353\024J\341?\213\010g\223R\362\342\277\374\337>\036\364A\362?\234\253\224\005S\261\336?C\266\323\007ml\267\277\027\316 \343@\327\350\277H\227}\346\273\324\363?\304\302\006\207yL\322\277y\210Ox^\027\316?\035\372\354\354=\017\362\277 ~\260\310\351!\323?QWjW\200^\310\277\001_\032\230K/\314\277\034\372\037o\320\321\003@\231n\324Q~(\003@a\334\226@]\205\345\277.\324\310\352+ \345?\024~\267\005\304\037\000@\325t\366\340\305k\263\277\371\032\340\344\347[\325?\\\363\321A\301_\344?P\342 (\263\203\277\277i\0324\022\002\373\331\277 \016\\jW\327\233?\263\242\335\2674\321\347\277T\362\325\007U&\350\277\227K#\254\262\331\322\2779H4W27\372?\035\252\033\370\313x\340?\206\014\270C\362\177\315?,\211\026\306\2446\355\277\377\307\027x\013r\342\277n-s\315fj\304\277\003\345\231/o\357\337\277\265B3\201R\346\357\277\373\351\231\203\027\010\357\277\303\336p\355\257\027\346\277\017\267\266\320\262$\344\277#B\325\005\357\313\331\277\335\276\" <0\364?A\327-_\203\034\367\277uP(\230\237>\n@\372\300\201J\2211\337\277\035<\342\202\323\034\307\277h\2347\r\311\332\342\277\300\223]e\336\021\344\277h\245\036zD\316\002@\201<)2\246g\342\277\275\023{\257y\257\262\277R\224\253\302*\255\340?\353\"5d\373\221\001\300\255\n\373\353\031\030\361\277\377\037CApB\323\277\242\214\272ZC\276\345?\002!\007_\271\000\341?"
      }
    }
  }
}
node {
  name: "tensors/component_3"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 750
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 750
          }
        }
        tensor_content: "\\\002\326\356V\217\342\277\370\371\344\311\333H\361\277:Q\331\210\305\"\221?\\\002\326\356V\217\342\277\207\305\361\211\2417\322\277\\\002\326\356V\217\342\277\237z\246;?\215\257\277\226\300]\374!\310\366\277\323\262(\326D\004\344?\035f\302\016^;\335?Cl\202\002{\027\361\277)\200\266S\206O\354?\337\230\331N\025\025\352\277\341\226M\'\266I\311?\325\204?Q\037\223\352?\231T%\233\233\267\343\277\n\005x\202\211,\345?\261T\312X\224\334\310\277DD\363\304\2078\367?/9`\014\332T\343\277\207=\336y\214l\364?\205\257p\"E\017\327?$\311\264\363\212\025\360?L\356;\361`\r\343?i\375Aa\327\037\367?\301\315|\00224\357?Z\016\212}\273\263\341?\362\304\333i\324\337\347?\3554\275\301S\030V\277\230\353\231].p\340\277\204\213Tv\027\242\311\277\363-g\247A\'\353?\343;\002\240\014\362\345?W\262\267sp\321\356?\254\302\351I\204P\373\277KT\032\013\265\213\366?\260\333\027\373\374\376\351?\324\033\264\023\262K\347?\\I,6\003\212\353?\224/C\201\301\241\371?f\235\275\216\2653\323?\247ts\'\366]\342\277e\"${\2615\341\277\273\026{\2426\372\362?\261\375L\361\275K\344\277\000\251\000\273E%\315?\277\013\215\247\201;\304\277(\220\327\300N*s?My\374$\217\241\340\277\305\252\347\330\245Q\261\277\325\204?Q\037\223\352?\216\026\025\366K\260\316?\2044\327\016A\021\345\277\346w+\'\374\314\266?I\264\236\335\326w\352\277\177\304+\366\361\321\361?9\t\220\035N=\356?\036\2633f+0\361\277>\216\366\tJ?\334\277]ka,\304\326\345\277\256\357\014;\372[\324?\245\262\302\003W\375\373\2770\372\274\003\315O\004\300\007\304TO&a\251\277\035\271\215\255]\302\360?e\"${\2615\341\277%2@1\370\\\363?\003\317M\000\305\010\271\2775$\2458-\222\370?k\000\357\204\360\350\346?\274\345?b\002X\270?t0d1u%\301\277\241R>15\021\350?\234\315\327D9\017\312?i\375Aa\327\037\367? \031\022\200\177\256\344\277\302\204\232\223&n\305?\341`\344\271\346\007\360\277\322\007+u\336N\227?DD\363\304\2078\367?\305\351W\261\300\356\331\277s\267\261\323\335G\342?\270;]\342\023\315\300?\217\336\037;\032\346\360\277\\\316\222\"\377\213\331\277\017\r\003c\r5\243\277S\302l\277\030F\001\300Cl\202\002{\027\361\277DD\363\304\2078\367?\021\231?!\003\034\362?=7y\242s\256\347?\304\027A6\346_\323\277\362\304\333i\324\337\347?HK\023\240i0\347\2778so\207g\352\006\300\366_\303\t3\204\310?\265o\337\231v\356\366?\247J\375\177\234\330\334?Er\334I\255\251\360?\\I,6\003\212\353?\3023\0179Y\355\205?9\3029\326\241B\345\277o\004bb\274\324\312?Zth\227\0172\365?\035T\2648\307\204\356\277\230 \342\316C\264\332\277\334\213\251\221\350\035\r\300\\\002\326\356V\217\342\277\343;\002\240\014\362\345?\000E\256\310Pr\372\277\354[P,g\230\344?Er\334I\255\251\360?C\371h\261\035-\313\277\251<b;\313\223\272\277P\247\212\377\271+\256?9\3029\326\241B\345\277\014\371\303\363$\010\346\277a\033\004\240\317=\361?\264\240uB\265(\340?\210\246i\267\371\263\367?\377%&\366\250\356\337?\343)\364\311u;\327\277\243F\212\242\320\354\350\277\2369\020\200\274b\371\277\344\306\302\323:\206\343\277X\346\372?\310\324\327?1\340\373:\235\035\303?\261T\312X\224\334\310\277\360\212>VJJ\357\277\261D\2438jF\355?\356\273\324\376\210\204\370\277\226\306\267CTZ\366?\004\211\030\333\325\310\362?$\347\265\035\216Q\307\277\204\213Tv\027\242\311\277\343;\002\240\014\362\345?\263A\366\024Q}\375?\312\234\002\261\357\266\263?\203\251\026\333\022}\347?\264\006T\\\t\247\363?\351H|\302 |\365?;\375\333\216\351\030\357\277\327M\020v\243\250\304?\3428U|\363(\366?}\273$\261\2513\306?\356\254b\355\350\021\232\277 \260\206B\022g\341\277\304 H\2411\273\362\277\273\026{\2426\372\362?\337\241\340\271`p\371?\025\344\010 xE\373?\374\201\370\377\363\320\322?l\025\020\235\224\351\244?\017\234\354D\034\345\341?\031\216QLQ\032\347?\361\340\266\030c\232\322\277p5\370\344\367Q\360\277P\247\212\377\271+\256?\302\204\232\223&n\305?\375\004\323\304\220\007\300?\363\204\344\016\030\270\337\277\\\340\240\370\225B\350?\242$U\254\017\240\356?4R\216\275R\003\362?&\233\313ne\244\366?\226\300]\374!\310\366\277\\I,6\003\212\353?Z\244\252\200 (\007\300\226\300]\374!\310\366\277)Kn\342p\013\322?\002\020fW;.\360?\261\375L\361\275K\344\277\2044\327\016A\021\345\277\002\020fW;.\360?go\324\t\220\302\331?\3023\0179Y\355\205?p\007\017`\322\340\366\277\305\373e\207W\245\350?\017\223\345\331\320\211\362\277\245\346\005\320\256\000\365?\000\342|\322\025\275\366?\360X\243\010N\317\364?\265\t\001\200\"p\343?\301\370\270c>\334\370?\375\004\323\304\220\007\300?i\224\266#j\330\363?\362\304\333i\324\337\347?a~5\226\n\363\364\277\207\240\017p\307!\370\277\226\nag\347\213\337?\376S\017{\316_\331?C\371h\261\035-\313\277\242$U\254\017\240\356?.\256\237\330\253\300\345?<.r7(S\370\277\367\377>\021\016\333\360?\013\327\216\375c\273\353?[w\025\273(\373\344?LW\307.\316T\346?\2222\360\244\332j\351?c.\330\t\026Z\340?)\027+\026\031\010\351?2ST\235\010\343\271?\223\275\260\330\010\377\346\277\305\373e\207W\245\350?|}\024\300S\262\351\277\301\370\270c>\334\370?\332\206Y\244\374<\002\300\033\202\235\275\354\365\347\277v\324\221\'*C\316\277KT\032\013\265\213\366?/\005\035@\202Q\332\277\025rv\235\302_\314?t0d1u%\301\277/9`\014\332T\343\277\034B\246b0\316\317\277\362\262\315\223=)\331\277\230 \342\316C\264\332\277%2@1\370\\\363?+\035\205]K\232\330?\017\234\354D\034\345\341?\021\305\200\'\315\004\335\277\227$\266\241x6~\277\207\240\017p\307!\370\277\027\367\020\001\320\345\223\277\3023\0179Y\355\205?\371\321U\214\350i\367?\302X=6`\310\354\2774\360al\325\216\377\277\300d\361\304\304\354\353?\353\362\304\356\371P\341?\317\355\312\216\214\332\355?\211\324R<\037%\361?\360\357\027\313\340\207\361?~.}\023\025\371\274?}\273$\261\2513\306?\036\034\277\243\230w\364\277z\211\310N\270\326\350?\007\304TO&a\251\277\312\234\002\261\357\266\263?8\260+\000\013\214\306\277i\311\376\224\177\034\376\2775$\2458-\222\370?\267\323\326Id\306\336?U\373\265\023u\227\362?\274y\254\230q\257\366\277\036\252,\373\337\324\321\277\273\337\212\330\310\352\315?\273\026{\2426\372\362?\007\354I\321\020~\366\277\356\254b\355\350\021\232\277@\n\027\354\365A\265?\234\315\327D9\017\312?\246\351\262\363\307\311\344?\307\357\261\370\362\200\351\277\245}z\222A\271\361?SdAQ\342\336\365?Z\327\231\215J\347\370\277?+\305\023\017\212\350\277\026\253\277\313\033\364\t\300DD\363\304\2078\367?\004\314a\211\255\025\253?\363\204\344\016\030\270\337\277l\025\020\235\224\351\244?\353\362\304\356\371P\341?%2@1\370\\\363?\025\251fg0o\361?\036\034\277\243\230w\364\277\317W\252\370\245\207\006\300\351\331\226=\201\242\362\2774\273\031\373\277J\365?\350\337\360\204\2634\362?\304)O\014}\026\342?~.}\023\025\371\274?\341\226M\'\266I\311?\274\177\006\340\243A\366?{[\337\311\222e\357?A\206\020O\262g\264\277\300/\251S\257\250\321?\343)\364\311u;\327\277\224&<\026vF\352\277\342\322vb\237\252\342?C\371h\261\035-\313\277\341\317\311>\206\341\362?\361\340\266\030c\232\322\277!C\372\264\337\360\010\300P\362\256\316,\371\306?\325r1{\210\334\333\277\216\026\025\366K\260\316?\301\315|\00224\357?\004B\001\2457\251\352\277\026\243\014 \376\334\361\277+\013w\207\264\343\351\277\246O\221\r\034H\370?a\033\004\240\317=\361?\021\2208\266\267\300\342\277\304)O\014}\026\342?\324\033\264\023\262K\347?\343)\364\311u;\327\277\362\304\333i\324\337\347?\036\"\031\353\312\t\364?\000j\220\342*\210\324\2779\3029\326\241B\345\277\247J\375\177\234\330\334?\260\333\027\373\374\376\351?\250\335\376dc\245\345\277,w\257\350:\364\374\277\332P\275s\271\264\360\2772ST\235\010\343\271?aM\237\023\317u\317?$\311\264\363\212\025\360?A\206\020O\262g\264\277\r\335\350D\226M\333?\246\351\262\363\307\311\344?\350\032\223=\373\n\374?;b\265\003\200V\361?\313\375\177\3324O\000\300\nn\003\300\366s\350?\300d\361\304\304\354\353?\2222\360\244\332j\351?\2672\225b\323\217\336\277\323I\235\230\327\274\340?aM\237\023\317u\317?{[\337\311\222e\357?\356\254b\355\350\021\232\277+}\t0m\206\374?\370\313\373D\266\327\367\277\036\274:\321v\213\340?\377%&\366\250\356\337?+\013w\207\264\343\351\277.\320\324\316l\r\340\277\264\216gl\036r\321\277x\351L!\332\302\374\277\211\227\010\005|\306\330\2774\273\031\373\277J\365?\227`\331)\000\334\342?\274\3427\326\336\366\371\277\351H|\302 |\365?\241\371\331\023\362_\300\277=7y\242s\256\347?\224/C\201\301\241\371?LE\271X7\236\327\277p\244\335i\227+\363?\211\324R<\037%\361?~\377\315\2569\250\373?:\246^\'\023\210\332?2ST\235\010\343\271?%2@1\370\\\363?qp\232\235?(\372\277\211\227\010\005|\306\330\277+\013w\207\264\343\351\277\325r1{\210\334\333\277@\n\027\354\365A\265?\273\026{\2426\372\362?\201:\347&\210\323\241?)\027+\026\031\010\351?\004B\001\2457\251\352\277\033\224\253\223\203\254\326?\200\226Bq\314`\370?K\3454\206\025\262\363\277[w\025\273(\373\344?\324\033\264\023\262K\347?Ks\242\335\\\017\321\277M\027\320\323\021-\336\277\nn\003\300\366s\350?\304\362^\034\014J\371\277\250\251\273\230\013\242\334\277\007P\317\206yw\001\300+t\002\305!+\355\277\261\375L\361\275K\344\277\177\252vv\321\036\274\277\246\327\244\0351\023\326\277C>\231}U\246\367\277\227N\313Si%\324\2779\3029\326\241B\345\2779\t\220\035N=\356?\223\233{\342G\262\354?\370\235\022\300\220f\376\277\247ts\'\366]\342\277\021\2208\266\267\300\342\277{[\337\311\222e\357?i%\321\236\312\376\360\277\363\204\344\016\030\270\337\277\200-\2673_\031\365?\261\375L\361\275K\344\277\037%\306\016\344\322\343?\261T\312X\224\334\310\277\351\331\226=\201\242\362\277\210\246i\267\371\263\367?\203\023\366D,*\000\300\236g\371\004\342\323\362\277\374M\2653\234\315\351?\320\017\000\205M\'\350\277\000E\256\310Pr\372\277\230\301#\266\324\352\332?\000E\256\310Pr\372\277\360\212>VJJ\357\277d\227cG\203\241\343?\307\336\367t\013\355\003\300\374M\2653\234\315\351?\264;\234\315\036\353\375\277\324=\351\ts\230\341\277\270;]\342\023\315\300?\242\273\311n\242X\353?ov\364\344q\272\371?\265\000\372\024\327\024\364\277\343)\364\311u;\327\277\370h\312N{\"\364?\335\212\231\230Q%\332?*\351A\221\363\226\357?[\350+\331\031K\246\277=\274\337\216o\260\325\277[w\025\273(\373\344?\206\201\207\235\037\236\335?\343\244\215\335y9\351?Y\270\021\273\242c\336?\026\243\014 \376\334\361\277\002<\247]\005\027\333\277\301\315|\00224\357?H]!v\000\347\325?Yn\016P\335\237\365\277l\364:\366\213\304\347\277\215a9\305\276}\267\277\332P\275s\271\264\360\277\252Y^\014\027\t\370\277LE\271X7\236\327\277\264\227n\327i\315\360\277i\224\266#j\330\363?\207\305\361\211\2417\322\277y\016/;\264\330\326\277,\357\233\330%)\337?p>$9v\007\020\300\256\357\014;\372[\324?\351\331\226=\201\242\362\277\026u#\233\330k\370\277\317\257{\262+;\364?\267\323\326Id\306\336?\367bp\007I\220\364\277/9`\014\332T\343\277B\255~\002\365\177\372?\377\t\014\020\t\234\360\277\250\335\376dc\245\345\277V\263\013\240\0347\004\300\014bO1\222O\351\277\2248J\354\014\375\330?\002\020fW;.\360?\3412\3734\301\226\366\277\205\257p\"E\017\327?\350\0249\366\310x\374\2779\324G\2548\371\323?HK\023\240i0\347\277 NZ\361\224\362\336\277\341\226M\'\266I\311?\224&<\026vF\352\277\017\002\313^pc\365?\251<b;\313\223\272\277.\320\324\316l\r\340\277|lZ<l\036\004\300\206\201\207\235\037\236\335?\n\005x\202\211,\345?\376\252\214\342\244\360\355\277\250\335\376dc\245\345\2774\202\320\246c\371\003\300H]!v\000\347\325?\204\213Tv\027\242\311\277\217G\253x\207-\364\277\021\231?!\003\034\362?\017kV\234\335\252\370?,w\257\350:\364\374\277\2044\327\016A\021\345\277\203\022\242\030\200\304\352?x\200\301\343l{\371\277\267\323\326Id\306\336?<eb\'\231\037\341?\002\020fW;.\360?]\3032\346I\212\003\300v\324\221\'*C\316\277\211\313K\321\323\311\341\277+t\002\305!+\355\277\355\370\0366,\343\320?~\301\331:\343\240\260?\005[/V\260W\371?\037%\306\016\344\322\343?W\262\267sp\321\356?Z\016\212}\273\263\341?;\305\346\371\272\013\365\277[\350+\331\031K\246\277}\273$\261\2513\306?\032\236xl{\260\302\277\205\235bL\256X\350\277\274\345?b\002X\270?\226],\006\347\022\363?LW\307.\316T\346?\251<b;\313\223\272\277V\024\344\304\355E\321?\221\311dgm#\346?|\177~)ns\213\277q\236\203\"e\231\363\277\025\336\256\330E\263\373\277\250\251\273\230\013\242\334\277\227$\266\241x6~\277\226\306\267CTZ\366?\274\177\006\340\243A\366?$\234\221N\033\204\276?\007\362\243\030C\020\366?\3428U|\363(\366?V\024\344\304\355E\321?9\t\220\035N=\356?s =\021K\217\345?\351H|\302 |\365?\250\251\273\230\013\242\334\277t0d1u%\301\277\206\201\207\235\037\236\335?p\007\017`\322\340\366\277\324\033\264\023\262K\347?\2067\2042Z\332\364\277\362\262\315\223=)\331\277+t\002\305!+\355\2772ST\235\010\343\271?\317\257{\262+;\364?)Kn\342p\013\322?\262\317cl\230\332\352\277#2\332\354\000\037\240\277<eb\'\231\037\341?\\I,6\003\212\353?\033\202\235\275\354\365\347\277\035T\2648\307\204\356\277 \260\206B\022g\341\277^Z\247\250\334B\000\300\267\323\326Id\306\336?\371\321U\214\350i\367?\345/N\021\250\315\346\277<\313@A\355\235\364?I\264\236\335\326w\352\277X\346\372?\310\324\327?H]!v\000\347\325?\370h\312N{\"\364?aM\237\023\317u\317?\323I\235\230\327\274\340?\320\017\000\205M\'\350\277Y\246\003\345\013\255\357\277\\\340\240\370\225B\350?\355\346\020`\225,\342\277C\020\260\370/5\376\277\266r\214\275\217\267\346?5$\2458-\222\370?\353\362\304\356\371P\341?\247ts\'\366]\342\277a\033\004\240\317=\361?\351\246\2470W\343\000\300\322F\360t\276\363\360?M\300Rl;\234\351?\277\013\215\247\201;\304\277\374M\2653\234\315\351?p5\370\344\367Q\360\277\3554\275\301S\030V\277\026p\035\023\324\035\000\300qp\232\235?(\372\277;b\265\003\200V\361?DD\363\304\2078\367?:\246^\'\023\210\332?\377\2559\006\276\271\375\277z\211\310N\270\326\350?.\256\237\330\253\300\345?\213M\005\300\271\277\363?\251<b;\313\223\272\277\362\262\315\223=)\331\277\346w+\'\374\314\266?=\316\355d\006g\344?b\347\300\323w:\370\277(\220\327\300N*s?:Q\331\210\305\"\221?\355\370\0366,\343\320?P\247\212\377\271+\256?\246\351\262\363\307\311\344?\017\223\345\331\320\211\362\277\363\236}\3052w\254\277\037|Cv\272c\330\277\n\005x\202\211,\345?\336\035@;\021\027\310\2778\260+\000\013\214\306\277;\375\333\216\351\030\357\277\025rv\235\302_\314?aM\237\023\317u\317?:\235W\274\307,\373?;\375\333\216\351\030\357\277<\313@A\355\235\364?\2222\360\244\332j\351?\321x\213\302\272n\353\277SdAQ\342\336\365?A\206\020O\262g\264\277\234\315\327D9\017\312?:Q\331\210\305\"\221?Z\005\203\022pX\362\277\002\020fW;.\360?.\320\324\316l\r\340\277\226\nag\347\213\337?=\316\355d\006g\344?8\240\004\340\340\365\352?9\324G\2548\371\323?\341`\344\271\346\007\360\277c.\330\t\026Z\340?\211\313K\321\323\311\341\277\351B\"{\356\351\365\277\270f\330.+\223\347\277\322\022\255\250f\360\367\277H)\336\251\250\343\354?1\340\373:\235\035\303?9\t\220\035N=\356?=7y\242s\256\347?-E\024\233>y\342?\374M\2653\234\315\351?\010\301h\330\016n\273?\027{}\342\n\376\367?\266`~\347\370\000\330\277\\\340\240\370\225B\350?\227$\266\241x6~\277:\246^\'\023\210\332?:\246^\'\023\210\332?:\224PQ|\321\353\277\212i\037\200VU\337\277\003\317M\000\305\010\271\277g]\3063\371\013\353\277\001\007_\354\357\322\340\277My\374$\217\241\340\277\237z\246;?\215\257\277\362\262\315\223=)\331\277\\I,6\003\212\353?\221\311dgm#\346?9\324G\2548\371\323?l\213\257\270\036}\344\277_g\356N\370\352\301\277{\362S\214%\036\354?\261T\312X\224\334\310\277\342\322vb\237\252\342?\023\313\332n\377\226\354\277\264\240uB\265(\340?\355\346\020`\225,\342\277=\316\355d\006g\344?\2638\357\251\005\"\356\277\211\313K\321\323\311\341\2779\3029\326\241B\345\277i\375Aa\327\037\367?kWl\354\306y\333\277\324\033\264\023\262K\347?\322\007+u\336N\227?\207r&\353\241\260\376\277x\264\004\260\304~\362?C\333g\207\032\361\363?l\364:\366\213\304\347\277Er\334I\255\251\360?\000j\220\342*\210\324\277P\362\256\316,\371\306?\032\302\224\030\251\035\320?\246\200\'\266Z\202\341?\356\254b\355\350\021\232\277\312\234\002\261\357\266\263?\360$`<\366\313\373\277u&\227X}!\325?\265\000\372\024\327\024\364\277\000\342|\322\025\275\366?\375\004\323\304\220\007\300?\3554\275\301S\030V\277\017\234\354D\034\345\341?\265\t\001\200\"p\343?\322\022\255\250f\360\367\277\034\027\206X \343\303?\327M\020v\243\250\304?\027\367\020\001\320\345\223\277\226\356F\201G9\360\277\317\355\312\216\214\332\355?+t\002\305!+\355\277.\256\237\330\253\300\345?\360X\243\010N\317\364?\206\201\207\235\037\236\335?\007\304TO&a\251\277P\247\212\377\271+\256?\365\027\213\261\327\251\275\277\355\370\0366,\343\320?e\"${\2615\341\277\253\310C\221\266\342\372?S\365[\314B\005\363\277\341\226M\'\266I\311?\031\216QLQ\032\347?\2044\327\016A\021\345\277\340\023sb\031\023\334?\204\213Tv\027\242\311\277\323\337\275\233<1\006\300\317\257{\262+;\364?x\264\004\260\304~\362?Y\013\335Y\242\352\361?\215a9\305\276}\267\277\277\013\215\247\201;\304\277Ks\242\335\\\017\321\277\336\035@;\021\027\310\277\000\251\000\273E%\315?\373\344)\366.\206\346?\267\363$\212\270\362\265\277\202@\213\235\2455\344?e<\345i\344$\006\3004\273\031\373\277J\365?\302\204\232\223&n\305?\236\326\336\211\201\255\365?\004B\001\2457\251\352\277\351\253\255\270[1\371\277{\340E\266\216g\335\277\245\346\005\320\256\000\365?LE\271X7\236\327\277\361\215\353yc\023\377\277\343)\364\311u;\327\277M\027\320\323\021-\336\277\312f\013\030\242\226\003\300\373\344)\366.\206\346?\343\244\215\335y9\351?]ka,\304\326\345\277\266`~\347\370\000\330\277\244\257\025\340=4\354\277x\266]\024\260\003\013\300\311qk\347\330v\373?\031\216QLQ\032\347?\216\026\025\366K\260\316?\007\304TO&a\251\277C\371h\261\035-\313\277h\306QqfS\356\277\361\340\266\030c\232\322\277\341\317\311>\206\341\362?\246\351\262\363\307\311\344?\\I,6\003\212\353?p\244\335i\227+\363?\177\252vv\321\036\274\277\211\313K\321\323\311\341\277\375/\363\316\240\362\313\277C\371h\261\035-\313\277Z\374{\247$\375\322\277\355\370\0366,\343\320?\254\360\322\316\251\301\364\277^Z\247\250\334B\000\300\301\315|\00224\357?\3674\207\202#\037\373\277k\030\374\023\254\334\262\277\266\224\301\263P\004\341\277\243\235\007\n\247}\315\277\266r\214\275\217\267\346?\267\363$\212\270\362\265\277K\3454\206\025\262\363\277B\247$\273\302\355\372\277\321\201\222-\006\312\372?\317\270\202\035w\226\323?\343\244\215\335y9\351?\235\320\204BO\033\366\277"
      }
    }
  }
}
node {
  name: "tensors/component_4"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 750
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 750
          }
        }
        tensor_content: "H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277\362\226\321Q+\336\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277\265k &f\303\273\277H\3523\034e\342\273\277C\243\324\204\032\305\272\277H\3523\034e\342\273\277\341\010R\243\303\334\273\277H\3523\034e\342\273\277\326M\rz\304\223\272\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277\316\223\000l\216\321\273\277\242`<o[\340\273\277~\021\350\210\213\243\273\277H\3523\034e\342\273\277\230 \311\3764\340\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277\033EBr?\273\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277\333\340\357\021B\341\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277<\245\004\243y\340\273\277\255\367\230\342\030\341\273\277H\3523\034e\342\273\277\223\236yF\031\330\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277\205\035\"\221\223d\272\277\246\026g\330(\376\004@\217B\324:\275\325\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277;\222\257\314\231\335\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277\020;}\360+5\240?H\3523\034e\342\273\277H\3523\034e\342\273\2771\373RY\334\334\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277\356:,F\317\333\273\277E\345w\023\240\340\273\277H\3523\034e\342\273\277c\002\322\244p\365\267\277m\001\2453i\357\265\277\336)@G\276\340\273\277H\3523\034e\342\273\277\004\300\316/\341\335\273\277f\014\014\032\207\330\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277\251\025\023\277o\251\261\277H\3523\034e\342\273\277H\3523\034e\342\273\277,\207W\'\360O\266\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277\253\342\3761\\z\273\277H\3523\034e\342\273\277\311S\002\225\354\306\252\277H\3523\034e\342\273\277\271\006o\256\000\235\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277\341\010R\243\303\334\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277\274_n\344\300\334\273\277H\3523\034e\342\273\277\222\341\246\260S*\271\277w\367\357\035q\204\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277\317\362\251\233\355\337\273\277\335{mA\220\337\273\2771L\t\270\267\033\267\277H\3523\034e\342\273\277H\3523\034e\342\273\2774\274K\2166\274\273\277H\3523\034e\342\273\277\371w\233\222\362\317\273\277H\3523\034e\342\273\277\323\271\035#3i\273\277H\3523\034e\342\273\277\\\326\227\351G\375\270\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\2771L\t\270\267\033\267\277H\3523\034e\342\273\277H\3523\034e\342\273\277\261\204}DL\336\273\277\353\214Y@\241\332\273\277*\301\374\3549=\273\277\274u\2307\360\306\273\277H\3523\034e\342\273\277~\230\302&\371\266\263\277N\316\001\201/\340\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277\316\223\000l\216\321\273\277H\3523\034e\342\273\277#\256c\263(\315\273\277\030+\210\243\230\274\267\277H\3523\034e\342\273\277H\3523\034e\342\273\277?\237yw\024\"\272\277H\3523\034e\342\273\277H\3523\034e\342\273\277\273\010\205\341)\334\273\277\322\240|\241\033\341\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277\022\007\314\023\347\024\234\277B\342}\001Y\234\272\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277\277_\020\226Y\223\273\277\314\336\3164W!\273\277\025\2457\341\337\337\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277\033\247\357\305\241\325\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277%\375\363\005a\270\264\277\275\324AgO\325\273\277\303\232%L\"\333\273\277H\3523\034e\342\273\277u\213\010U\370\206\267\277H\3523\034e\342\273\277H\3523\034e\342\273\277n~N\203\367V\273\277H\3523\034e\342\273\277\030\310\335i\234\331\273\277-\262\002$`\335\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277\026\331\034\rS\235\273\277R(\260\'\234\263\271\277\033\">\233\033x\273\277H\3523\034e\342\273\277D\254x\220\000\330\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277\214\014\331\333 \331\273\277\2128\\)3\322\273\277\257\022\177>\r\315\273\277\217;u\t\264&\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277^\243\352\330\235\306\273\277H\3523\034e\342\273\277^\240\025\\N\337\273\277:\266CF0\244\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277U\234v\353\026\317\273\277H\3523\034e\342\273\277a\303\273\344\n\331\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277\342\")\262:\024\362?H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277\000h0\365\337\374\272\2778\\\264m\375\340\273\277H\3523\034e\342\273\277_\244l16\231\250\277H\3523\034e\342\273\277H\3523\034e\342\273\277\033\247\357\305\241\325\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277\214\333\231\205I\336\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277\217\021\225\344\345\332\273\277\277Q\325\026\246\333\273\277\311\303a\361\243\351\237?\265\364\330\327,\027y?\353\332\2367R\310\272\277^I,Y\267\336\273\277\007\202(`\372\033\273\277H\3523\034e\342\273\277\254d\2548\337\313\273\277H\3523\034e\342\273\277H\3523\034e\342\273\2771\333\364WT\\\273\277\247\206Y&\000x\273\277H\3523\034e\342\273\277\321.O\364(\253\273\277H\3523\034e\342\273\277\340m\324su\336\273\277H\3523\034e\342\273\2774\250\300\217&\343\177\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277t\327\357jPM\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\2771L\t\270\267\033\267\277\371M8\212\305\335\272\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277\024\333yQ\220\201\222?=%m\317\037\316\273\277h\t\010\366\203\314\273\277,C\252\363\274\216\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277Z(,`\203\364\261\277H\3523\034e\342\273\277H\3523\034e\342\273\277&3\267\217G\341\273\277\'\273\337\350\265\334\273\277H\3523\034e\342\273\277~\302\276\262\274\260\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277\315`|;\332r\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277\255\367\230\342\030\341\273\277J\016\270\274\201\224\271\277\236\322\222\374C\356\270\277H\3523\034e\342\273\277\373\216;4Y\201\002@H\3523\034e\342\273\277<\002i\370\373\212\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277\\\007Z#~\236\272\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277zo:\317\347\032\273\277al\322\341s\330\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277\325\351\314\326\227\340\273\277\347GX\212\257\344\265\277\226\236\326\367d\336\227?H\3523\034e\342\273\277H\3523\034e\342\273\277h`?T)\340\224\277H\3523\034e\342\273\277\260a\250\024\334\277\273\277H\3523\034e\342\273\277\210\326\335|\204\334\273\277oL\177\212\255\330\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277\331HG_C\312\273\277H\3523\034e\342\273\277d;5=5\224\273\277\314\314A\276`\204\353?H\3523\034e\342\273\277\022\233\023\231\360\356\317?H\3523\034e\342\273\277H\3523\034e\342\273\277\\\007Z#~\236\272\277H\3523\034e\342\273\277F\314\\\334+a\263\277H\3523\034e\342\273\277H\3523\034e\342\273\277\034Nc\232\306\'\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277U`\242\353\'\337\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277\230(\006H\236G\272\277H\3523\034e\342\273\277H\3523\034e\342\273\277B\021\373`\262\331\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277(\250[k\"\265\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277\353C$%[\220\006@\374\303\300D\276\266\273\277H\3523\034e\342\273\277\304\205-M\376*\273\277\031\371\034\300s\324\273\277\035\017\272\035\210P\273\277 \223}W4\341\273\277\223\242\3753\025S\271\277\002V\220Vj\332\273\277\036\363\024xm\274\273\277H\3523\034e\342\273\277=\374\355\245\020\341\273\277\236\027\3549\337\340\273\277-nn\367\250\337\273\277\330\371\035\211t\327\273\277\254{\345\0078\253+@H\3523\034e\342\273\277H\3523\034e\342\273\277\261\237v\340\376@\263\277H\3523\034e\342\273\277\300\321=CL\311\273\277\325\303\"*\330\332\273\277\033\234Z\034\212\340\273\277\0171RO+\264\273\277H\3523\034e\342\273\277 E\200\016\263\333\267\277H\3523\034e\342\273\277\005-\342\205\247\310\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277\331tl^\356y\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277\256\177\301;\207\334\273\277\243\267%r\362\340\273\277\014\360}\321\233O\370?H\3523\034e\342\273\277ZGE\315A\304\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\2774\036\371\341\230\326\273\277\243\376\216\033\371\305\273\277\t\267\361j\213\336\273\277H\3523\034e\342\273\277\371\005n\345\377\231\273\277\274\246\037\311\346:\311?H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277\301\322\275\014E8\271\277H\3523\034e\342\273\277\265{h\330\2519,@H\3523\034e\342\273\277H\3523\034e\342\273\277v\nt\233\004\254\273\277H\3523\034e\342\273\277\255;-\017\320\336\273\277H\3523\034e\342\273\277\277d*\355\205\336\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277\250Bv\315`\340\263?=%m\317\037\316\273\277H\3523\034e\342\273\277\200\007\2053\177\350\272\277H\3523\034e\342\273\277\021\\\347\253c\340\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277\332\231c\220Y\267,@H\3523\034e\342\273\277\373\243\'\016\007x\264\277\200\274F\307\025i\261\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277 8Bu\231\354\263\277H\3523\034e\342\273\277{0\221R\251C\273\277\310\215Z\245\256\214\357?H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277\315`|;\332r\273\277H\3523\034e\342\273\277l@|V\003\202\327?aN\350a|\340\273\277<\245\004\243y\340\273\277\332\315\232;b\336\273\277\3647\233,\261a\273\277H\3523\034e\342\273\277&7\331\366\275)\245\277\313Rpc\332\337\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277\376\014@!\356\332\273\277\252D\254\205\276\224\273\277Ucz\317\273(\261\277s\276N\3518\305\273\277H\3523\034e\342\273\277t\022co\200\336\273\277i$\035\371+\335\273\277\274\304\301\r\277\271\273\277\375\244f\302\235^\374?\255;-\017\320\336\273\277\345\322\350\034F\202\271\277H\3523\034e\342\273\277|\267X\260X\340\273\277H\3523\034e\342\273\277\204\3146\304F\264\273\277/P&)J\236\273\277H\3523\034e\342\273\277H\3523\034e\342\273\2771\016\250/\274\337\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277\013(Z\007\232\037\271\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277\017\210j\371u\331\273\277H\3523\034e\342\273\277\323(\245\372\211\334\273\277\0342\276\364\253\223\273\277K /{\001\337\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277\261zI\226\363G\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277\002\307B0Hg\243\277H\3523\034e\342\273\277\275q\342B\307<\260\277d!R\216\230\275\272\277\0322\034C\023\335\273\277\251`Q+\331(\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277\005-\342\205\247\310\273\277H\3523\034e\342\273\277\371\005n\345\377\231\273\277\242`<o[\340\273\277s\354\270\302\300\330\273\277\205\321!t\277\332\273\277H\3523\034e\342\273\277\201\310\333\266@\021\273\277\305[M(0\337\273\277\222\360\246@\353\326\273\277\237\361\022\346k\266\273\277\347Y3^T\305\273\277\243\267%r\362\340\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277\037\346\305\211\007\027\022@-\305W\372?\340\273\277H\3523\034e\342\273\277U\t\271\350\220\336\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277\353[\032\352\311\337\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277\322\240|\241\033\341\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277WJI\361D\320\273\277H\3523\034e\342\273\277\3617c=\034l\235\277H\3523\034e\342\273\277H\3523\034e\342\273\277\356P\'\362J\241\273\277\205\271\262F\263\214\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\2770\317_h)\264\261\277Z\245\325\257\021\\\267\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277p\266\275c$\334\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277/\262\323|\254\270\273\277H\3523\034e\342\273\277\025f\326\022\321\360\266\277H\3523\034e\342\273\27765?\351\233\231\265\277\206\344V\331\001\373!@H\3523\034e\342\273\277u\035\370\030\230\323\273\277&d\366\345\036\334\273\277\237g+\375\303_\262\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277,f\256\312\340\321\273\277\206\237\317\227\026\266\272\277\250G\260\251\301\240\273\277\0171RO+\264\273\277H\3523\034e\342\273\277\335{mA\220\337\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H.\310H\034\340\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277S?\366.\237v\263\277H\3523\034e\342\273\277H\3523\034e\342\273\277\346\250\213\333\326\334\273\277H\3523\034e\342\273\277b\351e\221\312\336\273\277\316u\026\354\226\331\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277E\t\335\345\202\202\273\277H\3523\034e\342\273\277\234i\0314\261\337\273\277H\3523\034e\342\273\277)\253\243\330w\014\226\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277\324\235x}\030\325\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277\nK\371\360\363\315\257\277\205\035\"\221\223d\272\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277>\227k\325^\337\273\277\220{\323\275\\\336\273\277\341\355\r\371g\247\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277\200\200\021\022{\315\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277\"\327\021\204\353\336\273\277H\3523\034e\342\273\277\202\256{\353\002\341\273\277u\273J\3055\271\273\277H\3523\034e\342\273\277H\3523\034e\342\273\2773\274z5\352\340\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277c\351\251\213\366k\003@H\3523\034e\342\273\277H\3523\034e\342\273\277\201\2112:\002:\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277Ar\022K\344#\271\277H\3523\034e\342\273\277H\3523\034e\342\273\277\322\240|\241\033\341\273\277H\3523\034e\342\273\277\303\300\317\370\341\340\273\277H\3523\034e\342\273\277\236\004\227c\377\335\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277\340k`\362\344U\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277\245\373\212\367\365\271\273\277fE\013\235&\341\273\277<\245\004\243y\340\273\277H\3523\034e\342\273\277\204I\371\032Q\337\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277~\302\276\262\274\260\273\277H\3523\034e\342\273\277\206\025\266\240v\330\273\2774\211\273\275\\\276\360?H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277\235\351\250P0J\202\277u\213\010U\370\206\267\277d`\373\n\327\224\272\277H\3523\034e\342\273\277F)\014@W\336\273\277H\3523\034e\342\273\277u\035\370\030\230\323\273\277-nn\367\250\337\273\277n~N\203\367V\273\277\206\237\317\227\026\266\272\277\330\220\021\004\t\016\273\277E\345w\023\240\340\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277\263\0169\355\204r\272\277\367\n4\000\201c\272\277H\3523\034e\342\273\277\246\026g\330(\376\004@H\3523\034e\342\273\277\025\235w\264\027\322\273\277&d\366\345\036\334\273\277\223Q\022g\310\242\272\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277N\316\001\201/\340\273\277\253\314\241\377Z\202\247\277H\3523\034e\342\273\277\232\367\032.r\316\273\277\211\347\327\330O\032\266\277E\345w\023\240\340\273\277\033\366\030\234p\310\273\277H\3523\034e\342\273\277\216\224\0015\217\324\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277H\3523\034e\342\273\277\216\313\tS?\256\271\277\347\n\n\210\205\322\273\277"
      }
    }
  }
}
node {
  name: "tensors/component_5"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 750
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 750
          }
        }
        tensor_content: "?2\354\001\343\231\333?\376s0D\241\022\331\277\374\234\233\010*\017\276\277\177\337\372\341\\\224\346?\277\251\025\023\177\323\367\277\177\337\372\341\\\224\346?\376s0D\241\022\331\277\276\306!d\'\030\356\277\376s0D\241\022\331\277\217F\223b\311o\363\277\374\234\233\010*\017\276\277O\231\204\202Ou\370?\276\306!d\'\030\356\277\217F\223b\311o\363\277\337\245\377B\310[\357?\0376\002\322\231\021\364?\000K\305\177\030\026\304?\000K\305\177\030\026\304?\000K\305\177\030\026\304?\0376\002\322\231\021\364?\277\251\025\023\177\323\367\277\0376\002\322\231\021\364??2\354\001\343\231\333?\0376\002\322\231\021\364?\277\251\025\023\177\323\367\277\0376\002\322\231\021\364?\177\337\372\341\\\224\346?\276\306!d\'\030\356\277?2\354\001\343\231\333?O\231\204\202Ou\370?\000K\305\177\030\026\304?\376s0D\241\022\331\277\217F\223b\311o\363\277\337\245\377B\310[\357?_\000\035\003\274P\345\277\177\337\372\341\\\224\346?\277\251\025\023\177\323\367\277\337\245\377B\310[\357?O\231\204\202Ou\370?\177\337\372\341\\\224\346?\000K\305\177\030\026\304?\217F\223b\311o\363\277\000K\305\177\030\026\304??2\354\001\343\231\333?\276\306!d\'\030\356\277\177\337\372\341\\\224\346?\277\251\025\023\177\323\367\277\217F\223b\311o\363\277\217F\223b\311o\363\277?2\354\001\343\231\333?\277\251\025\023\177\323\367\277?2\354\001\343\231\333?O\231\204\202Ou\370?\177\337\372\341\\\224\346??2\354\001\343\231\333?\376s0D\241\022\331\277\0376\002\322\231\021\364?\376s0D\241\022\331\277?2\354\001\343\231\333?\276\306!d\'\030\356\277\217F\223b\311o\363\277\177\337\372\341\\\224\346?\337\245\377B\310[\357?\376s0D\241\022\331\277\277\251\025\023\177\323\367\277O\231\204\202Ou\370?\374\234\233\010*\017\276\277\217F\223b\311o\363\277_\000\035\003\274P\345\277?2\354\001\343\231\333?\217F\223b\311o\363\277\177\337\372\341\\\224\346?\0376\002\322\231\021\364?\374\234\233\010*\017\276\277\374\234\233\010*\017\276\277?2\354\001\343\231\333?\277\251\025\023\177\323\367\277?2\354\001\343\231\333??2\354\001\343\231\333?\217F\223b\311o\363\277\374\234\233\010*\017\276\277\177\337\372\341\\\224\346?\337\245\377B\310[\357?\217F\223b\311o\363\277\000K\305\177\030\026\304?\276\306!d\'\030\356\277\0376\002\322\231\021\364?\374\234\233\010*\017\276\277\276\306!d\'\030\356\277\177\337\372\341\\\224\346?\000K\305\177\030\026\304?O\231\204\202Ou\370?\000K\305\177\030\026\304?\276\306!d\'\030\356\277_\000\035\003\274P\345\277\276\306!d\'\030\356\277?2\354\001\343\231\333??2\354\001\343\231\333?\177\337\372\341\\\224\346??2\354\001\343\231\333?\374\234\233\010*\017\276\277\0376\002\322\231\021\364?\276\306!d\'\030\356\277\217F\223b\311o\363\277\276\306!d\'\030\356\277\376s0D\241\022\331\277\0376\002\322\231\021\364?\277\251\025\023\177\323\367\277\217F\223b\311o\363\277\337\245\377B\310[\357?\0376\002\322\231\021\364?\177\337\372\341\\\224\346?O\231\204\202Ou\370?\276\306!d\'\030\356\277\177\337\372\341\\\224\346?\0376\002\322\231\021\364?\276\306!d\'\030\356\277\374\234\233\010*\017\276\277\217F\223b\311o\363\277\276\306!d\'\030\356\277\177\337\372\341\\\224\346?O\231\204\202Ou\370??2\354\001\343\231\333?_\000\035\003\274P\345\277\337\245\377B\310[\357?\000K\305\177\030\026\304?\0376\002\322\231\021\364?\000K\305\177\030\026\304?\376s0D\241\022\331\277?2\354\001\343\231\333?\000K\305\177\030\026\304?\0376\002\322\231\021\364?\277\251\025\023\177\323\367\277\217F\223b\311o\363\277\277\251\025\023\177\323\367\277O\231\204\202Ou\370?\376s0D\241\022\331\277O\231\204\202Ou\370?\217F\223b\311o\363\277\217F\223b\311o\363\277\000K\305\177\030\026\304?\337\245\377B\310[\357?\376s0D\241\022\331\277\376s0D\241\022\331\277?2\354\001\343\231\333?\276\306!d\'\030\356\277\0376\002\322\231\021\364?\217F\223b\311o\363\277\337\245\377B\310[\357?\0376\002\322\231\021\364??2\354\001\343\231\333?_\000\035\003\274P\345\277\276\306!d\'\030\356\277\217F\223b\311o\363\277\376s0D\241\022\331\277\376s0D\241\022\331\277\376s0D\241\022\331\277?2\354\001\343\231\333?O\231\204\202Ou\370?\277\251\025\023\177\323\367\277\217F\223b\311o\363\277\217F\223b\311o\363\277O\231\204\202Ou\370?O\231\204\202Ou\370?\277\251\025\023\177\323\367\277?2\354\001\343\231\333?_\000\035\003\274P\345\277\177\337\372\341\\\224\346?\277\251\025\023\177\323\367\277\337\245\377B\310[\357?\217F\223b\311o\363\277O\231\204\202Ou\370?O\231\204\202Ou\370?\277\251\025\023\177\323\367\277\217F\223b\311o\363\277O\231\204\202Ou\370?\376s0D\241\022\331\277\337\245\377B\310[\357?O\231\204\202Ou\370?\0376\002\322\231\021\364?\177\337\372\341\\\224\346?\276\306!d\'\030\356\277\217F\223b\311o\363\277O\231\204\202Ou\370?\277\251\025\023\177\323\367\277\217F\223b\311o\363\277?2\354\001\343\231\333?\0376\002\322\231\021\364?\217F\223b\311o\363\277\374\234\233\010*\017\276\277\374\234\233\010*\017\276\277\337\245\377B\310[\357?O\231\204\202Ou\370?\277\251\025\023\177\323\367\277\277\251\025\023\177\323\367\277O\231\204\202Ou\370?\277\251\025\023\177\323\367\277\0376\002\322\231\021\364?\000K\305\177\030\026\304?\337\245\377B\310[\357?\337\245\377B\310[\357?\217F\223b\311o\363\277\0376\002\322\231\021\364?\0376\002\322\231\021\364?\277\251\025\023\177\323\367\277\0376\002\322\231\021\364?\277\251\025\023\177\323\367\277\376s0D\241\022\331\277O\231\204\202Ou\370?\276\306!d\'\030\356\277?2\354\001\343\231\333?\177\337\372\341\\\224\346?\337\245\377B\310[\357?\177\337\372\341\\\224\346?O\231\204\202Ou\370?\277\251\025\023\177\323\367\277\177\337\372\341\\\224\346?\374\234\233\010*\017\276\277O\231\204\202Ou\370?\337\245\377B\310[\357?\337\245\377B\310[\357?\376s0D\241\022\331\277\277\251\025\023\177\323\367\277\000K\305\177\030\026\304?\277\251\025\023\177\323\367\277O\231\204\202Ou\370??2\354\001\343\231\333?\374\234\233\010*\017\276\277?2\354\001\343\231\333?\276\306!d\'\030\356\277\376s0D\241\022\331\277\0376\002\322\231\021\364?\374\234\233\010*\017\276\277\276\306!d\'\030\356\277\217F\223b\311o\363\277\217F\223b\311o\363\277O\231\204\202Ou\370?\374\234\233\010*\017\276\277?2\354\001\343\231\333?O\231\204\202Ou\370??2\354\001\343\231\333?\337\245\377B\310[\357?\374\234\233\010*\017\276\277\217F\223b\311o\363\277\276\306!d\'\030\356\277\374\234\233\010*\017\276\277\374\234\233\010*\017\276\277\217F\223b\311o\363\277\276\306!d\'\030\356\277\177\337\372\341\\\224\346?\217F\223b\311o\363\277?2\354\001\343\231\333?\177\337\372\341\\\224\346?\217F\223b\311o\363\277\217F\223b\311o\363\277?2\354\001\343\231\333?\376s0D\241\022\331\277\277\251\025\023\177\323\367\277\217F\223b\311o\363\277\337\245\377B\310[\357?\374\234\233\010*\017\276\277\277\251\025\023\177\323\367\277\177\337\372\341\\\224\346?\376s0D\241\022\331\277?2\354\001\343\231\333?\337\245\377B\310[\357??2\354\001\343\231\333?\374\234\233\010*\017\276\277\376s0D\241\022\331\277\337\245\377B\310[\357?\000K\305\177\030\026\304??2\354\001\343\231\333?O\231\204\202Ou\370?\0376\002\322\231\021\364??2\354\001\343\231\333?\177\337\372\341\\\224\346?O\231\204\202Ou\370?\337\245\377B\310[\357?O\231\204\202Ou\370?\337\245\377B\310[\357??2\354\001\343\231\333?\277\251\025\023\177\323\367\277\0376\002\322\231\021\364?O\231\204\202Ou\370?\376s0D\241\022\331\277\374\234\233\010*\017\276\277\376s0D\241\022\331\277\277\251\025\023\177\323\367\277\337\245\377B\310[\357?\374\234\233\010*\017\276\277\374\234\233\010*\017\276\277\374\234\233\010*\017\276\277\276\306!d\'\030\356\277\277\251\025\023\177\323\367\277\000K\305\177\030\026\304??2\354\001\343\231\333?\337\245\377B\310[\357??2\354\001\343\231\333?\276\306!d\'\030\356\277\277\251\025\023\177\323\367\277?2\354\001\343\231\333??2\354\001\343\231\333?\177\337\372\341\\\224\346?\177\337\372\341\\\224\346?_\000\035\003\274P\345\277\277\251\025\023\177\323\367\277\0376\002\322\231\021\364?\277\251\025\023\177\323\367\277\000K\305\177\030\026\304?\337\245\377B\310[\357?\000K\305\177\030\026\304?\374\234\233\010*\017\276\277\217F\223b\311o\363\277\177\337\372\341\\\224\346??2\354\001\343\231\333?\217F\223b\311o\363\277\0376\002\322\231\021\364?\337\245\377B\310[\357?\177\337\372\341\\\224\346?\0376\002\322\231\021\364?_\000\035\003\274P\345\277\376s0D\241\022\331\277\000K\305\177\030\026\304?\276\306!d\'\030\356\277\217F\223b\311o\363\277\277\251\025\023\177\323\367\277\276\306!d\'\030\356\277\0376\002\322\231\021\364?\217F\223b\311o\363\277\276\306!d\'\030\356\277O\231\204\202Ou\370?\000K\305\177\030\026\304?\276\306!d\'\030\356\277\0376\002\322\231\021\364?\276\306!d\'\030\356\277\277\251\025\023\177\323\367\277\217F\223b\311o\363\277\276\306!d\'\030\356\277\277\251\025\023\177\323\367\277\0376\002\322\231\021\364?O\231\204\202Ou\370?\0376\002\322\231\021\364??2\354\001\343\231\333?\276\306!d\'\030\356\277\337\245\377B\310[\357?O\231\204\202Ou\370?\217F\223b\311o\363\277?2\354\001\343\231\333?\337\245\377B\310[\357?\374\234\233\010*\017\276\277\277\251\025\023\177\323\367\277\337\245\377B\310[\357?\000K\305\177\030\026\304?\276\306!d\'\030\356\277\177\337\372\341\\\224\346?\374\234\233\010*\017\276\277\177\337\372\341\\\224\346?O\231\204\202Ou\370?\276\306!d\'\030\356\277\0376\002\322\231\021\364?\276\306!d\'\030\356\277?2\354\001\343\231\333?\0376\002\322\231\021\364?\177\337\372\341\\\224\346?\376s0D\241\022\331\277\0376\002\322\231\021\364?\276\306!d\'\030\356\277\376s0D\241\022\331\277\374\234\233\010*\017\276\277O\231\204\202Ou\370?\376s0D\241\022\331\277\277\251\025\023\177\323\367\277\276\306!d\'\030\356\277\337\245\377B\310[\357?\0376\002\322\231\021\364?\277\251\025\023\177\323\367\277\277\251\025\023\177\323\367\277\217F\223b\311o\363\277O\231\204\202Ou\370?\177\337\372\341\\\224\346?\177\337\372\341\\\224\346?\337\245\377B\310[\357?\177\337\372\341\\\224\346?\376s0D\241\022\331\277O\231\204\202Ou\370?\217F\223b\311o\363\277O\231\204\202Ou\370?\000K\305\177\030\026\304?\337\245\377B\310[\357?\177\337\372\341\\\224\346?O\231\204\202Ou\370?_\000\035\003\274P\345\277\337\245\377B\310[\357?\0376\002\322\231\021\364?\337\245\377B\310[\357?\000K\305\177\030\026\304?O\231\204\202Ou\370?\0376\002\322\231\021\364?\276\306!d\'\030\356\277\374\234\233\010*\017\276\277\276\306!d\'\030\356\277\276\306!d\'\030\356\277\376s0D\241\022\331\277\276\306!d\'\030\356\277\217F\223b\311o\363\277\0376\002\322\231\021\364?\177\337\372\341\\\224\346??2\354\001\343\231\333?\177\337\372\341\\\224\346?\0376\002\322\231\021\364?\217F\223b\311o\363\277\217F\223b\311o\363\277\277\251\025\023\177\323\367\277?2\354\001\343\231\333?\374\234\233\010*\017\276\277\374\234\233\010*\017\276\277\374\234\233\010*\017\276\277\276\306!d\'\030\356\277\337\245\377B\310[\357?\277\251\025\023\177\323\367\277\376s0D\241\022\331\277\276\306!d\'\030\356\277O\231\204\202Ou\370?\277\251\025\023\177\323\367\277?2\354\001\343\231\333?\277\251\025\023\177\323\367\277\374\234\233\010*\017\276\277\217F\223b\311o\363\277\277\251\025\023\177\323\367\277\376s0D\241\022\331\277\376s0D\241\022\331\277\374\234\233\010*\017\276\277\217F\223b\311o\363\277\000K\305\177\030\026\304?\337\245\377B\310[\357?\177\337\372\341\\\224\346?\277\251\025\023\177\323\367\277\276\306!d\'\030\356\277\217F\223b\311o\363\277\217F\223b\311o\363\277\0376\002\322\231\021\364?\277\251\025\023\177\323\367\277?2\354\001\343\231\333?_\000\035\003\274P\345\277\376s0D\241\022\331\277\217F\223b\311o\363\277\0376\002\322\231\021\364?\276\306!d\'\030\356\277\217F\223b\311o\363\277\177\337\372\341\\\224\346?\277\251\025\023\177\323\367\277\0376\002\322\231\021\364?\217F\223b\311o\363\277\276\306!d\'\030\356\277\337\245\377B\310[\357?O\231\204\202Ou\370??2\354\001\343\231\333?\177\337\372\341\\\224\346?\217F\223b\311o\363\277\217F\223b\311o\363\277\217F\223b\311o\363\277\0376\002\322\231\021\364?\276\306!d\'\030\356\277\276\306!d\'\030\356\277\277\251\025\023\177\323\367\277\337\245\377B\310[\357??2\354\001\343\231\333?\0376\002\322\231\021\364?_\000\035\003\274P\345\277\277\251\025\023\177\323\367\277\337\245\377B\310[\357??2\354\001\343\231\333?\337\245\377B\310[\357??2\354\001\343\231\333?\337\245\377B\310[\357?\277\251\025\023\177\323\367\277?2\354\001\343\231\333?\217F\223b\311o\363\277\217F\223b\311o\363\277\276\306!d\'\030\356\277\374\234\233\010*\017\276\277\0376\002\322\231\021\364??2\354\001\343\231\333??2\354\001\343\231\333?\000K\305\177\030\026\304?\337\245\377B\310[\357?\177\337\372\341\\\224\346?\374\234\233\010*\017\276\277\217F\223b\311o\363\277\374\234\233\010*\017\276\277\276\306!d\'\030\356\277\337\245\377B\310[\357?\276\306!d\'\030\356\277?2\354\001\343\231\333?\0376\002\322\231\021\364?\276\306!d\'\030\356\277O\231\204\202Ou\370?\276\306!d\'\030\356\277\177\337\372\341\\\224\346?\217F\223b\311o\363\277\277\251\025\023\177\323\367\277\277\251\025\023\177\323\367\277\177\337\372\341\\\224\346?\177\337\372\341\\\224\346?\374\234\233\010*\017\276\277\277\251\025\023\177\323\367\277\374\234\233\010*\017\276\277?2\354\001\343\231\333?O\231\204\202Ou\370?\177\337\372\341\\\224\346?\217F\223b\311o\363\277\177\337\372\341\\\224\346?_\000\035\003\274P\345\277\277\251\025\023\177\323\367\277\376s0D\241\022\331\277\000K\305\177\030\026\304??2\354\001\343\231\333?\374\234\233\010*\017\276\277O\231\204\202Ou\370?\374\234\233\010*\017\276\277?2\354\001\343\231\333?\0376\002\322\231\021\364??2\354\001\343\231\333?\217F\223b\311o\363\277\337\245\377B\310[\357?\217F\223b\311o\363\277\217F\223b\311o\363\277\0376\002\322\231\021\364?\276\306!d\'\030\356\277\376s0D\241\022\331\277?2\354\001\343\231\333?\217F\223b\311o\363\277\376s0D\241\022\331\277\277\251\025\023\177\323\367\277\276\306!d\'\030\356\277\277\251\025\023\177\323\367\277\277\251\025\023\177\323\367\277\277\251\025\023\177\323\367\277\000K\305\177\030\026\304??2\354\001\343\231\333?\277\251\025\023\177\323\367\277\276\306!d\'\030\356\277O\231\204\202Ou\370?\000K\305\177\030\026\304?\217F\223b\311o\363\277\337\245\377B\310[\357??2\354\001\343\231\333?\337\245\377B\310[\357?\276\306!d\'\030\356\277\177\337\372\341\\\224\346?\177\337\372\341\\\224\346?\000K\305\177\030\026\304?\277\251\025\023\177\323\367\277\276\306!d\'\030\356\277\374\234\233\010*\017\276\277\000K\305\177\030\026\304?O\231\204\202Ou\370?O\231\204\202Ou\370?\217F\223b\311o\363\277?2\354\001\343\231\333?\000K\305\177\030\026\304?\374\234\233\010*\017\276\277\0376\002\322\231\021\364?\177\337\372\341\\\224\346?\217F\223b\311o\363\277\276\306!d\'\030\356\277\0376\002\322\231\021\364?\277\251\025\023\177\323\367\277\217F\223b\311o\363\277\177\337\372\341\\\224\346?\277\251\025\023\177\323\367\277\000K\305\177\030\026\304?\217F\223b\311o\363\277?2\354\001\343\231\333?\374\234\233\010*\017\276\277\277\251\025\023\177\323\367\277\177\337\372\341\\\224\346?\217F\223b\311o\363\277O\231\204\202Ou\370?\217F\223b\311o\363\277?2\354\001\343\231\333?\177\337\372\341\\\224\346?\277\251\025\023\177\323\367\277\376s0D\241\022\331\277O\231\204\202Ou\370?\337\245\377B\310[\357?\376s0D\241\022\331\277\277\251\025\023\177\323\367\277\277\251\025\023\177\323\367\277\337\245\377B\310[\357?\374\234\233\010*\017\276\277\277\251\025\023\177\323\367\277\217F\223b\311o\363\277\337\245\377B\310[\357?\337\245\377B\310[\357?\000K\305\177\030\026\304??2\354\001\343\231\333?\374\234\233\010*\017\276\277_\000\035\003\274P\345\277O\231\204\202Ou\370?\276\306!d\'\030\356\277\000K\305\177\030\026\304??2\354\001\343\231\333?\000K\305\177\030\026\304?\177\337\372\341\\\224\346?\277\251\025\023\177\323\367\277O\231\204\202Ou\370?\217F\223b\311o\363\277\374\234\233\010*\017\276\277O\231\204\202Ou\370??2\354\001\343\231\333?_\000\035\003\274P\345\277\217F\223b\311o\363\277\277\251\025\023\177\323\367\277\276\306!d\'\030\356\277\276\306!d\'\030\356\277\177\337\372\341\\\224\346?O\231\204\202Ou\370??2\354\001\343\231\333?\337\245\377B\310[\357?\276\306!d\'\030\356\277\276\306!d\'\030\356\277\337\245\377B\310[\357??2\354\001\343\231\333??2\354\001\343\231\333?\177\337\372\341\\\224\346?\177\337\372\341\\\224\346?\276\306!d\'\030\356\277\000K\305\177\030\026\304?\376s0D\241\022\331\277\177\337\372\341\\\224\346?O\231\204\202Ou\370?\374\234\233\010*\017\276\277\217F\223b\311o\363\277?2\354\001\343\231\333?\177\337\372\341\\\224\346?\376s0D\241\022\331\277\276\306!d\'\030\356\277\337\245\377B\310[\357?\276\306!d\'\030\356\277\217F\223b\311o\363\277O\231\204\202Ou\370??2\354\001\343\231\333?\217F\223b\311o\363\277\337\245\377B\310[\357?\0376\002\322\231\021\364?\277\251\025\023\177\323\367\277\0376\002\322\231\021\364?\337\245\377B\310[\357?_\000\035\003\274P\345\277\217F\223b\311o\363\277\276\306!d\'\030\356\277\217F\223b\311o\363\277\217F\223b\311o\363\277\374\234\233\010*\017\276\277\276\306!d\'\030\356\277\276\306!d\'\030\356\277\217F\223b\311o\363\277\277\251\025\023\177\323\367\277\000K\305\177\030\026\304?\177\337\372\341\\\224\346??2\354\001\343\231\333?\276\306!d\'\030\356\277\376s0D\241\022\331\277\0376\002\322\231\021\364?\000K\305\177\030\026\304?O\231\204\202Ou\370?\374\234\233\010*\017\276\277\000K\305\177\030\026\304?\000K\305\177\030\026\304?\177\337\372\341\\\224\346?\374\234\233\010*\017\276\277O\231\204\202Ou\370?\177\337\372\341\\\224\346?O\231\204\202Ou\370?\000K\305\177\030\026\304?\277\251\025\023\177\323\367\277\0376\002\322\231\021\364??2\354\001\343\231\333?\337\245\377B\310[\357?\177\337\372\341\\\224\346?\276\306!d\'\030\356\277O\231\204\202Ou\370?\177\337\372\341\\\224\346?\374\234\233\010*\017\276\277\0376\002\322\231\021\364?\277\251\025\023\177\323\367\277\277\251\025\023\177\323\367\277\177\337\372\341\\\224\346?\217F\223b\311o\363\277\000K\305\177\030\026\304?O\231\204\202Ou\370?_\000\035\003\274P\345\277\337\245\377B\310[\357?\276\306!d\'\030\356\277?2\354\001\343\231\333?\000K\305\177\030\026\304??2\354\001\343\231\333?\337\245\377B\310[\357??2\354\001\343\231\333?\000K\305\177\030\026\304?O\231\204\202Ou\370?\217F\223b\311o\363\277\217F\223b\311o\363\277\177\337\372\341\\\224\346??2\354\001\343\231\333?\0376\002\322\231\021\364??2\354\001\343\231\333?\217F\223b\311o\363\277\374\234\233\010*\017\276\277O\231\204\202Ou\370?\000K\305\177\030\026\304?\000K\305\177\030\026\304?\000K\305\177\030\026\304?O\231\204\202Ou\370??2\354\001\343\231\333?\374\234\233\010*\017\276\277_\000\035\003\274P\345\277?2\354\001\343\231\333?O\231\204\202Ou\370?\0376\002\322\231\021\364?\000K\305\177\030\026\304?\277\251\025\023\177\323\367\277\177\337\372\341\\\224\346?O\231\204\202Ou\370?\276\306!d\'\030\356\277\277\251\025\023\177\323\367\277O\231\204\202Ou\370?\337\245\377B\310[\357?\376s0D\241\022\331\277?2\354\001\343\231\333?\337\245\377B\310[\357??2\354\001\343\231\333??2\354\001\343\231\333?\000K\305\177\030\026\304?\277\251\025\023\177\323\367\277?2\354\001\343\231\333?\0376\002\322\231\021\364?\276\306!d\'\030\356\277\277\251\025\023\177\323\367\277\177\337\372\341\\\224\346?\277\251\025\023\177\323\367\277\276\306!d\'\030\356\277\217F\223b\311o\363\277\0376\002\322\231\021\364?\276\306!d\'\030\356\277\337\245\377B\310[\357?\000K\305\177\030\026\304??2\354\001\343\231\333?\277\251\025\023\177\323\367\277"
      }
    }
  }
}
node {
  name: "tensors/component_6"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 750
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 750
          }
        }
        tensor_content: "\363\277M\n5\021\340\277\250\260\246\352\222\273\346?(\177J\277}f\336\277\377\003\024\250\226\204\351\277\231\371j?\021e\321\277\037Q\371\237\006\321\347?a\353\324\227E\211\006@\215\306\361\014\010\004\212?\014b\037HJ\367\344\277#\000\242\0370\200\340\277\220ZFu\216\221\360?\264\3613\324IR\317\277\325\217\253\n)\310\344?\022\204\002\027\373\260\351\277\300Aj\001\225\017\270?\202\200JJ&^\341\277(\177J\277}f\336\277\256\341v\035T\031\344\277\347N\006\240A\235\342?; L\252\255\267\340\277; L\252\255\267\340\277\360\020\245\212\013b\347?u\032 \300\333l\335?\014\376P?\233\314\333\277C\022\r\007\353v\345\277\371\352CeC\213\361?; L\252\255\267\340\277\321\373]?\326\230\326\277\024yfX=\330\247?a\226\342\352G\343\323?\022\373\014\352\351\334\324\277C3B\025N\315\354?4\033q\025\310(\337?\313\252\357OH\034\361?#\000\242\0370\200\340\277\355\2148\305\217\030\366?\217\374\256\224\302T\330\277\325\323\302\2500:\272\277x:\234\352\020Z\360?\323#\371\325{\367\302?\227w\304\255d`\244?\374\355\236)\254\246\306\277\321\373]?\326\230\326\277J\202\246\260\220\207\345\277y\013\177\"\303\300\006@\212\261w\315\027\306\343\277\231\276M\177\214\031\335\277\256\242\n\367\237p\346\277\310\330)\000\010\206\331?\377\265]\315\241-\356\277\367\021SKY\305\344\277^\002\225\037\365\263\345\277X\277\236\324x\325\336\277\374r\242@\276\'\347\277\362\260\003V\364b\342\277X\277\236\324x\325\336\277\357\360\342~]\226\315\277\372\242\304\2621\"\347\277\010\302c,1\354\344\277\363\277M\n5\021\340\2771t\347\1775\370\356?\335\275\374)\240]\333\277)\"\205\356\3409\345\277S@\3664+\357\340\277\220ZFu\216\221\360?\202\374:\325\332\036\365?6y\302\024\033\207\320\277\022\204\002\027\373\260\351\277\037lTT\335P\302\277:>\245T\226;\334\277\351\362\263\321Y\373\346\277\3109\277T\014\324\321\277\237\302\327\243TO\346\277\335\275\374)\240]\333\277\341\204\202J\036\270\022@\210\377\362\351sD\337\277\250\260\246\352\222\273\346?O\327\207U/\016\326?1S\262q\322\241\347\277\274\242\377U\231]\300?\210\242-\031\327\027\346\277\'\023;:\240\213\347\277U\321g\234\003L\343\277\321\322\tG\334\303\346\277p\202\203\216Y\340\345\277\300D\"U\301\273\t@2\244\241\000r\325\303?\220ZFu\216\221\360?\371\3410\331\345\312\344\277\n\330\330\252\033\312\327?\217\203\232m\210f\360\277\205\021\274\261\376\272\343\277\357\332\356\237\204o\361?\"s\177\036\207\200\347\277\231\276M\177\214\031\335\277\231\240\364\324\243\225\341\2771\020T5\037\246\345?\212r\013\247c\035\346\277\3053\210,)\346\360\277\013\340\367\224\262H\340\2775\3556e\010\277\366?\231\240\364\324\243\225\341\277\326\2611\211\251w\344\277)\335\341\237I\243\366?r{\265\024\340\272\325\277~\241\"\010Y\252\343\277\321\021vm\220l\344\277\336\243\362\345\3466\351\277R\263\3233\202\357\347\277\217\374\256\224\302T\330\277\363\277M\n5\021\340\277\3053\210,)\346\360\277S@\3664+\357\340\277pC\027h\2457\350\277\364y\023j\007C\322\277\231\240\364\324\243\225\341\277\277<\003\252\275\303\330\277X\216\t`PP\341?\025\025t~\323\r\354\277\031o\230\251\216@\311\277(\177J\277}f\336\277[nGT\242\204\307\277\3152N+\303\270\346\277\371>\366\251\202\367\335\277DQ.\235\202y\215\277\226\202`l\"9\346\277\310\032\203\222\225 \005@\256\341v\035T\031\344\277\026\320\320/<w\375?u\321\212\232\330\t\002@\221!\021w\275\326\343\277\021.\013\300\327\251\340?\240}4U\275\270\367?P%\233\200To\306?p\202\203\216Y\340\345\277\036\275\253\324\263\241\331\2775\3556e\010\277\366?\230(\345W\217\010\000@\031o\230\251\216@\311\277\377\201\354\364\376\325\344\277\274\236\271QM\245\257\277\321\373]?\326\230\326\277\035\360\251\252\241n\345?\016|\252\255\356\307\256?\261\300\236_!\315\341\277\343\320\320\002\251A\342\277\266\224\313S\335/\353\277\353\001\376\205\232\251\344\277\242\321!X\225\375\343\277\244\024\335\344x\003\353\277\267?G\377n\263\337\277\216\014\220\232\231:\365?\026\232w\225\345\216\334?AKB\005\2741\362?0|\006j\314v\327\277\371>\366\251\202\367\335\277\000<\262T\321\007\327\2776y\302\024\033\207\320\277v\017\003\3402\352\343?\014\241\213n\376\237\342\277h\251\330U\350\370\317?\036\275\253\324\263\241\331\277j~\371i\221\252\334\277\005\255\342O\rP\366?\253\322,i\023k\346\277S@\3664+\357\340\277\017&\354\325@+\310?\365\002\t\227\030\027\347\277=\355M\324\277\352\304\277a\226\342\352G\343\323??\235\027\247t-\254\277\342\202\032(\264\352\346\277P%\233\200To\306?\255}\250\024\245\356\332\277\260r\350\204,v\346\277ytD\353\226\237\352\277\274\236\271QM\245\257\2772\201\323\304JIx?N\375\377\351\256\020\332\277\037\033C\265\177\336\361?\336l\245\251\311\014\304\277\300Aj\001\225\017\270?ss\226*I<\355?\223\361\356\004J\334\343\277\347+\351\317*\266\363?Zk\354\2179i\362?#\000\242\0370\200\340\277\022\303n=\257Y\347\277(\177J\277}f\336\277\325\360\235\257] \342\277O\327\207U/\016\326?\273\301\251p\237:\344\277\3501 \370\r\244\344\277(\177J\277}f\336\277\245\344\272r\005\t\353\277\3360\025\347\2176\342\277\306>&\254\343\037\261?\210\242-\031\327\027\346\277\032v\"\003\214\350\240?\250\260\246\352\222\273\346?\236\362\371\025\310I\346\277\277<\003\252\275\303\330\277\2472qM\372_\346\277\343\272\270\324\356m\324\277\n9n\377\037\030\320\277\237\226L\345?4\177\277(\177J\277}f\336\277\231\276M\177\214\031\335\277\316\320~S\177J\263\277\336l\245\251\311\014\304\277N[\227\312zM\362?\036\275\253\324\263\241\331\277\310\330)\000\010\206\331?\3109\277T\014\324\321\277J\202\246\260\220\207\345\277\n\330\330\252\033\312\327??\235\027\247t-\254\277\021\002\333cc\002\345\277\025\242\226\177|\r\345\277\311\376\241\224\207\210\335\277\357\360\342~]\226\315\277\035\360\251\252\241n\345?\267?G\377n\263\337\277\371>\366\251\202\367\335\277\2741\211:Q\260\002@\260!4u\222\224\002@\323#\371\325{\367\302?\252\250\207\000\374<\316?P%\233\200To\306?\322\325\345\252V\226\322?\347aBj\201\236\344\277\007\366\324\004\324C\356\277\376\313d2\220h\361\2775fK\214B\255\356\277\353\2476\253\017\201\314?\014\376P?\233\314\333\277\037\2273@4\237\325?\341\355\266\252\334:\340?\037Q\371\237\006\321\347?DQ.\235\202y\215\277B;a\377\344K\325\277z\302\372\305\213\366\345\277\337\361\250\300\333\215\344\277\263zd\277\363\376\323\277g\261\367?\177w\350?~\241\"\010Y\252\343\277\341\000\363t\034<\342\277Q\241\213J\234\266\001@\3503\210\032xq\020@#\000\242\0370\200\340\277kU\245q\227\325\354\277\201\213Va\003H\360\277X\322 \376W\302\266\2779\021\002\366l\t\343\277^\002\225\037\365\263\345\277\202\200JJ&^\341\277^\314;\205\236\313\364?\275\320\363$\340\350\341\277\231\240\364\324\243\225\341\277X\277\236\324x\325\336\277\0041\362\304X\217\342\2770|\006j\314v\327\277\267?G\377n\263\337\277)\343\030\310,\221\347\277\221+)\255@\370\006@6y\302\024\033\207\320\277\234+\333\243r\254\225\277k`\240\277\250&\341\2770\222\036\230\206J\345\277\300Aj\001\225\017\270?\304\263j\315\334\371\350\277\000<\262T\321\007\327\277\277\232\232\212\211\000\361?\004\333\034\000\315\271\336?[nGT\242\204\307\277\037\2273@4\237\325?\025\242\226\177|\r\345\277.\203\324\343E\234\347\277\206\324\023\376\034\366\273\277\300\353\253)\347r\301\277\300\353\253)\347r\301\277%t\320O\021S\010@\200\256\204\372\345\307\371?j\334\220J]\347\364?\255}\250\024\245\356\332\277\254\333?\365p+\363?; L\252\255\267\340\277d\343\001t\246\002\360\277\300ae\214\270E\344\277\330\201\017\0276}\344\277j~\371i\221\252\334\277\327r\305b\365\316\346\277r{\265\024\340\272\325\277\226\361KUz\346\350?u\032 \300\333l\335?\371\3410\331\345\312\344\277N[\227\312zM\362?\202\374:\325\332\036\365?L\305a=t\215\354\277\357\360\342~]\226\315\277[nGT\242\204\307\277\366q\364\177p\304\351?k`\240\277\250&\341\277\025\025t~\323\r\354\277\324\232\310\352\321J\336?f\201x}\333r\343\277\267?G\377n\263\337\277\024\322\270\361\357\007\345\277\216Q3\3510\321\343\277\024yfX=\330\247?\377K\223Z\250\355\363?X(\337\325\005_\315?\366q\364\177p\304\351?\261\300\236_!\315\341\277ss\226*I<\355?\276o\001\200\253\220\344?\202\200JJ&^\341\277\001\023^\\\3272\347\277\206\322O\213J\022\346\2774\033q\025\310(\337?\217\374\256\224\302T\330\277\300\353\253)\347r\301\277A\375\213*\307\332\366?\317\275\210j\270\'\370?Q\362?Z6\230\345\277Zk\354\2179i\362?E\325dS\t\262\275\277\325\217\253\n)\310\344?\036\275\253\324\263\241\331\277r{\265\024\340\272\325\277(\177J\277}f\336\277\252\250\207\000\374<\316?\335\275\374)\240]\333\277\335\275\374)\240]\333\277\332\304\312\243\031\203\353\277x:\234\352\020Z\360?\324\242\347\324h\311\346\277<\242s]Ef\345\277\237\226L\345?4\177\277$\272g\177\002\262\322\277\034\256\320\267]\227\025@\240\356\007\000\311\366\341?k`\240\277\250&\341\277\303\362\326\363\220\242\346\277\226\202`l\"9\346\277\267?G\377n\263\337\277\340.-%\334\245\372?\357|W\277\2702\331\277\221!\021w\275\326\343\277\277<\003\252\275\303\330\277\370\030~\025\003\365\331?\347N\006\240A\235\342?\n9n\377\037\030\320\277\3503\210\032xq\020@\237\302\327\243TO\346\277; L\252\255\267\340\277\373C]\001ZC\275?:\030-\300\0269\330?\014\376P?\233\314\333\277X\277\236\324x\325\336\277)\343\030\310,\221\347\277\202\374:\325\332\036\365?#\000\242\0370\200\340\277(\177J\277}f\336\277\300Aj\001\225\017\270?; L\252\255\267\340\277\221z\010\003\026P\253?\274\236\271QM\245\257\277\214\321\317\250k\006\265\277\032v\"\003\214\350\240?\0131O\025\211\231\347?\241\273\t*\333)\326\277\343\312\231\332\305S\361?_Oh\342[\333\017@\031o\230\251\216@\311\277\336l\245\251\311\014\304\277\202\200JJ&^\341\277X\277\236\324x\325\336\277^0\317\317\264\035\376?C\025\351jeI\321?\357|W\277\2702\331\277S@\3664+\357\340\277\217\374\256\224\302T\330\277{\243P\253\205\031\302?\342\202\032(\264\352\346\277p\213\226\032\267\240\362?\335\275\374)\240]\333\277\333\022\201~\016\332\346\277\310A\336\377\017\314\002@\344\221d\334\364\230\344\277N\375\377\351\256\020\332\277\022\265u\272\370}\n@; L\252\255\267\340\277\210\377\362\351sD\337\277P%\233\200To\306?os9\332\0302\350\277\363\277M\n5\021\340\277E\342\352\224w|\345\277\354\302\221_\346\000\347\277X\277\236\324x\325\336\277\366P\277q\rn\342\277;\341\337\203\371\016\343\277\241\273\t*\333)\326\277\327\300{=\352%\342\277\373\360z\215&y\342\277)\335\341\237I\243\366?\305\001!\250\321P\344\2774\033q\025\310(\337?\272\356\357~\230b\310\277k\342\307r@\325\345\277S@\3664+\357\340\277}=T\377\251\177\332\277\036\275\253\324\263\241\331\277\327\272D\025\0078\361?_\021\337\3235b\343\277iX\201\325\021\250\330?\317\002,\271O\276\346\277\356S\003\307\276]\351\277\255+\357Z\345\253\360\277_\021\337\3235b\343\277\346\240\256\2205G\342\277\014\376P?\233\314\333\277; L\252\255\267\340\277$\272g\177\002\262\322\277\037lTT\335P\302\277\231\240\364\324\243\225\341\277\250u,\332\335e\355\277)\335\341\237I\243\366?\231\371j?\021e\321\277\272D\256VF\377\276?\265\3237z\221\330\350\277\202\200JJ&^\341\277\274\376-\325\237R\372?\333\022\201~\016\332\346\277\311\376\241\224\207\210\335\277;\341\337\203\371\016\343\277\371>\366\251\202\367\335\277)N\265JU\341\340?\2012\224o1\007\346\277Qn0\345\352X\371?\3109\277T\014\324\321\277`\274Z\177\307\345\327\277h\240\332\343\272\233\021@\344\262\231\352W\357\353?\333\033\224\nl\232\363?\314\222\357_\332\267\353?%\262H\225k3\352?:>\245T\226;\334\277\324\232\310\352\321J\336?\267?G\377n\263\337\277\207:\020\252\370\217\323\277\020\363\220\257\"T\347\277j~\371i\221\252\334\277\343\272\270\324\356m\324\277\354\302\221_\346\000\347\277\014\376P?\233\314\333\277:>\245T\226;\334\277r{\265\024\340\272\325\277X\322 \376W\302\266\277\234m\366\376\265\310\305\277\357|W\277\2702\331\277\026\232w\225\345\216\334?\335\275\374)\240]\333\277\335\275\374)\240]\333\277p\202\203\216Y\340\345\277m\022G5\344\331\352?g\261\367?\177w\350?\n\005\037\271\024\362\353\277j~\371i\221\252\334\277\035\0220)\"\036\345\277\315&=+-\347\311?$\202\311\322\307.\345\277\374\322Cu\325&\354?\300\026\213\025>\301\324?G\3614I\270*\343\277(\177J\277}f\336\277\215B\3514\360\"\346\277\n\222A\272\275\361\344\277\272\356\357~\230b\310\277G\3614I\270*\343\277\031T=\365\267\300\356?@\257\325O\322\203\373?\313\260&x+\n\342\277\227C\364En\220\350\277\210\377\362\351sD\337\277\000\2216\251?\204\342\277\227w\304\255d`\244?\032\201\276\301I\301\342\277S\001\212\016wF\343\2770|\006j\314v\327\277\214\'\216\200\031\243\313?\267?G\377n\263\337\277E\325dS\t\262\275\277U\264$e\014\302\010@=$\233\020\335\024\352\277-\001\2550\256\355\342\277\251\303\342\264\322\274\350\277|\233\353\337u\274\362?\214\'\216\200\031\243\313?\323 \300!\321\032\342\277\267?G\377n\263\337\2777q\243*\204\010\350?\270\353\224\272/G\363?\350p\214\036\302L\342\277\374\355\236)\254\246\306\277u\"?\252r\353\345\277J\254\221\372 \224\364?)V\366\306\203\221\356\277j\344/\225\252\242\021@\001\026:\300Q\005\323?\364Au\275\314\277\344\277\274X\344\247\313[\000@\305@\215\316\205\371\341\277\037!z\335b\314\342\277N\375\377\351\256\020\332\277\204J\361\257\317u\360?T\372\273\224\375 \323\277M\r\341\357\205\366\366?\013\340\367\224\262H\340\277\342C\256\001\000B\351\277\226p:Tg\270\314\277S@\3664+\357\340\277\344\221d\334\364\230\344\277\37536\032\n\177\351\277\374\261\016gr\320\344\277\r!\313_\342\275\377?~\241\"\010Y\252\343\277\253\322,i\023k\346\277\371>\366\251\202\367\335\277\214\321\317\250k\006\265\277\226p:Tg\270\314\277\234+\333\243r\254\225\277ss\226*I<\355?6y\302\024\033\207\320\277\3109\277T\014\324\321\277_\021\337\3235b\343\277\262\20129m$\344\277\370\030~\025\003\365\331?N\375\377\351\256\020\332\277_EP\254\330\271\354\277\202\200JJ&^\341\277\214\'\216\200\031\243\313?\226p:Tg\270\314\277\014\376P?\233\314\333\277\325\323\302\2500:\272\277\202\200JJ&^\341\277$\202\311\322\307.\345\277}=T\377\251\177\332\277\344\224@@ok\320?\264\3613\324IR\317\2770|\006j\314v\327\277\013\340\367\224\262H\340\277\371>\366\251\202\367\335\277\207\341\231?\213\300\343\2772\241hL\307\370\342\277\3109\277T\014\324\321\277\347aBj\201\236\344\277\327\272D\025\0078\361?\276o\001\200\253\220\344?e3\302\242\346\033\350\277\025\341\002\2460\266\342\277\310\2301\247\352\305\241\2776y\302\024\033\207\320\277\2052\361\277a\021\353?\270\016\262\212F.\342?\365\000!\325d\206\377?]A\001F\251\\\343\277\210\377\362\351sD\337\277\236\263\215\357\023\241\350\277\021\326\265\250\365m\277\277\000<\262T\321\007\327\277Is\\\374O\331\347\277\341\355\266\252\334:\340?\256\341v\035T\031\344\277N[\227\312zM\362?u\"?\252r\353\345\277Uq\213\251St\316\277\346\240\256\2205G\342\277\312\325M\234\215\263\355\277\322\325\345\252V\226\322?\267?G\377n\263\337\277\231\276M\177\214\031\335\277I\224\221\n\263/\357?:>\245T\226;\334\277$\272g\177\002\262\322\277\016\\\350\037g\t\364?ss\226*I<\355?2\244\241\000r\325\303?\303\320Pu\020\363\346?Q1\254\200\352@\343\277X(\337\325\005_\315?j~\371i\221\252\334\277\3109\277T\014\324\321\277\210\377\362\351sD\337\277\267?G\377n\263\337\277{\003\254\376#:\360\277\311\376\241\224\207\210\335\277h\251\330U\350\370\317?\231\276M\177\214\031\335\277\316\200\004\006\270\017\342\277ss\226*I<\355?\013\340\367\224\262H\340\277\224\346\363\2668\213\357\277\265\022\244\240E\201\346\277\316A\230\337\003g\344\277.\203\324\343E\234\347\277\323#\371\325{\367\302?\204J\361\257\317u\360?\363\277M\n5\021\340\277\236\263\215\357\023\241\350\2772b\374%\023P\345\277\022\265u\272\370}\n@v1\211^\263\231\343\277\333\315\335/wC\370?\231\240\364\324\243\225\341\277kS\233\035L\023\360\277=\355M\324\277\352\304\277\267?G\377n\263\337\277|\233\353\337u\274\362?\377n\260*\277\324\342?X\277\236\324x\325\336\277@\201\233\237\022\032\343\277\231\240\364\324\243\225\341\277\014\376P?\233\314\333\277\263zd\277\363\376\323\277\255}\250\024\245\356\332\277\356\222o\355r\006\347\277fB\014W\'\312\345\277\221z\010\003\026P\253?k`\240\277\250&\341\277\270d\251\341i5\353\277{\243P\253\205\031\302?\361#\341TKc\351\277>\35001\237:\021@\231\371j?\021e\321\277\210\377\362\351sD\337\277\2036\343\325`d\357\277r\221\315B\232\216\343\2779\322\225\317\270`\345\277X\277\236\324x\325\336\277\n\222A\272\275\361\344\277\236\2114M\364j\002@\241D\377V\354\375\352\277N[\227\312zM\362?\325\323\302\2500:\272\277\215B\3514\360\"\346\2777\360\221)q\332\313\277\036\275\253\324\263\241\331\277\244\024\335\344x\003\353\277\321\021vm\220l\344\2776y\302\024\033\207\320\277\363\277M\n5\021\340\277\277<\003\252\275\303\330\277a\264;\2250g\357?\214\'\216\200\031\243\313?\343\320\320\002\251A\342\277`.\037\371#\234\234\277\210\377\362\351sD\337\277X\277\236\324x\325\336\277\373\345\177?\025(\356\277\204J\361\257\317u\360?j~\371i\221\252\334\277\231\240\364\324\243\225\341\277\252\250\207\000\374<\316?2\024FK\036\371\351\277\343\272\270\324\356m\324\277E\325dS\t\262\275\277k\255s\202\017N\013@\371\352CeC\213\361?7\360\221)q\332\313\277J\202\246\260\220\207\345\277\234+\333\243r\254\225\277m\361\021\'\201\203\343\2773\344#\331\252\376\351\277\342\363\355\322\277(\361\277\360bM{\377\013\347\277\371 \235\377\231s\342\277C\323\240\3406\316\347\277I\224\221\n\263/\357?\226\361KUz\346\350?4\237\200\212\023h\373?\347+\351\317*\266\363?\252\250\207\000\374<\316?\026\232w\225\345\216\334?\306>&\254\343\037\261?\240\356\007\000\311\366\341?\351)\'\361r!\025@\371>\366\251\202\367\335\277;\341\337\203\371\016\343\277*\232\323Q\303=\245\277\217F8\233\037\200\357\277; L\252\255\267\340\277\255}\250\024\245\356\332\277}\036\030=3\314\r@\330\201\017\0276}\344\277\325c{\256\264 \351\277\'\324\316\023\354\342\351\277\035F\241\001\305u\356\277\227\214x\242\245Z\t@2\244\241\000r\325\303?\304\263j\315\334\371\350\277v\017\003\3402\352\343?\371>\366\251\202\367\335\277\013\340\367\224\262H\340\277P\244\211\177AA\352\277\226\273\225j\363\363\362?d\\\2052\313\224\021@\346\240\256\2205G\342\277\207:\020\252\370\217\323\277\237\226L\345?4\177\277\016|\252\255\356\307\256?\231\240\364\324\243\225\341\2771\253\200\202J\032\006@\315&=+-\347\311?\226p:Tg\270\314\277\224m\337\217\376\234\367?f\271\026*\026\366\320\277c[\305*\303\227\337?\374\322Cu\325&\354?,\263\366U\271\226\347\277P\2000Y=d\021@\222$J+h\263\304?\364y\023j\007C\322\277X\277\236\324x\325\336\277\302p\257@\371\363\341\277\312d\330\277\240\200\022@\202\374:\325\332\036\365?x:\234\352\020Z\360?0|\006j\314v\327\277?\235\027\247t-\254\277\224\346\363\2668\213\357\277\257\245C\253JM\307?\301\"\371e\004\235\346\277\014\376P?\233\314\333\277=C\014\254m\207\273?|\321Dz\314\244\343\277\232\034\345_XV\365?\371\352CeC\213\361?\021.\013\300\327\251\340?\27108\t\307\335\341\277\020AG\212\027\253\342\277\257\245C\253JM\307?\207\341\231?\213\300\343\277X\277\236\324x\325\336\277\311\376\241\224\207\210\335\277\320\204Sl\347l\353\277\315\317\210\336\n3\020@K\266\027\2113\337\356\277\335\275\374)\240]\333\277\032v\"\003\214\350\240?"
      }
    }
  }
}
node {
  name: "tensors/component_7"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 750
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 750
          }
        }
        tensor_content: "\216\004\267\003\250\271\317\277\243\336\264\315\372\205\321\277K\334s%\365\027\331?\365\024\314X\013\353\224?9\351k5\177\220\314\277\023\246?O\216\301\257\277R\007\336\360\361\230\314?:\016o\272\0203\260\277y\261\300\377\344\272\276?/\377\266\"\\\306\356?\325{iGR\205\341\277\354\365\017}WN\353?rN\257\t\032#\356\277.a\253\323\237\346\305?\362\357B\024j\337\264?\333\331{\327\002\206\327\277>\002\315\235\234\002\360?\247i\t\242x\277\350?\322\236\031\312\r\344\352?z\361+\033\016;\345\277jl\340\321\334\242\341?\030\253\'\212\207,\331?#\220G\226\2436\365?y<\032\253+\345\345?\356j\217\0265\355\354?\203\003=\311\206\234\330?o,?1\242x\354?\307\2071=ST\303?\177\262\236\230\3527\321?3\226\265^\347\202\351?\023v\361l\233h\276?\365\260\303\217\177\035\311?\313&X)\303{\361?\005\312\246\372\306\241\354?\274$s\224\010\033\341\277\244\340\352\001\352z\353?\300\2337,\013\"\304?\240LS\340\323\216\333?;\306\277\372\006Y@\277&\224\272\200Z\216\355?RUPc\363\307\327?\221\342\235j\356x\366?\224\357L#\241b\363?\376J\365\013~}\364?\023]\376q\231\331\304\277(\232y\353\016\274\353?\2667\376|\242\231\313\277^\373$\305&=\342?\211\034\263\256yp\310\277\256\000\334K_T\314?\017\234\273\303I*\216\277\376rI_v\017\347?\233e\302F*B\367\277\363\300~r\246\250h\277\240[U\230 o\322\277\254\303\343\240\020\266\364?\242\004\314j+\265\345?(c*b\242\267\346\277!\002\205%\330\276\336?\271\320W\000%R\363\277I\260\200U\241\006\307?2\316&\004\244\357\347\277\271x&\302w\022\023\300\232\370M\225\302Y\351?A\354\313\320W@\363?|CER\310\356\322?qb]\332\000<\341?4z\365&\356\222\356?\341a\303G\326\007\240?\001F`\005w\275\302?\243]\213\314\017d\354?\352\213R\277\0243\263\277\361RIK\313\302\316\277\252\r\324[\351\314\337\277g\016n\325\205M\372?w\314c\362V3\320?Q\340\243q\354i\260\277A\202\257o/\265\350?\361\363\255\266\3031\352?\324}\237{Az\333?\233\273\273\360+K\301?\224\375,\277\235\332\360?\270\234o\216\361\320\370?\202\373G*\343y\340\277]+\2037\324\240\271\277dJ~\367\2359\310\277\273\230\327\2202r\375\277\325{iGR\205\341\277hf!g(u\343?\261\321\255\363:\232\326?@\030\270!\0171\321?\227P\027m\373\307\335?\020D\236\325x\231\360?D\276}\271\0143\344\277\nIc\017\227\266\n\300x\313\024~\335\013\301\277\035\240\211\3703\313\363?\304\252\376\207}g\354?S\364o\320\306\316\321?\362\035?\300\203&\353\277\363\356\363\237\360\267\325?L\t]\177\364i\355\277\216\004\267\003\250\271\317\277\320> \367V\270\337\277\316\302\3722O\036\345?V\204~\273\027\202\315?v\234\367>\n9\023\300\205s\020J\312\002\316\277\267J\21219J\325?\300u\021\305\244\177\350\277\265\247\340\307\033s\270\277S\364o\320\306\316\321?\323\231_\263:j\326?t\327\334s\336\332\342?3gj>T\024\304?L\t]\177\364i\355\277\337\351\203\251\265\261\266?\335\262\214>\032b\317?\314\021\210?\310G\365?%\226\006\001Xd\363?\275+\217qo\261\326\277\034f\351\232\350<\337\277\036\202oB\004\304\272?\226\007u]\333\363\362\277\017\203$\331\377{\340?I\342H\331{\331\362?\217\206w\356\224\371\364\277\247i\t\242x\277\350?\234\312\351M\334\214\211?K\355\253\0211\355\351?\307\020\203\353\346\223\373\277\3037\313n\235\236\360?\004\314\362z\304w\362?\315?\2143?\224\356\2772\037\352GH[\362\277X\344-n6:\323?Gz\216>\347j\351?c\310\277\205\244\017\232?\216 \363\212+\315\345?\265\356c\265\337\312\343?[j\345\363O\256\345?vLMC\206\006\355\277\307\242\335V5\035\355?\262)R\273\247N\370?T\215\262>z\301\336\277xr_\017f\337\261?\253\257=\033\303\357\304?\373^\307 4\036\313\277^2e\204]\316\357?s,)\353\0132\361?\013?\020N\016\372\362?\277\247\274\200\020\236\364?\024\272\032x\236\231\310\277\207\t\022}\r^\362?Z\316B\352\303\013\362?\350`\237\231\004\326\330\277xsp\2634\n\377\277\007\341\254\033\355\027\323?\242kkh\014\334\351?%\263\341\322\310N\323?_\014N\347,\237\333\277NI\322\215\212l\333?\373Y\006\213\304\203\362?\203\265\366\350)\225\344?k6\254\342\347\230\361?\317!\217H\272\216\365\277\264WeyT\016\351?\263\005\t\357-\220\022\300\337|I\210+2\370\2778\021\364byO\351?(z\022\357\\G\316\277t3\003\3607Z\324?\020\"\t\352\370\347\333?\361\365\3716\301\007\360?\336\017\325\326\303I\352?\014\026\213\024\220\214\337?i\314\245\312\221\241\362\277ZtY!\366\241\356\277\305\360O\3116L\350\277\275\257\335\261X\350\363?>\324\271\334\263\365\336?\306\332]\306\'\375\342?\373\2742\233\262\005\336?\202\004\204\365\242\276\364?\214Z\232d\327.\336?\266\301k\221\252\005\330?\254\203\204\333LG\302\277\225\347\266\026B\342\001\300\017]\367\362\374\270\360\277\204[\351\330PV\275?v\273\034<\345\352\347?\276\022\031\214|\335\306?j^\204\346U\007\311\277\315\251\241\025\313\376\324?3l\3324\217\032\323\277\252`\213\376}\014\322?\005\245E\272\026\302\314?%\263\341\322\310N\323?\357\370v\227\314\036\326?RkQ08\212\324?\250\026\t\253H>\340?\323#\315\307B\326\262?enB\230p\277\342?$3\3606\000)\363\277[\254\255\376CZ\335?\365&V{w\261\334\277\216 \363\212+\315\345?\302\225D\347T\307\373\277\265\304\331*\274\366\366\277fIF\225\267\212\363\277 C\034P\276)\346?\346\3469W\257\225\333?#\024\302e\365G\331?\352\213R\277\0243\263\277\311\362\224\307[\264\311?\230{\303\023o\004\364\277\340x\300T\242F\364?\004\327)$\021\261\322?\235\337\364w>:\331?F\303\375?\002D\271?\006}enKN\342?x?\201\305\240\265\320?\214\361\016S\237\206\305?X\357\2748\220u\361\277E\236`\335\3621\354\277\214U*n\234(\277?\205\177\302\3714\213\364?\326_\251\017Y\225\346\277\022\363\317n\211\212\000\300\253\372e;\276\002\305\277\342\346O\240\201)\367?I\347\354\246|\277\353?\262\265\355\273A\252\333?Q\2660\366\037\301\335?\277\030\311,\373\227\335?(9\231X\342\302\345?\206\317{\025k\237\265?\203NW\353Hn\340?\204\247\026M-\035\347?+\240*X\212\250\261?\005Hbb\240\322\362?\301k\276\003\034\303\000\300\252\275$6\\\210\366?IY\024\360\032\001\332?\331m]\031\261\345\334?\\\230\204\252\317O\316?\334\360\274N\213\374\333?\274\252*\032\"\217\323\277\303\354\325\\\247\206\313?\362\007j\205\343\213\305\277\334\273\270`\221\350\266?K\334s%\365\027\331?\313&X)\303{\361?\302f\336^\017\346\242\277\373\374\256+!v\360\277^b\304\302\007d\346?\246w\351=u7\346?\205\006\017\327\316S\251\277x\246ZS_E\264\277\2651C\266\234\356\016\300l\032\354\252\356\250\366?U,\322\253M\310\330\277\013HL\031\316>\327?\321\n\221r-k\302?Y\223q\251.\357\334\277\017IB\243y\177\351?\211\037\375\000\200\214\323?\344\344\003#\300\240\341\277<\227\240\305G \006\300\353\355\004\225\341\227\367\277\005\364\032<\030\342\315?\213\026\311}\035M\262?\326\'8j\234(\350?3\206\220\304\305\242\312\277\226l\327\244\364\267\330?\246\205\311\331q\257\343?@;h\244\312\217\312?t\021\223\027\300\257\302?o\022\313y\246^\367?\324\347\302[\006&\332\277\324b.\270\301\261\277?\3519\342/\016b\306?\rZ\211Y\353\307\321?\373\375\311\305\230p\345?\275\026\223\370\013\243\343\277\177\025\324|\010\351\021\300\357\355\356K\017\004\354?~\375\251\360v\226\341\277\251H\217S\254U\331?\332o5\222\201\235\312?e\300\'\365(F\366\277\235\213\340b\367\221\357\277\032\016/\215\345A\342\277x\231\337X\344\207\252?D\0165*3\312\320?\327\362J\247\303@\344\2778\340cD\301x\342\277\363ZM\264\244X\356?\274\336\022\211\031\303\355\277\246w\351=u7\346?(\232y\353\016\274\353?\313\002\215\tT\325\342\277;$\030c\014\246\336\277\254\341\357U\313.\325?\017\357*U\340\202\222\277\227\016Ob\007\034\346?\372C\033\007RU\341\277\014\351\307\226\260\005\211\277\232l\346n*+\300?\r\251f<\330\240\274\277\307\242\335V5\035\355?\r\014\027\347\351\230\306?|\246 \303\201\334\324?\317?\233\375t\007\346?=\331]\255\360(\370?~\204\241 \324\276\333?\312\356\355\002\243/\347\277Rn\251\200w\347\347?\235\337\364w>:\331?j\3619\031G|\275\277\226\016l*v\320\305\277 \346\323\267\024B\313?n\274!\220\306\236\321?\304\255e\242\3627\327?\\\206\226a\023+\351\277\246\330\311\320\2410\354?\271\320W\000%R\363\277\003w\303\313\005\325\303\277%\366r\017?|\267\277\032\016/\215\345A\342\277G@\330\232\005\226\331\277\207v\206.uF\340\2778~h\024\3417\367\277D\004\364\n\222\321\362\2776f@\332\246\246\367?\343\377\222t3\265\353?\017\276\355\316\373E\322\277{\315Y|\002t\342?\241\207+\240\005\314\344?\377\tH\233\001\314\341?\304I\362b\254F\317?\216\261\333\003\266>\243?7\034|\2566j\323?u\237\\\004\354\372\354?]\252a\201\202\321\367?\211\034\263\256yp\310\277\246\325\200J\230F\300?\375\253\325\236\252v\372?\361\310\362HV\317\374\277V\313\361\030!\317\322\277\020H\'\t\002\205\364\277\004\000\342k\224\031\301\277\005Hbb\240\322\362?\303\354\325\\\247\206\313?\207\016#\320b\364\316?G\234\r\341\224\210\342?b\355\030\227\205\235\315?9\262\275$\367\034\254\277e\217s\214)M\273?\257:%j\354x\310?U\321\260\203\325\374\320\277\363ZM\264\244X\356?U\236\371\364\353\t\347\2779\211\332\026\314\276\325?\017\203$\331\377{\340?\233\307\323\274\240\311\375\277\361\256~\221Z\265\347\277\331FE\317\211\322\000\300\207\362\272\274\262S\322\277A\367\207\363\332:\267?6i3\355\356X\312?\207\003wYd\005\270\277\272|-\242\013\026\336\277k\375\020\331}\276\346\277\'\266*Y\3228\357\277\274\300\377T\302)\351?r\005\006x!\341\336?\327\312\325\347\255w\000\3007\342\305\nU\225\343\277\227_\031%H\250\324\277\002Ws\341\346\330\360?&\350\353]\020\353\346\277P\212\206\200\337\213\302\277\317\246:\373U.\352?t3\003\3607Z\324?\0144#\305Y4\310?\230 \251j\223Y\300\2774\360\210\336\342X\301?ch\203-\274\221\344?o\313O\324?\014\357\277\260\263\267\207R\265\341\277\331\216\327g}O\354?U\321\260\203\325\374\320\277\335\340\246~\237\217\344\277\205b1H\\\024\312?w\371LLV\205\344\277\363\373\372y\260\243\320\277\027\375q$7^\315\277\230\326\344;\347\317\373\277\317\020W\\~\271\364?\374\310\244\353,\025\225\277\340\374:$\364W\330?\323^\244\273w\341\334\277\013)\217\r\345\241\223?\314\035\034[\307\351\354?\242N\000\223\374P\241?\004\274\306^\312)\357?4\370\260\216\307\303\364?\352M\331T\220\274\337?I\347\354\246|\277\353?\354\257:\213(\215\272?*i\351\314V\345\344\277\277\272@\352\r\374\352?\211\370\264}\311\201\356?R\337\265/\236.\361?\213\235\223UQ\266\346?\252k\024\020\300\276\252?\'Gy\364\336:\343?\024 \275l7_\366?\344\267\3744Uh\336\277+\227\374\212\003\245\365\277Y5\3700w\306\341\277\226\245\210\364\364\330\316?\204\026\364C\305B\312\277\236\030\\\247\246\347\351\277\253\226\362\373w\021\335\277\301\316\320&\211.\357\277%\242\232\034W\006\353?9\351k5\177\220\314\2773gj>T\024\304?d\325\367\336#z\362\277\r\220\305p(S&\300\374\230V\t:\274\263\2774\360\210\336\342X\301?Ov\273\347\211\276\357\277;\240\321m\274\301\344?\266\"\270\343\246\027\263\277d\334\347,\"6\361\277\347(=\276}\334\321?\237\201l5Q\236\346?yw\343\240\'\257\327\277\336\223\224\303\227\360\222\277;\304%`\275p\020\300}\332\036\365\"|`?\304c|f\266A\340?B\205\026\212\244\205\323?\253tl\335i \360\277\233r\226\017\251\345\326?\000\364\\\027\217\235\360\277\363I\025\310h\203\335?\215\304\275D\234\332\334\277\303\022\345\261z\260\374\277\367U\223\235\321\336\331?\033\014\343\014\350k\374\277\2636\001tZ8\365?\346\3469W\257\225\333?\352\224E3\375\350\360\277\354*\032\010\237\352\336\277l\343\3011N^\344?\267\177\243\206\266Y\340?\370\336\261=`#\327?\201c\335\261o\341\326\277\3349\234e\225\350\271?\3035\177\356\237\310\352?2\037\352GH[\362\277$h\344xu1\333\277\207\362\272\274\262S\322\277\\\212=&\314\257\313?W\244\270_\2407\345\277a`xEF\333\360\277\342\177\232Y\316n\327?\035\354\257\3527$\351\277j^\204\346U\007\311\2776v],k\201\323\2774\203\033\254\027\221\327?\027\233\206\225\262\365\003\300T*\327\315\300\323\334\277\372_\026\225\255E\332?\277\244Uf\233\315\371\2778A\'\017\177\275\310?\020\335\350\216\305\336\320?^b\304\302\007d\346?k^\0006\340*\344?\256Y\307?\350*\352?\030\244(u\217J\323\277\3015\2257r\\\366\277d\036|]\024\265\316\277c\310\277\205\244\017\232?~\0205\331\020\025\314\277|H\265H\003\365\301\277\241\353rM\247\225\325?]@E ZF\355?\243\030kq\334Z\341?\211\037\375\000\200\214\323?\353r\260G}7\354?`\234k\234\263\305\336?\323\031\204`D\330\321\2776\240\362\331\331\370\005\300\311?\261FG\233\361\277Ct\317\3232=\353?\214\361\016S\237\206\305?\021\350a\020M\206\343?\352\357P\022\243 \355?d>\343Y\306)\354?YR\323\002\350\260\361?\334\304\365\020\334\022\341?\036\262\334~\347\232\351?\341\264\263\256K~\342?\370\325\213\2706%\356?\250]u\206y\035\361?\270\3367\234!\312\360\277\032\016/\215\345A\342\277k^\0006\340*\344?\265\332\341v\235\331\307\277\300K\200\273\344\212\347?\005O\224\210\331\374\323\277\343\377\222t3\265\353?\326\000\377\260\033\221\332?5\'\365/\276\021\346?\335\270 \343&\232\245?\231\364\332\252\013\002\361?=[\242HSE\342\277hf!g(u\343?b8A\267\200\260\315\277\206*v\202\0074\346?\362\352q\353\003\355\365\277\322\203\212x\232\317\340\277\255\326g\n\016\024\353?\256\362\030x\321\220\356\277k/\274\224\351\334\362?\316#\333\305{\027\353?F\021~\260<\264\354\277yJ\372F(]\343?SF\227\005\272\303\327\277h|\366\241\310\017\311?\344\267\3744Uh\336\277\"\'\\\030\3059\353?\223S\233O\337L\330\277}B\202\275\223\365\244?\205\273\265S\336\302\342?\227\272:M\300s\334\277\214\361\016S\237\206\305?\234L\177rx\266\342\277\263\004V\270\356\031\351\277/\377\266\"\\\306\356?0\215\236\243\363\367\327?\351\033\'\032\210}\317?<\276\307\331\244\246\311?y\307\232\021NF\344?\\\206\226a\023+\351\277\177\262\236\230\3527\321?\257g\247\333\344\242\347?\360\252\004%\313\357\312?\317?\233\375t\007\346?\025!\311?\2653\324\277\364|\314VRv\347?\364Db02*\375\277\300\306\324\010I\353\362\277~\204\241 \324\276\333?j\272<\373\013>\361?\205\200\354]\342\370\300?9\037\3054@T\357\277\ngd\241\006\214\345?\237\201l5Q\236\346?Y6\023\313\356\300\366?\032\373\205\020\340\334\330\277\2171\034\2551/\337\277\006&\315v !\336?\002\3063\020\020J\364?\021\022\363\031\r{\344\277r\255.\242\2571\262?\3248\177 \016q\320?\234\376\014\000w\207\347?7\034|\2566j\323?t\327\334s\336\332\342?\"\337\305\330\346\354\335\277\231\374\272\311\235u\254?^b\304\302\007d\346?Z\341\306S\301i\350?\035Y\035\035\003\354\342?\213\317\354\245\213\016\272\277\322\336\253\240\022\233\350\277m\211\264!u\037\275?K\373\213\255-e\347?Z\341\306S\301i\350?\330ehz\r\303\344\277yJ\372F(]\343?UE\035\313\230\246\300?\212W_\334\006\206\332\277\263}|\026\205=\315?\r\014\027\347\351\230\306?\033a>NK6\342?h\312h\024\312>\324?U\321\260\203\325\374\320\277\315\233\327\302\240\032\363?w\250.1\350\276\\\2777!\354\244qp\302\277\001\31066\372C\263?\013)\217\r\345\241\223?L\242\275\201\023C\351\277P!\243J^\224\313?:W\031\022\216\014\336?\361G\337\223y\216\343\277b\310H&q\220\365\277\0107\312\014\372\365\320\277\260\025\216\244*\357\331\277\246\325\200J\230F\300?/\014:L\246\325\324?\373Z\022^BX\320\277&\350\353]\020\353\346\277e\242*\007h\363\334?\331\216\327g}O\354?\217`h\231\301\317\303?V\005\250\274\002\244\342?\341\366{\271?*\332?8\266\322:\001\204\341?B\304\206DY\324\307?\211\034\263\256yp\310\277\304\265a\303n\310\363\277C\305\203M\2415\376\277\261\211CF\001u\300\277\2714\237\255\306\033\364?g\306\346_\335s\364\277q.\360\356\226\371\302\277\272|-\242\013\026\336\277vB\366\335N\307\303\277\213\353\005\310R\345\341\277\216M\334\344*\037\332\277\226ip\212\177\347\355?B/\257x\3773\340?r_\347\365U\370\336\277\276g@\363\335z\342?\027?\277\253\235\030\351?\303\311%\332\353\'\322?y\224\343\202dS\332?7\0031\217\353\213\313\277\000\032^k\3558\311?e<\227\334\004\241\366\277u\201\321\016\2769\224\277\255j\016\366Ys\322?\372_\026\225\255E\332?O\214\274\264\316\200\354\277\223l\355\355\306K\364?\205\246r\022\351\241\226?\240LS\340\323\216\333?\245\367\360\"\020\361\321?\335]\274$\334\256\007\300|\277y\340\005\374\344?\252\375\257\215\304\036\320?\3725;kU\335\343\277\255\203g\023\336\222\342?\374\234\275\240\307O\310?u\271\327=\300\202\306\277>\217[\315\237\360\230\277i\036\213\'J(\326\277xr_\017f\337\261?\304\010\207\312j\003\337?\340/\023\037\373\201\003\300\375\316o\333\317\216\330?\206\360\277\336%_\326\277\205\215\242\2251\003\362?B2\202L\314\202\317\277\031\302\036\341w/\350?\034Q\014|u\254\251?>hQ\376\311\341\356?{\357\337\232\020e\377\277\005\336E\001xG\350?\357\023\350ZL\347\301\277\374\031{3\\\355\350\277\202\373G*\343y\340\277\316\027G\252|u\363?\3606\230\335\007F\333\277\334\t\026l\017\034\354?\227\247\257d&\365\341?\331y\007\201\276h\340\277\351i\231\214\211\254\332?\250\277p\263\035\021\334?\310,b}\'\341\217\277\230\377RG\010\304\275?\n\023P\214\277\343\333\277n\036_\225\245\000\357?\351\033\'\032\210}\317?Zd&\211\233\200\347?@G\327\257\375w\337?\364\246]`\022k\350\277D\323v\324C\207r?\317\341\003\361Q\370\333\277\326r-yV\363\374\277;\240\321m\274\301\344?U\330\257\230\315\336\326?(9\231X\342\302\345?\226\245\210\364\364\330\316?\203\245R?\251)6?s\215\344mlq\324\277>s\350\023\275o\300?\033\203A\241n0\300\277\325\210\030\375\310!\356?\300\t34~\320\313\277\3323\266?\005\204\344?5\256\322u\326p\003\300\005\364\032<\030\342\315?\242kkh\014\334\351?\226ip\212\177\347\355?;vG\343\230\355\367\277\373\2653\206\272#\330\277\206\277MNa\324\315?\237\317\310^\2009\366?CG\021@\333\340\276\277\362\301\002\373W\023\376\277\020\214,\312\275\223\332\277\026]\322\337\364\261\355\277\347\206p\272K\024\t\300\340?%K8l\351\277kP \232\343\262\346?G\206j\001\335\253w?/\t\360\371\237\271\311\277\366\333v\265\217z\323\277`\316\037,O\023\020\300Q\321\325\223\241\266\363?G\272\364\202G\372\337?\256K\004lZg\314\277\016\264[\r\352k\312\2774;\261\376\335k\301\277UE\035\313\230\246\300?\372\266\202\3723K\307?\244q*\323\300\t\350?\230xk\303/\247\360?;\306\277\372\006Y@\277\321~\346\247]\234\367?\232\t6\304\0303\266\277\361G\337\223y\216\343\277I\037^L9,\352\277\036\342;\275\2210\340?u\262\340p%\246\363\277\3604\200\331\247\346t\277\254X\254\245p0\365\277b\334\362Om\331\006\300\203\003=\311\206\234\330?\032\3773T5\202\377\277(\324LW_E\353\277\234\345\263\342\362g\327?\336\030\373[\355G\323?]\331\245\"y\037\351?\244\254\363\310\274\323\331\277\025\353\256=A@\001\300\225\033\037\207\327<\004\300\227\331KV\\\240\366?\031\303#5Y\343\321?\031W\366\254\321\317\317?\330\257;p\263r\360\277"
      }
    }
  }
}
node {
  name: "tensors/component_8"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 750
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 750
          }
        }
        tensor_content: "H6%s2^\341\277vG\272\030\361\251\346\277m\030\326\361\203v\344\277|\350\367\220\233x\341\277\365\t/\3726\212\341\2779f\003\324\032\\\344\277E\261\254\376\331\377\002@,]88\261.\346\277\311\206@\003;\243\343\277\005\355J/\357C\336\277e\230\345v\325n\245?\322W\275\001\303}\310\277\351\355\323\354~7\346\277\007h\367G\021\361\345\277H\020\005\220\225\023\347\277\344\207\265H\254\303\020@\035\240\246\n\350Q\346\277\334\367\230\302c/\345\277\354\307\272a{1\342\277.-\237@\350B\376?\177\234\276\"\373\'\343\277\212\004\275\302\245]\337\277!\3067jps\331\277<=\304\"\372\376\265?\236\026\342}\215\341\342\277\033\2331B\334\025\003@o\336\330L\213\264\203?Z\224\355\300\014\305\345\277F\370\377U;\262\006@&\342\032\243\243\252\345\277\376K\243\222\362\342\340\277W\363\266\240\373:\341\277\340\n\232\260\235+\333\277Qe\t\232\237\221\343\277^[D\304\272\231\344\277\233\r\217\266\250\317\323\277vG\272\030\361\251\346\277jd\017`$\307\342\277\267\002X\322\303\361\344\277\222\r\027\342#\264\344\277\001\355\331\262\003m\345\277a[\265@\246p\335\277\211\313\242Ih[\345\277\322Q\217\274\261!\242?k\260\271J\260\356\331\277\233O\213z\337\014\344\277\302\321\020b8\222\335?\272\266\036d#\241\346\277\236\026\342}\215\341\342\277\013{\3705K\355\333\277\310\276\207H\203\261\326?\370\320\205\375\344^\340\277U\365\353\213\372K\266\277)\226\3414\003Z\347\277Qe\t\232\237\221\343\277u+\3367W\267\320\277\3529~\327\n_\335\277\023^2r,\371\346\277\211\3362\273\266\200\342\277jQ\177\356\325\241\345\277`\236\023\274\346\312\313\277\242\267\030\236\236k\347\277\257\322\021\364L\241\324?\004\241\240Dc\034\347\277~\016\202\230\212U\336\277E\\>\3765d\345\277<@\352H\027V\340\277\303\255\264\355\256\201\317\277W\363\266\240\373:\341\277\351\000d^\315\\\343\277\232\347n\323\013\205\331\277\320\367\344\203\034\206\366?\330\014^\037\261e\267\277\301\220vU\013r\333\277\006=b\234hj\010@y\016\021\034\237~\345\277\350\023\364\317\033\202\340\277\264<c\206\037:\304\277\004\2640\266\261A\344\277\237)r\357\333\006\340\2772\353\345>\r\330\343\277\032\332\261\276C\232\305\277\241\233<\275\004y\321\277\017\245\366\027\301\r\002@\216\027T\214\215\307\322\277\023A\364\331\210\351\342?\032\224k/\305\265\021@e\230\345v\325n\245?E\021gG\2370\305\277\002&\364+Ao\337\277\253\014\035\250\250\351\343\277\217F\300\336u\337\345\277f\212(\353\'\315\346\277\313\277Z|x\245\335\277\230\2104w18\345\277\351\000d^\315\\\343\277\233b\033\354-2\341\277_\344u\252q\302\010@\235\210\245\363\034\017\336\277\246\335\251\375&\215\332\277A\250wl\326\264\343\277vG\272\030\361\251\346\277{\r\257d\225a\327?}\372%K\340\200\320?\177\211.\261\254\002\346\277\347r\'\324\\\212\336\2772\376u\260[\375\340\277\021\252k\340\314I\345\277$gn\212\201\375\335\277\263;\001\317\025\035\346\277\257\322\021\364L\241\324?\235\210\245\363\034\017\336\277\256\307\211Ai~\260?\211\3362\273\266\200\342\277|\350\367\220\233x\341\277vG\272\030\361\251\346\277(@\363Gt\332\353?\246\335\251\375&\215\332\277\024\320\374?Uk\330\277\360\307+\336f\010\333\2776\237\254\320l\207\345\277H\020\005\220\225\023\347\277e$\320\262g\177\270\277\222\r\027\342#\264\344\277\256\307\211Ai~\260?N\261B\010@\342\341\277<-Z\327\3100\343\277\334\367\230\302c/\345\277d\351\361\312\026C\342\277\307\370\003y\312\320\336\277\255\243\245\241d\211\341?\255\304\305\344\212\326\256\277\351\242X\260\2074z?\nB\336\274\r\353\341\277R\247\347(\365\007\004@\316\230\3379k\202\353?\374\t\247\316\273\245\320\277z\002\'\262\261>\263?\3620\252<D\255\303\277\214\245\211\276dU\341\277\233O\213z\337\014\344\277\242f\375\226\260o\252\277y\016\021\034\237~\345\277E\021gG\2370\305\277-o_\232\\\362\336?d\326aY\310\035\345\277\220<G\312I>\370?6\2253\274@\346\367?g\260H\316\304\027\341\277\320\001^\230H\'\344\277\370\320\205\375\344^\340\277A\250wl\326\264\343\277d\"\014DTE\334\277S\316\370th\r\305\277p\314\234\203\343%\346\277\300W\\\334\315o\341\277G\262\235g\260\272\311\277S\236#\023\335\223\335\2774\207\247\226\022&\005@\267\002X\322\303\361\344\277R\247\347(\365\007\004@\215\313\023\306S2\336\277\313\277Z|x\245\335\277\366r\027}f\301\314\277}\313\356\n!\262\366?6\224\234\362\r\200\300?\276\311\037R]\235\334\277\376\252\335\356\314/\325\277:\226BZ\370g\316\277\252\371\2146Z\304\346\277\244\221\377\022\233e\343\277y\336B\022\255I\344?\233\r\217\266\250\317\323\277\010\264\2412\235\030\335\277\323\310\264\233\366\373\342\2771]\251\264\234\005\337\277\014\270\1771v\356\010@\007h\367G\021\361\345\277\257\202\305t\2521\001@k\212\231g\023\244\337\277\245\003\312\340\303\327\324\277\n\3078\374\204\202\320\277\247\311\267\324\316J\357?O`\224\321\223U\000@\002\3179cV@\303?\034\001\245\325\325\330\266\277\313\277Z|x\245\335\277C\007\262\310\260\001\330\277;\002\305+ \252\005@T,`\235Mf\342\277\021/\306\037D\341\323\277\366\331\225\002n\236\371?\017ho\034\226\014\325\277\256\014\216$\224\300\334\277\027q3`f\365\334\277$\263\256P\273\222\322\277\261\232\312\256\004\223\341\2777\021w\236\225\371\326\277\013{\3705K\355\333\277\326|{-V\253\344\277G\006Wi@)\340?\3529~\327\n_\335\277\247263\254\357\347\277&\353H\335\r\261\016@\337\321\1777`)\341\277\366\331\225\002n\236\371?\3041\255u\034\374\337\277y!\241\215\355\243\342\2777\021w\236\225\371\326\277\013{\3705K\355\333\277\0278\031\347(\363\342\277\255\243\245\241d\211\341?\360\307+\336f\010\333\277\320\367\344\203\034\206\366?\n\3078\374\204\202\320\277m\030\326\361\203v\344\277\314M\227\006\351w\342\277V\261\272\334\304\375\320\277\\w\344:\222\376\372?\370\275\365\213\2269\343\277}\346\307\024\323fq?\033J\270\035Y\322\352?i\017\203*\237d\325\277m\005F\2005Q\347\277\347r\'\324\\\212\336\277I\006\214{ir\371?&\342\032\243\243\252\345\277\230\2104w18\345\277\203P\205\264Z\327\344\277H#\225\001\3448\344\277\233\004\255k\257\224\315\277\276\311\037R]\235\334\277A`/\\e\311\256?\035\306\306\355\204\234\340\277\350\023\364\317\033\202\340\277\373q\274\035\366\350\344\277\373\226s\361\357\321\332?\307\322yq\333\363\341\277\003ANH\264\265\201\277\2073\203\206yU\360?\'T\345p\314\034\327\277\001\355\331\262\003m\345\277s\246\203\370\337\037\342\277\342\252\375\234\271\301\330?I\006\214{ir\371?\334\367\230\302c/\345\277,\203X\033Ny\340\277\211\372\360fo\254\010@\255\243\245\241d\211\341?y\373\200\252PY\350\277\267\207\262\021;\211\323\277\326+`&h\257\247\2770IMg\3620\321?\005\275G\023\324\305\363?,\244\236\300\260\373\245?\222\r\027\342#\264\344\277\002\3179cV@\303?\211\313\242Ih[\345\277\024\252\334\\\270 \336\277\323\310\264\233\366\373\342\277\304W\315X\271F\332\277\351\205\276\235D\364\321\277#$\333\374\027Z\366?1_m#\260?\273\277\021\354Io\"\300\005@\313\277Z|x\245\335\277\322Q\217\274\261!\242?d\326aY\310\035\345\277W\340&/\255\025\344\2770\2320\260\307\006\014@\220\270\212\254\236Q\327\277#A\344\202\222 \341\277\035\240\246\n\350Q\346\277$gn\212\201\375\335\277/\\\326\200\247\021\330?zmKxy\313\331\277\241\3358\201;\266\341\277\253E7!\346\353\335\277\315\256\225\321\326\376\262\277\257\243\332\263\215\322\372?g\260H\316\304\027\341\277\371F\'rMb\007@p\362\274f\200p\340\277Eo\316o\204\211\342\277d\326aY\310\035\345\277\211\313\242Ih[\345\277\252\007\250\337\234\255\000@ C\022\026\370\354\277\277\317\nn\235\321f\375?|\350\367\220\233x\341\277\377\222\372gE\210\240\277il\210\233z\240\304?1]\251\264\234\005\337\277\272\334>G\300\353\340\277!\240\027\207\323(\337\277\323\265$*\250\326\345\277h\351bG\002\032\333\2779\262\255\276\246\203\333\277_\272~ \225\346\330\2779f\003\324\032\\\344\277\315\034`\355S\341\314?u\361\313+b*\353?\312|\307\356\016\002\366?\351\355\323\354~7\346\277E\\>\3765d\345\277\005^B\311\"\302\350?\007h\367G\021\361\345\277\355\320\321\276\235\265\361?\240\355\233t\323?\276?\373q\274\035\366\350\344\277\206\027\334\267\010\254\343\277\035\240\246\n\350Q\346\277\230\2104w18\345\277K\375{v\3402\340\277@\375\3077\231\211\361?YiX\025d>\010@\262\020l#m\226\010@H\020\005\220\225\023\347\277\344\253\320\320\256\265\337\277?\364\260\332v\005\342\277\204\302O\202\203I\326\277I5\303\273(A\323?\334\n)4\262T\342\2776\237\254\320l\207\345\277,]88\261.\346\277B\273\007\336$\332\340\277f\246\346\226\340\370\014@\230\233\304\350\177]\342\277&\342\032\243\243\252\345\2771]\251\264\234\005\337\277\261\323\344\'B\225\333\277vG\272\030\361\251\346\277\217F\300\336u\337\345\277\\\363\'\035\347\021\332\277\364\366\236\210\350d\344\277^d[!\335\035\364?\366r\027}f\301\314\277p\362\274f\200p\340\277\270\254i\3454r\351?\024q\302\343z\036\344\277\036\034\037\377e\256\316\277\024\203\351E&\342\334?\366r\027}f\301\314\277\337\276\357\305\021\004\344\277\374\203\352\327:\361\323?\335\355\037\2567\216\367?\305\242\244\017Pz\352?.\014\212\001\005\242\004@\333\345j\010\037\'\306\277\243\026S\372x\270\333\277{\336w$\326\222\375?@\375\3077\231\211\361?\264a!\262\262g\340\277\255\243\245\241d\211\341?W\340&/\255\025\344\277\3753\236X\230\201\000@y!\241\215\355\243\342\277p\362\274f\200p\340\277\201\325\330\2338*\335\277\213\177i\333\307\n\347\277/7\037\255\255(\342\2779\262\255\276\246\203\333\277Eo\316o\204\211\342\277\273\002\311N\257\310\335\277\314M\227\006\351w\342\277\253\266.\273\031j\350?\366/\271\001&g\336\277\220\222j\311\001\007\335\27776.r\217\342\354?(@\363Gt\332\353?\234<\373\010\221\347\346\277\326i\353\273\007\206\347\277,-j.\277\371\344?\267\002X\322\303\361\344\277\363K\357S\2539\362?\356{\201\363\332\340\343\277\031\354\337x\210\242\344\277K\375{v\3402\340\277U\333\261f\241\331\000@hm\037e\255\006\374?\370\275\365\213\2269\343\277\265\036\370H\233V\373?<@\352H\027V\340\277\217YPP\304\004\343\277y\336B\022\255I\344?\226 \030\320]\260\332\2779f\003\324\032\\\344\277\243\026S\372x\270\333\277\034^\252F\261\024\326\277k\223]}+\030\006@\225\301\335s\203c\346\277\373\204L\217D\016\342\277\026%\211u\332\315\345\277\3001<\3710%\347\277<\032\312ez\013\346\277>\266%E\327.\242\277\375T~\205R\331\340?\377\206\201zC\037\267\277y\016\021\034\237~\345\277\252\371\2146Z\304\346\277\026%\211u\332\315\345\277\232\347n\323\013\205\331\277\326r\002\031*\n\367?\002&\364+Ao\337\277G\262\235g\260\272\311\277q\030GnoM\335\277\t\332\301\025:c\327\277\010xa\223B\277\270?il\210\233z\240\304?\300D\314j\177J\344\277\"7d\026\315:\375?$\263\256P\273\222\322\277\200\373\370~\325t\327\2779#\245X\332\001\346?\007{\207\271_\026\343\277\253\014\035\250\250\351\343\277\r\t5\300\273\277\340\277\266\300[\016\215\264\324\277\261\232\312\256\004\223\341\2774$\000\270J\332\335\277QRy(Ql\346\277S\304C\366y\336\327\277\335\217\203s)\354\320\277p\366\255\304\257\325\251?\007h\367G\021\361\345\277\304W\315X\271F\332\277}\372%K\340\200\320?\216O\320\343\376\036\377?\365\t/\3726\212\341\277J\327[\223C\350\345\277\261\207:=\266m\344\277\273\222:\304\036\254\267\277\005^B\311\"\302\350?\243\026S\372x\270\333\277\376A*~\306A\363?\365\t/\3726\212\341\277\222v\377dS\353\317\277\341{\306\\\372\362\376?\037\t\226\345\260\315\307\277z 8~JB\336?G\006Wi@)\340?\320\356\315&\372\001\347\277\267\025\350C\022\027\342\277\033\2331B\334\025\003@^n\3245\t\277\341\277\233O\213z\337\014\344\277\214\245\211\276dU\341\277\233O\213z\337\014\344\277Z\224\355\300\014\305\345\277\306\277\351\377\214\316\344\277\203\350oe \224\320\277\3529~\327\n_\335\277\264N\221@dB\343\277\351\355\323\354~7\346\277C-\322\253ML\322\277>\252\254W\325\305\270\277\r\366\244Nm\232\343\277T\031\320+\377@\345\277!\3067jps\331\277\257\322\021\364L\241\324?\314:\007\225\232R\345\277\274\231\340\313\177\221\342?\233b\033\354-2\341\277\342r\266Wq\263\345\277R\247\347(\365\007\004@\021\275\373Q\033o\342\277<=\304\"\372\376\265?N\\\266\322\272\177\324\277\351\355\323\354~7\346\277\376\252\335\356\314/\325\277\373q\274\035\366\350\344\2772\353\345>\r\330\343\277f\212(\353\'\315\346\277I\006\214{ir\371?B\225\347\372\207\217\346\277\354\307\272a{1\342\277|\302\327\255\376-\347\277Jo?\354o`\333\277\303\370\222\374\336\371\345\277\326|{-V\253\344\2779y\223Ei\201\341\277)\274\001\030\240\244\341\277\024\204RU\311C\341\277\307\322yq\333\363\341\277\206\027\334\267\010\254\343\277rU\316i\232N\n@\253\256\265\177\303\220\306\277`\017\013V\032I\346\277\351\343Z\330R\226\370?~\016\202\230\212U\336\277\017\253\315\227\326f\303\277q\030GnoM\335\277\306\277\351\377\214\316\344\277\222\312\270f\343Y\346?Eo\316o\204\211\342\277I5\303\273(A\323?\021/\306\037D\341\323\277\244~o\241L@\346\277\373\226s\361\357\321\332?\326+`&h\257\247\277i\017\203*\237d\325\277E\\>\3765d\345\277Y7Y\314\034`\277\277QRy(Ql\346\277\373\226s\361\357\321\332?W\363\266\240\373:\341\277/\\\326\200\247\021\330?F\250\350\350\301\213\334\277G\006Wi@)\340?\034\377\377pe\217\234?HHL\325\335!\332?\021\263\202=\357\315\364?\006q\313\342\327\242\357?\202c\025&\251\374\341\277\272\266\036d#\241\346\277\225\301\335s\203c\346\277\311\206@\003;\243\343\277\240\255jwI\201\340?\311s\260\221\354}\346\2777T\325\031\326S\305\277\212\004\275\302\245]\337\277\217F\300\336u\337\345\277\213\177i\333\307\n\347\2773\007\215\r~\201\360?a5+9\267\223\340\277hZ\341hg\333\224?\032\377o\352\326\307\341\277\r\t5\300\273\277\340\277\365\343\016\027\232?\347\277\236\030\027i\214\362\267\277#.T\021D\373\343\277\256\345\232\r\002\202\333?\223\177\341\257L&\326\277\373q\274\035\366\350\344\277\350\366\343\361\007w\377?4$\000\270J\332\335\277\256\300\3439\010\231\345\277^[D\304\272\231\344\277\310\276\207H\203\261\326?\217YPP\304\004\343\277\304\013#n-\037\343\2776\224\234\362\r\200\300?\222 \247Sr\331\341\277^[D\304\272\231\344\277\252\371\2146Z\304\346\277\317\t\327\323\236\000\306?q\030GnoM\335\277m\005F\2005Q\347\277\000\205\275\0130\345\332\277\233\004\255k\257\224\315\277\203\213j\364DX\261\277\310\217P\010\304\342\374?y\016\021\034\237~\345\277 7/\004\244\361\343?\235\210\245\363\034\017\336\277\t\000\342\370\326\255\321\277\035%\001J_\351\324\277\363K\357S\2539\362?YiX\025d>\010@9f\003\324\032\\\344\277\243\026S\372x\270\333\277\253E7!\346\353\335\277\233$\366\3166\206\006@\337\253_T\303\336\346\277\001\000j$R\222\342\277\225\324m\345\321\210\343\277\353\264*\360,\014\345\277o\336\330L\213\264\203?~\016\202\230\212U\336\277\211\313\242Ih[\345\277y\336B\022\255I\344?\235\003R\014?\274\345\277\253\266.\273\031j\350?Qx\231\013\356\266\340\277\006K\271\257m\341\341?\356{\201\363\332\340\343\277qd\2074\251\342\321\277 g\375\r\226&\345\277E\\>\3765d\345\277.\014\212\001\005\242\004@\230\2104w18\345\277\214\222\371L\0260\344\277\031\354\337x\210\242\344\277B\225\347\372\207\217\346\277\362\257W\n\214\210\246?<\032\312ez\013\346\277\223\177\341\257L&\326\277\206\027\334\267\010\254\343\277\217u\016\374|0\t@\333\310,p{\027\322\277\035\240\246\n\350Q\346\277\277\357?5\372\347\326\277QRy(Ql\346\277N\261B\010@\342\341\277K\352\353\004\222\r\343\277\\\005V\327+\032\351?P\306\007e\215\030\264\277\306\217\033\366\232\231\343?\nB\336\274\r\353\341\277\363K\357S\2539\362?\364z\220\270\274\232\356?\014\270\1771v\356\010@\256\307\211Ai~\260?\326i\353\273\007\206\347\277\371\366\017\005\324;\335\277\225\347\375V \256\340\277\204\302O\202\203I\326\277\253\0254\005\313m\363?*A\\W\027<\320\277Z\272\r\244\251\017\340\277Z\272\r\244\251\017\340\277\373\204L\217D\016\342\277\014\270\1771v\356\010@\225\324m\345\321\210\343\277\306\217\033\366\232\231\343?Qx\231\013\356\266\340\277\026%\211u\332\315\345\277\335\355\037\2567\216\367?\353\t\231\360\320\247\002@ 7/\004\244\361\343?m\350\007\350\221A\343?z\002\'\262\261>\263?\317\322\361E`\017\321\277dnL\n\216\332\320\277O`\224\321\223U\000@\n/NK\277\305\344\277*\033<tz\361\325\277\264a!\262\262g\340\277J\327[\223C\350\345\277\237O\374\366\312\343\334\277\306\254Y\216>\251\347\277z\002\'\262\261>\263?!\252\314\005\302W\314\277c\030@\350\035\224\005@\217YPP\304\004\343\277\252\371\2146Z\304\346\277\024\252\334\\\270 \336\277\263W\277z\316H\014@\350\265\205O\235\344\314\277#\035\000\343\215+\262\277Jo?\354o`\333\277/\037\251\r\304\252\021@\005\266e\241\260R\271\277\201\325\330\2338*\335\277jd\017`$\307\342\2778\365\013:\347\335\311\277E\\>\3765d\345\277zmKxy\313\331\277\207c\206\242\224\323\332\277\264N\221@dB\343\277`\362\314\275v9\342?\240\037\371\332\257e\362?0\2320\260\307\006\014@\251(\275\036\200N\372?S\304C\366y\336\327\277d\326aY\310\035\345\277{\r\257d\225a\327?\200\261|\'\257\031\277\277\021\252k\340\314I\345\277Z\247}2[\352\342\277\010xa\223B\277\270?a5+9\267\223\340\277\2073\203\206yU\360?.\342\222w(\306\324\277O\017\033\255\020\022\350?\247\311\267\324\316J\357?b\321\354\220\274\341\001@\323\265$*\250\326\345\277C\013\211o\360\222\r@\374\324\315 \020\307\016@)\274\001\030\240\244\341\277\360\355K\301\003S\325\277`\236\023\274\346\312\313\277\372\215z\311\256\024\013@6\224\234\362\r\200\300?\035\240\246\n\350Q\346\277\025A)\354\2612\374?(@\363Gt\332\353?6\214\034_\036b\350\277Y,\321\0319=\333\277\240\255jwI\201\340?\3529~\327\n_\335\277<-Z\327\3100\343\277\205\246\344\035\325-\311\277\217YPP\304\004\343\277\251(\275\036\200N\372?\032~o*g\211\253\277\007h\367G\021\361\345\277\365\t/\3726\212\341\2779f\003\324\032\\\344\2773\272\256%xA\316?\335\217\203s)\354\320\277&\342\032\243\243\252\345\277\250E\306\244\372\024\345\277N\236\262\226\361\274\344\277H6%s2^\341\2771]\251\264\234\005\337\277Eo\316o\204\211\342\277\362\204\266\205\336+\003@/$\217;_\003\345\277\220\270\212\254\236Q\327\2774\207\247\226\022&\005@5g^3\2134\314\277y!\241\215\355\243\342\277\306\207\242\272D\300\301\277,p\310\251\377S\343\277HHL\325\335!\332?$\263\256P\273\222\322\277\302\371\364\263\350\026\304\277\007\216\027+\256;\340\277\375\r Xf\357\252?\265\375\342\t\270\265\001@\253\256\265\177\303\220\306\277\337\276\357\305\021\004\344\277#$\333\374\027Z\366?\233\004\255k\257\224\315\277\253\256\265\177\303\220\306\277\363hb\376w\222\337\277\032~o*g\211\253\277;\3347xA\360\257\277\271\213\211\270z\032\t@\025A)\354\2612\374?t\005\276T\272l\326\277\222\r\027\342#\264\344\277\270\254i\3454r\351?\034\377\377pe\217\234?o\375\336\343h\203\212\277\267\002X\322\303\361\344\277$gn\212\201\375\335\277\323\265$*\250\326\345\277\256\307\211Ai~\260?\374\203\352\327:\361\323?\233DtD\347\300\310?3\007\215\r~\201\360?Qn \367\301\025\363?\217F\300\336u\337\345\277\354\307\272a{1\342\277\033\2331B\334\025\003@\026%\211u\332\315\345\277.\342\222w(\306\324\277\230\2104w18\345\277<\032\312ez\013\346\2773J \233\347$\330\277\3310B\277\265Z\346\277;#\332j\003K\377?<\032\312ez\013\346\277k\260\271J\260\356\331\277\214\245\211\276dU\341\277p\016\203<\324\366\237\277\013{\3705K\355\333\277"
      }
    }
  }
}
node {
  name: "tensors/component_9"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 750
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 750
          }
        }
        tensor_content: "\270\333%)\020\377\260\277o\026\350\030\332\227\323?\247\361\002V\3549\347?\326\376\213\206h\013\343\277\272\n\276\304\265P\337\277\014\334.)\017Y\357\277[\327\332\3108\\\365?Kl\0242u%\370\277\3218\005\333A\332\360\277\031\037\002\341\\t\366\277\321E[NK\233\330\2774%$\360|\203\306?\332Kwj\037\346\355\277\202nQ\302[d\261\277C\270\235V{(\355\2775\372\t\343*A\365\277v\325\351\224\335\004\333?B\223\270\205o\262\351\277\213\347\375\337\037\031\302?\3127Y\312\001N\344?R}=\344\232\231\367?\266\335\023\377:^\345\277\217]\262\371v3\326\277n\315\276@\267\354\272?nf\222\254\031\263\272\277\275\024\\\343\343\376\315?\352\177XJO\333\230?\021\003\206\273\\v\302?;\353\261O\353\226W\277\"\206m]\200\347\352\277\344\02383\317\271\350?H(7j\324S\302?\334\267\351\n\024\035\344\277\276\322\370\240\241\026\343\277\221\034{\331\332\304\371\277\007\340\344\322\244\213\362?R\202\245\204\254\257\352\277\n\341\236\253,6\347\277<@w\231\321\353\242?{ \272V\333\336\312\277O\300 S\360\325\340\277\321\311\326\350\364Z\344?\222\307\243\241q\257\370\277\310\207m\272u:\262\277\345\327(:\220\002\333?\216\250\266s\217\364\361\277\023T\342\324\2177\356\277\330@\335\003\346\237\330\277\353\327\203\311\205q\325?\215\213\315=\303G\373\277:f\322\2556H\360\277OG\216\005\312\367\241?\255t\312{\342P\344?l\301\021\331WY\337\277Ok\251\237\340;\344?\036N\000\334\271a\376?i\243I`\201\'\322?\\s\3074\205$\333?\2125\250\351N\231\261\277\253\236\322\007^S\355?\303\335\270oE\357\352\277e\245\014Qu\261\370\277\252\\;\036\340\233\370\277<\311G\0027\030O?-\240=\253P6\261\277\027\246\251\206X\303\321\277Tf^\215F\032\302?[\177N#\233\r\322?\376|\231VJ;\324\277\r\207W\361\245C\356\2775\230^\'\377B\306\277\362\354\374=!F\355?n\266\311.0p\346\277fa\255\n\026E\344?\215^\006\352\320`\340\277\\\220\006\225h\241\326?5aC\247\322\347\371?\177\3103&\361\251\317?\374\001\326\255\237\264\370\277\250b)\177\265O\273?\245p\365\304\217\271\321\277_\301wI\356\014\313?\225\0136 \234\365\352?r\3302.\247\210\353\277E\215L\273F=\313?\240}8\025CI\272?\331\211\006\334\010K\261\277\321E[NK\233\330\277e\341\006\'\277\034\353?\036t\342\003\230?\273?H\r\300f\322\213\346?\261\225\262>q\232\350?)\251\251U\361+\355?\310)V\306h\363\361\277\027\003=\331=\267\367\277\362\323\217\225\373\342\367\277\023:\213\2215\354\321\277\211\301=4\016\260\374?\201\324\'X\342=\344\277<\326\021#rO\344?w\236\265k\310F\365?\320\257E\022\"\010\367\277\250\'\037\030\357`\361\277Mq\n\241V\020\367?\326\225\207\357\300\023\343\277\001\333\317\337|\035\365?5Bu\3756\260\361\277\374w?~\200C\371\277\362\220\352\'$!\370\277[\365[\335\'\224\326\277\315\206\013\023\263\006\322?\201\324\'X\342=\344\277 \206\240\225K\301\330?v377\324\301\364\277\364\270H\327&I\000@\320\257E\022\"\010\367\277\277\374\346\024\304\300\366\277\004\036:\302\364\000\307?\3672iD\234\233\261\277.\333\\5\014q\326\277\244d}\234\251\246\363\277W:BL\254\007\363?b\363\337P\033\004\354\277\266\270\207\316dT\342?\024~0D\225{\345\277\317\302\242(1.\236?W\024\263`/\224\360\277B\223\270\205o\262\351\277i\r\335\373X\014\333?\212nK\347\375C\354\2772\r\375ihN\337\277g\210\316p\341A\313?\255jJr\2120\370?\204A\373\271\237\224\337\277\316R\367-U\177\357\277\257\217\233\027\001\\\335?\232\333\020\201s|\337\277\\\262e\311\024\321\260?\227<B[d\331\340\277\206\261\360T\325\005\354\277\252\337|\340\210\206\357?\004\037k8\232\001\371\277\247\372\321`\257M\360?\212\274\343\322\315\326\360\277\364\375T+\225^\355\277\022O\277\031 \253\350\277\n\350(\320\263\006\374?\022\351/p\351\001\343\277W\216\205\023\370\004\342?\207I\306\232KI\355?\227a\207\260\311\312\350?\210\337w\344\025\356\361\277\023\223Q\230J\361\372?\244\025\007f\266e\345\277\267\224\t\253^6\313?(\352\263)\377\370\362?\245\260\370\370g\213\340\277Q\313s\336\270\003\313?\006\212c\200\312x\362\277\'@\330\366\024\016\313?\030\247~\367\210\323\371?\235\342L]\357C\344?\235\025\250\352\"\331\317?UVY5\335TY?\340\303\266\356\240\n\313?\202\316P(\277\010\300\277f\276/\037\225~\366?\3646F_bO\366\277\221b\274\013\376\\\262\277\205\200\367\304\313\211\326\277>\326\336\352\246u\326\277\317_\222\025x\214\311?\261W\220\207\354\376\361?\230Ae\026\324e\346\277\315\330\232\2519o\357?\302\224g\253\212\373\001@\tKv;\316Y\344?\357\234\310\300\240\347\301?c\303R\332\004\013\374?\302\343\365\017\377\327\272?I\236\036\274\366G\344?w\350x)\274#\370?\327\336\275 \273\347\367\277j\264\001\322N\273\326?I\314\025\216\247X\344?\013p\030\026\370H\364?\303\r\301\200\366s\365?\020\021\267z\364g\327\277:|\215\032\022s\006@\220k\273\302\212\271u\277{\220\215\206#\363\301?\325\364\3360\202I\360\277\203A\353\373\210\347\371?s\300\265\014\363E\344?\207J\315:\201D\364\277E1^\027\345\033\313?\221+\37058\337\350?fdbxJ~\366\277\234<~m\"Q\360\277\355\271\272Y\326\023\313?\336k\361\233\204\310\301\277\017K\251s\2313\302?\333\354\014\365(g\357\277\256\360]\247hg\361\277)\317\305\210\337\332\371?5`\222\250=\333\366\2772\354\273\006\244\230\312\2777]\326V\345\222\340?\373\021A\212\300H\306\27756\334aJ\027\313?;\263nK\372a\372\277\327s\276\364fa\372\277\023\307\322I\372\004\354?\362\354\374=!F\355?\0241$\355\327\032\322?_\230k\005~\242\350\277\316\342&\003\243\311\350?Yw\260\216}\372\332\277\r\216.\335\332d\365?\014\254\241\262\370_\377?\311\\\375\232\372\313\321\277\204\020\033J\010\232\362?\237\321a\263V\326\321\277\320[\231\354\211\361\361\277\226\365\340\337\"\343\327?\351K\247\273C\346\264?\210\360$\2150\341\312?\302\023\337\213\212\301\364\277\245U7\346\034\331\352\277\306\246\267~\373\n\363?q=x\320=r\273?`1~U\337\273\001@<\335\317\3564\357\342\277\256\204\200\271g\024\333?*\241D\345\333*\313?\002\314x\353\211\225\330\277~rH\365zp\353\277\321\340`\257\335\231g?\2068\341\334\357\023\322?O\202\376$\342\033\353?\247*\256\035\271\007\341\277p\002\210\201\320\333\346\277\'<\271e\274\340\360?=ab+\031k\370\277Y\350\037\202w+\344\277\033F8q,I\374\277\360\021\202\212\323@\354\277\247\021\367#\004\360\364\277x\303\232<\324\274\370?f\313\205\222\236?\356\277\013%8m\210\325Q\277\345\353\3045*\334c?]\'/JOK\355?\230\270gE\'\215\357?]Dn\2522\310\350?<\370\007jZ\243\363\277\0141\215D\025\250\324?Y\231\363%\212\200\355\277\213\337\347&\206\026\354\277=\221[v\232\031\372\277\224\335\021\002]C\324?y\236\313\025\034,\322?2g\366dZ\031\331?\216\250\266s\217\364\361\277\317\376\212\013\001D\004@V5\277\225Y\341\351?T,\340\314\177 \313?\026i\211\214\222\331\351\277\177D\224\031\254\346\376\277<O\314\367\236\n\333?\261I\214\010\354\334\000@\177\373zv)\007\373?\2236y\363\210\302\304\277\356\3701p%\322\347\277\023\274\202\275\306T\376?`\035f\355O.\313?\202\353i\251\256\324\371\277}A *#P\345?\3775\273\340%y\273?{\365\255\240H}\366\277\273\250X\370\nf\001\300\253v\250\202\027\353\360\277S0\t\036\305\377\301\2772\245\245cP\360\351?+O\250~\364z\342?\260\356SL\214\002\333\277Q\302^\336~\353\361\277\t\316\3064/X\317\277 \326!\332yp\346\277\345\353\252<\207\033\335\277Y\022[F\276\007\333?>\246Qt\220|\366\277\203\274\013\263nM\356\277\347\340b\222_2\344\277\177\376\277\241\355\027\363\277.\032\374\272sh\365?\275\200\022\310\226\251_?\377C*\241;\345\371?\021n\337\177\315?\335?\360Jz\242\304@\371\277Q\'\212\331D\272\347?\035\326\031{\356\231\003@K\t,\260\222\354\351?\202\350T\267  \343\277N\034\227\322\325\007\322\277A$\375\302:\026\362\277\001\305\315S\374>\373\277BX\207_\370\257+?\316\362\224U\342\371\361\277\200\222\003\'\363J\345\277\375\257\237\020\351Q\241\277\0251\345d\373\006\367\277\032\203\177S\254\322\324?@\025Z\376ri\340\277\355\340\217\336\355\323\332\2773\016g\004\026a\366?\375\004\250\251K\342\373\277f\021\306UQ\342\332\277}W\226\356\201\000\263?{\207\343\\l\330\371\277^U&\034\000\\\355?#1\226%\027\322\351\277\3164\211M\233\220\357?\334\215T7\'\337\360?\376\326f\375\224;\344\2774\036\220q\263\007\362?\263\rt\2629\227\357?\225\250.\230\013\344\360?\206vsMn\366\361\277\203\274\013\263nM\356\277r\254\210\255\264c\345?\250b)\177\265O\273?\323\307\276\305\320\327\365\277\225\021\3233\320A\355?\255\017\017\303\214\252\350\277\200\353\334a=\231\357?\354!\362\301\002\350\240\277l\006~\253)\371\341\277p8\344\007\313\210\001@\031.\353\3716\240\261\277\352\334sL*$\355\277T O\373\260\252\363\277\325\001Dj\273\340\360\277\312~m~\225\363\332\277\0347\262:\334\220\373?\'\232\251\202\356\237\362?,\255\230\233&:\344?\\r)j%a\371?\264B)P\255G\356\277&/a\270\257\365\002@\337\215\252a>\257\365?\210=_\'U\017\322?\316\365\024<\3420\243?x\303\232<\324\274\370?\010E\240_4-h?=\357tqU\007\372?\370?\313\030\226\256\350?Z%\371\240\314\374\320?\310\016%/gN\345\277\203w\351\300\243$\307?\340j\350\224\367\000\262?\377C*\241;\345\371?\202\266M\243\275\231\362\277\315C\277E\021\261\302?\"\332\340\346x\"\374?U\310\323\202\232\376\261\277b\315f\017\362u\366\277\363\232}e\261\212\365\277\303\203\353\310\372\356\332\277\241\202$]7\014\000@\031\320\335f{\220\344?\346,\016\261\312T\363\277\002\030M\350}\346\365\277\277\025\326;\250\276\312?\322.\205\321\351\271\344\277\357X\026>\340\020\343\277M\351{N\334>\317\277\242W\021\010\303\341\337?\337\233\220\327_\025\367?\356^S\336\231\371\262?\316\276\177x\235\233\362?\n\210a\007\372\332\360\277\330n\324\325\226\260\330\277K\"\364\356\274J\335?\317_\222\025x\214\311?\204\001\245\321\316\216\347\277\271}\201\355\221|\346?6Ri<:\356\341\277\225\250.\230\013\344\360?\300\342r\314hb\372\277U\261\026\257!\200\347\277\201\256T\007\023N\302?\025\331\221[\375\223\367\277\020,.~\366/\343?@_\n\2101\375\361\277\225L\200tm\255\350\277\000VF\301yS\356\277\031\367z\326Q\016\362?p\213\347N\r\024\375\277+\271\217\314\254K\365?p\264\333X\005\021\262\277\274\001\207Y\216\333\360?2.H\236\370\315\362\277C^\320\2570(\335\277\004\361\010\031\335\324\330?\243\0342uT\260\261\277\224\321\223\3559\370\376\277\300\226q\203\346o\346\277\006&F\222\324\225\350\277\032\246\302/A&\313?\201\374\341\232\270}\346?\306\346\312p\352\211\347\277S\'\243\265\202\240\007@\332\311c\271\334w\337?\023\255\313\210\256\354\005@\272\210\234K+\304\350?\327\341\2108C\006\367\277#Y\355\r\314\324\242?\346\003\372\031\306\345\340?\247\321\024\354\250\205\337\277\372\304~\r\t~\372\277\232\243x\251\355\343\331\277\366\\\220e=9\333?\030\010\035\236\313\274\351\277]\341\264j\255\277\356\277\010\330 }\202L\243?\025\212\001\r\261\372\363\277q!5/\357\253\365?\272\n\276\304\265P\337\277\304\224\243:\310\202\337\277\362\322\003\220`s\313?lI\002\246\3724\331?\371fI\01355\353?6Ri<:\356\341\277\343,(\311#\255\350\277\000\r\366w&\'\344\277\020\021+\263\3229\313?\026<?Kqb\324?\303U\364\366I\336\332\277\261\200\301\254hb\365?\246\374\371A\352}\364\277\361\304\242\177\244\201\357?t\273y\330v\236\240?\313i\231z\004\260\350\277\373\326\223I#\335\332\277P\204f\375iU\306\277~#\302\315\323:\221\277H\335\0008@\306\306?\005\302\364s,\002\364\277e6C\007\264V\226?\311\214\366\345{z\323\277=\000S\323\365c\262?\177c!Bv\331Q?\270\212zR`^\365\277:23\377\236J\302?>\232\266Y^s\301?\262\341^\330C\204\006@\305\202\357o\020?\262\277\271\231\207\365\3031\313?\025\255\250R.[\346\2773-\305kAp\324?U\256\241\301\2601\355\277\223\252h2\024\226\007@\321\360sX\313\330\361?\316R\367-U\177\357\277\347jC\234\2049\373\277\353\302\364\261\245C\344?\363i\000\017\217\327\241?\201{9\203\031\205\337?\030\n\376\032\037\363\361\277/\234\363]\216\357\360?\366l\325\331\363:\366\277\361\034\217 %j\346\277\322\332\360\324\352\370\372?\3333&\235\022n\300?\267\2043iC\342\367\277<Y\272\304!\343\322?0\355\233\317\376\013\323?P&\335H\265 \335\277p\224\314\003$\r\363?\264J\351O\270\267\312\277\336\270cc\330\334\340\277\"\236\323\334\371m\370\277\007L\330\363o\245\326?1\035\223+\300\267\312?\372Eo\020\356\t\357?\202\323 \270\254B\375?_\301wI\356\014\313?-\273lXz\036\003@\367m\225\236\270\035\322?9\031\215v\245p\000\300w_\317\n\3606\333?\023n\037w\032I\324\277o+\\\230\021`\341\277]\177\033\353\3173\344\277\343\tr\275vv\335\277\037\221\210\273\031/\355\277l\031*\316\177\014\340\277\210\265\337\232\n\024\343\277\276\235\376\005\2368\261\277\237\321a\263V\326\321\277\030\261\304\344\361\n\324\2771L?\341\224f\365?S\302\326\002\373\332\360?6\224\000&\270\245\366?\240\243\260M\246\350\360?\276\220\272\340\317\254\337?\365\370\226`lx\365?-d\002oI\314\353?u\241\001{\260f\361\277\364\3361\336@\360\321?\325~\222\356\030\257\340?DV\315\271C1\375?b\244Rx\355\006\344?\354\252\006P\231 \322?3\316c\320=\217\367\277\262\205\344g\330\356\372?\300\342r\314hb\372\277NJ\033un5\355\277u<\r#\300\345=\277$Z\235t#0\322?M,\255\224\264F\355?\010\202a\202\304X\337\277\266\313\367\336\374\357\360?\321;op\210\305\312\277\214v<0\024\213\354?\242\344\315\336_\340\330?\206\355\215\034\344\221\365?\320[\231\354\211\361\361\277A{BH\337~\346?Xf\370\034\260f\326\277\000\360\266\027C\252\350\277haz\322Jk\326\277y\004\037\300\341Si?w\032\203\263=F\324?\247\321\024\354\250\205\337\277\344l\3457a\302\242?2f\226\233x\320\340\277(\307\020R\207\013\351\277\250\215M\316[\231\306?~{\222#O\361\317?\021\352\326\024<c\326\277\255\024\340\230\200hq\277jQ\250\215\254L\360\277 \242\031\315\225Y\302?\267\023\003\376%\305\351?\370\322\022J\231w\001@D\303\252\354\314Q\347\277\327hj\372->\344?\371m\302\352F\277\350?\256\234\365\376\020q\301?\321\237(\365\225\233\350\277\207\332\330\016\274\310\263\277\267\'\275\244\325\342\362\277\306V\332#yS\371\277\255=\306\024z\320\360?\023\275\305o\272\307\364\277\330\371\2163c\021\320\2773\016g\004\026a\366?D\016\357\346\250\375\352\277Ly\251-[\372\372?&\237FQ\232\036\361\277^~\024K\2328\375?BS\265Q\227\340\332\277\200\300Z}\375\326\351?;\352\017Gb\215\302?\306\362_\'H\221\346\277\376\r\352l\235\272\372?\257|\326K\302\345\305\277y\233\020\274\252\272\370\277\023\302O\n1\375\341\277\364\013Jg\346\232\367?\243)g\375\277!\322?\343\227=\237\313\030\363?X\035Cl\214u\357\277\255\002\205\250G\032\307?\372\351\377\353\265\005\361\277\351@\264f\tg\232\277q\345\'%p\367\361\277\n\324\037Z\232F\361\277\031\343Mw\023,\363?\3672iD\234\233\261\277\350\"\244Q\306\031\364?(j\372\021s\207\350?\210=_\'U\017\322?Uy~\327\233\347\341\277haz\322Jk\326\277\361\260\245Y\234\373\361\277\020\360\255D_\230\352?\352\241\370Kq\273\262?\0251\345d\373\006\367\277f\237;\205&~\272\277\2679\357ng6\364\277\231G\225\346,\007\313?\201\260\034d\364\002\342?,+\236\202\355\026\355\277\245\350\351p#\220\346?\361\375\033\217\365\202\371?2Rhl\315\261`?\303Wux\272z\357\277\363\345\320%\275\014\342?\302\004\231\325\375\363\353\277\277\023\0262[\016\373?c\322\326\032\2064\337?\212\313\272\307G4\355\277\241\310\203e\344\334\001\300\355a\'\304\035\344\000@\224q\365\002\t\373\361\277N6\356\0250S\356\277\261\034\027\356\212b\340\2771\3464\265\261\325\272?\201\256T\007\023N\302?R\216\031?\215O\360\277\016F\255\030{\020\354\277\272\267\'\216\371\354\372?|w\325\005\020B\364?>\231&?X*\262\277\'\232\251\202\356\237\362?S\376U>\252\272\350\2772+\316\323\021\027\264?\016\257\300uR\336\364?\372\017\331\2618\017\353?x\213\002eN$\363?\315U\250-\204E\371\277\340 5\211#\377\001@\320\347w\001z#\322?\3225\333N5\273\317?\315\006\222{\352\177\357?\326\376\213\206h\013\343\2775P[sX\026\363\277d\026\251\220\375\203\370\277\003\026\010y\313\301\340\277\007|\367\246[\346\352?\001\363\227\331\036\256\364?\005\263\224\245F\334\365\277\2708\350\3161;\355?\241\201G\306\306\231\272\2774\013\302T\370\324\371\277&&\210\206\377\271\260\277\252\032*!&\362\352\2770\355\233\317\376\013\323?\350S\303I:(\374?\353\302\364\261\245C\344?L \023\351\3622\344\277\n\341\236\253,6\347\277\277\212\343\260\254w\353\277\305\"\253.\333\234\344?\216 q\0034\342\364\277Q\302^\336~\353\361\277\315\274[\005h\336\366\277\360&\243U\022\325\320\277\rwy\\\366\352\352?\340\240G\276d\354\352\277\014\203\224v\241\036\360\277\254N\304\341ho\262\277\022O\277\031 \253\350\277d\372\243\010\033\334\341?\253\212\362o\315\301\340?\010\264z\322uQ\344?\274\340C\007\n#\362?\224\211\2529\376\177\273\277h\261\356W\367\352\332?6=5=\306\020\374?q\"\266k\327z\366?\032c\221\351h\036\355\277\347\313\321\204\260u\365?:N\266\010\303W\372\277aV&\330\021H\360\277\236\202\202\247\215]\376?\020\303\032!\037b\372\277B\014\241\235\003;\344?\210U\n\223\177\253\360?\321\014\217\212\001f\365?\020{\330\344\233!\374?\346\004\316\n\247\350\352\277B\243\234\006\\C\344?\335\323\361\010\025a\366\277\226aZd;)\322?\371\335\222\025\371t\357\277\306\321\235\314#\332\324\277\216\255L\347\215E\355?V\372\261\320b\372\351?\0132`=\017\324\301?;\300\003G\3406\375?`/gn\326\252\350\277\210\236=N[\343\351\277\222\032\231S\301\237\262\277eK\237.\204,\375?\000\r\366w&\'\344\2776\3257FT\024\343\277\344\274\353\311\006B\360\277\366\\\220e=9\333?G\265\340\310\007n\001@*tw\245\254\013\371\277\370\"\214\270\2621\355?\262\212\004$\263\375\303\277I\025f\327\372\204\356?\242\307\216~|c\335?\233z\343\032\211s\372?\271\313\016\2017\254\332\277\261I\214\010\354\334\000@\006\212c\200\312x\362\277\033U\310\001\277\254\374?\201Rfc\261,\302?\2422\316\241\035\363\321\277\330=\023s\274\032\333?K0\252\2421s\354?x\362\365\274\365\247\350\277\300D\202\361|m\365?I5\032%OP\344?\306\202\2006f\005\367\277\277\211\3621T\200\360\277\214\255\177\037Y\037\313?\204\026\356#\024\000\244?%\340\r\270<F\344?\352\nk\036\3334\355\277:\206\032\260\226?\365?\225\305vTIT\353?\324\271e \227\216\377?M\237\362\254\327J\356\277\274\272\375n4\254\305\277\205\002[<Q\306\363\277\000\257l\303q\362\352?\373\276JX!K\356\277\261\016\340B\2668\344?\274U\273Z\252\002\367\277\353\216\023\005\023\226\357?<@w\231\321\353\242?f4\212)F7\356\277\301zk{\264\272\301\277\277\023\0262[\016\373?\006Q\310v\024X\356\277\361\304\002{\207\033\363?\220\032@\304jK\344?\371\210.\r\250B\323\277\302]\242I~\236\367\277\217\n\363\3441\241\363\277\275\024\\\343\343\376\315?K\312\375j\203\325\365\277\330\232\252\2520\240\350\277:\030\307!\306\224\273?\214g\2067\027\225\351?\266\307`\362\314lR??\352\266\246,!\322?\003\214^\025w\007\360\277\327*\005\276OY\265\277\300R\267\255\221\224\367?\033\016\272\261\377\010\354\277\321\376\371\322\t\245\357?\3047\306\r\335\370\301\277"
      }
    }
  }
}
node {
  name: "tensors/component_10"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 750
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 750
          }
        }
        tensor_content: "+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?\323\000\375\250`\366\n@\201\225G`\214\005\t\300+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?\201\225G`\214\005\t\300+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?\201\225G`\214\005\t\300+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?\201\225G`\214\005\t\300+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?\201\225G`\214\005\t\300+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?\201\225G`\214\005\t\300+\265V\213D\r\277?\365\ncZ^@#\300+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?\201\225G`\214\005\t\300+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?\323\000\375\250`\366\n@+\265V\213D\r\277?+\265V\213D\r\277?\201\225G`\214\005\t\300+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?\201\225G`\214\005\t\300\323\000\375\250`\366\n@+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?\201\225G`\214\005\t\300+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?\201\225G`\214\005\t\300+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?\201\225G`\214\005\t\300+\265V\213D\r\277?+\265V\213D\r\277?\201\225G`\214\005\t\300+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?\201\225G`\214\005\t\300+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?\201\225G`\214\005\t\300+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?\201\225G`\214\005\t\300+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?\201\225G`\214\005\t\300+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?\201\225G`\214\005\t\300+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?\201\225G`\214\005\t\300+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?\323\000\375\250`\366\n@+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?\300\235\213\373\333\277)\300+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?\365\ncZ^@#\300+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?\323\000\375\250`\366\n@+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?\201\225G`\214\005\t\300+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?\201\225G`\214\005\t\300+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?\201\225G`\214\005\t\300+\265V\213D\r\277?+\265V\213D\r\277?\323\000\375\250`\366\n@+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?\323\000\375\250`\366\n@+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?\365\ncZ^@#\300+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?+\265V\213D\r\277?"
      }
    }
  }
}
node {
  name: "tensors/component_11"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 750
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 750
          }
        }
        tensor_content: "i\223\361f\264^\340?\270\000n\340\345@\354\277\027\007K^\317\305\360\277\027\240\242\310\340L\327?\235yO\031BF\362\277\253w\203b\r\003\325?\036S\350\263.\214\235?\374\325\032\357k\272\326?\274\000\237\304\344\031\344\2779\344\271E\261a\352?\322\376z\240l\376\256\277.=A]7j\277?C\363\000\373\201>\344\277i\320\345\317\rk\370?\030r\223LZk\371?IOd\3749\271\322?\310\223\0242{\240\363?\252\033\357|V\257\356\277\341\31160i\233\000@1j*\242U\337\327?l\320[\275\267\373\362?k\242LA1\032\345\277\345\374K`&K\314?\350\205\254\313\250\031\356?a\223J\225\013\365\355?\260\311\214X\006\016\363?\277\326`\205\371=\355?D!\020w\010 \362?\027v\225m\364I\310?\252\260a\205 R\323\277\027D?\307(\322\350\277\275.\256@k\373\361?\375\025_\016\007\353c\277\307\307A\253I\363\235\277\276z\375\203A\303\336\277\350\205g\302\375a\353?\034r\3040YD\361?\tP \200q\315\343?\363B\033o\177\304\361?v\265\356E\363k\373?\3122\304\206\261\270\313?\232\371{\260m\021\371\277\203/%\273\367W\360\277\tPe\211\034\205\346?c\345S\213\004\000\374\277-\377k\306 \251\344?\201\233\304\304\351B\266?\2366\241\375\305\366\350\277\377yr\344\010\210\345\277\247\363\217X87\252?\220\255\373\210\230p\324?\200\257QR##\367\277\350SB\0001\303\303\277\221\353A(\340?\000@I\311\256\226\352\203\342?\331\027\376\340\225\222\306?\352\205\230\246\374:\343?\t\242)vj\330\361\277\360B\245\201\3253\367?\372jp8\343b\356?\251\260\353\227v\301\330\277\375<\303\204Z3\360\277\267\000\263\351\220\370\356\277\334SV%\335\241\316\277\374j\\\0237\204\343?\376y\374\366^\367\352\277\270\000n\340\345@\354\277\334\240\031Cm\251\345?\274\000\237\304\344\031\344\277S|af\004\r\306\277t5L\301\035\020\372?%\205\334\"\305&\322?@!\232\211^\217\367?s\034\334\344\214\234\327\277\006\326\220\334\025K\321?\243\260u\252\3140\336\277\276\244\200\314\327V\310\277Q\006\324\343Bi\362?\262h(\210\220G\300?|+#\232]y\301\277M\033\270\214\343\216\360\277\270C\034\374a\220\365\277\306\326\221i\370\026\345?$\354\016\313\t\017\361\277))4\030b\364\340\277\305\250=\344\306}\364\277Z\256\267\014\320\204\345?\322\376z\240l\376\256\277\325\370\277,6\375\367?h\376\257B\351\224\323?px?\346D\027\346?\370\2744%1\266\371\277K\007\265\021\000\036\265?\347\3747;zl\301?\202\257\307?\315\263\361\277\206l\324\032\246\254\345\277\035\032\274~\222>\357?\342]&\036F\242\371?\206\032\313$\255\241\367?\217Qg\243\341\034\356\277%\205\334\"\305&\322?\257\033\226N\377\030\341\277s\343\207\324\317\274\336?\360B\245\201\3253\367?\2426\322\341\304\317\340\277\367<\327\251\006\022\373\277\264C\246\016\270\377\372\277eel\375\203\354\367\277_k\365\313\247V\361?X\200\250\220I\243\367\277$\276\272E\330u\320\277\206\032\313$\255\241\367?\320n\010\246L\351\310\277\340\257\376/@\324\357\277+\377\177\353\314\207\357?\257\033\226N\377\030\341\277\220\224\213\254\007\375\361\277\377\363\274~\271R\325\277\025\3625\321/\307\372?\221\203\356-\254m\305?\214\365\276\230~\352\314\277;\266e\300\177\310\371\277~D\316$\337\312\256?\231\371\300\271\030\311\373\277\022\207\001\010Q\000\375\277\2356+\020\034f\356\277\221\353A(\340?\000@\252\033\357|V\257\356\277\302(%rG\221\370\277#\0322l<\317\351?t\312H\334=\"\364\277z5}\245\034\351\361?|]\322n\200\207\356?v\343s\257#\336\323?L\033\375\225\216F\363\277O\206vh\030\305\363?Jm\032\26130\334\277\254It\346\206!\367?\221B=\255c:\341?\016\r\243H\364V\362?8[\317\307\330#\303?Z\200\036~\3633\362\277?\266\333\255)Y\364\277<j\240\217\377o\322?Y\316(\270\036D|\277!l;b5\332\367\277\257\033\226N\377\030\341\2771\016=\216G\365\343\277\266\361\234\030\277\364\354?\271.}\\l\"\372?\306\223\343M|\307\373?y\207\313\244\300\253\342\277\203]\276I\324\250\343?\270\3034n\341|\361\277\345]\234\013\3602\364?\232\371{\260m\021\371\277g\345\204o\003\331\363\277\305(\340h\234\331\365\277\220\205\035n\362 \250\2771Qu\274\031\264\362\277\330\312\341\224\256\364\341\277!l\366X\212\"\365\277\372\016\371\021\177\t\325\277%)\0034c\033\351\277\214B\202\266\016\362\343?I\033\207\250\344\265\370\277t\034R\3226-\322\277^\275\210\324\366\320\344\277C\363\273\361\326\206\341\277\2416\027\353o\207\343\277\215\200\022Dz\373\273?\214\365\276\230~\352\314\277\373j\241\034\342;\346?\205\346c\276\001/\330\277\276\244\200\314\327V\310\277\234\313\235\030\346\010\323\277\301\326\326r\243\316\347?h\274\230f\006\300\000@1\321\027A\357\017\364\277)W\210\235\223\215\361?\225\377\004\177\221{\362?\341\257t\035\352d\352\277\345]\341\024\233\352\366?4<L\n\316\326\361?\326\3705\032\340\215\362?\345]\234\013\3602\364?<j\240\217\377o\322?Z\353\253u)\221\375?5\016\202\227\362\254\346\277\333\240\243U\303\030\353?[\275\315\335\241\210\347\277a\223J\225\013\365\355?\025s\245^\026\371\263?\2366\\\364\032?\346\277%WW\271\224\264\371?\266\361\234\030\277\364\354?\010P\357\233r\364\353?\323\r_\314+k\363\277\207\370\232\202\260\\\266\277\334SV%\335\241\316\277D\241\262\373\335{\363?\367\274y.\334m\374\277\025s\245^\026\371\263??\210B\037M\010\321\277uJ\246Wh\306\362\277\247^\235\230\322\376\367\277\355\205\"\271R\252\350?\231y\0365Cm\372\277\331D\205]\266U\337\277\320\312:\303\005\213\357\277\352\205\230\246\374:\343?S|af\004\r\306\277\203]\276I\324\250\343?%\205\334\"\305&\322?mP\2718\342\237\361?\220B\307\277\271\251\346?\336\223`\377]9\376\277\354)\277\267\232/\332\277\324\370\0046\341\264\372?\225\377\004\177\221{\362?\300\256\013\274\225\237\360?X\000\006\014tG\366\277-\377k\306 \251\344?K\330\330\214hf\357\277\260\311\214X\006\016\363?\273\246\n\200\033\006\376\277\306\023\206\322Q#\375?\260\2259\027\007z\336\277\303zsq\353S\331\277Lm\006\214\207Q\321\277\254I\271\3571\331\371?mP\2718\342\237\361?\235\344\334\020x\243\375?Z\000|\371\035\330\360\277\272.\363I\026\263\364?\0275\237\343\000_\341?R\2061_m\r\361?[\031\354\325\256K\323?1\321\027A\357\017\364\277v\343s\257#\336\323?\177\001*d\035U\335\277?\210B\037M\010\321\277Z\031v\350\004\273\330?G\311}\262\353\252\352?\364\341\205\272\n%\307?\266/\324w\323g\267?\215\200\022Dz\373\273?a\223J\225\013\365\355?\203\032\020.XY\372?\302(%rG\221\370\277%\205\334\"\305&\322?\0275\237\343\000_\341?ux\372\334\231_\343?L\311\363\237\225;\345?WR\336\035ny\334\2778[\317\307\330#\303?\240dkp\241 \364?6\016\370\204\234=\341\277\326\312k\247\004d\347\2772\016\307\240\235d\351\277IOd\3749\271\322?L\265\311\233m\313\271\277\242d&g\366h\361?0\243\010\305h.\326\277\2426\322\341\304\317\340\277\266\225\257\004\261\n\331\277\325&E\226fo\320?\nP\333v\306\025\341?\213\224\237\321\263\333\374\277\267\\\321\341\235\273\332?\0255\263\010\255=\354?\303\024\"\367c \275?G\227\023\347sT\300\277@\363E\004-\366\346\277M\330Nz\022\367\351\277Z\353\253u)\221\375??\210B\037M\010\321\277\253\336p\001\2473\361\277\0215n\377\001\206\351?a\223J\225\013\365\355?\234\313\235\030\346\010\323\277\000($\345d\305\364?\361\224\363\200y\366\347\277\357\302G\006\253\217\370?\315\211\272&\2740\303\277C\363\000\373\201>\344\277\242\344\310\353\313\304\362?$\327>G\025\310\375?\364\341\205\272\n%\307?0\243\010\305h.\326\277\"X\363\335\246\261\271?\367<\327\251\006\022\373\277\322_\255\313\317-\324\277R\2061_m\r\361?jP\376A\215W\364?\274\000\237\304\344\031\344\2771j*\242U\337\327?|]\322n\200\207\356?\374\253\r\224\177\267\307?Q\330\177^\021\320\341\277\tP \200q\315\343?_\n\245 \336n\311?\260\242\301v\027\021\376\277<\313p\362d\355\247?%WW\271\224\264\371?\220\205\035n\362 \250\277\356\2248\212$\256\352\277\356\2248\212$\256\352\277+\377\177\353\314\207\357?\276\244\200\314\327V\310\277X\256\206(\321\253\355?%\032cP;\250\341?\234\313\235\030\346\010\323\277\252\260a\205 R\323\277<j\240\217\377o\322?v\343s\257#\336\323?1\016=\216G\365\343\277_\353\227P}\262\362?\203]\276I\324\250\343?q\261k\033\341d\224?\340\257\271&\225\034\355\277D!\020w\010 \362?\272.\363I\026\263\364?\360\306\277\024\357\376\301?\374\255<\324\305j\252\277D\241m\3622\304\360?\n\"\207\361\224|\360\277\345]\341\024\233\352\366?\226\3309\235\242~\375\277\322_\255\313\317-\324\277\024\207w\365\372\220\367\277\264\303\003\212\342\243\371\277y\207\313\244\300\253\342\277\201\310KA\n\006\337?\321\242Q\214\221\243\245?1\016\014\252H\034\354\277\035\032\274~\222>\357?\0225)\366V\316\346?\307A\201),&\320?\267\\\321\341\235\273\332?0\377\365\330v\030\352?\305z\351^\225\344\323\277ud\213\317\3067\265\277\341\214\2525\232\201\267\277\257\033\226N\377\030\341\277\346)I\312\360\236\337\277d\242`f\335\370\357\277^\275C\313K\031\342\277=\'\244\307\341(\000\300\341r\200\264\220X\362\277[\275\315\335\241\210\347\277vx\265\323\356\247\340?\tP \200q\315\343?\203\032\020.XY\372?2\321\3227DX\361\277@\320{\034\335\022\264\277\340\257\271&\225\034\355\277\tP \200q\315\343?\375\025_\016\007\353c\277\220Q\335\220\213\255\350\277\230\'\3205\237\252\351?|]\322n\200\207\356?t\312H\334=\"\364\277\201I\331NW\360\272\277\327\370z#\213E\365?\027\007K^\317\305\360\277f\320*\331\270\"\373?l\251\220\333\310\376\375\277\322\273\337\350\210\317\352?$\354S\324\264\306\363\277\026\331\366\330\235,\320\277\220\024.1\335X\363\277\t\"\314\372?4\363\277\340\257\271&\225\034\355\277\322\376z\240l\376\256\277K\311\302\273\226b\355?+\377\177\353\314\207\357?\233y\331+\230\265\367\277Jm\032\26130\334\277\256\033 aU\210\346\277ud\213\317\3067\265\277\371\016\203$\325x\332\277q\312\322\356\223\221\371\277.\321\241SE\177\371\277\214\365\276\230~\352\314\277\tP \200q\315\343?\352\327\265\301\241$\374\277\372Q\023\300\352\017\241?\374\253\r\224\177\267\307?\033D\265\264\322b\343\277d\345\016\202YH\371\277D!\020w\010 \362?\321\242Q\214\221\243\245?\232\371{\260m\021\371\277ud\213\317\3067\265\277K\330\330\214hf\357\277d\345\016\202YH\371\277[\031\354\325\256K\323?V\000K\025\037\377\370\277#[\343\354\204\002\316?s\034\334\344\214\234\327\277\341\362\335/\273\374\360\277\342\013\t\003\241\270\320?\001\250<W\344\261\360?\330x\330\236\265\351\363?\n_{Z\356\210\350\277{\023M\003 \244\260\277\214\365\276\230~\352\314\277\2356+\020\034f\356\277\033D\265\264\322b\343\277\364\302x\352\251h\360?-QD\330\032\333\372\277\024\331\n\376I\013\333\277\347\3747;zl\301?mP\2718\342\237\361?\377\363\274~\271R\325\277\220\205\035n\362 \250\277\375<\303\204Z3\360\277\257\033\226N\377\030\341\277\257\033\226N\377\030\341\277\321\r\244\325\326\"\366\277?\266\333\255)Y\364\277\210\343\313i\3632\000\3001\016\014\252H\034\354\277\374j\\\0237\204\343?\333\240\243U\303\030\353?\263\361\022\006i\205\347?6\274\356\216\2432\363?\235yO\031BF\362\2771\321\027A\357\017\364\277\304\023A\311\246k\372?\266\303\276\2007\354\366\277M4(it\002\323?\372Q\023\300\352\017\241?\271\000)\327:\211\351\277\323\312\260\260\257\033\352\277\010P\357\233r\364\353?\206l\324\032\246\254\345\277\363\302\275\363T \363?\243\332\370\362b\304\307\277\374j\\\0237\204\343?\377yr\344\010\210\345\277\2416\027\353o\207\343\277+\377:\342!\320\354?\307\307A\253I\363\235\277b\223\300\202\265\205\350?\004\242=\233\026\267\374\277%\032cP;\250\341?\374\274e\t0\217\361\277jP\376A\215W\364?\317\215\320l\002\356\374\277\270\000n\340\345@\354\277\320n\010\246L\351\310\277\341\257/\024?\255\347\277\363\302\275\363T \363?\275\256P\305@W\363?\'\327*\"i\351\362?\306\345\354Cu\322\351\277\340\013\035(M\227\333?\344]W\002E{\361?~/9\340\2436\373\277\323\215\274GV\017\362\277h\242\326S\207\211\352\277\2724\337\241K\215\243\277L\033\375\225\216F\363\277?\363\317\026\203e\354\277\330x\223\225\n2\361?\345]\234\013\3602\364?\233\3716\247\302Y\366\277\306\326L`M_\342?_\353\227P}\262\362?Lm\006\214\207Q\321\277\306\326L`M_\342??\266\333\255)Y\364\277\032rNC\257\263\366?\010$\'\251Ci\377\277u\207\232\300\301\322\352\277\315\215\025v\255\245\377\2772\321\3227DX\361\277\340\336\225\253,\324\262?\202\232\367\273\330l\376?\257I/\335\333i\364?\252\260a\205 R\323\277\204\232m\251\202\375\370?\t\221[\023\020p\315?Z\000|\371\035\330\360\277s\312\215\345\350\331\366\277\357n\251\332\2706\000@\202/j\304\242\017\363\277\027D?\307(\322\350\277#\205\360Gq\005\335?\n\371\337\361B\033\000@\303\250\202\355q5\367\277\271\000)\327:\211\351\277\0205\370\021X\365\356?\341\214\2525\232\201\267\277\330x\330\236\265\351\363?\"W\341\313\352#\377?\260\2259\027\007z\336\277\205\032A\022W2\362?-\377k\306 \251\344?\336]\2600\234\021\377?\361B\352\212\200\353\371?#\205\360Gq\005\335?\341\240\3249\302\361\342?\321x\354\303a\310\376?\tP \200q\315\343?\3152\260a\005\332\300?;\227\'\014 3\313\277\221\377\216\221\347\352\367?\234\313\235\030\346\010\323\277\367\035\336\376Q4\317\277\310\223\0242{\240\363?\026D\204\320\323\211\353\277\356\360V\2021q\326?!\276\316j\204T\333\277\203l\031$Qd\350\277h\2236p_\026\343?\271\000\344\315\217\321\346\277\322&Y\273\022N\333?f7\030xRS\327\277l\242\0078\206b\342\277\301\326\326r\243\316\347?\243\260u\252\3140\336\277\0225)\366V\316\346?\343\305\t{\200\203\000\300\357\302G\006\253\217\370?\254\014\305\206\330\314\341?\240dkp\241 \364?\271C\222\351\013!\360\277\025s\245^\026\371\263?\271\000\344\315\217\321\346\277N\206\273q\303|\366?\204\232m\251\202\375\370?<j\240\217\377o\322?\257\033\226N\377\030\341\277$\327>G\025\310\375?\224Q\016u\212\206\340\277u\207\232\300\301\322\352\277^k:\325R\016\364?_k\365\313\247V\361?%\205\334\"\305&\322?$)H=\016\323\353\277\231y\0365Cm\372\277M\206E\204\031\354\373?WR\336\035ny\334\277\366j\346%\215\363\350?\375<\303\204Z3\360\277\271\000)\327:\211\351\277\037l\305t\213I\375\277\257\033\333W\252\320\343\277G\227\023\347sT\300\277\025\007\325p%5\366\277\343\335>\220\305\216\365?\267p\223S/\262`?\377\363\274~\271R\325\277\341\344\216\027J/\000\300\321\r\351\336\201\332\370\277v\343s\257#\336\323?\210\232\236\215\201\326\360?\247\363\217X87\252?\247\363\217X87\252?\341]k\'\361Y\374?\253w\203b\r\003\325?\224\177\247\003g\327\363?\233\313\'+<x\330\277K\330\330\214hf\357\277\202l\2436\247\323\355\277\006\326\220\334\025K\321?\375<\303\204Z3\360\277\340\257\271&\225\034\355\277\254\014\305\206\330\314\341?x\207\020\256kc\345\277\373\325\244\001\302)\334?\346\335\264}o\037\360?\2366\241\375\305\366\350\277\213\224\237\321\263\333\374\277\310\223\0242{\240\363?\375\'\256\367\2724\372?rJ0j\2765\370\277\271\000)\327:\211\351\277C\363\000\373\201>\344\2771\243~\262\022\277\320\277g\326[:\231\264\254\277O\206vh\030\305\363?\301\326\326r\243\316\347?N\206\273q\303|\366?\262h(\210\220G\300?\266\225\257\004\261\n\331\277\266\373\302\332\262\247z?%\032cP;\250\341?\254ux?j$\000@ \354\"\360\265\355\373\277\323\r_\314+k\363\277px?\346D\027\346?C\241\367\004\2113\366?\2724\337\241K\215\243\277\322\273\337\350\210\317\352?\355\205\"\271R\252\350?Z\031v\350\004\273\330?/Q\377\316o#\370\277Va\257\345\224\305\313\277\030r\223LZk\371?\311\345\247:\312\032\347\277d7\242\212\250\302\334\277u\207\232\300\301\322\352\277\324&\317\250\274\336\325?v\265\356E\363k\373?nF\351?y\237\306\277\303\023\313\333\374\332\377?\205\346c\276\001/\330\277D!\020w\010 \362?L\311\363\237\225;\345?\322&Y\273\022N\333?\205\346c\276\001/\330\277D!\020w\010 \362?\363B\033o\177\304\361?\346)I\312\360\236\337\277K4<\216 \341\335?\376\247\201`\217i\363?q\312\322\356\223\221\371\277\235\371\361\235\027\242\363\277\220B\307\277\271\251\346?\205\346c\276\001/\330\277\341\214\2525\232\201\267\277\310\223\0242{\240\363?\203l\031$Qd\350\2770\243\010\305h.\326\277\321x\354\303a\310\376?\214B\202\266\016\362\343?O\014\300;xC\241\277\355q\370\264*:\275\277\0215n\377\001\206\351?\325&E\226fo\320?\253\014\n\220\203\204\344?\231\371\300\271\030\311\373\277?!$\234\264\376\374?jP\376A\215W\364?\200\001\240Q\307\345\327\277\260\2259\027\007z\336\277\315\215\025v\255\245\377\277\371\360\314o\333\001\321?1\243~\262\022\277\320\2776\016\370\204\234=\341\277\tP \200q\315\343?T\256A\037&\364\352?\312\223Y;&X\366?\203]y@)\361\340?X\232\027\033\376\203\277\277\033D\265\264\322b\343\277\262h(\210\220G\300?\243\260u\252\3140\336\277y\207\313\244\300\253\342\277\307\023\374\277\373\263\367?\2426\322\341\304\317\340\277!l;b5\332\367\277wJaN\275\016\360\277/\321\\J\232\307\366\277\210#\035,\336\340\000\300\374j\\\0237\204\343?\345\335\371\206\032\327\362?1\016=\216G\365\343\277k\242LA1\032\345\277ud\213\317\3067\265\277\360B`x*|\364?\341\362\335/\273\374\360\277\027v\225m\364I\310?\')\276*\270c\346\277@!\232\211^\217\367?$\354S\324\264\306\363\2779\344\376N\\\031\355?\n\rrd\365}\372?\342\240\2170\027:\340?z\324,\372R\001\312?\260I\352\3230\262\361?\234\313\235\030\346\010\323\277\271\361\210\363\022\026\342?\242d&g\366h\361?b\223\300\202\265\205\350?#[\343\354\204\002\316?)\327\345\030\2761\360?\371-s,\223\026\000\300px?\346D\027\346?\247\363\217X87\252?\330\312\341\224\256\364\341\277y\265d3\235\374\365?C\363\000\373\201>\344\277\256\033 aU\210\346\277\323\312\260\260\257\033\352\277\227\365\252s\322\013\302\277\224QS~5>\343\277\210\343\313i\3632\000\3002\016\307\240\235d\351\277Z\000\301\002\311\217\363\277d\242`f\335\370\357\277\251\014\331\253\204\253\354?\262\2772MG\236\302\277\030r\223LZk\371?o\320\026\264\014D\360?_\n\245 \336n\311?\0255\263\010\255=\354?\220\205\035n\362 \250\277\244\014\036\265/c\357?\307(VVFj\360\277\266\225\257\004\261\n\331\277\252\033\357|V\257\356\277#)\215F\271\212\356\277\205\346c\276\001/\330\277\317A\013<\202\225\325?\346)I\312\360\236\337\277O\014\300;xC\241\277\233y\331+\230\265\367\277ba\233\300\350\346\300\277O\014\300;xC\241\277\247\277Fr\363|\315\277g\345\204o\003\331\363\277\213\024\375L\336\177\373\277;\266e\300\177\310\371\277\310\303\343*\275\214\270?\006\003\030Y6\016\312\277))4\030b\364\340\277\306\326\221i\370\026\345?\202l^-\374\033\353\277\317\273U\3262`\345?\251\260\353\227v\301\330\277\334\240\031Cm\251\345?4<L\n\316\326\361?\363B\033o\177\304\361?\"X\363\335\246\261\271?0j\264\264\253N\335?\030r\223LZk\371?\266\373\302\332\262\247z?\341\013\223\025\367\'\326?5\016\202\227\362\254\346\277\2416\027\353o\207\343\2775\016\202\227\362\254\346\277\006\242\263\210\300G\367\277\260\311\214X\006\016\363?\333\262\345\233\'\345\375\277\307A\201),&\320?\231yc>\356$\375\277\026D\311\331~A\356\277\221\353A(\340?\000@|+#\232]y\301\277\t_\300c\231@\353\277C\241\367\004\2113\366?i\320\345\317\rk\370?7\274\251\205\370z\360?\026D\204\320\323\211\353\277\263C\353\027c\267\375\277"
      }
    }
  }
}
node {
  name: "tensors/component_12"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 750
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
            size: 750
          }
          dim {
            size: 1
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "buffer_size"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1000
      }
    }
  }
}
node {
  name: "seed"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "seed2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "count"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "batch_size"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 300
      }
    }
  }
}
node {
  name: "Iterator"
  op: "Iterator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "TensorSliceDataset"
  op: "TensorSliceDataset"
  input: "tensors/component_0"
  input: "tensors/component_1"
  input: "tensors/component_2"
  input: "tensors/component_3"
  input: "tensors/component_4"
  input: "tensors/component_5"
  input: "tensors/component_6"
  input: "tensors/component_7"
  input: "tensors/component_8"
  input: "tensors/component_9"
  input: "tensors/component_10"
  input: "tensors/component_11"
  input: "tensors/component_12"
  attr {
    key: "Toutput_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
      }
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Iterator"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "ShuffleDataset"
  op: "ShuffleDataset"
  input: "TensorSliceDataset"
  input: "buffer_size"
  input: "seed"
  input: "seed2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Iterator"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
      }
    }
  }
  attr {
    key: "reshuffle_each_iteration"
    value {
      b: true
    }
  }
}
node {
  name: "RepeatDataset"
  op: "RepeatDataset"
  input: "ShuffleDataset"
  input: "count"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Iterator"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
      }
    }
  }
}
node {
  name: "BatchDataset"
  op: "BatchDataset"
  input: "RepeatDataset"
  input: "batch_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Iterator"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
      }
    }
  }
}
node {
  name: "MakeIterator"
  op: "MakeIterator"
  input: "BatchDataset"
  input: "Iterator"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Iterator"
      }
    }
  }
}
node {
  name: "IteratorToStringHandle"
  op: "IteratorToStringHandle"
  input: "Iterator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "IteratorGetNext"
  op: "IteratorGetNext"
  input: "Iterator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/acousticness/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/acousticness/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext"
  input: "dnn/input_from_feature_columns/input_layer/acousticness/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/acousticness/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/acousticness/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/acousticness/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/acousticness/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/acousticness/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/acousticness/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/acousticness/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/acousticness/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/acousticness/Shape"
  input: "dnn/input_from_feature_columns/input_layer/acousticness/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/acousticness/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/acousticness/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/acousticness/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/acousticness/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/acousticness/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/acousticness/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/acousticness/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/acousticness/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/acousticness/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/danceability/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/danceability/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:1"
  input: "dnn/input_from_feature_columns/input_layer/danceability/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/danceability/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/danceability/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/danceability/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/danceability/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/danceability/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/danceability/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/danceability/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/danceability/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/danceability/Shape"
  input: "dnn/input_from_feature_columns/input_layer/danceability/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/danceability/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/danceability/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/danceability/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/danceability/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/danceability/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/danceability/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/danceability/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/danceability/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/danceability/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/duration_ms/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/duration_ms/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:2"
  input: "dnn/input_from_feature_columns/input_layer/duration_ms/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/duration_ms/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/duration_ms/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/duration_ms/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/duration_ms/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/duration_ms/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/duration_ms/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/duration_ms/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/duration_ms/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/duration_ms/Shape"
  input: "dnn/input_from_feature_columns/input_layer/duration_ms/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/duration_ms/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/duration_ms/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/duration_ms/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/duration_ms/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/duration_ms/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/duration_ms/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/duration_ms/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/duration_ms/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/duration_ms/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/energy/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/energy/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:3"
  input: "dnn/input_from_feature_columns/input_layer/energy/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/energy/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/energy/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/energy/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/energy/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/energy/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/energy/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/energy/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/energy/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/energy/Shape"
  input: "dnn/input_from_feature_columns/input_layer/energy/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/energy/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/energy/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/energy/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/energy/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/energy/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/energy/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/energy/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/energy/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/energy/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/instrumentalness/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/instrumentalness/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:4"
  input: "dnn/input_from_feature_columns/input_layer/instrumentalness/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/instrumentalness/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/instrumentalness/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/instrumentalness/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/instrumentalness/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/instrumentalness/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/instrumentalness/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/instrumentalness/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/instrumentalness/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/instrumentalness/Shape"
  input: "dnn/input_from_feature_columns/input_layer/instrumentalness/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/instrumentalness/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/instrumentalness/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/instrumentalness/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/instrumentalness/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/instrumentalness/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/instrumentalness/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/instrumentalness/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/instrumentalness/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/instrumentalness/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/key/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/key/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:5"
  input: "dnn/input_from_feature_columns/input_layer/key/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/key/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/key/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/key/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/key/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/key/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/key/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/key/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/key/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/key/Shape"
  input: "dnn/input_from_feature_columns/input_layer/key/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/key/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/key/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/key/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/key/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/key/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/key/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/key/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/key/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/key/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/liveness/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/liveness/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:6"
  input: "dnn/input_from_feature_columns/input_layer/liveness/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/liveness/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/liveness/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/liveness/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/liveness/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/liveness/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/liveness/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/liveness/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/liveness/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/liveness/Shape"
  input: "dnn/input_from_feature_columns/input_layer/liveness/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/liveness/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/liveness/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/liveness/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/liveness/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/liveness/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/liveness/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/liveness/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/liveness/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/liveness/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/loudness/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/loudness/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:7"
  input: "dnn/input_from_feature_columns/input_layer/loudness/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/loudness/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/loudness/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/loudness/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/loudness/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/loudness/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/loudness/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/loudness/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/loudness/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/loudness/Shape"
  input: "dnn/input_from_feature_columns/input_layer/loudness/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/loudness/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/loudness/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/loudness/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/loudness/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/loudness/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/loudness/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/loudness/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/loudness/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/loudness/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/speechiness/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/speechiness/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:8"
  input: "dnn/input_from_feature_columns/input_layer/speechiness/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/speechiness/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/speechiness/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/speechiness/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/speechiness/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/speechiness/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/speechiness/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/speechiness/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/speechiness/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/speechiness/Shape"
  input: "dnn/input_from_feature_columns/input_layer/speechiness/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/speechiness/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/speechiness/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/speechiness/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/speechiness/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/speechiness/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/speechiness/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/speechiness/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/speechiness/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/speechiness/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/tempo/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/tempo/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:9"
  input: "dnn/input_from_feature_columns/input_layer/tempo/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/tempo/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/tempo/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/tempo/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/tempo/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/tempo/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/tempo/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/tempo/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/tempo/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/tempo/Shape"
  input: "dnn/input_from_feature_columns/input_layer/tempo/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/tempo/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/tempo/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/tempo/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/tempo/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/tempo/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/tempo/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/tempo/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/tempo/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/tempo/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/time_signature/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/time_signature/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:10"
  input: "dnn/input_from_feature_columns/input_layer/time_signature/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/time_signature/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/time_signature/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/time_signature/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/time_signature/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/time_signature/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/time_signature/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/time_signature/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/time_signature/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/time_signature/Shape"
  input: "dnn/input_from_feature_columns/input_layer/time_signature/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/time_signature/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/time_signature/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/time_signature/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/time_signature/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/time_signature/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/time_signature/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/time_signature/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/time_signature/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/time_signature/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/valence/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/valence/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:11"
  input: "dnn/input_from_feature_columns/input_layer/valence/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/valence/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/valence/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/valence/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/valence/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/valence/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/valence/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/valence/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/valence/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/valence/Shape"
  input: "dnn/input_from_feature_columns/input_layer/valence/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/valence/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/valence/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/valence/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/valence/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/valence/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/valence/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/valence/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/valence/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/valence/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concat"
  op: "ConcatV2"
  input: "dnn/input_from_feature_columns/input_layer/acousticness/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/danceability/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/duration_ms/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/energy/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/instrumentalness/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/key/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/liveness/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/loudness/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/speechiness/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/tempo/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/time_signature/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/valence/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/concat/axis"
  attr {
    key: "N"
    value {
      i: 12
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 12
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\014\000\000\000\005\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.5940885543823242
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5940885543823242
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/max"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/RandomUniform"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform"
  op: "Add"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/mul"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 12
        }
        dim {
          size: 5
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Assign"
  op: "Assign"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/read"
  op: "Identity"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/part_0/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/part_0"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/part_0/Assign"
  op: "Assign"
  input: "dnn/hiddenlayer_0/bias/part_0"
  input: "dnn/hiddenlayer_0/bias/part_0/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/part_0/read"
  op: "Identity"
  input: "dnn/hiddenlayer_0/bias/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel"
  op: "Identity"
  input: "dnn/hiddenlayer_0/kernel/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/MatMul"
  op: "MatMul"
  input: "dnn/input_from_feature_columns/input_layer/concat"
  input: "dnn/hiddenlayer_0/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias"
  op: "Identity"
  input: "dnn/hiddenlayer_0/bias/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/BiasAdd"
  op: "BiasAdd"
  input: "dnn/hiddenlayer_0/MatMul"
  input: "dnn/hiddenlayer_0/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/Relu"
  op: "Relu"
  input: "dnn/hiddenlayer_0/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/zero"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/Equal"
  op: "Equal"
  input: "dnn/hiddenlayer_0/Relu"
  input: "dnn/zero_fraction/zero"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/Cast"
  op: "Cast"
  input: "dnn/zero_fraction/Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/Mean"
  op: "Mean"
  input: "dnn/zero_fraction/Cast"
  input: "dnn/zero_fraction/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/fraction_of_zero_values/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/hiddenlayer_0/fraction_of_zero_values"
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/fraction_of_zero_values"
  op: "ScalarSummary"
  input: "dnn/dnn/hiddenlayer_0/fraction_of_zero_values/tags"
  input: "dnn/zero_fraction/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/activation/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/hiddenlayer_0/activation"
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/activation"
  op: "HistogramSummary"
  input: "dnn/dnn/hiddenlayer_0/activation/tag"
  input: "dnn/hiddenlayer_0/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1.0
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform/max"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform/RandomUniform"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Initializer/random_uniform"
  op: "Add"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform/mul"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Assign"
  op: "Assign"
  input: "dnn/logits/kernel/part_0"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/read"
  op: "Identity"
  input: "dnn/logits/kernel/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/bias/part_0/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/logits/bias/part_0"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/logits/bias/part_0/Assign"
  op: "Assign"
  input: "dnn/logits/bias/part_0"
  input: "dnn/logits/bias/part_0/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/logits/bias/part_0/read"
  op: "Identity"
  input: "dnn/logits/bias/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel"
  op: "Identity"
  input: "dnn/logits/kernel/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/MatMul"
  op: "MatMul"
  input: "dnn/hiddenlayer_0/Relu"
  input: "dnn/logits/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/logits/bias"
  op: "Identity"
  input: "dnn/logits/bias/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/BiasAdd"
  op: "BiasAdd"
  input: "dnn/logits/MatMul"
  input: "dnn/logits/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/zero_fraction_1/zero"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/Equal"
  op: "Equal"
  input: "dnn/logits/BiasAdd"
  input: "dnn/zero_fraction_1/zero"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/Cast"
  op: "Cast"
  input: "dnn/zero_fraction_1/Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/Mean"
  op: "Mean"
  input: "dnn/zero_fraction_1/Cast"
  input: "dnn/zero_fraction_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/dnn/logits/fraction_of_zero_values/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/logits/fraction_of_zero_values"
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/fraction_of_zero_values"
  op: "ScalarSummary"
  input: "dnn/dnn/logits/fraction_of_zero_values/tags"
  input: "dnn/zero_fraction_1/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/activation/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/logits/activation"
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/activation"
  op: "HistogramSummary"
  input: "dnn/dnn/logits/activation/tag"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/predictions/logits/Shape"
  op: "Shape"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/predictions/logits/assert_rank_at_least/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "dnn/head/predictions/logits/assert_rank_at_least/assert_type/statically_determined_correct_type"
  op: "NoOp"
}
node {
  name: "dnn/head/predictions/logits/assert_rank_at_least/static_checks_determined_all_ok"
  op: "NoOp"
}
node {
  name: "dnn/head/predictions/logistic"
  op: "Sigmoid"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/predictions/zeros_like"
  op: "ZerosLike"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/predictions/two_class_logits/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/head/predictions/two_class_logits"
  op: "ConcatV2"
  input: "dnn/head/predictions/zeros_like"
  input: "dnn/logits/BiasAdd"
  input: "dnn/head/predictions/two_class_logits/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/predictions/probabilities"
  op: "Softmax"
  input: "dnn/head/predictions/two_class_logits"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/predictions/class_ids/dimension"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/head/predictions/class_ids"
  op: "ArgMax"
  input: "dnn/head/predictions/two_class_logits"
  input: "dnn/head/predictions/class_ids/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "dnn/head/predictions/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/head/predictions/ExpandDims"
  op: "ExpandDims"
  input: "dnn/head/predictions/class_ids"
  input: "dnn/head/predictions/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/predictions/str_classes"
  op: "AsString"
  input: "dnn/head/predictions/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "fill"
    value {
      s: ""
    }
  }
  attr {
    key: "precision"
    value {
      i: -1
    }
  }
  attr {
    key: "scientific"
    value {
      b: false
    }
  }
  attr {
    key: "shortest"
    value {
      b: false
    }
  }
  attr {
    key: "width"
    value {
      i: -1
    }
  }
}
node {
  name: "dnn/head/labels/Shape"
  op: "Shape"
  input: "IteratorGetNext:12"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/labels/Shape_1"
  op: "Shape"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/labels/assert_rank_at_least/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_rank_at_least/Shape"
  op: "Shape"
  input: "IteratorGetNext:12"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/labels/assert_rank_at_least/assert_type/statically_determined_correct_type"
  op: "NoOp"
}
node {
  name: "dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  op: "NoOp"
}
node {
  name: "dnn/head/labels/strided_slice/stack"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/head/labels/strided_slice/stack_1"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/head/labels/strided_slice/stack_2"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/head/labels/strided_slice"
  op: "StridedSlice"
  input: "dnn/head/labels/Shape_1"
  input: "dnn/head/labels/strided_slice/stack"
  input: "dnn/head/labels/strided_slice/stack_1"
  input: "dnn/head/labels/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/head/labels/concat/values_1"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/head/labels/concat/axis"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/head/labels/concat"
  op: "ConcatV2"
  input: "dnn/head/labels/strided_slice"
  input: "dnn/head/labels/concat/values_1"
  input: "dnn/head/labels/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/Equal"
  op: "Equal"
  input: "dnn/head/labels/concat"
  input: "dnn/head/labels/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/Const"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/All"
  op: "All"
  input: "dnn/head/labels/assert_equal/Equal"
  input: "dnn/head/labels/assert_equal/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/Assert/Const"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "expected_labels_shape: "
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/Assert/Const_1"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "labels_shape: "
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/Assert/Assert/data_0"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "expected_labels_shape: "
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/Assert/Assert/data_2"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "labels_shape: "
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/Assert/Assert"
  op: "Assert"
  input: "dnn/head/labels/assert_equal/All"
  input: "dnn/head/labels/assert_equal/Assert/Assert/data_0"
  input: "dnn/head/labels/concat"
  input: "dnn/head/labels/assert_equal/Assert/Assert/data_2"
  input: "dnn/head/labels/Shape"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "dnn/head/labels"
  op: "Identity"
  input: "IteratorGetNext:12"
  input: "^dnn/head/labels/assert_equal/Assert/Assert"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/ToFloat"
  op: "Cast"
  input: "dnn/head/labels"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Less"
  op: "Less"
  input: "dnn/head/ToFloat"
  input: "dnn/head/assert_range/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/All"
  op: "All"
  input: "dnn/head/assert_range/assert_less/Less"
  input: "dnn/head/assert_range/assert_less/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Label IDs must < n_classes"
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x < y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (dnn/head/ToFloat:0) = "
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (dnn/head/assert_range/Const:0) = "
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Switch"
  op: "Switch"
  input: "dnn/head/assert_range/assert_less/All"
  input: "dnn/head/assert_range/assert_less/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/switch_t"
  op: "Identity"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/switch_f"
  op: "Identity"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/pred_id"
  op: "Identity"
  input: "dnn/head/assert_range/assert_less/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/NoOp"
  op: "NoOp"
  input: "^dnn/head/assert_range/assert_less/Assert/AssertGuard/switch_t"
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/control_dependency"
  op: "Identity"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/switch_t"
  input: "^dnn/head/assert_range/assert_less/Assert/AssertGuard/NoOp"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/assert_range/assert_less/Assert/AssertGuard/switch_t"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert/data_0"
  op: "Const"
  input: "^dnn/head/assert_range/assert_less/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Label IDs must < n_classes"
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert/data_1"
  op: "Const"
  input: "^dnn/head/assert_range/assert_less/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x < y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert/data_2"
  op: "Const"
  input: "^dnn/head/assert_range/assert_less/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (dnn/head/ToFloat:0) = "
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert/data_4"
  op: "Const"
  input: "^dnn/head/assert_range/assert_less/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (dnn/head/assert_range/Const:0) = "
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert"
  op: "Assert"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert/Switch"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert/data_0"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert/data_1"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert/data_2"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert/Switch_1"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert/data_4"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert/Switch_2"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_FLOAT
        type: DT_STRING
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert/Switch"
  op: "Switch"
  input: "dnn/head/assert_range/assert_less/All"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/assert_range/assert_less/All"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert/Switch_1"
  op: "Switch"
  input: "dnn/head/ToFloat"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/ToFloat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert/Switch_2"
  op: "Switch"
  input: "dnn/head/assert_range/Const"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/assert_range/Const"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/control_dependency_1"
  op: "Identity"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/switch_f"
  input: "^dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/assert_range/assert_less/Assert/AssertGuard/switch_f"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Merge"
  op: "Merge"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/control_dependency_1"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/LessEqual"
  op: "LessEqual"
  input: "dnn/head/assert_range/assert_non_negative/Const"
  input: "dnn/head/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/All"
  op: "All"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/LessEqual"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Label IDs must >= 0"
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x >= 0 did not hold element-wise:"
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (dnn/head/ToFloat:0) = "
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Switch"
  op: "Switch"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/All"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_t"
  op: "Identity"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
  op: "Identity"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/pred_id"
  op: "Identity"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/NoOp"
  op: "NoOp"
  input: "^dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_t"
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/control_dependency"
  op: "Identity"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_t"
  input: "^dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/NoOp"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_t"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_0"
  op: "Const"
  input: "^dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Label IDs must >= 0"
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_1"
  op: "Const"
  input: "^dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x >= 0 did not hold element-wise:"
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_2"
  op: "Const"
  input: "^dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (dnn/head/ToFloat:0) = "
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert"
  op: "Assert"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/Switch"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_0"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_1"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_2"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/Switch_1"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/Switch"
  op: "Switch"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/All"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/assert_range/assert_non_negative/assert_less_equal/All"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/Switch_1"
  op: "Switch"
  input: "dnn/head/ToFloat"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/ToFloat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/control_dependency_1"
  op: "Identity"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
  input: "^dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Merge"
  op: "Merge"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/control_dependency_1"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/Identity"
  op: "Identity"
  input: "dnn/head/ToFloat"
  input: "^dnn/head/assert_range/assert_less/Assert/AssertGuard/Merge"
  input: "^dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/logistic_loss/zeros_like"
  op: "ZerosLike"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/logistic_loss/GreaterEqual"
  op: "GreaterEqual"
  input: "dnn/logits/BiasAdd"
  input: "dnn/head/logistic_loss/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/logistic_loss/Select"
  op: "Select"
  input: "dnn/head/logistic_loss/GreaterEqual"
  input: "dnn/logits/BiasAdd"
  input: "dnn/head/logistic_loss/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/logistic_loss/Neg"
  op: "Neg"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/logistic_loss/Select_1"
  op: "Select"
  input: "dnn/head/logistic_loss/GreaterEqual"
  input: "dnn/head/logistic_loss/Neg"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/logistic_loss/mul"
  op: "Mul"
  input: "dnn/logits/BiasAdd"
  input: "dnn/head/assert_range/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/logistic_loss/sub"
  op: "Sub"
  input: "dnn/head/logistic_loss/Select"
  input: "dnn/head/logistic_loss/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/logistic_loss/Exp"
  op: "Exp"
  input: "dnn/head/logistic_loss/Select_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/logistic_loss/Log1p"
  op: "Log1p"
  input: "dnn/head/logistic_loss/Exp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/logistic_loss"
  op: "Add"
  input: "dnn/head/logistic_loss/sub"
  input: "dnn/head/logistic_loss/Log1p"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/weighted_loss/assert_broadcastable/weights"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/head/weighted_loss/assert_broadcastable/weights/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/weighted_loss/assert_broadcastable/weights/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/head/weighted_loss/assert_broadcastable/values/shape"
  op: "Shape"
  input: "dnn/head/logistic_loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/weighted_loss/assert_broadcastable/values/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "dnn/head/weighted_loss/assert_broadcastable/static_scalar_check_success"
  op: "NoOp"
}
node {
  name: "dnn/head/weighted_loss/ToFloat_1/x"
  op: "Const"
  input: "^dnn/head/weighted_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/head/weighted_loss/Mul"
  op: "Mul"
  input: "dnn/head/logistic_loss"
  input: "dnn/head/weighted_loss/ToFloat_1/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/weighted_loss/Const"
  op: "Const"
  input: "^dnn/head/weighted_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/head/weighted_loss/Sum"
  op: "Sum"
  input: "dnn/head/weighted_loss/Mul"
  input: "dnn/head/weighted_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/grad_ys_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/head/gradients/Fill"
  op: "Fill"
  input: "dnn/head/gradients/Shape"
  input: "dnn/head/gradients/grad_ys_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Sum_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Sum_grad/Reshape"
  op: "Reshape"
  input: "dnn/head/gradients/Fill"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Sum_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Sum_grad/Shape"
  op: "Shape"
  input: "dnn/head/weighted_loss/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Sum_grad/Tile"
  op: "Tile"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Sum_grad/Reshape"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Sum_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Shape"
  op: "Shape"
  input: "dnn/head/logistic_loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Shape"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Mul"
  op: "Mul"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Sum_grad/Tile"
  input: "dnn/head/weighted_loss/ToFloat_1/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Sum"
  op: "Sum"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Mul"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Reshape"
  op: "Reshape"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Sum"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Mul_1"
  op: "Mul"
  input: "dnn/head/logistic_loss"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Sum_1"
  op: "Sum"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Mul_1"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Reshape_1"
  op: "Reshape"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Sum_1"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Reshape"
  input: "^dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Reshape_1"
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Reshape"
  input: "^dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Reshape_1"
  input: "^dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss_grad/Shape"
  op: "Shape"
  input: "dnn/head/logistic_loss/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss_grad/Shape_1"
  op: "Shape"
  input: "dnn/head/logistic_loss/Log1p"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "dnn/head/gradients/dnn/head/logistic_loss_grad/Shape"
  input: "dnn/head/gradients/dnn/head/logistic_loss_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss_grad/Sum"
  op: "Sum"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/tuple/control_dependency"
  input: "dnn/head/gradients/dnn/head/logistic_loss_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss_grad/Reshape"
  op: "Reshape"
  input: "dnn/head/gradients/dnn/head/logistic_loss_grad/Sum"
  input: "dnn/head/gradients/dnn/head/logistic_loss_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss_grad/Sum_1"
  op: "Sum"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/tuple/control_dependency"
  input: "dnn/head/gradients/dnn/head/logistic_loss_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss_grad/Reshape_1"
  op: "Reshape"
  input: "dnn/head/gradients/dnn/head/logistic_loss_grad/Sum_1"
  input: "dnn/head/gradients/dnn/head/logistic_loss_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/dnn/head/logistic_loss_grad/Reshape"
  input: "^dnn/head/gradients/dnn/head/logistic_loss_grad/Reshape_1"
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/dnn/head/logistic_loss_grad/Reshape"
  input: "^dnn/head/gradients/dnn/head/logistic_loss_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/logistic_loss_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/head/logistic_loss_grad/Reshape_1"
  input: "^dnn/head/gradients/dnn/head/logistic_loss_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/logistic_loss_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Shape"
  op: "Shape"
  input: "dnn/head/logistic_loss/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Shape_1"
  op: "Shape"
  input: "dnn/head/logistic_loss/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Shape"
  input: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Sum"
  op: "Sum"
  input: "dnn/head/gradients/dnn/head/logistic_loss_grad/tuple/control_dependency"
  input: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Reshape"
  op: "Reshape"
  input: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Sum"
  input: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Sum_1"
  op: "Sum"
  input: "dnn/head/gradients/dnn/head/logistic_loss_grad/tuple/control_dependency"
  input: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Neg"
  op: "Neg"
  input: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Reshape_1"
  op: "Reshape"
  input: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Neg"
  input: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Reshape"
  input: "^dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Reshape_1"
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Reshape"
  input: "^dnn/head/gradients/dnn/head/logistic_loss/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Reshape_1"
  input: "^dnn/head/gradients/dnn/head/logistic_loss/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Log1p_grad/add/x"
  op: "Const"
  input: "^dnn/head/gradients/dnn/head/logistic_loss_grad/tuple/control_dependency_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Log1p_grad/add"
  op: "Add"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Log1p_grad/add/x"
  input: "dnn/head/logistic_loss/Exp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Log1p_grad/Reciprocal"
  op: "Reciprocal"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Log1p_grad/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Log1p_grad/mul"
  op: "Mul"
  input: "dnn/head/gradients/dnn/head/logistic_loss_grad/tuple/control_dependency_1"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Log1p_grad/Reciprocal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Select_grad/zeros_like"
  op: "ZerosLike"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Select_grad/Select"
  op: "Select"
  input: "dnn/head/logistic_loss/GreaterEqual"
  input: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/tuple/control_dependency"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Select_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Select_grad/Select_1"
  op: "Select"
  input: "dnn/head/logistic_loss/GreaterEqual"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Select_grad/zeros_like"
  input: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Select_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/dnn/head/logistic_loss/Select_grad/Select"
  input: "^dnn/head/gradients/dnn/head/logistic_loss/Select_grad/Select_1"
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Select_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Select_grad/Select"
  input: "^dnn/head/gradients/dnn/head/logistic_loss/Select_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/logistic_loss/Select_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Select_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Select_grad/Select_1"
  input: "^dnn/head/gradients/dnn/head/logistic_loss/Select_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/logistic_loss/Select_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Shape"
  op: "Shape"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Shape_1"
  op: "Shape"
  input: "dnn/head/assert_range/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Shape"
  input: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Mul"
  op: "Mul"
  input: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/tuple/control_dependency_1"
  input: "dnn/head/assert_range/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Sum"
  op: "Sum"
  input: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Mul"
  input: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Reshape"
  op: "Reshape"
  input: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Sum"
  input: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Mul_1"
  op: "Mul"
  input: "dnn/logits/BiasAdd"
  input: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Sum_1"
  op: "Sum"
  input: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Mul_1"
  input: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Reshape_1"
  op: "Reshape"
  input: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Sum_1"
  input: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Reshape"
  input: "^dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Reshape_1"
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Reshape"
  input: "^dnn/head/gradients/dnn/head/logistic_loss/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Reshape_1"
  input: "^dnn/head/gradients/dnn/head/logistic_loss/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Exp_grad/mul"
  op: "Mul"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Log1p_grad/mul"
  input: "dnn/head/logistic_loss/Exp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/zeros_like"
  op: "ZerosLike"
  input: "dnn/head/logistic_loss/Neg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/Select"
  op: "Select"
  input: "dnn/head/logistic_loss/GreaterEqual"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Exp_grad/mul"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/Select_1"
  op: "Select"
  input: "dnn/head/logistic_loss/GreaterEqual"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/zeros_like"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Exp_grad/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/Select"
  input: "^dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/Select_1"
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/Select"
  input: "^dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/Select_1"
  input: "^dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Neg_grad/Neg"
  op: "Neg"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/AddN"
  op: "AddN"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Select_grad/tuple/control_dependency"
  input: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/tuple/control_dependency"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/tuple/control_dependency_1"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Neg_grad/Neg"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/logistic_loss/Select_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/logits/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "dnn/head/gradients/AddN"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/logits/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/AddN"
  input: "^dnn/head/gradients/dnn/logits/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "dnn/head/gradients/dnn/logits/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/AddN"
  input: "^dnn/head/gradients/dnn/logits/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/logistic_loss/Select_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/logits/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/logits/BiasAdd_grad/BiasAddGrad"
  input: "^dnn/head/gradients/dnn/logits/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/logits/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/logits/MatMul_grad/MatMul"
  op: "MatMul"
  input: "dnn/head/gradients/dnn/logits/BiasAdd_grad/tuple/control_dependency"
  input: "dnn/logits/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/logits/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dnn/hiddenlayer_0/Relu"
  input: "dnn/head/gradients/dnn/logits/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/logits/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/dnn/logits/MatMul_grad/MatMul"
  input: "^dnn/head/gradients/dnn/logits/MatMul_grad/MatMul_1"
}
node {
  name: "dnn/head/gradients/dnn/logits/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/dnn/logits/MatMul_grad/MatMul"
  input: "^dnn/head/gradients/dnn/logits/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/logits/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/logits/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/logits/MatMul_grad/MatMul_1"
  input: "^dnn/head/gradients/dnn/logits/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/logits/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "dnn/head/gradients/dnn/logits/MatMul_grad/tuple/control_dependency"
  input: "dnn/hiddenlayer_0/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "dnn/head/gradients/dnn/hiddenlayer_0/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/BiasAddGrad"
  input: "^dnn/head/gradients/dnn/hiddenlayer_0/Relu_grad/ReluGrad"
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/dnn/hiddenlayer_0/Relu_grad/ReluGrad"
  input: "^dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_0/Relu_grad/ReluGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/BiasAddGrad"
  input: "^dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul"
  op: "MatMul"
  input: "dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/control_dependency"
  input: "dnn/hiddenlayer_0/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 12
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dnn/input_from_feature_columns/input_layer/concat"
  input: "dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul"
  input: "^dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul_1"
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul"
  input: "^dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 12
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul_1"
  input: "^dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 12
          }
          dim {
            size: 5
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 12
        }
        dim {
          size: 5
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad/Assign"
  op: "Assign"
  input: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad"
  input: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad/read"
  op: "Identity"
  input: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad/Assign"
  op: "Assign"
  input: "dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad"
  input: "dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad/read"
  op: "Identity"
  input: "dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/kernel/part_0/Adagrad/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/kernel/part_0/Adagrad"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/dnn/logits/kernel/part_0/Adagrad/Assign"
  op: "Assign"
  input: "dnn/dnn/logits/kernel/part_0/Adagrad"
  input: "dnn/dnn/logits/kernel/part_0/Adagrad/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/dnn/logits/kernel/part_0/Adagrad/read"
  op: "Identity"
  input: "dnn/dnn/logits/kernel/part_0/Adagrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/bias/part_0/Adagrad/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/bias/part_0/Adagrad"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/dnn/logits/bias/part_0/Adagrad/Assign"
  op: "Assign"
  input: "dnn/dnn/logits/bias/part_0/Adagrad"
  input: "dnn/dnn/logits/bias/part_0/Adagrad/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/dnn/logits/bias/part_0/Adagrad/read"
  op: "Identity"
  input: "dnn/dnn/logits/bias/part_0/Adagrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/Adagrad/learning_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.05000000074505806
      }
    }
  }
}
node {
  name: "dnn/head/Adagrad/update_dnn/hiddenlayer_0/kernel/part_0/ApplyAdagrad"
  op: "ApplyAdagrad"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  input: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad"
  input: "dnn/head/Adagrad/learning_rate"
  input: "dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/Adagrad/update_dnn/hiddenlayer_0/bias/part_0/ApplyAdagrad"
  op: "ApplyAdagrad"
  input: "dnn/hiddenlayer_0/bias/part_0"
  input: "dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad"
  input: "dnn/head/Adagrad/learning_rate"
  input: "dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/Adagrad/update_dnn/logits/kernel/part_0/ApplyAdagrad"
  op: "ApplyAdagrad"
  input: "dnn/logits/kernel/part_0"
  input: "dnn/dnn/logits/kernel/part_0/Adagrad"
  input: "dnn/head/Adagrad/learning_rate"
  input: "dnn/head/gradients/dnn/logits/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/Adagrad/update_dnn/logits/bias/part_0/ApplyAdagrad"
  op: "ApplyAdagrad"
  input: "dnn/logits/bias/part_0"
  input: "dnn/dnn/logits/bias/part_0/Adagrad"
  input: "dnn/head/Adagrad/learning_rate"
  input: "dnn/head/gradients/dnn/logits/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/Adagrad/update"
  op: "NoOp"
  input: "^dnn/head/Adagrad/update_dnn/hiddenlayer_0/bias/part_0/ApplyAdagrad"
  input: "^dnn/head/Adagrad/update_dnn/hiddenlayer_0/kernel/part_0/ApplyAdagrad"
  input: "^dnn/head/Adagrad/update_dnn/logits/bias/part_0/ApplyAdagrad"
  input: "^dnn/head/Adagrad/update_dnn/logits/kernel/part_0/ApplyAdagrad"
}
node {
  name: "dnn/head/Adagrad/value"
  op: "Const"
  input: "^dnn/head/Adagrad/update"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "dnn/head/Adagrad"
  op: "AssignAdd"
  input: "global_step"
  input: "dnn/head/Adagrad/value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/ones_like/Shape"
  op: "Shape"
  input: "dnn/head/logistic_loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/ones_like/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/head/ones_like"
  op: "Fill"
  input: "dnn/head/ones_like/Shape"
  input: "dnn/head/ones_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/mul/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/head/mul"
  op: "Mul"
  input: "dnn/head/mul/x"
  input: "dnn/head/ones_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/head/Sum"
  op: "Sum"
  input: "dnn/head/mul"
  input: "dnn/head/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/truediv"
  op: "RealDiv"
  input: "dnn/head/weighted_loss/Sum"
  input: "dnn/head/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "loss/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "loss"
      }
    }
  }
}
node {
  name: "loss"
  op: "ScalarSummary"
  input: "loss/tags"
  input: "dnn/head/weighted_loss/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "average_loss/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "average_loss"
      }
    }
  }
}
node {
  name: "average_loss"
  op: "ScalarSummary"
  input: "average_loss/tags"
  input: "dnn/head/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "init"
  op: "NoOp"
  input: "^dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad/Assign"
  input: "^dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad/Assign"
  input: "^dnn/dnn/logits/bias/part_0/Adagrad/Assign"
  input: "^dnn/dnn/logits/kernel/part_0/Adagrad/Assign"
  input: "^dnn/hiddenlayer_0/bias/part_0/Assign"
  input: "^dnn/hiddenlayer_0/kernel/part_0/Assign"
  input: "^dnn/logits/bias/part_0/Assign"
  input: "^dnn/logits/kernel/part_0/Assign"
  input: "^global_step/Assign"
}
node {
  name: "init_1"
  op: "NoOp"
}
node {
  name: "group_deps"
  op: "NoOp"
  input: "^init"
  input: "^init_1"
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_0/bias/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "dnn/logits/kernel/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "dnn/logits/bias/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "dnn/dnn/logits/kernel/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "dnn/dnn/logits/bias/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/stack"
  op: "Pack"
  input: "report_uninitialized_variables/IsVariableInitialized"
  input: "report_uninitialized_variables/IsVariableInitialized_1"
  input: "report_uninitialized_variables/IsVariableInitialized_2"
  input: "report_uninitialized_variables/IsVariableInitialized_3"
  input: "report_uninitialized_variables/IsVariableInitialized_4"
  input: "report_uninitialized_variables/IsVariableInitialized_5"
  input: "report_uninitialized_variables/IsVariableInitialized_6"
  input: "report_uninitialized_variables/IsVariableInitialized_7"
  input: "report_uninitialized_variables/IsVariableInitialized_8"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 9
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 9
          }
        }
        string_val: "global_step"
        string_val: "dnn/hiddenlayer_0/kernel/part_0"
        string_val: "dnn/hiddenlayer_0/bias/part_0"
        string_val: "dnn/logits/kernel/part_0"
        string_val: "dnn/logits/bias/part_0"
        string_val: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad"
        string_val: "dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad"
        string_val: "dnn/dnn/logits/kernel/part_0/Adagrad"
        string_val: "dnn/dnn/logits/bias/part_0/Adagrad"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 9
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables/boolean_mask/strided_slice"
  input: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 9
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 9
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_variables/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables/boolean_mask/concat/values_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  input: "report_uninitialized_variables/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables/Const"
  input: "report_uninitialized_variables/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables/LogicalNot"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/GatherV2/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/GatherV2"
  op: "GatherV2"
  input: "report_uninitialized_variables/boolean_mask/Reshape"
  input: "report_uninitialized_variables/boolean_mask/Squeeze"
  input: "report_uninitialized_variables/boolean_mask/GatherV2/axis"
  device: "/device:CPU:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_resources/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/GatherV2"
  input: "report_uninitialized_resources/Const"
  input: "concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_0/bias/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "dnn/logits/kernel/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "dnn/logits/bias/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "dnn/dnn/logits/kernel/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "dnn/dnn/logits/bias/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/stack"
  op: "Pack"
  input: "report_uninitialized_variables_1/IsVariableInitialized"
  input: "report_uninitialized_variables_1/IsVariableInitialized_1"
  input: "report_uninitialized_variables_1/IsVariableInitialized_2"
  input: "report_uninitialized_variables_1/IsVariableInitialized_3"
  input: "report_uninitialized_variables_1/IsVariableInitialized_4"
  input: "report_uninitialized_variables_1/IsVariableInitialized_5"
  input: "report_uninitialized_variables_1/IsVariableInitialized_6"
  input: "report_uninitialized_variables_1/IsVariableInitialized_7"
  input: "report_uninitialized_variables_1/IsVariableInitialized_8"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 9
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables_1/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 9
          }
        }
        string_val: "global_step"
        string_val: "dnn/hiddenlayer_0/kernel/part_0"
        string_val: "dnn/hiddenlayer_0/bias/part_0"
        string_val: "dnn/logits/kernel/part_0"
        string_val: "dnn/logits/bias/part_0"
        string_val: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad"
        string_val: "dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad"
        string_val: "dnn/dnn/logits/kernel/part_0/Adagrad"
        string_val: "dnn/dnn/logits/bias/part_0/Adagrad"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 9
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  input: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 9
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 9
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape_2"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_variables_1/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables_1/boolean_mask/concat/values_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2"
  input: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables_1/Const"
  input: "report_uninitialized_variables_1/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables_1/LogicalNot"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables_1/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/GatherV2/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/GatherV2"
  op: "GatherV2"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape"
  input: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  input: "report_uninitialized_variables_1/boolean_mask/GatherV2/axis"
  device: "/device:CPU:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "init_2"
  op: "NoOp"
}
node {
  name: "init_all_tables"
  op: "NoOp"
}
node {
  name: "init_3"
  op: "NoOp"
}
node {
  name: "group_deps_1"
  op: "NoOp"
  input: "^init_2"
  input: "^init_3"
  input: "^init_all_tables"
}
node {
  name: "Merge/MergeSummary"
  op: "MergeSummary"
  input: "dnn/dnn/hiddenlayer_0/fraction_of_zero_values"
  input: "dnn/dnn/hiddenlayer_0/activation"
  input: "dnn/dnn/logits/fraction_of_zero_values"
  input: "dnn/dnn/logits/activation"
  input: "loss"
  input: "average_loss"
  attr {
    key: "N"
    value {
      i: 6
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save/StringJoin/inputs_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "_temp_d2f063f41bf4415494cbccccd8f7cb91/part"
      }
    }
  }
}
node {
  name: "save/StringJoin"
  op: "StringJoin"
  input: "save/Const"
  input: "save/StringJoin/inputs_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "separator"
    value {
      s: ""
    }
  }
}
node {
  name: "save/num_shards"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "save/ShardedFilename/shard"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "save/ShardedFilename"
  op: "ShardedFilename"
  input: "save/StringJoin"
  input: "save/ShardedFilename/shard"
  input: "save/num_shards"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/SaveV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 9
          }
        }
        string_val: "dnn/hiddenlayer_0/bias"
        string_val: "dnn/hiddenlayer_0/bias/t_0/Adagrad"
        string_val: "dnn/hiddenlayer_0/kernel"
        string_val: "dnn/hiddenlayer_0/kernel/t_0/Adagrad"
        string_val: "dnn/logits/bias"
        string_val: "dnn/logits/bias/t_0/Adagrad"
        string_val: "dnn/logits/kernel"
        string_val: "dnn/logits/kernel/t_0/Adagrad"
        string_val: "global_step"
      }
    }
  }
}
node {
  name: "save/SaveV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 9
          }
        }
        string_val: "5 0,5"
        string_val: "5 0,5"
        string_val: "12 5 0,12:0,5"
        string_val: "12 5 0,12:0,5"
        string_val: "1 0,1"
        string_val: "1 0,1"
        string_val: "5 1 0,5:0,1"
        string_val: "5 1 0,5:0,1"
        string_val: ""
      }
    }
  }
}
node {
  name: "save/SaveV2"
  op: "SaveV2"
  input: "save/ShardedFilename"
  input: "save/SaveV2/tensor_names"
  input: "save/SaveV2/shape_and_slices"
  input: "dnn/hiddenlayer_0/bias/part_0/read"
  input: "dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad/read"
  input: "dnn/hiddenlayer_0/kernel/part_0/read"
  input: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad/read"
  input: "dnn/logits/bias/part_0/read"
  input: "dnn/dnn/logits/bias/part_0/Adagrad/read"
  input: "dnn/logits/kernel/part_0/read"
  input: "dnn/dnn/logits/kernel/part_0/Adagrad/read"
  input: "global_step"
  device: "/device:CPU:0"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
      }
    }
  }
}
node {
  name: "save/control_dependency"
  op: "Identity"
  input: "save/ShardedFilename"
  input: "^save/SaveV2"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/ShardedFilename"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/MergeV2Checkpoints/checkpoint_prefixes"
  op: "Pack"
  input: "save/ShardedFilename"
  input: "^save/control_dependency"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "save/MergeV2Checkpoints"
  op: "MergeV2Checkpoints"
  input: "save/MergeV2Checkpoints/checkpoint_prefixes"
  input: "save/Const"
  device: "/device:CPU:0"
  attr {
    key: "delete_old_dirs"
    value {
      b: true
    }
  }
}
node {
  name: "save/Identity"
  op: "Identity"
  input: "save/Const"
  input: "^save/MergeV2Checkpoints"
  input: "^save/control_dependency"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/RestoreV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 9
          }
        }
        string_val: "dnn/hiddenlayer_0/bias"
        string_val: "dnn/hiddenlayer_0/bias/t_0/Adagrad"
        string_val: "dnn/hiddenlayer_0/kernel"
        string_val: "dnn/hiddenlayer_0/kernel/t_0/Adagrad"
        string_val: "dnn/logits/bias"
        string_val: "dnn/logits/bias/t_0/Adagrad"
        string_val: "dnn/logits/kernel"
        string_val: "dnn/logits/kernel/t_0/Adagrad"
        string_val: "global_step"
      }
    }
  }
}
node {
  name: "save/RestoreV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 9
          }
        }
        string_val: "5 0,5"
        string_val: "5 0,5"
        string_val: "12 5 0,12:0,5"
        string_val: "12 5 0,12:0,5"
        string_val: "1 0,1"
        string_val: "1 0,1"
        string_val: "5 1 0,5:0,1"
        string_val: "5 1 0,5:0,1"
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2/tensor_names"
  input: "save/RestoreV2/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
        shape {
          dim {
            size: 5
          }
        }
        shape {
          dim {
            size: 12
          }
          dim {
            size: 5
          }
        }
        shape {
          dim {
            size: 12
          }
          dim {
            size: 5
          }
        }
        shape {
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
      }
    }
  }
}
node {
  name: "save/Assign"
  op: "Assign"
  input: "dnn/hiddenlayer_0/bias/part_0"
  input: "save/RestoreV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_1"
  op: "Assign"
  input: "dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad"
  input: "save/RestoreV2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_2"
  op: "Assign"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  input: "save/RestoreV2:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_3"
  op: "Assign"
  input: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad"
  input: "save/RestoreV2:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_4"
  op: "Assign"
  input: "dnn/logits/bias/part_0"
  input: "save/RestoreV2:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_5"
  op: "Assign"
  input: "dnn/dnn/logits/bias/part_0/Adagrad"
  input: "save/RestoreV2:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_6"
  op: "Assign"
  input: "dnn/logits/kernel/part_0"
  input: "save/RestoreV2:6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_7"
  op: "Assign"
  input: "dnn/dnn/logits/kernel/part_0/Adagrad"
  input: "save/RestoreV2:7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_8"
  op: "Assign"
  input: "global_step"
  input: "save/RestoreV2:8"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_shard"
  op: "NoOp"
  input: "^save/Assign"
  input: "^save/Assign_1"
  input: "^save/Assign_2"
  input: "^save/Assign_3"
  input: "^save/Assign_4"
  input: "^save/Assign_5"
  input: "^save/Assign_6"
  input: "^save/Assign_7"
  input: "^save/Assign_8"
}
node {
  name: "save/restore_all"
  op: "NoOp"
  input: "^save/restore_shard"
}
versions {
  producer: 26
}
